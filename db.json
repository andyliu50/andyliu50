{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/css/noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/matomo.js","path":"js/third-party/analytics/matomo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/gitter.js","path":"js/third-party/chat/gitter.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"a6c6d8c2dfcf7cf6671df22a58f0a70320815ece","modified":1677807183650},{"_id":"source/._.DS_Store","hash":"e20f0c8e51509a894c63ec58900bb1fb7f0581db","modified":1677807183650},{"_id":"source/_posts/.DS_Store","hash":"e3bee405b17ad94c8e09c09d8409e7a0efda83dd","modified":1678173657147},{"_id":"source/_posts/._.DS_Store","hash":"296dec85c5939dbce3b634386fafccef8d0048bb","modified":1677807183420},{"_id":"source/_posts/._python","hash":"195598cb8f26c82678a8f6793da59a6687004bf7","modified":1677807183370},{"_id":"source/_posts/._手机","hash":"f53b536855f22c0fe7344ab01305203049a7564a","modified":1677807183420},{"_id":"source/_posts/._hexo","hash":"ca6745fa33218507c3152847859979ca2aa53e9f","modified":1677807183340},{"_id":"source/categories/index.md","hash":"d00af02337375208f30a3e005b91f081644121f3","modified":1677807183650},{"_id":"source/tags/index.md","hash":"ac99ad1b12bf2090983807e8f12c225215504ad2","modified":1677807183640},{"_id":"source/_posts/blog/.DS_Store","hash":"5599d26eeded78c445484863ecd679b574047781","modified":1678173662126},{"_id":"source/_posts/blog/._.DS_Store","hash":"4e77d416c4dc2d3041b49a362df0f3a11503738b","modified":1677807183280},{"_id":"source/_posts/blog/._Pelican小贴士.md","hash":"7054b975e62cd3bf41b91f683ae5b1eab2239292","modified":1677807183320},{"_id":"source/_posts/blog/._个人博客-GitHub-Pages篇.md","hash":"4d40b2f02facdad3977c950751399c433e484f49","modified":1677807183280},{"_id":"source/_posts/blog/._个人博客-Hexo多终端同步篇.md","hash":"d894b47c8fc2120aee9e5b965ded9b03810319d5","modified":1677807183340},{"_id":"source/_posts/blog/._个人博客-Hexo安装篇.md","hash":"a19f1518cd191ac77fb54838b810430bf3b60ef1","modified":1677807183340},{"_id":"source/_posts/blog/._个人博客-—-Hexo标签和分类篇.md","hash":"af17fbf7369b97a5d8dd84d0939655192c2e46ea","modified":1677807183340},{"_id":"source/_posts/blog/._博客主题","hash":"4e0184728ea8fe13cd2484d250fcdf57859ed4b9","modified":1677807183310},{"_id":"source/_posts/blog/._博客主题.md","hash":"c1e6eafee47fd4bf6791aab7a6a42c3b1244b8f7","modified":1677807183310},{"_id":"source/_posts/blog/._发布博客时调整图片的大小.md","hash":"38b6677350bdd99a4e6c9f9c4c5e2ee5d52082e6","modified":1677807183340},{"_id":"source/_posts/blog/._如何整理博客中的图片资源.md","hash":"6c11b76f81a4ca33c7c2f3de278992666be54cd9","modified":1677807183330},{"_id":"source/_posts/blog/._定期备份博客.md","hash":"66d179c8959cc60f10540175972cb81d36581264","modified":1677807183330},{"_id":"source/_posts/blog/._我的博客 2.md","hash":"a2ec17b08d038dfc12c11c0ad7cd04d2843118f3","modified":1677807183320},{"_id":"source/_posts/blog/Pelican小贴士.md","hash":"2440c6fac6e454fb866ba5ce3f990f5574018a01","modified":1677807183320},{"_id":"source/_posts/blog/个人博客-GitHub-Pages篇.md","hash":"41e682618b25ee58b88c35fe6968b5f3af5ff06c","modified":1677807183340},{"_id":"source/_posts/blog/个人博客-Hexo多终端同步篇.md","hash":"f9c022565d67cf3949cfb4a16f2bc2a0f9000ceb","modified":1677807183340},{"_id":"source/_posts/blog/个人博客-Hexo安装篇.md","hash":"928983fca2c2ff7cc96c7298c19e65f7d8d6cdd8","modified":1677807183340},{"_id":"source/_posts/blog/个人博客-—-Hexo标签和分类篇.md","hash":"42138aa9173569b6b4138b8ce4137e0a8c00134c","modified":1677807183340},{"_id":"source/_posts/blog/博客主题.md","hash":"1a349bf82b64fadde52b5365f1ee76eb73000073","modified":1677807183310},{"_id":"source/_posts/blog/发布博客时调整图片的大小.md","hash":"0fd2339f0ed5601cb92a2719e12d5bbb6768a413","modified":1677807183340},{"_id":"source/_posts/手机/._Windows和iOS备忘录","hash":"6d8963dc5c8e1293c9e34da27eeb1bc43533c983","modified":1678170742922},{"_id":"source/_posts/手机/._Windows和iOS密码管理器","hash":"67627c38906418e45f22b00e386f55550c25bd2a","modified":1678170743406},{"_id":"source/_posts/手机/._Windows和iOS文件共享","hash":"887560fcc46200b985b957106f56f81e799d2058","modified":1677807183420},{"_id":"source/_posts/手机/._Windows和iOS文件共享.md","hash":"0225449a50a57895c6517fe88e867e65aa3a3e4b","modified":1678171000684},{"_id":"source/_posts/手机/Windows和iOS备忘录.md","hash":"d9ceef76148b60247e814d0e4708ad34bb6e7f39","modified":1678170937828},{"_id":"source/_posts/手机/Windows和iOS密码管理器.md","hash":"a7d045b469ce43f8f4e725c60cf55c60ac556980","modified":1678170986488},{"_id":"source/_posts/手机/Windows和iOS文件共享.md","hash":"560923f0d6324f8eb29f98b393920e1cd391ee6c","modified":1677807183420},{"_id":"source/_posts/智能家居/.DS_Store","hash":"f32d79073ac26f33df93f9c0706ef645fdd267a4","modified":1678098859517},{"_id":"source/_posts/blog/定期备份博客.md","hash":"225c55beacb34213d2122891b2853410cd5c6fb1","modified":1677807183330},{"_id":"source/_posts/blog/如何整理博客中的图片资源.md","hash":"251aa5f115a3982b563958f62e4b49ce50f05233","modified":1677807183330},{"_id":"source/_posts/智能家居/._.DS_Store","hash":"8994289ad297ccfbac421cd3f30778b431e64f91","modified":1678098861023},{"_id":"source/_posts/blog/我的博客.md","hash":"dac72cf4d9058d9b7649596dfd6f7b8b6028b513","modified":1678173706141},{"_id":"source/_posts/智能家居/._ESP32写入MicroPython固件","hash":"beb28075e27cf8df4f9446b3e5024e53c342c0c7","modified":1678098858246},{"_id":"source/_posts/智能家居/._ESP32写入MicroPython固件.md","hash":"9edceb57481e1b0c856b2fff71e15597bad196ac","modified":1678098856426},{"_id":"source/_posts/智能家居/._ESP32点亮TFT屏幕","hash":"8617069889717600599dc3568a5b3f0caee4cfc1","modified":1678098858929},{"_id":"source/_posts/智能家居/._ESP32点亮TFT屏幕.md","hash":"9101914fd75079c93b72d869bcc0124ce47fab6e","modified":1678098856802},{"_id":"source/_posts/智能家居/._Home_Assistant_HTTPS","hash":"1d459cc15bda6f24b41cc31bff3a852c1a72c5a9","modified":1678098857388},{"_id":"source/_posts/智能家居/._Home_Assistant_HTTPS.md","hash":"cfae01ade36fe471c3b49a8a10e77a516c3ec17d","modified":1678098856664},{"_id":"source/_posts/智能家居/._Home_Assistant_客户端配置","hash":"0599767cb53c4c529c9529feec087f6c731aacae","modified":1678098855705},{"_id":"source/_posts/智能家居/._Home_Assistant_客户端配置.md","hash":"a97ea57cf9a007a04cdd7a13e3fe4dbfb181e1c1","modified":1678098855941},{"_id":"source/_posts/智能家居/._Home_Assistant安装.md","hash":"12af32db8e9ace9eaca956980abce60cc7e28e29","modified":1678098856194},{"_id":"source/_posts/智能家居/._Home_Assistant的定位功能","hash":"d41b930741c309633095caffb95689343516a672","modified":1678098846610},{"_id":"source/_posts/智能家居/._Home_Assistant的定位功能.md","hash":"6ff6f13977622cfd0a94d8be3f336603c687154e","modified":1678098847019},{"_id":"source/_posts/智能家居/._Home_Assistant监控Web服务器","hash":"941d45a5fc29fb46bfe443e59ba3bb08295197a7","modified":1678098848065},{"_id":"source/_posts/智能家居/._Home_Assistant监控Web服务器.md","hash":"a119d9f8fdd60d1ede1e53b8119635971b57eda8","modified":1678098847167},{"_id":"source/_posts/智能家居/._SSH远程连接","hash":"e50d53407bdcf1f352938d5177c188fd0b6eade6","modified":1678170772581},{"_id":"source/_posts/智能家居/._iRobot扫地机器人使用体验","hash":"4489368095826424f30e2b1e4274def6e193cbac","modified":1677807183640},{"_id":"source/_posts/智能家居/._iRobot扫地机器人使用体验.md","hash":"757528205b610f27712e8edd940c906d5917be95","modified":1677807183640},{"_id":"source/_posts/智能家居/._物联网智能小电视","hash":"c98c18e707dbe6e886cc02dd86227271485f91ac","modified":1678098859814},{"_id":"source/_posts/智能家居/._物联网智能小电视.md","hash":"65c48ab2e997c396ef60da647774609b6f649922","modified":1678098857024},{"_id":"source/_posts/智能家居/ESP32写入MicroPython固件.md","hash":"b4a7b7f22859262b1be56e24c8670f0e903039a2","modified":1678092680000},{"_id":"source/_posts/智能家居/ESP32点亮TFT屏幕.md","hash":"05b17657b27e79fe3c0679775e75d8e843abcc6b","modified":1678091967000},{"_id":"source/_posts/智能家居/Home_Assistant_HTTPS.md","hash":"70848e86bc3df8aa76632213db60c303be4cc837","modified":1678092011000},{"_id":"source/_posts/智能家居/Home_Assistant_客户端配置.md","hash":"44a709c724fd28926a866f049d18e9728ef5c0a8","modified":1678097920000},{"_id":"source/_posts/智能家居/Home_Assistant安装.md","hash":"0263ece32820790a3267b5972905e7502f2376b1","modified":1678093168000},{"_id":"source/_posts/智能家居/Home_Assistant的定位功能.md","hash":"84268bd73becacd910cb5576ec3d006e434a798c","modified":1678098539000},{"_id":"source/_posts/智能家居/Home_Assistant监控Web服务器.md","hash":"13414e4d6670c36902b2c6c83d0165e50818b609","modified":1678098464000},{"_id":"source/_posts/智能家居/SSH远程连接.md","hash":"d79dc2cc7e5501c517509a8eeb077c4225d2b43b","modified":1678170861949},{"_id":"source/_posts/智能家居/iRobot扫地机器人使用体验.md","hash":"14100d37fa9b9548aa12ad47c53a28afb4617498","modified":1677807183640},{"_id":"source/_posts/智能家居/物联网智能小电视.md","hash":"ec7034437de5fbd7882b8390210d324325652f36","modified":1678091300000},{"_id":"source/_posts/python/.DS_Store","hash":"ca2b70bb80b680cb07af3b560c859d9aa2d837d6","modified":1677807183340},{"_id":"source/_posts/python/._.DS_Store","hash":"afde804d7faf3d56d64b3fda61da8b0610238672","modified":1677807183340},{"_id":"source/_posts/python/._Python介绍.md","hash":"990cea93fea05b3f591a67436bbe5c1fbce2b252","modified":1677807183360},{"_id":"source/_posts/python/._Python模块和包-介绍.md","hash":"c981ea5512e329d713522084c89b20b495669a2b","modified":1677807183370},{"_id":"source/_posts/python/._Requests库使用指南.md","hash":"f1fc121c1b07fc70dd03dfce1f6139eead5b8c0c","modified":1677807183360},{"_id":"source/_posts/python/._f-Strings-格式化字符串.md","hash":"ed2d81222f68981684dc5dcce216d028808317b7","modified":1677807183350},{"_id":"source/_posts/python/._super函数.md","hash":"4d605014e4d08326a8dac255423c68893c975dad","modified":1677807183360},{"_id":"source/_posts/python/._面向对象的编程.md","hash":"b7fdd91ac37bb0036dd66c3fbf7428c74075f2a9","modified":1677807183360},{"_id":"source/_posts/python/Python介绍.md","hash":"58df511b7df00b2ecf460c715bb083394544596e","modified":1677807183360},{"_id":"source/_posts/python/Python模块和包-介绍.md","hash":"8606f41d1cbb525b23f030439a2bf458e7dbe3dc","modified":1677807183370},{"_id":"source/_posts/python/Requests库使用指南.md","hash":"e68273145ef67018628c8b8f9e5946e968e16bf5","modified":1677807183360},{"_id":"source/_posts/杂七杂八/.DS_Store","hash":"0a8867b0b3ba429426bc20a52cf5893c90dd0ade","modified":1678170210750},{"_id":"source/_posts/杂七杂八/._.DS_Store","hash":"a2758fa10efad42383eead4a175c413e56c11a0a","modified":1677807183380},{"_id":"source/_posts/杂七杂八/._Windows-Terminal如何从Vim中复制内容","hash":"7c8bebe71e3c962d6d816e210d0a84253b7f3743","modified":1677807183380},{"_id":"source/_posts/杂七杂八/._Windows-Terminal如何从Vim中复制内容.md","hash":"935ae8a232260b26a9fa2d495e3a6d983052a400","modified":1677807183390},{"_id":"source/_posts/杂七杂八/._浅谈广域网加速技术.md","hash":"e9cf62a327699a74e86fe08a348cb7d577988eb5","modified":1677807183380},{"_id":"source/_posts/杂七杂八/Windows-Terminal如何从Vim中复制内容.md","hash":"c6f5a537b294a8ca998ff39f9088b1b9ea9d4234","modified":1677807183380},{"_id":"source/_posts/杂七杂八/浅谈广域网加速技术.md","hash":"b3db29c18907441afe155caa38a3dfd9422ac29b","modified":1677807183380},{"_id":"source/_posts/python/f-Strings-格式化字符串.md","hash":"895814bd1a50bddb41d9d602388cc4663e71dcc2","modified":1677807183350},{"_id":"source/_posts/python/super函数.md","hash":"fd80d2d8f97623729ee3aa04c18ff0137e5d2cdf","modified":1677807183360},{"_id":"source/_posts/python/面向对象的编程.md","hash":"3502b3fc040f52bfc9c3bb88cec75bc2089f655a","modified":1677807183360},{"_id":"source/_posts/中医/.DS_Store","hash":"c3a780e54600dada0053b15df2b63ac4f8546ffa","modified":1677807183610},{"_id":"source/_posts/中医/._.DS_Store","hash":"87ccd98e42f9307f6f0fa004b0660d5176b9cf62","modified":1677807183610},{"_id":"source/_posts/中医/._尝试用二至丸治疗白发.md","hash":"0b49ed8d11e4ca0e00e380b962d8cc383a02d647","modified":1677807183610},{"_id":"source/_posts/中医/.smbdeleteAAAa2bd0","hash":"050bc310982618c4d5131aeb148581fc41643d63","modified":1677807183610},{"_id":"source/_posts/中医/尝试用二至丸治疗白发.md","hash":"b42c06f4529be7ea7e9fed18f16c738d94c74a9b","modified":1677807183610},{"_id":"source/_posts/blog/个人博客-Hexo多终端同步篇/21.png","hash":"bb66f8eb3e24e1a4a2651d0cd4f1492aca1306c4","modified":1677807183290},{"_id":"source/_posts/blog/个人博客-Hexo多终端同步篇/22.png","hash":"5b88e8daf0da8288127a768a264cc341d70aeee8","modified":1677807183290},{"_id":"source/_posts/手机/Windows和iOS备忘录/windowsnotes.png","hash":"483290b8c296be3428c33d8647e364f2006cbb38","modified":1678170323000},{"_id":"source/_posts/blog/个人博客-Hexo安装篇/01.png","hash":"831216a4cff661c4d9cd6a5fe455f188e4419ce2","modified":1677807183280},{"_id":"source/_posts/手机/Windows和iOS密码管理器/2021-10-03092032.png","hash":"a82efbbbd3f00a73a2ebc23e953f58fc4895e3c9","modified":1678170557000},{"_id":"source/_posts/blog/个人博客-Hexo安装篇/08.png","hash":"66d5a2c063e3e992b16946f72460d4bdba2c1337","modified":1677807183280},{"_id":"source/_posts/blog/如何整理博客中的图片资源/Pastedimage20230224145541.png","hash":"81a0b81287b9d1d5f272b8748c3dbdeced7e58ba","modified":1677807183320},{"_id":"source/_posts/blog/如何整理博客中的图片资源/Pastedimage20230224145706.png","hash":"74bc47120f0663756eac714e5bf70d0d6882b214","modified":1677807183320},{"_id":"source/_posts/智能家居/ESP32写入MicroPython固件/2021-10-23114015.png","hash":"c7955a821d96cc59f2e603c3724f76488a072560","modified":1678088903000},{"_id":"source/_posts/智能家居/ESP32写入MicroPython固件/2021-10-23114050.png","hash":"8b2c6edc9cf436994ed6e3c69f5fdac2858b8c03","modified":1678088903000},{"_id":"source/_posts/智能家居/ESP32写入MicroPython固件/2021-10-23114710.png","hash":"6df0f68e8165d5b3766dcd19be5494d59093de03","modified":1678088903000},{"_id":"source/_posts/智能家居/ESP32写入MicroPython固件/2021-10-23114253.png","hash":"d1bde76d1777e091dd3abe1de5593de976895f24","modified":1678088903000},{"_id":"source/_posts/智能家居/ESP32写入MicroPython固件/2021-10-23114815.png","hash":"07dc7f43cfe9fb03ce87aa31edad8c09e6e9e84e","modified":1678088903000},{"_id":"source/_posts/智能家居/ESP32写入MicroPython固件/2021-10-23121931.png","hash":"e8a3006462066c7df096830a16085a92a00ac992","modified":1678088903000},{"_id":"source/_posts/智能家居/SSH远程连接/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1678170183000},{"_id":"source/_posts/智能家居/SSH远程连接/._.DS_Store","hash":"d3c6032ba0531d30cf95bae91c3239cd865cfa4d","modified":1678170772393},{"_id":"source/_posts/智能家居/SSH远程连接/2021-10-26190304.png","hash":"e55ee659332bb7c5dff120e6741effc912991fb8","modified":1678169674000},{"_id":"source/_posts/智能家居/SSH远程连接/20230307142016.png","hash":"972cc0b4dd00d82fbc11e6d38959d599a613c160","modified":1678170016000},{"_id":"source/_posts/智能家居/Home_Assistant_HTTPS/20211019_001515000_iOS.png","hash":"bf96eb64a35defdcb2f798d579edfde38bc0408b","modified":1678090132000},{"_id":"source/_posts/智能家居/Home_Assistant_HTTPS/20211019_001714000_iOS.png","hash":"c3936d989fc26af49e645695ec25705938af0522","modified":1678090132000},{"_id":"source/_posts/智能家居/Home_Assistant_HTTPS/20211019_001547000_iOS.png","hash":"abeddc4591f0543f82770f0fd79818f75bc1fdb1","modified":1678090132000},{"_id":"source/_posts/智能家居/Home_Assistant_客户端配置/.DS_Store","hash":"608fd93f880ee4b59b4330eac4460e7a5fabbf66","modified":1678098314000},{"_id":"source/_posts/智能家居/Home_Assistant_客户端配置/._.DS_Store","hash":"78254d621f8306c4666de630e8955a596511aba1","modified":1678098893870},{"_id":"source/_posts/智能家居/Home_Assistant_客户端配置/2021-10-20094537.png","hash":"aff6fe1be8e9a6580eab7fc4b75aa2d158bde813","modified":1678090245000},{"_id":"source/_posts/智能家居/Home_Assistant_客户端配置/2021-10-20094645.png","hash":"663a5abb6bd328b175f0ae2fa207b3464239acc4","modified":1678090245000},{"_id":"source/_posts/智能家居/Home_Assistant_客户端配置/2021-10-20094710.png","hash":"816857019b9a9bdf2c36cd7c38046d6c63d27c58","modified":1678090245000},{"_id":"source/_posts/智能家居/Home_Assistant_客户端配置/2021-10-20094728.png","hash":"60bcd0d9ed11111a2ed3f5de71da2dff314945fe","modified":1678090245000},{"_id":"source/_posts/智能家居/Home_Assistant_客户端配置/2021-10-20095144.png","hash":"e1fc62eecf446e252364f7212957d6c828cc258a","modified":1678090245000},{"_id":"source/_posts/智能家居/Home_Assistant_客户端配置/20211019_001515000_iOS1.png","hash":"bf96eb64a35defdcb2f798d579edfde38bc0408b","modified":1678090132000},{"_id":"source/_posts/智能家居/Home_Assistant_客户端配置/20211019_001547000_iOS2.png","hash":"abeddc4591f0543f82770f0fd79818f75bc1fdb1","modified":1678090132000},{"_id":"source/_posts/智能家居/Home_Assistant_客户端配置/20211019_001714000_iOS3.png","hash":"c3936d989fc26af49e645695ec25705938af0522","modified":1678090132000},{"_id":"source/_posts/智能家居/Home_Assistant_客户端配置/20211020_024210000_iOS.png","hash":"3d38467f554624cd0578720ac1699987577fcea8","modified":1678090245000},{"_id":"source/_posts/智能家居/Home_Assistant_客户端配置/20211020_024219000_iOS.png","hash":"4c401fd3091459f276549bbc31396d26bae4e40c","modified":1678090245000},{"_id":"source/_posts/智能家居/Home_Assistant_客户端配置/20211020_024258000_iOS.png","hash":"16f37272bc4fd21f0c157a971fedfb24f2a7203b","modified":1678090245000},{"_id":"source/_posts/智能家居/Home_Assistant_客户端配置/20211020_024338000_iOS.png","hash":"c1c9859bc771e2467840f3ebd7a0b13c6db0ed1d","modified":1678090245000},{"_id":"source/_posts/智能家居/Home_Assistant的定位功能/2021-10-25154637.png","hash":"af1185fd31995d85126b0fb9059477c4f48f5bbf","modified":1678090857000},{"_id":"source/_posts/智能家居/Home_Assistant的定位功能/2021-10-25154947.png","hash":"e8319f8ce4c6a0fbfd42285cd5f0907c4200b983","modified":1678090857000},{"_id":"source/_posts/智能家居/Home_Assistant的定位功能/2021-10-25155436.png","hash":"8ff1cbbf5c3f67b84b58524e0174646cfd1b1d50","modified":1678090857000},{"_id":"source/_posts/智能家居/Home_Assistant的定位功能/2021-10-25160611.png","hash":"a026b150b82c85e0ce59e0ad9a904ab7b8d60ba8","modified":1678090857000},{"_id":"source/_posts/智能家居/Home_Assistant的定位功能/20211025173127.jpg","hash":"a640dc0ff4a03f9e16ad512302bfa9879dcc08e5","modified":1678090857000},{"_id":"source/_posts/智能家居/Home_Assistant的定位功能/20211025173103.jpg","hash":"9974b257bc30f3815ea62ba3b959e02cce964b13","modified":1678090857000},{"_id":"source/_posts/智能家居/Home_Assistant的定位功能/20211025173136.jpg","hash":"d408f639a6a6dee3be30cdc17133183190bad2a2","modified":1678090857000},{"_id":"source/_posts/智能家居/Home_Assistant的定位功能/20211025_071159000_iOS.png","hash":"a1ec8737786ea86fe07e7c64cf91b94131d43477","modified":1678090857000},{"_id":"source/_posts/智能家居/Home_Assistant监控Web服务器/2021-10-23191544.png","hash":"134619da30206eb8c9659cc740c5a11592334e2e","modified":1678090736000},{"_id":"source/_posts/智能家居/Home_Assistant监控Web服务器/20211023_105828000_iOS.png","hash":"11cff86c2bc656166ddd1a236532fba5240622ac","modified":1678090736000},{"_id":"source/_posts/智能家居/Home_Assistant监控Web服务器/20211023_105936000_iOS.png","hash":"ee5f0da760b9b08095dd039569a6316bf4b8ff85","modified":1678090736000},{"_id":"source/_posts/智能家居/Home_Assistant监控Web服务器/20211023_110011000_iOS.png","hash":"e22c856d4b82d3a3f43ac560b3f4454b7793a94b","modified":1678090736000},{"_id":"source/_posts/python/Python模块和包-介绍/pkg1.9af1c7aea48f.png","hash":"8355e8e33801607f4e2fbe3905608622258f970c","modified":1677807183350},{"_id":"source/_posts/python/Python模块和包-介绍/pkg1_133918.png","hash":"fd7ab3538e0325917c8c1cb33ff038fc3a87392c","modified":1677807183350},{"_id":"source/_posts/python/Python模块和包-介绍/pkg3.d2160908ae77.png","hash":"2b1005bcc65cf0ad5dcc9d4e9a14f91aaff036fa","modified":1677807183350},{"_id":"source/_posts/python/Python模块和包-介绍/pkg4_100818.png","hash":"46ab34db6823114a0aa59507ff9cc31f94ba391e","modified":1677807183350},{"_id":"source/_posts/中医/尝试用二至丸治疗白发/.DS_Store","hash":"0d07740546efa3f5db6539b777a1313776a835d9","modified":1677807183420},{"_id":"source/_posts/中医/尝试用二至丸治疗白发/._.DS_Store","hash":"00ea45d120cb12994f431196152cefb0f8ce5185","modified":1677807183500},{"_id":"source/_posts/blog/个人博客-GitHub-Pages篇/09.png","hash":"bd8171d85ca74d2cf55df39d9ea506052ad376ff","modified":1677807183280},{"_id":"source/_posts/blog/个人博客-GitHub-Pages篇/10.png","hash":"92a22b3835d2f29d51a6d5e669160b25deb96769","modified":1677807183270},{"_id":"source/_posts/手机/Windows和iOS备忘录/mainaccount03.png","hash":"d94c00057344341ba98b2d068f4022d5b4576ec8","modified":1678170323000},{"_id":"source/_posts/手机/Windows和iOS备忘录/mainaccount04.png","hash":"96e920310cdca0c682daa8281ef2d7903b4e6c09","modified":1678170323000},{"_id":"source/_posts/智能家居/Home_Assistant_客户端配置/2021-10-20094623.png","hash":"ce9e0ce63aaaa8be736470d46414fd677370b521","modified":1678090245000},{"_id":"source/_posts/智能家居/Home_Assistant_客户端配置/20211020_024501000_iOS.png","hash":"36cdd2c949e6fddf3a4bf0e0bfe970122ab52f2a","modified":1678090245000},{"_id":"source/_posts/智能家居/Home_Assistant的定位功能/2021-10-25151814.png","hash":"697829bb71858472fbc5b67bd9eba93b396b0374","modified":1678090857000},{"_id":"source/_posts/智能家居/Home_Assistant监控Web服务器/2021-10-23191643.png","hash":"6dd85eb143ff14052358804358db078f0a7c97b7","modified":1678090736000},{"_id":"source/_posts/手机/Windows和iOS备忘录/mainaccount02.png","hash":"1fc0c9297c6b56f4382d9fb16b3996665217b5d8","modified":1678170323000},{"_id":"source/_posts/手机/Windows和iOS密码管理器/2021-10-03092029.png","hash":"f851a2300719141942d8c41857f5065afa24d1cd","modified":1678170557000},{"_id":"source/_posts/手机/Windows和iOS密码管理器/2021-10-03092030.png","hash":"7385e68a1c32051c0584f2c74789a29e504304b2","modified":1678170557000},{"_id":"source/_posts/blog/博客主题/blog_pc.JPG","hash":"488b301508f207414fa2bc77587c3c821916b8cc","modified":1677807183300},{"_id":"source/_posts/手机/Windows和iOS文件共享/fileshare01.jpg","hash":"25250e5d5a84b9b430e338ec5b602f469daf37d3","modified":1677807183400},{"_id":"source/_posts/手机/Windows和iOS文件共享/icloud-connect-server.jpg","hash":"5b9848700057c79ef06620556997cce9cf4c6493","modified":1677807183410},{"_id":"source/_posts/智能家居/ESP32写入MicroPython固件/2021-10-23112359.png","hash":"d0ce1913d1891c86155b2b7721d4516782665db4","modified":1678088903000},{"_id":"source/_posts/智能家居/ESP32写入MicroPython固件/2021-10-23113915.png","hash":"9e82f9d97e0fcd68a78ee3ece928904d156460a4","modified":1678088903000},{"_id":"source/_posts/智能家居/Home_Assistant的定位功能/20211023_234305000_iOS.png","hash":"8327686347dc0d14f92b1c6ff6dfd9e684c79c46","modified":1678090857000},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1677807183660},{"_id":"themes/next/.DS_Store","hash":"a474ecd56673428fc1ff789c081c81054362a951","modified":1677807183650},{"_id":"themes/next/._.DS_Store","hash":"febccea2d44ac6f929847532a586892c50273620","modified":1677807183660},{"_id":"themes/next/.__config.yml","hash":"96f028b03ba653e5fe4702055636f928c8af6551","modified":1677807183660},{"_id":"themes/next/.eslintrc.json","hash":"9c0762486f24a8c5e60f8b6c875e4c4728942649","modified":1677807183660},{"_id":"themes/next/README.md","hash":"36c4b25587ca494102323dab5a38de5490451a64","modified":1677807183660},{"_id":"themes/next/_vendors.yml","hash":"48ae2854826d6ad46cca5a5fdfcc13f09870c8b2","modified":1677807183660},{"_id":"themes/next/.stylelintrc","hash":"dedb8dd4d454cb1bb6aba594ef2cbd05ec2427d8","modified":1677807183660},{"_id":"themes/next/package.json","hash":"3b8084a2e1cb83ca6bbb1066599ead017c4202f3","modified":1677807183680},{"_id":"themes/next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1677807183660},{"_id":"themes/next/_config.yml","hash":"cd7ffd54f9e0e3d45f60bb2f4acfa516b7737669","modified":1677807183660},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1677807183660},{"_id":"themes/next/renovate.json","hash":"cb29cc16e61b0b8a6dac34657d76822ae29ad5aa","modified":1677807183680},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1677807183670},{"_id":"themes/next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1677807183670},{"_id":"themes/next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1677807183670},{"_id":"themes/next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1677807183680},{"_id":"themes/next/languages/ar.yml","hash":"46026e98fe279a9db5d68bf91afa5d8e41f9ccfb","modified":1677807183680},{"_id":"themes/next/languages/bn.yml","hash":"74133a827c104d1d84509177f283947fe9327a80","modified":1677807183680},{"_id":"themes/next/languages/de.yml","hash":"c4fc18c338309271d1afe737e6c404a6fa313bbc","modified":1677807183680},{"_id":"themes/next/languages/default.yml","hash":"4bbdb4284afe495437cf7817b97b45f60e12d1e4","modified":1677807183680},{"_id":"themes/next/languages/en.yml","hash":"4bbdb4284afe495437cf7817b97b45f60e12d1e4","modified":1677807183680},{"_id":"themes/next/languages/es.yml","hash":"8b6d4a8a056df4362d20ae1f6ac7a590dd7246e5","modified":1677807183680},{"_id":"themes/next/languages/fa.yml","hash":"1e256c8df039ddeba66526c5eb2d6c79177a7fc6","modified":1677807183680},{"_id":"themes/next/languages/fr.yml","hash":"2436942610e38b73b175cb0f8ed1f8f23d42a7ce","modified":1677807183680},{"_id":"themes/next/languages/it.yml","hash":"4d6efcdaea89dfe751b7707d91858bf33d3538b7","modified":1677807183680},{"_id":"themes/next/languages/id.yml","hash":"c4bad93b23c7eefa730fd7fec5b05ace3ce9ca4d","modified":1677807183680},{"_id":"themes/next/languages/ja.yml","hash":"a0906702d3c87d0e1661e300ad0bdf7e679a3d91","modified":1677807183690},{"_id":"themes/next/languages/ko.yml","hash":"25ee0d5b9a0464a91af7d2efb33293c09ad5abdf","modified":1677807183690},{"_id":"themes/next/languages/pt-BR.yml","hash":"10d80915c41328f31a4f2d8ac736bba020f373d8","modified":1677807183690},{"_id":"themes/next/languages/nl.yml","hash":"8a4da307b4a19e3c96b90a07a2da8dc5d50e5d9e","modified":1677807183690},{"_id":"themes/next/languages/pt.yml","hash":"fa7c43ec872aee2739b25dd7260e0764ea9e26fd","modified":1677807183690},{"_id":"themes/next/languages/ru.yml","hash":"16b96783ba363255b4c8156c3e1efebdb37676f8","modified":1677807183690},{"_id":"themes/next/languages/si.yml","hash":"034c5a0df49144e8f16ae2300dba9fde58b9329e","modified":1677807183690},{"_id":"themes/next/languages/th.yml","hash":"4fac74a39d3906c4a727476be4750530a505933a","modified":1677807183690},{"_id":"themes/next/languages/tk.yml","hash":"37d9af426b040004841273d163059cd49cd67d65","modified":1677807183690},{"_id":"themes/next/languages/tr.yml","hash":"890f87f6a33ad8452b771607d4c3ff14810b35fa","modified":1677807183690},{"_id":"themes/next/languages/uk.yml","hash":"fbaed3039ed8605b81422003a4ecb2a6514e339d","modified":1677807183690},{"_id":"themes/next/languages/vi.yml","hash":"a6ba04c743a5b494ac56612ce6b858d9ae3ae1bd","modified":1677807183690},{"_id":"themes/next/languages/zh-CN.yml","hash":"5cebea74f3198a4a20cacf23069c3b91e4f03d85","modified":1677807183690},{"_id":"themes/next/languages/zh-HK.yml","hash":"8ab7219563dab13885840207a86055000d173465","modified":1677807183690},{"_id":"themes/next/languages/zh-TW.yml","hash":"9fdce9d316e205fc132b2181254ef3b04007a97d","modified":1677807183690},{"_id":"themes/next/layout/_layout.njk","hash":"fc0a45112f2dcfc2642404e8934ea32a793c3bd7","modified":1677807183700},{"_id":"themes/next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1677807184280},{"_id":"themes/next/layout/category.njk","hash":"c68b7343d0f8145010f93351908cc36ef6212ec1","modified":1677807184280},{"_id":"themes/next/layout/index.njk","hash":"dd63e488ae8cc144335a5958acedf6a16edd7a92","modified":1677807184290},{"_id":"themes/next/layout/page.njk","hash":"b0660b2af0ac7d3fda14ca4d9f2c9e79ef06c6f9","modified":1677807184290},{"_id":"themes/next/source/._.DS_Store","hash":"d08c3f72a9f45dda861431a39d6f5b0636f5e18d","modified":1677807184330},{"_id":"themes/next/test/index.js","hash":"6bf0289846538be3e9a63809af98f00e1fbdd90b","modified":1677807184430},{"_id":"themes/next/docs/ru/README.md","hash":"ac3c4a7616ea80f0d32d68d6e53233952ba756dc","modified":1677807183670},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7a06d443f374bd1e84294067a0ac796afd9fbe60","modified":1677807183670},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":1677807183670},{"_id":"themes/next/docs/zh-CN/README.md","hash":"9bbdbb0656505acceef9b9895a576164175fe888","modified":1677807183680},{"_id":"themes/next/layout/_macro/post-collapse.njk","hash":"1a30d751871dabfa80940042ddb1f77d07d830b9","modified":1677807183700},{"_id":"themes/next/layout/_macro/sidebar.njk","hash":"547c62ab14d9e05d2d9116db9048a677fbe1fb6d","modified":1677807183700},{"_id":"themes/next/layout/_macro/post.njk","hash":"7e8268fd5cbd552322b276f52459fd187c2453d2","modified":1677807183700},{"_id":"themes/next/layout/_partials/comments.njk","hash":"d0c470b0f6690aa217e9ada848c5e2e73fb27c6f","modified":1677807183700},{"_id":"themes/next/layout/_partials/footer.njk","hash":"c40760b559c516677c8b11a00ba50c011f2079fd","modified":1677807183700},{"_id":"themes/next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1677807184230},{"_id":"themes/next/layout/_partials/pagination.njk","hash":"bc719473ed5948ab6859449d60b8d36cfc1542b4","modified":1677807184240},{"_id":"themes/next/layout/_scripts/index.njk","hash":"6668878a0f9a1166c6a879755f54a08d942da870","modified":1677807184250},{"_id":"themes/next/layout/_partials/widgets.njk","hash":"e7f988ecddb2159313699a00827a45eca5622bd4","modified":1677807184250},{"_id":"themes/next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":1677807184250},{"_id":"themes/next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":1677807184270},{"_id":"themes/next/scripts/events/index.js","hash":"bd9ea82376cd87df611ea3ae077875c7c595a3df","modified":1677807184290},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1677807184300},{"_id":"themes/next/scripts/filters/locals.js","hash":"9eb5310664759931287dd28ea39165dfb67f12ed","modified":1677807184310},{"_id":"themes/next/scripts/filters/minify.js","hash":"ce8477e7fb226525bae5872cd68a1c2c23ad50c8","modified":1677807184310},{"_id":"themes/next/scripts/filters/post.js","hash":"fdc8a0af90035e89c3fcb754a0eb189b8951a2bc","modified":1677807184310},{"_id":"themes/next/scripts/helpers/engine.js","hash":"d292b78485e8e8055712b0ed6de7cf559c5fbdcd","modified":1677807184310},{"_id":"themes/next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":1677807184310},{"_id":"themes/next/scripts/helpers/navigation.js","hash":"78107021101553c3d23e89290f7530b60cf4aa86","modified":1677807184310},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"226fccbe9c93265e65a300e3cb4bf6f9065cfdd7","modified":1677807184310},{"_id":"themes/next/scripts/helpers/next-paginator.js","hash":"e86c764b546e4fbb87970cabc4135a56f9ef9fe1","modified":1677807184310},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"fd24abfaba4d91923ddb6aecf0268b216678c8bd","modified":1677807184310},{"_id":"themes/next/scripts/helpers/next-vendors.js","hash":"afdd6a188a74c188f0dd154fac70efd4080ca262","modified":1677807184310},{"_id":"themes/next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1677807184310},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1677807184320},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1677807184320},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"9ed799c329abf830f623689d7e136991256a24ca","modified":1677807184320},{"_id":"themes/next/scripts/tags/index.js","hash":"17f9451ce1f10f78437f52218757d38d4e1591b0","modified":1677807184320},{"_id":"themes/next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1677807184320},{"_id":"themes/next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1677807184320},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":1677807184320},{"_id":"themes/next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1677807184320},{"_id":"themes/next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1677807184320},{"_id":"themes/next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1677807184320},{"_id":"themes/next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1677807184320},{"_id":"themes/next/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":1677807184270},{"_id":"themes/next/layout/_third-party/index.njk","hash":"aa37f8e98208177b63e3328d6e53b022c6edf3b2","modified":1677807184270},{"_id":"themes/next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1677807184270},{"_id":"themes/next/source/css/_colors.styl","hash":"3c6798c10cc220d83481cb3f3782e78558cee789","modified":1677807184330},{"_id":"themes/next/source/css/_mixins.styl","hash":"04a07a4dbeb00683d783eff26c44492c35b924e0","modified":1677807184380},{"_id":"themes/next/source/css/main.styl","hash":"921a58577f411cf4eb5cfd66db0a241f8f88578c","modified":1677807184390},{"_id":"themes/next/source/css/noscript.styl","hash":"dadc81256afb127b77eac6763d5ee0ec9c77f0a3","modified":1677807184390},{"_id":"themes/next/source/images/._.DS_Store","hash":"a876b910f6c1f5a6cef5b19eb6414b19ddb092a4","modified":1677807184390},{"_id":"themes/next/source/images/.DS_Store","hash":"7dc38171c7f1e1c9030734dea1b175444d1360b2","modified":1677807184390},{"_id":"themes/next/source/images/._avatar.png","hash":"1534dccb274ac2ace2be84513898229c471f77b2","modified":1677807184400},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1677807184400},{"_id":"themes/next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1677807184400},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1677807184400},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1677807184400},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1677807184400},{"_id":"themes/next/source/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1677807184400},{"_id":"themes/next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1677807184410},{"_id":"themes/next/source/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1677807184400},{"_id":"themes/next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1677807184410},{"_id":"themes/next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1677807184410},{"_id":"themes/next/source/js/motion.js","hash":"770d63c26f22705311028a36b52e999cc8a2da82","modified":1677807184410},{"_id":"themes/next/source/js/next-boot.js","hash":"da0f07f9eaaa83de70128b0feaea3fdadb90457a","modified":1677807184410},{"_id":"themes/next/source/js/pjax.js","hash":"90fb7f346f777434ea68ab4e4be1d7b999ad63ac","modified":1677807184410},{"_id":"themes/next/source/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1677807184410},{"_id":"themes/next/source/js/utils.js","hash":"af59257e46d25dda62967c35a65e2efcbd90d3bc","modified":1677807184430},{"_id":"themes/next/test/helpers/index.js","hash":"63ba28afed697f7b3574436b1133b8ecc9c0c357","modified":1677807184430},{"_id":"themes/next/test/helpers/font.js","hash":"342ef3c6fd2dcca2a8802a516ed6d7f389fd2ca2","modified":1677807184430},{"_id":"themes/next/test/helpers/next-url.js","hash":"a91d880cb75e0a8e65a7be4c7362b2c8ebfb7c4f","modified":1677807184430},{"_id":"themes/next/test/tags/button.js","hash":"48f2aa4c513e9e24bd6a811410520b74cd7ea88b","modified":1677807184430},{"_id":"themes/next/test/tags/group-pictures.js","hash":"5c68ae0184f9da6e00ba199f2554d503d8e6da71","modified":1677807184430},{"_id":"themes/next/test/tags/caniuse.js","hash":"aa5e728445caeaf7c2ccd0f3fcb2cad0c93ca6d1","modified":1677807184430},{"_id":"themes/next/test/tags/label.js","hash":"4ebf3698c258ca978b997acbdd0dece44069c09d","modified":1677807184430},{"_id":"themes/next/test/tags/index.js","hash":"e8779e54f0979b221858f8bb74dd081bb503b910","modified":1677807184430},{"_id":"themes/next/test/tags/link-grid.js","hash":"43d298fafb7c45a874b766d443843bd26346e689","modified":1677807184430},{"_id":"themes/next/test/tags/center-quote.js","hash":"7667342fd1a1417eaf6a254012b84ae40e8d13dd","modified":1677807184430},{"_id":"themes/next/test/tags/mermaid.js","hash":"ab77be5f3c6d9a57c7b9dda6decf1906a736fef9","modified":1677807184430},{"_id":"themes/next/test/tags/note.js","hash":"3dcfcd65bf9f326972ea7571fdb1444200f5d07e","modified":1677807184430},{"_id":"themes/next/test/tags/pdf.js","hash":"fd6ea5123560a90f7e7c1eface23dbe1455db25f","modified":1677807184440},{"_id":"themes/next/test/tags/tabs.js","hash":"d63722919f9da2e44d6b952801e10a2915ea9c12","modified":1677807184440},{"_id":"themes/next/test/tags/video.js","hash":"b796fc4dceb20a30e730c322bb5474c0162464cc","modified":1677807184440},{"_id":"themes/next/test/validate/index.js","hash":"5a95ccc8598667535bd022e988055c0e019f3670","modified":1677807184440},{"_id":"themes/next/layout/_partials/head/head-unique.njk","hash":"8da52a144060db1a0a088ccb2e6cc8376d1fce70","modified":1677807183700},{"_id":"themes/next/layout/_partials/head/head.njk","hash":"5388b157bba4a40b9312f4a45c6678974ccf0837","modified":1677807183700},{"_id":"themes/next/layout/_partials/header/brand.njk","hash":"dd9c4c03e99dfde0dfb8edefcb2c933f2f560efc","modified":1677807183700},{"_id":"themes/next/layout/_partials/header/index.njk","hash":"650de421a8ce4cf685428ffbe0087ff84cbd1356","modified":1677807183710},{"_id":"themes/next/layout/_partials/header/menu-item.njk","hash":"41a8b0cc16f60fa085cb719d07216d86b6bc4bf8","modified":1677807184230},{"_id":"themes/next/layout/_partials/header/menu.njk","hash":"ee6fc2f111572d3eeab0a2fecbb2d6b3e37ab26b","modified":1677807184230},{"_id":"themes/next/layout/_partials/header/sub-menu.njk","hash":"06480d8ec5f0b87eafd47f082f07968d7282dd5c","modified":1677807184230},{"_id":"themes/next/layout/_partials/page/breadcrumb.njk","hash":"89825e75cc45e9709fa6ba89883669eedaff6f46","modified":1677807184230},{"_id":"themes/next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1677807184230},{"_id":"themes/next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1677807184230},{"_id":"themes/next/layout/_partials/page/schedule.njk","hash":"0f4bc8e257da60f77c0c1738607b2bde55810684","modified":1677807184230},{"_id":"themes/next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1677807184240},{"_id":"themes/next/layout/_partials/post/post-copyright.njk","hash":"133942922e34abae9e4de7ea5591d77c0caa4b37","modified":1677807184240},{"_id":"themes/next/layout/_partials/post/post-followme.njk","hash":"c1e33b4889f75acc490af3c8bde0ec56c518ff41","modified":1677807184240},{"_id":"themes/next/layout/_partials/post/post-meta.njk","hash":"9fa47e4fb342811da590ee4adc91cf81118c0a39","modified":1677807184240},{"_id":"themes/next/layout/_partials/post/post-related.njk","hash":"e0986db00a0201dd3c60570f964829c84ba5bc68","modified":1677807184240},{"_id":"themes/next/layout/_partials/post/post-reward.njk","hash":"e8b8a7c41e9ec612d0c0c73419529d55d1c16256","modified":1677807184240},{"_id":"themes/next/layout/_partials/post/post-share.njk","hash":"3f28cc4411c0ffc0e41b7970d5ab329c7e46f497","modified":1677807184240},{"_id":"themes/next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":1677807184240},{"_id":"themes/next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":1677807184250},{"_id":"themes/next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":1677807184250},{"_id":"themes/next/layout/_partials/sidebar/site-overview.njk","hash":"70342218473a6e6aa9148de06bfffe121afb8548","modified":1677807184250},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1677807184250},{"_id":"themes/next/layout/_third-party/analytics/cloudflare.njk","hash":"a5b8297c2c383124dd6a56e256ecc0c0dcf489be","modified":1677807184250},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1677807184250},{"_id":"themes/next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1677807184260},{"_id":"themes/next/layout/_third-party/analytics/index.njk","hash":"f900306497b133e8b098bd9f4b96b93d1d96c185","modified":1677807184260},{"_id":"themes/next/layout/_third-party/analytics/matomo.njk","hash":"4e89648a8ec8194c5823064cbca39c938a799006","modified":1677807184260},{"_id":"themes/next/layout/post.njk","hash":"0bfce9f133f501a9a4837257e3b862b3bbca15be","modified":1677807184290},{"_id":"themes/next/layout/_third-party/analytics/plausible.njk","hash":"ef9f2bb7110507f1c4336800af9157d5fa9765bd","modified":1677807184260},{"_id":"themes/next/layout/_third-party/analytics/umami.njk","hash":"181f69b6718c7a8642a88652260cc0a26084a3ee","modified":1677807184260},{"_id":"themes/next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1677807184260},{"_id":"themes/next/layout/_third-party/chat/gitter.njk","hash":"f8cc14b7aa949999a1faaeb7855e2f20b59a386d","modified":1677807184260},{"_id":"themes/next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1677807184260},{"_id":"themes/next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1677807184260},{"_id":"themes/next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1677807184260},{"_id":"themes/next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1677807184270},{"_id":"themes/next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1677807184270},{"_id":"themes/next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1677807184270},{"_id":"themes/next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1677807184270},{"_id":"themes/next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1677807184270},{"_id":"themes/next/layout/_third-party/math/katex.njk","hash":"1ebf658690468ea197bdd0416eb7cfa4bd0b083a","modified":1677807184270},{"_id":"themes/next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1677807184270},{"_id":"themes/next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1677807184270},{"_id":"themes/next/layout/_third-party/search/algolia-search.njk","hash":"24ed76e0c72a25ac152820c750a05826a706b6f4","modified":1677807184280},{"_id":"themes/next/layout/_third-party/search/localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":1677807184280},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1677807184280},{"_id":"themes/next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1677807184280},{"_id":"themes/next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1677807184280},{"_id":"themes/next/scripts/events/lib/config.js","hash":"9ec51eb61f7fee612ffc5252f489003a0fa301fc","modified":1677807184290},{"_id":"themes/next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":1677807184290},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1677807184290},{"_id":"themes/next/scripts/events/lib/navigation.js","hash":"dd3562686d95a50375e6fd32e717ccb0d99c1e3d","modified":1677807184290},{"_id":"themes/next/scripts/events/lib/utils.js","hash":"ec996d0673f766167c86df0966e9da1ae036e103","modified":1677807184290},{"_id":"themes/next/scripts/events/lib/vendors.js","hash":"64e4024376b51fe81be7ad80235abdf0a83853bd","modified":1677807184300},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"5798cfc8f63665031dd3e01debed051628cec319","modified":1677807184300},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"19a402a225c31edffc50f202a14e0d582d3db23e","modified":1677807184300},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1677807184300},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1677807184300},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"a600a98e7436edeb31e291abca359885567df3c9","modified":1677807184300},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1677807184300},{"_id":"themes/next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1677807184300},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1677807184300},{"_id":"themes/next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1677807184300},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1677807184280},{"_id":"themes/next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1677807184280},{"_id":"themes/next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1677807184280},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1677807184390},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a1418c9dc8c0f1a0ad4ded0f4627c45bf0db1a10","modified":1677807184390},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":1677807184390},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"48f4f277946a168d0db1ea02804e85c22ca2c7db","modified":1677807184390},{"_id":"themes/next/source/css/_variables/base.styl","hash":"9845209c54174a42cbff5b5efd5e2e2fb7e60589","modified":1677807184390},{"_id":"themes/next/source/js/schemes/muse.js","hash":"0c490e9ba82efbb8bdf8465e6b537fafd51e1ed7","modified":1677807184410},{"_id":"themes/next/source/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1677807184420},{"_id":"themes/next/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1677807184420},{"_id":"themes/next/source/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1677807184420},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"7664491542046df9a3887cf40a06e00c0b4086a9","modified":1677807184330},{"_id":"themes/next/source/css/_common/components/index.styl","hash":"2298e521253b3bf376a2412271bc2a7d305051f3","modified":1677807184330},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"90a86045a33c1bae49fc2f6fa1e1b53170c7f77b","modified":1677807184340},{"_id":"themes/next/source/css/_common/outline/index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":1677807184350},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"64775c729512b30b144ab5ae9dc4a4dfd4e13f35","modified":1677807184350},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"d0a7c99095f490b0d2ed6b1be43d435960798cec","modified":1677807184360},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1677807184360},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1677807184360},{"_id":"themes/next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1677807184360},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1677807184360},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"f4228c759db4a650c8d38745c2edd1dc83c45687","modified":1677807184360},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1677807184360},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"782ee1fc5e669d3ddbfeb82b73ad7fe561f1a4fb","modified":1677807184380},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"9dfe853c901bdc52fc950bacdf15484dbb9bf140","modified":1677807184380},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"77b85d4de5ab747e04008ab31200311b29748740","modified":1677807184380},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"fa4fd8f76464e214fb7318f325b13c2b62f4b478","modified":1677807184380},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"485d23ccb42c0d0c8ead7ea8930dd3e06d79a285","modified":1677807184380},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"fb550935d374e0bdf1097fce187337dc05cad3e1","modified":1677807184380},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1677807184380},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"d856127cd7e0a28a88edf0b2eb860ede9c3fdb60","modified":1677807184380},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"7fecfb76420f786d6bf60218a81705bb48fb1d18","modified":1677807184380},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"b7f48be3c43bfa393d62142544a5487a67871713","modified":1677807184380},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"cef9c5f9524fd01b59b0a89e51904b42cbdedc8c","modified":1677807184380},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1677807184380},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1677807184380},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"ac2dc0ce9c775a83ef7132ae957b54539366ac9c","modified":1677807184390},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"4266eed6f75625bb30ef0280dc5d4093e7c3beb1","modified":1677807184390},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"72dc825c50357402c342d62ab60fc0c478ab6bc1","modified":1677807184390},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1677807184390},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"91dbf3ca5c3a613d4e30618c120da535bf2d0336","modified":1677807184390},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1677807184390},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1677807184410},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1677807184410},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1677807184410},{"_id":"themes/next/source/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1677807184410},{"_id":"themes/next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1677807184410},{"_id":"themes/next/source/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1677807184410},{"_id":"themes/next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1677807184410},{"_id":"themes/next/source/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1677807184420},{"_id":"themes/next/source/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1677807184420},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1677807184420},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1677807184420},{"_id":"themes/next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1677807184420},{"_id":"themes/next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1677807184420},{"_id":"themes/next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1677807184420},{"_id":"themes/next/source/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1677807184420},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1677807184420},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1677807184420},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","hash":"f27d817b0c2138dd3215b1f46af0753f60a008f3","modified":1677807184430},{"_id":"themes/next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1677807184420},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1677807184420},{"_id":"themes/next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1677807184420},{"_id":"themes/next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1677807184430},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1677807184330},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":1677807184330},{"_id":"themes/next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1677807184330},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1677807184330},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1677807184340},{"_id":"themes/next/source/css/_common/components/post/index.styl","hash":"098d4bd034e986fcf7e443eac4fc2193935461b7","modified":1677807184340},{"_id":"themes/next/source/css/_common/components/post/post-body.styl","hash":"d757768a58743601d0d84158ba955eb15d4c3c01","modified":1677807184340},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"ec37a36e94ba791663607a5022f763915778578f","modified":1677807184340},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1ecfd64507954810b07a9d21fb5305b5378feda0","modified":1677807184340},{"_id":"themes/next/source/css/_common/components/post/post-footer.styl","hash":"11497388f124bfbb4001495a67d3629a9f618405","modified":1677807184340},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1677807184340},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"010c901e4ef49a606f8a350efbf09044e76d2ff3","modified":1677807184340},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1677807184340},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"04cf4a69537fc14d3b8904f965d283356853847f","modified":1677807184340},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"40c9839d3288c3b7de0bf38ac2e18f6c8eba6227","modified":1677807184340},{"_id":"themes/next/source/css/_common/components/third-party/disqusjs.styl","hash":"877a537d5b95beb048142e4fdee6f17e6ef9c7bb","modified":1677807184340},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8f094c4ac17e2ab45569b12d157747f9c7333c12","modified":1677807184340},{"_id":"themes/next/source/css/_common/components/third-party/gitter.styl","hash":"35104dc6883a61c31e0e368dac8ac2f697be62fe","modified":1677807184350},{"_id":"themes/next/source/css/_common/components/third-party/index.styl","hash":"77550e0d3e029b7458e35d8c5ae1fbd612c9673b","modified":1677807184350},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":1677807184350},{"_id":"themes/next/source/css/_common/components/third-party/utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":1677807184350},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"e72799ce3f9b79753e365b2f8c8ef6c310668d4a","modified":1677807184350},{"_id":"themes/next/source/css/_common/outline/footer/index.styl","hash":"0c79462439b1361034a03590cd69a8abb3a678a6","modified":1677807184350},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e74f4bb47a101b014ee2a1783c87f3b87323f9a0","modified":1677807184350},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"38c64c2d04e46848382bfa246a0e9c508294767b","modified":1677807184350},{"_id":"themes/next/source/css/_common/outline/header/index.styl","hash":"6e0d0796ef7fbbb62ffdfb448753a850de82c74f","modified":1677807184350},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"b750af2fb833c10c4313b5a4258237161a7833d7","modified":1677807184350},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"a851e9d5aefcd027c95eeb323860b6da70f202d1","modified":1677807184350},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1677807184350},{"_id":"themes/next/source/css/_common/outline/sidebar/index.styl","hash":"da5e88f8debd5ac8d7af5c6ba6240df66104955f","modified":1677807184350},{"_id":"themes/next/source/css/_common/outline/sidebar/related-posts.styl","hash":"b05908f04ef95f2d91e6eba89b12411c378d050f","modified":1677807184350},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"52fc98b1435129eb3edb9293ced9e507741f1350","modified":1677807184360},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1677807184360},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"c6a27beb3f741211a14576026f3b4cfc44cc6407","modified":1677807184360},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"b926e368f702f8686aaa2eb98d3d2e533418958c","modified":1677807184360},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"f3506fd0c0303ea365de1c7774d98a1a3f3027cf","modified":1677807184360},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"021a37cf178440cc341940a299d3bca359996c6b","modified":1677807184360},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"9a7c71560fbdc936ad4e736fe15063ea3e8a644b","modified":1677807184360},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":1677807184360},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"670fc109b56a010b166b86b616823a1aae97a738","modified":1677807184360},{"_id":"themes/next/source/css/_common/scaffolding/highlight/index.styl","hash":"9056be572ec1cfa429abb22be4b45a662d5b0fb1","modified":1677807184360},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":1677807184370},{"_id":"themes/next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"9dc00fcb0a05899f048eace9f9160b78956655d5","modified":1677807184260},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1677807184370},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1677807184370},{"_id":"themes/next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7f8a7345e6537a62cd9e9a94c8f7065b541d9b04","modified":1677807184370},{"_id":"themes/next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":1677807184370},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"98d4c20aff0f0fcfe1824017fb06ab21ef0d218e","modified":1677807184370},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b6654a1d7cf82577d8263faffee8af3ad4a5c0e8","modified":1677807184370},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"7a39bcce7274284e87388743db62afc847fe6897","modified":1677807184370},{"_id":"source/_posts/手机/Windows和iOS文件共享/icloud-server-share.jpg","hash":"629d9df2b72f3a4dd54c487f5db94756660d9da1","modified":1677807183390},{"_id":"themes/next/source/css/_common/scaffolding/tags/index.styl","hash":"3f76c73a891bbc10679753e702feba9e8a5ffdd2","modified":1677807184370},{"_id":"source/_posts/智能家居/Home_Assistant的定位功能/2021-10-25160029.png","hash":"29bc7e10f39e5890c365fb6cfbcce75a0d1f9dce","modified":1678090857000},{"_id":"source/_posts/手机/Windows和iOS备忘录/mainaccount01.png","hash":"3493ec9deaecfd4e5dec4c14ead9d589a1e5a4c2","modified":1678170323000},{"_id":"source/_posts/手机/Windows和iOS密码管理器/2021-10-03092027.png","hash":"f5249a6bad90df4d6a9939fd3505b6c6d30f2d6a","modified":1678170557000},{"_id":"source/_posts/手机/Windows和iOS密码管理器/2021-10-03092028.png","hash":"7dec86b8a5a2f77ea9b42c6adbce0d163db4f6fe","modified":1678170557000},{"_id":"source/_posts/手机/Windows和iOS密码管理器/2021-10-03092031.png","hash":"09d27ed4b10830b19f57cfb11d478641f03e7d36","modified":1678170557000},{"_id":"source/_posts/blog/发布博客时调整图片的大小/3C1EC821-5DCC-4853-849C-ADB69AE6B0D4_1_105_c.jpeg","hash":"3ccb2dfdbc8f7f88b502f9ace6afe6baccf24a24","modified":1677807183330},{"_id":"source/_posts/手机/Windows和iOS文件共享/icloud-onedrive.jpg","hash":"157cd150048de19d28aac4879715da6c51a3ced3","modified":1677807183410},{"_id":"themes/next/source/.DS_Store","hash":"7be5ea1bb668dede5079db375fa78508caa66daa","modified":1677807184320},{"_id":"themes/next/source/images/avatar.png","hash":"cd39bbcdda4adbe04725900a883e2b02130897e5","modified":1677807184400},{"_id":"themes/next/layout/tag.njk","hash":"9e16ba20c28a7f2c6bc75aa427f48122301a30aa","modified":1677807184290},{"_id":"source/_posts/杂七杂八/Windows-Terminal如何从Vim中复制内容/Pastedimage20230227152428.png","hash":"aca8cd4fee1ae9a061116e953dddae0ff928f67b","modified":1677807183380},{"_id":"source/_posts/手机/Windows和iOS密码管理器/2021-10-03092026.png","hash":"240505cbc68f07e13fb994b4cacd8207cba42dfd","modified":1678170557000},{"_id":"source/_posts/blog/博客主题/20210915_064223000_iOS.jpg","hash":"e7f51e250bea8eebbef837efcaa31894e070c26a","modified":1677807183310},{"_id":"source/_posts/中医/尝试用二至丸治疗白发/image202302221900211.png","hash":"9b4ea4167c269719d8c4e106b150b52bdd8f9f34","modified":1677807183440},{"_id":"source/_posts/智能家居/Home_Assistant_客户端配置/2021-10-20094439.png","hash":"c4838a99caac72bcc85161bd58749af6000c24c3","modified":1678090245000},{"_id":"source/_posts/智能家居/iRobot扫地机器人使用体验/DDAD7481-A2AC-4BAB-8F1B-FA12B3E4D0B0_1_201_a.jpeg","hash":"a8f3c40360216f8de3ed8ad0b184a5005e3c8b81","modified":1677807183640},{"_id":"source/_posts/智能家居/物联网智能小电视/20211101_102902238_iOS.jpg","hash":"058f66b662713c9390b46c4cac3d24c9a6226108","modified":1678088482000},{"_id":"source/_posts/智能家居/Home_Assistant监控Web服务器/20211023_092850000_iOS.png","hash":"2d2803f0fa8b9141a1df76d934678f1daf721af4","modified":1678090736000},{"_id":"source/_posts/智能家居/物联网智能小电视/20211030_014042417_iOS.jpg","hash":"cb19a03a25ee49530aa5a9c6cbb49a15784d92d9","modified":1678088482000},{"_id":"source/_posts/中医/尝试用二至丸治疗白发/E03DCBDD-6B51-46B6-B7DD-18C6C3FD86C1_1_201_a.jpeg","hash":"0d2914f3fead3d0f696b2b00240afd1d62b6a257","modified":1677807183610},{"_id":"source/_posts/智能家居/Home_Assistant_客户端配置/20211020_023853000_iOS.png","hash":"d21ddd52bd552206f949e5ac7f867b9af862949a","modified":1678090245000},{"_id":"source/_posts/智能家居/ESP32点亮TFT屏幕/20211026_072012179_iOS.jpg","hash":"b0aec070a7ac7626916129689c4b1d35aae1e027","modified":1678088696000},{"_id":"source/_posts/智能家居/ESP32点亮TFT屏幕/20211024_091435141_iOS.jpg","hash":"087ace0437a514b9d4ba72107e6c4d2eeb8544f0","modified":1678088696000},{"_id":"source/_posts/中医/尝试用二至丸治疗白发/8ED26B4B-76B8-446F-8CF4-D6DF1F55DF4F_1_201_a.jpeg","hash":"1543316fef4850f85f721b3f4b43caebfa74c0a0","modified":1677807183500},{"_id":"source/_posts/智能家居/ESP32写入MicroPython固件/20211023_013244373_iOS.jpg","hash":"01bdc85b0715021175fd2c3e598ca7d6fa751f04","modified":1678088964000},{"_id":"source/_posts/中医/尝试用二至丸治疗白发/91C9F6E9-784C-4640-86D5-491AA2F66858_1_201_a.jpeg","hash":"16bf212644110ee25f64e7dd7b8e576c5a7b2bf6","modified":1677807183570},{"_id":"source/_posts/智能家居/Home_Assistant_客户端配置/20211023_013244373_iOS.png","hash":"2bc79a8a6cfc9d30862ce6404285d9acb8700549","modified":1678090245000},{"_id":"source/_posts/手机/._Windows和iOS备忘录.md","hash":"03237e378f131021b73f47743091d3e5c241309f","modified":1678170998821},{"_id":"source/_posts/手机/._Windows和iOS密码管理器.md","hash":"bdf20c2bb2e4434a2a176e183c1462c17687a8d0","modified":1678170999425},{"_id":"source/_posts/智能家居/._SSH远程连接.md","hash":"dbc40a16027a378f0fec97813eff9903157ba528","modified":1678170862097},{"_id":"source/_posts/blog/._我的博客.md","hash":"90175237fe62396d9036eae221fc94b0fd0e3224","modified":1678173706279},{"_id":"source/_posts/智能家居/._什么是IFTTT","hash":"0992c9bc3ab81bdfe0182ee3895c2fa4a950cc2e","modified":1678173428901},{"_id":"source/_posts/智能家居/._什么是IFTTT.md","hash":"046d1194e64ce6d107f11bf45d4149c5d8991967","modified":1678173607331},{"_id":"source/_posts/智能家居/._华硕路由器VPN功能","hash":"a651c22c97837aeced4e213ef3dd9e7748c34970","modified":1678173428189},{"_id":"source/_posts/智能家居/._华硕路由器VPN功能.md","hash":"3d3d210a64bd1b08935bcc8d4f4c4a9f0cb4b373","modified":1678173979337},{"_id":"source/_posts/智能家居/什么是IFTTT.md","hash":"44f65364bf67ab4218802eca9e390060885299f6","modified":1678173607209},{"_id":"source/_posts/智能家居/华硕路由器VPN功能.md","hash":"3e93b076072ead9add4fa84cda2507ad5cba778f","modified":1678173979197},{"_id":"source/_posts/智能家居/什么是IFTTT/2021-10-25121610.png","hash":"093c8f23240e021e5ec85eb1c1b4bd482382a6b1","modified":1678172035000},{"_id":"source/_posts/智能家居/什么是IFTTT/2021-10-25121641.png","hash":"db9a0f6f6e0e96f0519d81b7ac1f4f43b3ea806c","modified":1678172035000},{"_id":"source/_posts/智能家居/什么是IFTTT/2021-10-25121709.png","hash":"53c87963fc18aca3dd863535bbcc499076953c38","modified":1678172035000},{"_id":"source/_posts/智能家居/什么是IFTTT/2021-10-25121731.png","hash":"561448f9e69e1d9d4b477edb5e5dad4c25018c39","modified":1678172035000},{"_id":"source/_posts/智能家居/华硕路由器VPN功能/IMG_3185.png","hash":"800c5889fdaf464edb8bf5187586174e1b806124","modified":1678172600000},{"_id":"source/_posts/智能家居/华硕路由器VPN功能/IMG_3186.png","hash":"0148bfe0701c8b8554d031f6abcc435fcff26fd9","modified":1678172600000},{"_id":"source/_posts/智能家居/华硕路由器VPN功能/IMG_3190.png","hash":"848bd0814d7292d1d85f0f516b06e6c4f3042cb2","modified":1678172600000},{"_id":"source/_posts/智能家居/华硕路由器VPN功能/IMG_3191.png","hash":"67c5830035b6755fc5a4e9a8a6b4fa23dc164653","modified":1678172600000},{"_id":"source/_posts/智能家居/华硕路由器VPN功能/IMG_3192.png","hash":"821a9f7c83c8b1e7c189d8d6467c09a4b7da3159","modified":1678172600000},{"_id":"source/_posts/智能家居/什么是IFTTT/2021-10-25120949.png","hash":"c1db0dcb4f3acf46fed16829263fb1eba4174165","modified":1678172035000},{"_id":"source/_posts/智能家居/什么是IFTTT/2021-10-25121115.png","hash":"75733c39599b167b63b390a35425bd92656104c5","modified":1678172035000},{"_id":"source/_posts/智能家居/什么是IFTTT/2021-10-25121856.png","hash":"f2c0dd14922539e2eafa409373e3f45a7468953b","modified":1678172035000},{"_id":"source/_posts/智能家居/什么是IFTTT/2021-10-25123945.png","hash":"84156c8878eb932cae0325684bcd3b274a0a314d","modified":1678172035000},{"_id":"source/_posts/智能家居/华硕路由器VPN功能/IMG_3188.png","hash":"79a6533aecb60ed4d5b3746d615b1ebb4754f89f","modified":1678172600000},{"_id":"source/_posts/智能家居/华硕路由器VPN功能/IMG_3189.png","hash":"86516c10f832bf0cc48e627e3833f7bb6c2efb42","modified":1678172600000},{"_id":"source/_posts/智能家居/华硕路由器VPN功能/IMG_3193.png","hash":"11513ba661a658fb0f067bfe0b2fd501c0616378","modified":1678172600000},{"_id":"source/_posts/智能家居/什么是IFTTT/2021-10-25121340.png","hash":"33d4a1179b7b86820f385ec502fa8bd56bb388dc","modified":1678172035000},{"_id":"source/_posts/blog/我的博客/20230307150931.png","hash":"00a24b6bf00a09655eadc3d40d92d24d0277ec35","modified":1678172971000},{"_id":"source/_posts/智能家居/什么是IFTTT/2021-10-25122357.png","hash":"319c73ead47e9e15d0256c37afcd67f87d082c4f","modified":1678172035000},{"_id":"source/_posts/智能家居/华硕路由器VPN功能/IMG_3187.png","hash":"a529f915267bb1e4c68b939793f22b5af7cfc439","modified":1678172600000},{"_id":"source/_posts/智能家居/华硕路由器VPN功能/2021-10-02094926.jpg","hash":"8793dc65d31ec39aff2636ebc3ad37dfbf9a4e43","modified":1678172600000},{"_id":"source/_posts/智能家居/._华硕路由器VPN功能~.md","hash":"99a33ebbf28c1e92eb9af15b40f4d631e73fae05","modified":1678173960643}],"Category":[{"name":"Blog","_id":"clexvkk5200045i73aq27btd7"},{"name":"手机","_id":"clexvkk6w000y5i735arl9znt"},{"name":"智能家居","_id":"clexvkk7s001m5i73b0v4a4xw"},{"name":"Python","_id":"clexvkk9v002r5i733hx3ddei"},{"name":"杂七杂八","_id":"clexvkkaf003f5i730mio0u6h"},{"name":"中医","_id":"clexvkkal003n5i73hwguby8e"}],"Data":[],"Page":[{"title":"categories","date":"2022-02-25T04:18:38.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2022-02-25 12:18:38\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2023-03-03T01:33:03.650Z","path":"categories/index.html","comments":1,"_id":"clexvkk4c00005i73ele1b4g1","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2022-02-25T04:18:27.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-02-25 12:18:27\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2023-03-03T01:33:03.640Z","path":"tags/index.html","comments":1,"_id":"clexvkk4u00025i732erhdc9s","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Pelican小贴士","date":"2021-09-20T08:21:00.000Z","_content":"\n## 如何修改每篇博文的作者、分类、日期等信息\n\n修改文件`article_infos.html`，文件位置：`~/blog/venv/lib/python3.7/site-packages/pelican/themes/notmyidea/templates`\n\n以下内容中，已将`author`和`category`的相关代码注释，所以博文中将不会出现作者和分类的信息。\n\n```html\n<footer class=\"post-info\">\n        <abbr class=\"published\" title=\"{{ article.date.isoformat() }}\">\n                日期: {{ article.locale_date }}\n        </abbr>\n        {% if article.modified %}\n        <!--            <br /> -->\n        <abbr class=\"modified\" title=\"{{ article.modified.isoformat() }}\">\n                更新: {{ article.locale_modified }}\n        </abbr>\n        {% endif %}\n\n<!--        {% if article.authors %}\n        <address class=\"vcard author\">\n                作者: {% for author in article.authors %}\n                        <a class=\"url fn\" href=\"{{ SITEURL }}/{{ author.url }}\">{{ author }}</a>\n                {% endfor %}\n        </address>\n        {% endif %}\n        <p>分类: <a href=\"{{ SITEURL }}/{{ article.category.url }}\">{{ article.category }}</a>.</p> -->\n{% include 'taglist.html' %}\n{% import 'translations.html' as translations with context %}\n{{ translations.translations_for(article) }}\n</footer><!-- /.post-info -->\n```\n\n修改文件`main.css`，找到`.post-info`，修改以下内容后，字体大小和颜色，以及位置都会发生变化。\n\n```css\n.post-info {\n    font-size:0.5em;\n    color:#808080;\n    float:top;\n    margin:0;\n    padding:0;\n}\n```\n\n<!-- more -->\n\n***\n\n## 如何修改或者删除网页的脚注(Footer)\n\n修改文件`base.html`，如果要删除脚注，只需要注释(`<!-- ... -->`)以下代码。\n\n```HTML\n<!-- <footer id=\"contentinfo\" class=\"body\">\n                <address id=\"about\" class=\"vcard body\">\n                Proudly powered by <a href=\"https://getpelican.com/\">Pelican</a>, which takes great advantage of <a href=\"https://www.python.org/\">Python</a>.\n                </address>\n\n                <p>The theme is by <a href=\"https://www.smashingmagazine.com/2009/08/designing-a-html-5-layout-from-scratch/\">Smashing Magazine</a>, thanks!</p>\n        </footer> --> <!-- /#contentinfo -->\n```\n\n\n\n***\n\n## 如何修改导航栏的颜色和超链接的文字颜色\n\n将导航栏的颜色修改为蓝色，可以修改`main.css`文件，找到`#banner nav`，然后将`background`设置为`#5faee3`。\n\n```CSS\n#banner nav {\n                background: #5faee3;\n                font-size: 1.143em;\n                height: 40px;\n                ...\n}\n```\n\n将超链接文字的颜色修改为蓝色，可以修改`main.css`文件，找到`a:link, a:visited`，然后将`color`设置为`#5faee3`。\n\n```css\na:link, a:visited {\n        color: #5faee3;\n        padding: 0 1px;\n        text-decoration: underline;\n}\n```\n\n\n\n## 如何让图片自动适应页面的宽度\n\n以前，每次用手机拍摄的高分辨率图片插入博文后，图片都会以原始大小的长宽显示，导致无法在网页正常显示图片。\n\n通过修改主题的`main.css`文件，并增加以下内容后，可以解决该问题。该方案使用的技术仍然是CSS响应式设计。\n\n```css\nimg {\n    max-width: 100%;\n    height: auto;\n}\n```\n\n**[参考资料]**\n\n[响应式网页设计 - 图像 (w3school.com.cn)](https://www.w3school.com.cn/css/css_rwd_images.asp)\n\n***\n\n## 如何适应手机的屏幕\n\n博客的默认主题notmyidear并不能够自动适应手机屏幕的大小，也就是自动根据屏幕调整字体和图片的大小。\n\n通过查询相关资料，了解到了CSS响应式设计，即网页可以根据电脑、平板和手机的尺寸变化，自动调整大小、内容布局等。\n\n首先，需要修改文件`base.html`，文件位置`~/blog/venv/lib/python3.7/site-packages/pelican/themes/notmyidea/templates`。在文件中，需要添加内容：`<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">`。\n\n```html\n<head>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        {% block head %}\n        <meta charset=\"utf-8\" />\n        <meta name=\"generator\" content=\"Pelican\" />\n        ...\n</head>\n```\n\n然后，修改主题的`main.css`文件，并增加以下内容后，移动设备的宽度为760px或以下，则会自动适配该CSS的定义。\n\n```css\n/*\n For mobile devices\n ***********************/\n\n@media only screen and (max-width: 768px) {\n\n  #content {\n    width: 86%;\n    font-size: 108%;\n  }\t\t\t\t\t\t\t\t\t//博客首页\n  #featured {\n    width: 86%;\n    font-size: 108%;\n  }\t\t\t\t\t\t\t\t\t//博客背景\n  #banner nav {\n    width: 95%;\n    font-size: 70%;\n  }\t\t\t\t\t\t\t\t\t//导航条\n  #extras {\n    width: 86%;\n  }\t\t\t\t\t\t\t\t    //其它博客\n  .body {\n    width: 100%;\n  }\t\t\t\t\t\t\t\t\t//单篇博客的内容\n}\n```\n\n**[参考资料]**\n\n[响应式网页设计 - 简介 (w3school.com.cn)](https://www.w3school.com.cn/css/css_rwd_intro.asp)\n\n***\n\n## 如何修改博客标题的字体类型\n\n通过修改主题的`main.css`文件，设置需要的字体类型。例如，微软雅黑。\n\n```bash\ncd ~/blog/venv/lib/python3.7/site-packages/pelican/themes/notmyidea/static/css\nvi main.css\n```\n\n打开main.css以后，查找关键字**font-family**，然后找到h1, h2, h3, h4, h5, h6的位置，添加**'Microsoft YaHei'**。\n\n```css\nh1, h2, h3, h4, h5, h6 {\n        font-weight: 400;\n        line-height: 1.1;\n        margin-bottom: .8em;\n    font-family: 'Microsoft YaHei', 'Yanone Kaffeesatz', arial, serif;\n}\n```\n\n***\n\n## 如何为文章创建目录大纲\n\n修改Pelican配置文件`pelicanconf.py`，在配置文件中添加以下内容：\n\n```python\n# Support for Markdown Toc\nMARKDOWN = {\n    \"extension_configs\": {\n        # Needed for code syntax highlighting\n        \"markdown.extensions.codehilite\": {\"css_class\": \"highlight\"},\n        \"markdown.extensions.extra\": {},\n        \"markdown.extensions.meta\": {},\n        # This is for enabling the TOC generation\n        \"markdown.extensions.toc\": {\"title\": \"目录\"},\n    },\n    \"output_format\": \"html5\",\n}\n```\n\n[参考资料]\n\n- [Add a Table of Contents using Markdown in Pelican (cloudbytes.dev)](https://cloudbytes.dev/articles/add-a-table-of-contents-using-markdown-in-pelican)\n\n","source":"_posts/blog/Pelican小贴士.md","raw":"---\ntitle: Pelican小贴士\ndate: 2021-9-20 16:21:00\ntags: \n - pelican\ncategories: \n - Blog\n---\n\n## 如何修改每篇博文的作者、分类、日期等信息\n\n修改文件`article_infos.html`，文件位置：`~/blog/venv/lib/python3.7/site-packages/pelican/themes/notmyidea/templates`\n\n以下内容中，已将`author`和`category`的相关代码注释，所以博文中将不会出现作者和分类的信息。\n\n```html\n<footer class=\"post-info\">\n        <abbr class=\"published\" title=\"{{ article.date.isoformat() }}\">\n                日期: {{ article.locale_date }}\n        </abbr>\n        {% if article.modified %}\n        <!--            <br /> -->\n        <abbr class=\"modified\" title=\"{{ article.modified.isoformat() }}\">\n                更新: {{ article.locale_modified }}\n        </abbr>\n        {% endif %}\n\n<!--        {% if article.authors %}\n        <address class=\"vcard author\">\n                作者: {% for author in article.authors %}\n                        <a class=\"url fn\" href=\"{{ SITEURL }}/{{ author.url }}\">{{ author }}</a>\n                {% endfor %}\n        </address>\n        {% endif %}\n        <p>分类: <a href=\"{{ SITEURL }}/{{ article.category.url }}\">{{ article.category }}</a>.</p> -->\n{% include 'taglist.html' %}\n{% import 'translations.html' as translations with context %}\n{{ translations.translations_for(article) }}\n</footer><!-- /.post-info -->\n```\n\n修改文件`main.css`，找到`.post-info`，修改以下内容后，字体大小和颜色，以及位置都会发生变化。\n\n```css\n.post-info {\n    font-size:0.5em;\n    color:#808080;\n    float:top;\n    margin:0;\n    padding:0;\n}\n```\n\n<!-- more -->\n\n***\n\n## 如何修改或者删除网页的脚注(Footer)\n\n修改文件`base.html`，如果要删除脚注，只需要注释(`<!-- ... -->`)以下代码。\n\n```HTML\n<!-- <footer id=\"contentinfo\" class=\"body\">\n                <address id=\"about\" class=\"vcard body\">\n                Proudly powered by <a href=\"https://getpelican.com/\">Pelican</a>, which takes great advantage of <a href=\"https://www.python.org/\">Python</a>.\n                </address>\n\n                <p>The theme is by <a href=\"https://www.smashingmagazine.com/2009/08/designing-a-html-5-layout-from-scratch/\">Smashing Magazine</a>, thanks!</p>\n        </footer> --> <!-- /#contentinfo -->\n```\n\n\n\n***\n\n## 如何修改导航栏的颜色和超链接的文字颜色\n\n将导航栏的颜色修改为蓝色，可以修改`main.css`文件，找到`#banner nav`，然后将`background`设置为`#5faee3`。\n\n```CSS\n#banner nav {\n                background: #5faee3;\n                font-size: 1.143em;\n                height: 40px;\n                ...\n}\n```\n\n将超链接文字的颜色修改为蓝色，可以修改`main.css`文件，找到`a:link, a:visited`，然后将`color`设置为`#5faee3`。\n\n```css\na:link, a:visited {\n        color: #5faee3;\n        padding: 0 1px;\n        text-decoration: underline;\n}\n```\n\n\n\n## 如何让图片自动适应页面的宽度\n\n以前，每次用手机拍摄的高分辨率图片插入博文后，图片都会以原始大小的长宽显示，导致无法在网页正常显示图片。\n\n通过修改主题的`main.css`文件，并增加以下内容后，可以解决该问题。该方案使用的技术仍然是CSS响应式设计。\n\n```css\nimg {\n    max-width: 100%;\n    height: auto;\n}\n```\n\n**[参考资料]**\n\n[响应式网页设计 - 图像 (w3school.com.cn)](https://www.w3school.com.cn/css/css_rwd_images.asp)\n\n***\n\n## 如何适应手机的屏幕\n\n博客的默认主题notmyidear并不能够自动适应手机屏幕的大小，也就是自动根据屏幕调整字体和图片的大小。\n\n通过查询相关资料，了解到了CSS响应式设计，即网页可以根据电脑、平板和手机的尺寸变化，自动调整大小、内容布局等。\n\n首先，需要修改文件`base.html`，文件位置`~/blog/venv/lib/python3.7/site-packages/pelican/themes/notmyidea/templates`。在文件中，需要添加内容：`<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">`。\n\n```html\n<head>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        {% block head %}\n        <meta charset=\"utf-8\" />\n        <meta name=\"generator\" content=\"Pelican\" />\n        ...\n</head>\n```\n\n然后，修改主题的`main.css`文件，并增加以下内容后，移动设备的宽度为760px或以下，则会自动适配该CSS的定义。\n\n```css\n/*\n For mobile devices\n ***********************/\n\n@media only screen and (max-width: 768px) {\n\n  #content {\n    width: 86%;\n    font-size: 108%;\n  }\t\t\t\t\t\t\t\t\t//博客首页\n  #featured {\n    width: 86%;\n    font-size: 108%;\n  }\t\t\t\t\t\t\t\t\t//博客背景\n  #banner nav {\n    width: 95%;\n    font-size: 70%;\n  }\t\t\t\t\t\t\t\t\t//导航条\n  #extras {\n    width: 86%;\n  }\t\t\t\t\t\t\t\t    //其它博客\n  .body {\n    width: 100%;\n  }\t\t\t\t\t\t\t\t\t//单篇博客的内容\n}\n```\n\n**[参考资料]**\n\n[响应式网页设计 - 简介 (w3school.com.cn)](https://www.w3school.com.cn/css/css_rwd_intro.asp)\n\n***\n\n## 如何修改博客标题的字体类型\n\n通过修改主题的`main.css`文件，设置需要的字体类型。例如，微软雅黑。\n\n```bash\ncd ~/blog/venv/lib/python3.7/site-packages/pelican/themes/notmyidea/static/css\nvi main.css\n```\n\n打开main.css以后，查找关键字**font-family**，然后找到h1, h2, h3, h4, h5, h6的位置，添加**'Microsoft YaHei'**。\n\n```css\nh1, h2, h3, h4, h5, h6 {\n        font-weight: 400;\n        line-height: 1.1;\n        margin-bottom: .8em;\n    font-family: 'Microsoft YaHei', 'Yanone Kaffeesatz', arial, serif;\n}\n```\n\n***\n\n## 如何为文章创建目录大纲\n\n修改Pelican配置文件`pelicanconf.py`，在配置文件中添加以下内容：\n\n```python\n# Support for Markdown Toc\nMARKDOWN = {\n    \"extension_configs\": {\n        # Needed for code syntax highlighting\n        \"markdown.extensions.codehilite\": {\"css_class\": \"highlight\"},\n        \"markdown.extensions.extra\": {},\n        \"markdown.extensions.meta\": {},\n        # This is for enabling the TOC generation\n        \"markdown.extensions.toc\": {\"title\": \"目录\"},\n    },\n    \"output_format\": \"html5\",\n}\n```\n\n[参考资料]\n\n- [Add a Table of Contents using Markdown in Pelican (cloudbytes.dev)](https://cloudbytes.dev/articles/add-a-table-of-contents-using-markdown-in-pelican)\n\n","slug":"blog/Pelican小贴士","published":1,"updated":"2023-03-03T01:33:03.320Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clexvkk4h00015i7300k30q5i","content":"<h2 id=\"如何修改每篇博文的作者、分类、日期等信息\"><a href=\"#如何修改每篇博文的作者、分类、日期等信息\" class=\"headerlink\" title=\"如何修改每篇博文的作者、分类、日期等信息\"></a>如何修改每篇博文的作者、分类、日期等信息</h2><p>修改文件<code>article_infos.html</code>，文件位置：<code>~/blog/venv/lib/python3.7/site-packages/pelican/themes/notmyidea/templates</code></p>\n<p>以下内容中，已将<code>author</code>和<code>category</code>的相关代码注释，所以博文中将不会出现作者和分类的信息。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>footer</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>post-info<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>abbr</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>published<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&#123;&#123; article.date.isoformat() &#125;&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n                日期: &#123;&#123; article.locale_date &#125;&#125;\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>abbr</span><span class=\"token punctuation\">></span></span>\n        &#123;% if article.modified %&#125;\n        <span class=\"token comment\">&lt;!--            &lt;br /> --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>abbr</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>modified<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&#123;&#123; article.modified.isoformat() &#125;&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n                更新: &#123;&#123; article.locale_modified &#125;&#125;\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>abbr</span><span class=\"token punctuation\">></span></span>\n        &#123;% endif %&#125;\n\n<span class=\"token comment\">&lt;!--        &#123;% if article.authors %&#125;\n        &lt;address class=\"vcard author\">\n                作者: &#123;% for author in article.authors %&#125;\n                        &lt;a class=\"url fn\" href=\"&#123;&#123; SITEURL &#125;&#125;/&#123;&#123; author.url &#125;&#125;\">&#123;&#123; author &#125;&#125;&lt;/a>\n                &#123;% endfor %&#125;\n        &lt;/address>\n        &#123;% endif %&#125;\n        &lt;p>分类: &lt;a href=\"&#123;&#123; SITEURL &#125;&#125;/&#123;&#123; article.category.url &#125;&#125;\">&#123;&#123; article.category &#125;&#125;&lt;/a>.&lt;/p> --></span>\n&#123;% include 'taglist.html' %&#125;\n&#123;% import 'translations.html' as translations with context %&#125;\n&#123;&#123; translations.translations_for(article) &#125;&#125;\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>footer</span><span class=\"token punctuation\">></span></span><span class=\"token comment\">&lt;!-- /.post-info --></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>修改文件<code>main.css</code>，找到<code>.post-info</code>，修改以下内容后，字体大小和颜色，以及位置都会发生变化。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.post-info</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span>0.5em<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span>#808080<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">float</span><span class=\"token punctuation\">:</span>top<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span>0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span>0<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"如何修改或者删除网页的脚注-Footer\"><a href=\"#如何修改或者删除网页的脚注-Footer\" class=\"headerlink\" title=\"如何修改或者删除网页的脚注(Footer)\"></a>如何修改或者删除网页的脚注(Footer)</h2><p>修改文件<code>base.html</code>，如果要删除脚注，只需要注释(<code>&lt;!-- ... --&gt;</code>)以下代码。</p>\n<pre class=\"line-numbers language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;!-- &lt;footer id&#x3D;&quot;contentinfo&quot; class&#x3D;&quot;body&quot;&gt;\n                &lt;address id&#x3D;&quot;about&quot; class&#x3D;&quot;vcard body&quot;&gt;\n                Proudly powered by &lt;a href&#x3D;&quot;https:&#x2F;&#x2F;getpelican.com&#x2F;&quot;&gt;Pelican&lt;&#x2F;a&gt;, which takes great advantage of &lt;a href&#x3D;&quot;https:&#x2F;&#x2F;www.python.org&#x2F;&quot;&gt;Python&lt;&#x2F;a&gt;.\n                &lt;&#x2F;address&gt;\n\n                &lt;p&gt;The theme is by &lt;a href&#x3D;&quot;https:&#x2F;&#x2F;www.smashingmagazine.com&#x2F;2009&#x2F;08&#x2F;designing-a-html-5-layout-from-scratch&#x2F;&quot;&gt;Smashing Magazine&lt;&#x2F;a&gt;, thanks!&lt;&#x2F;p&gt;\n        &lt;&#x2F;footer&gt; --&gt; &lt;!-- &#x2F;#contentinfo --&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<hr>\n<h2 id=\"如何修改导航栏的颜色和超链接的文字颜色\"><a href=\"#如何修改导航栏的颜色和超链接的文字颜色\" class=\"headerlink\" title=\"如何修改导航栏的颜色和超链接的文字颜色\"></a>如何修改导航栏的颜色和超链接的文字颜色</h2><p>将导航栏的颜色修改为蓝色，可以修改<code>main.css</code>文件，找到<code>#banner nav</code>，然后将<code>background</code>设置为<code>#5faee3</code>。</p>\n<pre class=\"line-numbers language-CSS\" data-language=\"CSS\"><code class=\"language-CSS\">#banner nav &#123;\n                background: #5faee3;\n                font-size: 1.143em;\n                height: 40px;\n                ...\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>将超链接文字的颜色修改为蓝色，可以修改<code>main.css</code>文件，找到<code>a:link, a:visited</code>，然后将<code>color</code>设置为<code>#5faee3</code>。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">a:link, a:visited</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #5faee3<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0 1px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">text-decoration</span><span class=\"token punctuation\">:</span> underline<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"如何让图片自动适应页面的宽度\"><a href=\"#如何让图片自动适应页面的宽度\" class=\"headerlink\" title=\"如何让图片自动适应页面的宽度\"></a>如何让图片自动适应页面的宽度</h2><p>以前，每次用手机拍摄的高分辨率图片插入博文后，图片都会以原始大小的长宽显示，导致无法在网页正常显示图片。</p>\n<p>通过修改主题的<code>main.css</code>文件，并增加以下内容后，可以解决该问题。该方案使用的技术仍然是CSS响应式设计。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">img</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>[参考资料]</strong></p>\n<p><a href=\"https://www.w3school.com.cn/css/css_rwd_images.asp\">响应式网页设计 - 图像 (w3school.com.cn)</a></p>\n<hr>\n<h2 id=\"如何适应手机的屏幕\"><a href=\"#如何适应手机的屏幕\" class=\"headerlink\" title=\"如何适应手机的屏幕\"></a>如何适应手机的屏幕</h2><p>博客的默认主题notmyidear并不能够自动适应手机屏幕的大小，也就是自动根据屏幕调整字体和图片的大小。</p>\n<p>通过查询相关资料，了解到了CSS响应式设计，即网页可以根据电脑、平板和手机的尺寸变化，自动调整大小、内容布局等。</p>\n<p>首先，需要修改文件<code>base.html</code>，文件位置<code>~/blog/venv/lib/python3.7/site-packages/pelican/themes/notmyidea/templates</code>。在文件中，需要添加内容：<code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</code>。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        &#123;% block head %&#125;\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>generator<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Pelican<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n        ...\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然后，修改主题的<code>main.css</code>文件，并增加以下内容后，移动设备的宽度为760px或以下，则会自动适配该CSS的定义。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token comment\">/*\n For mobile devices\n ***********************/</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token keyword\">only</span> screen <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 768px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">&#123;</span>\n\n  <span class=\"token selector\">#content</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 86%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 108%<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\t\t\t\t\t\t\t\t\t<span class=\"token selector\">//博客首页\n  #featured</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 86%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 108%<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\t\t\t\t\t\t\t\t\t<span class=\"token selector\">//博客背景\n  #banner nav</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 95%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 70%<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\t\t\t\t\t\t\t\t\t<span class=\"token selector\">//导航条\n  #extras</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 86%<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\t\t\t\t\t\t\t\t    <span class=\"token selector\">//其它博客\n  .body</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\t\t\t\t\t\t\t\t\t//单篇博客的内容\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>[参考资料]</strong></p>\n<p><a href=\"https://www.w3school.com.cn/css/css_rwd_intro.asp\">响应式网页设计 - 简介 (w3school.com.cn)</a></p>\n<hr>\n<h2 id=\"如何修改博客标题的字体类型\"><a href=\"#如何修改博客标题的字体类型\" class=\"headerlink\" title=\"如何修改博客标题的字体类型\"></a>如何修改博客标题的字体类型</h2><p>通过修改主题的<code>main.css</code>文件，设置需要的字体类型。例如，微软雅黑。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> ~/blog/venv/lib/python3.7/site-packages/pelican/themes/notmyidea/static/css\n<span class=\"token function\">vi</span> main.css<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>打开main.css以后，查找关键字<strong>font-family</strong>，然后找到h1, h2, h3, h4, h5, h6的位置，添加**’Microsoft YaHei’**。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">h1, h2, h3, h4, h5, h6</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token property\">font-weight</span><span class=\"token punctuation\">:</span> 400<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">line-height</span><span class=\"token punctuation\">:</span> 1.1<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">margin-bottom</span><span class=\"token punctuation\">:</span> .8em<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Microsoft YaHei'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Yanone Kaffeesatz'</span><span class=\"token punctuation\">,</span> arial<span class=\"token punctuation\">,</span> serif<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h2 id=\"如何为文章创建目录大纲\"><a href=\"#如何为文章创建目录大纲\" class=\"headerlink\" title=\"如何为文章创建目录大纲\"></a>如何为文章创建目录大纲</h2><p>修改Pelican配置文件<code>pelicanconf.py</code>，在配置文件中添加以下内容：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># Support for Markdown Toc</span>\nMARKDOWN <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string\">\"extension_configs\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\"># Needed for code syntax highlighting</span>\n        <span class=\"token string\">\"markdown.extensions.codehilite\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"css_class\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"highlight\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"markdown.extensions.extra\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"markdown.extensions.meta\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\"># This is for enabling the TOC generation</span>\n        <span class=\"token string\">\"markdown.extensions.toc\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"title\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"目录\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"output_format\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"html5\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>[参考资料]</p>\n<ul>\n<li><a href=\"https://cloudbytes.dev/articles/add-a-table-of-contents-using-markdown-in-pelican\">Add a Table of Contents using Markdown in Pelican (cloudbytes.dev)</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"如何修改每篇博文的作者、分类、日期等信息\"><a href=\"#如何修改每篇博文的作者、分类、日期等信息\" class=\"headerlink\" title=\"如何修改每篇博文的作者、分类、日期等信息\"></a>如何修改每篇博文的作者、分类、日期等信息</h2><p>修改文件<code>article_infos.html</code>，文件位置：<code>~/blog/venv/lib/python3.7/site-packages/pelican/themes/notmyidea/templates</code></p>\n<p>以下内容中，已将<code>author</code>和<code>category</code>的相关代码注释，所以博文中将不会出现作者和分类的信息。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>footer</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>post-info<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>abbr</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>published<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&#123;&#123; article.date.isoformat() &#125;&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n                日期: &#123;&#123; article.locale_date &#125;&#125;\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>abbr</span><span class=\"token punctuation\">></span></span>\n        &#123;% if article.modified %&#125;\n        <span class=\"token comment\">&lt;!--            &lt;br /> --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>abbr</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>modified<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&#123;&#123; article.modified.isoformat() &#125;&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n                更新: &#123;&#123; article.locale_modified &#125;&#125;\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>abbr</span><span class=\"token punctuation\">></span></span>\n        &#123;% endif %&#125;\n\n<span class=\"token comment\">&lt;!--        &#123;% if article.authors %&#125;\n        &lt;address class=\"vcard author\">\n                作者: &#123;% for author in article.authors %&#125;\n                        &lt;a class=\"url fn\" href=\"&#123;&#123; SITEURL &#125;&#125;/&#123;&#123; author.url &#125;&#125;\">&#123;&#123; author &#125;&#125;&lt;/a>\n                &#123;% endfor %&#125;\n        &lt;/address>\n        &#123;% endif %&#125;\n        &lt;p>分类: &lt;a href=\"&#123;&#123; SITEURL &#125;&#125;/&#123;&#123; article.category.url &#125;&#125;\">&#123;&#123; article.category &#125;&#125;&lt;/a>.&lt;/p> --></span>\n&#123;% include 'taglist.html' %&#125;\n&#123;% import 'translations.html' as translations with context %&#125;\n&#123;&#123; translations.translations_for(article) &#125;&#125;\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>footer</span><span class=\"token punctuation\">></span></span><span class=\"token comment\">&lt;!-- /.post-info --></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>修改文件<code>main.css</code>，找到<code>.post-info</code>，修改以下内容后，字体大小和颜色，以及位置都会发生变化。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">.post-info</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span>0.5em<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span>#808080<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">float</span><span class=\"token punctuation\">:</span>top<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span>0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span>0<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","more":"<hr>\n<h2 id=\"如何修改或者删除网页的脚注-Footer\"><a href=\"#如何修改或者删除网页的脚注-Footer\" class=\"headerlink\" title=\"如何修改或者删除网页的脚注(Footer)\"></a>如何修改或者删除网页的脚注(Footer)</h2><p>修改文件<code>base.html</code>，如果要删除脚注，只需要注释(<code>&lt;!-- ... --&gt;</code>)以下代码。</p>\n<pre class=\"line-numbers language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;!-- &lt;footer id&#x3D;&quot;contentinfo&quot; class&#x3D;&quot;body&quot;&gt;\n                &lt;address id&#x3D;&quot;about&quot; class&#x3D;&quot;vcard body&quot;&gt;\n                Proudly powered by &lt;a href&#x3D;&quot;https:&#x2F;&#x2F;getpelican.com&#x2F;&quot;&gt;Pelican&lt;&#x2F;a&gt;, which takes great advantage of &lt;a href&#x3D;&quot;https:&#x2F;&#x2F;www.python.org&#x2F;&quot;&gt;Python&lt;&#x2F;a&gt;.\n                &lt;&#x2F;address&gt;\n\n                &lt;p&gt;The theme is by &lt;a href&#x3D;&quot;https:&#x2F;&#x2F;www.smashingmagazine.com&#x2F;2009&#x2F;08&#x2F;designing-a-html-5-layout-from-scratch&#x2F;&quot;&gt;Smashing Magazine&lt;&#x2F;a&gt;, thanks!&lt;&#x2F;p&gt;\n        &lt;&#x2F;footer&gt; --&gt; &lt;!-- &#x2F;#contentinfo --&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<hr>\n<h2 id=\"如何修改导航栏的颜色和超链接的文字颜色\"><a href=\"#如何修改导航栏的颜色和超链接的文字颜色\" class=\"headerlink\" title=\"如何修改导航栏的颜色和超链接的文字颜色\"></a>如何修改导航栏的颜色和超链接的文字颜色</h2><p>将导航栏的颜色修改为蓝色，可以修改<code>main.css</code>文件，找到<code>#banner nav</code>，然后将<code>background</code>设置为<code>#5faee3</code>。</p>\n<pre class=\"line-numbers language-CSS\" data-language=\"CSS\"><code class=\"language-CSS\">#banner nav &#123;\n                background: #5faee3;\n                font-size: 1.143em;\n                height: 40px;\n                ...\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>将超链接文字的颜色修改为蓝色，可以修改<code>main.css</code>文件，找到<code>a:link, a:visited</code>，然后将<code>color</code>设置为<code>#5faee3</code>。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">a:link, a:visited</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #5faee3<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0 1px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">text-decoration</span><span class=\"token punctuation\">:</span> underline<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"如何让图片自动适应页面的宽度\"><a href=\"#如何让图片自动适应页面的宽度\" class=\"headerlink\" title=\"如何让图片自动适应页面的宽度\"></a>如何让图片自动适应页面的宽度</h2><p>以前，每次用手机拍摄的高分辨率图片插入博文后，图片都会以原始大小的长宽显示，导致无法在网页正常显示图片。</p>\n<p>通过修改主题的<code>main.css</code>文件，并增加以下内容后，可以解决该问题。该方案使用的技术仍然是CSS响应式设计。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">img</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>[参考资料]</strong></p>\n<p><a href=\"https://www.w3school.com.cn/css/css_rwd_images.asp\">响应式网页设计 - 图像 (w3school.com.cn)</a></p>\n<hr>\n<h2 id=\"如何适应手机的屏幕\"><a href=\"#如何适应手机的屏幕\" class=\"headerlink\" title=\"如何适应手机的屏幕\"></a>如何适应手机的屏幕</h2><p>博客的默认主题notmyidear并不能够自动适应手机屏幕的大小，也就是自动根据屏幕调整字体和图片的大小。</p>\n<p>通过查询相关资料，了解到了CSS响应式设计，即网页可以根据电脑、平板和手机的尺寸变化，自动调整大小、内容布局等。</p>\n<p>首先，需要修改文件<code>base.html</code>，文件位置<code>~/blog/venv/lib/python3.7/site-packages/pelican/themes/notmyidea/templates</code>。在文件中，需要添加内容：<code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</code>。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        &#123;% block head %&#125;\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>generator<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Pelican<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n        ...\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然后，修改主题的<code>main.css</code>文件，并增加以下内容后，移动设备的宽度为760px或以下，则会自动适配该CSS的定义。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token comment\">/*\n For mobile devices\n ***********************/</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token keyword\">only</span> screen <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 768px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">&#123;</span>\n\n  <span class=\"token selector\">#content</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 86%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 108%<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\t\t\t\t\t\t\t\t\t<span class=\"token selector\">//博客首页\n  #featured</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 86%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 108%<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\t\t\t\t\t\t\t\t\t<span class=\"token selector\">//博客背景\n  #banner nav</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 95%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 70%<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\t\t\t\t\t\t\t\t\t<span class=\"token selector\">//导航条\n  #extras</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 86%<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\t\t\t\t\t\t\t\t    <span class=\"token selector\">//其它博客\n  .body</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\t\t\t\t\t\t\t\t\t//单篇博客的内容\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>[参考资料]</strong></p>\n<p><a href=\"https://www.w3school.com.cn/css/css_rwd_intro.asp\">响应式网页设计 - 简介 (w3school.com.cn)</a></p>\n<hr>\n<h2 id=\"如何修改博客标题的字体类型\"><a href=\"#如何修改博客标题的字体类型\" class=\"headerlink\" title=\"如何修改博客标题的字体类型\"></a>如何修改博客标题的字体类型</h2><p>通过修改主题的<code>main.css</code>文件，设置需要的字体类型。例如，微软雅黑。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> ~/blog/venv/lib/python3.7/site-packages/pelican/themes/notmyidea/static/css\n<span class=\"token function\">vi</span> main.css<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>打开main.css以后，查找关键字<strong>font-family</strong>，然后找到h1, h2, h3, h4, h5, h6的位置，添加**’Microsoft YaHei’**。</p>\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">h1, h2, h3, h4, h5, h6</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token property\">font-weight</span><span class=\"token punctuation\">:</span> 400<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">line-height</span><span class=\"token punctuation\">:</span> 1.1<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">margin-bottom</span><span class=\"token punctuation\">:</span> .8em<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Microsoft YaHei'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Yanone Kaffeesatz'</span><span class=\"token punctuation\">,</span> arial<span class=\"token punctuation\">,</span> serif<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h2 id=\"如何为文章创建目录大纲\"><a href=\"#如何为文章创建目录大纲\" class=\"headerlink\" title=\"如何为文章创建目录大纲\"></a>如何为文章创建目录大纲</h2><p>修改Pelican配置文件<code>pelicanconf.py</code>，在配置文件中添加以下内容：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># Support for Markdown Toc</span>\nMARKDOWN <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string\">\"extension_configs\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\"># Needed for code syntax highlighting</span>\n        <span class=\"token string\">\"markdown.extensions.codehilite\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"css_class\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"highlight\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"markdown.extensions.extra\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"markdown.extensions.meta\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\"># This is for enabling the TOC generation</span>\n        <span class=\"token string\">\"markdown.extensions.toc\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"title\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"目录\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"output_format\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"html5\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>[参考资料]</p>\n<ul>\n<li><a href=\"https://cloudbytes.dev/articles/add-a-table-of-contents-using-markdown-in-pelican\">Add a Table of Contents using Markdown in Pelican (cloudbytes.dev)</a></li>\n</ul>"},{"title":"个人博客 — GitHub Pages篇","date":"2018-11-08T03:10:29.000Z","_content":"# 什么是GitHub Pages？ #\n\n[GitHub Pages](https://pages.github.com/)是一项免费的静态网站托管服务（不支持PHP, Ruby, or Python.），可用于托管个人、组织或者项目的网页。\n\n**创建和发布网站的两种方式**：  \n\n\n- 利用[Jekyll Theme Chooser](https://help.github.com/articles/adding-a-jekyll-theme-to-your-github-pages-site-with-the-jekyll-theme-chooser)在线创建网站\n- 在本地计算机创建网站，然后利用[GitHub Desktop](http://desktop.github.com/) 或者 [the command line](https://help.github.com/articles/adding-an-existing-project-to-github-using-the-command-line)将网站发布至GitHub Pages.  \n\n**GitHub Pages网站的两种类型**：\n\n- 项目网站 —— 该网站与项目关联， 并且网站文件存储于项目仓库的分支中\n- 个人和组织网站 —— 该网站与项目无关，并且网站文件存储于专用的仓库中\n\n<!-- more -->\n\n\n# 如何将博客发布到GitHub Pages #\n\n\n1. 访问[GitHub](https://github.com/)网站，注册一个新账号  \n\n2. 登陆GitHub网站，并创建新Repository。如果用户名是john，创建的Repository name必须为john.github.io\n\n![](09.png)  \n\n3. 修改Hexo的配置文件  \n\n```bash\ndeploy: \n\ttype: git              \n\trepo: https://github.com/john/john.github.io.git              \n\tbranch: master\n```\n\n4. 打开GitHub Bash, 设置GitHub的账户信息\n\n```bash\ngit config --global user.name \"GitHub用户名\"\ngit config --global user.email \"GitHub注册邮箱\"\n```\n\n5. 安装Git部署插件\n\n```bash\nnpm install hexo-deployer-git --save\n```\n\n\n6. 运行以下三条命令，将网页内容发布到GitHub Pages  \n\n```bash\nhexo clean    // 清除缓存，并删除Public目录  \nhexo g        // 创建Public目录，并在Public目录下生成静态的网页文件  \nhexo d        // 将网页文件同步到GitHub，同步前需要输入GitHub用户名和密码通过身份认证\n```\n\n7. 登陆GitHub，在Repository的Settings页面中，可以看到博客的访问URL: https://john.github.io。\n\n![](10.png)  ","source":"_posts/blog/个人博客-GitHub-Pages篇.md","raw":"---\ntitle: 个人博客 — GitHub Pages篇\ndate: 2018-11-08 11:10:29\ntags:\n- hexo\ncategories:\n- Blog\n---\n# 什么是GitHub Pages？ #\n\n[GitHub Pages](https://pages.github.com/)是一项免费的静态网站托管服务（不支持PHP, Ruby, or Python.），可用于托管个人、组织或者项目的网页。\n\n**创建和发布网站的两种方式**：  \n\n\n- 利用[Jekyll Theme Chooser](https://help.github.com/articles/adding-a-jekyll-theme-to-your-github-pages-site-with-the-jekyll-theme-chooser)在线创建网站\n- 在本地计算机创建网站，然后利用[GitHub Desktop](http://desktop.github.com/) 或者 [the command line](https://help.github.com/articles/adding-an-existing-project-to-github-using-the-command-line)将网站发布至GitHub Pages.  \n\n**GitHub Pages网站的两种类型**：\n\n- 项目网站 —— 该网站与项目关联， 并且网站文件存储于项目仓库的分支中\n- 个人和组织网站 —— 该网站与项目无关，并且网站文件存储于专用的仓库中\n\n<!-- more -->\n\n\n# 如何将博客发布到GitHub Pages #\n\n\n1. 访问[GitHub](https://github.com/)网站，注册一个新账号  \n\n2. 登陆GitHub网站，并创建新Repository。如果用户名是john，创建的Repository name必须为john.github.io\n\n![](09.png)  \n\n3. 修改Hexo的配置文件  \n\n```bash\ndeploy: \n\ttype: git              \n\trepo: https://github.com/john/john.github.io.git              \n\tbranch: master\n```\n\n4. 打开GitHub Bash, 设置GitHub的账户信息\n\n```bash\ngit config --global user.name \"GitHub用户名\"\ngit config --global user.email \"GitHub注册邮箱\"\n```\n\n5. 安装Git部署插件\n\n```bash\nnpm install hexo-deployer-git --save\n```\n\n\n6. 运行以下三条命令，将网页内容发布到GitHub Pages  \n\n```bash\nhexo clean    // 清除缓存，并删除Public目录  \nhexo g        // 创建Public目录，并在Public目录下生成静态的网页文件  \nhexo d        // 将网页文件同步到GitHub，同步前需要输入GitHub用户名和密码通过身份认证\n```\n\n7. 登陆GitHub，在Repository的Settings页面中，可以看到博客的访问URL: https://john.github.io。\n\n![](10.png)  ","slug":"blog/个人博客-GitHub-Pages篇","published":1,"updated":"2023-03-03T01:33:03.340Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clexvkk4w00035i73h2ko8vw8","content":"<h1 id=\"什么是GitHub-Pages？\"><a href=\"#什么是GitHub-Pages？\" class=\"headerlink\" title=\"什么是GitHub Pages？\"></a>什么是GitHub Pages？</h1><p><a href=\"https://pages.github.com/\">GitHub Pages</a>是一项免费的静态网站托管服务（不支持PHP, Ruby, or Python.），可用于托管个人、组织或者项目的网页。</p>\n<p><strong>创建和发布网站的两种方式</strong>：  </p>\n<ul>\n<li>利用<a href=\"https://help.github.com/articles/adding-a-jekyll-theme-to-your-github-pages-site-with-the-jekyll-theme-chooser\">Jekyll Theme Chooser</a>在线创建网站</li>\n<li>在本地计算机创建网站，然后利用<a href=\"http://desktop.github.com/\">GitHub Desktop</a> 或者 <a href=\"https://help.github.com/articles/adding-an-existing-project-to-github-using-the-command-line\">the command line</a>将网站发布至GitHub Pages.</li>\n</ul>\n<p><strong>GitHub Pages网站的两种类型</strong>：</p>\n<ul>\n<li>项目网站 —— 该网站与项目关联， 并且网站文件存储于项目仓库的分支中</li>\n<li>个人和组织网站 —— 该网站与项目无关，并且网站文件存储于专用的仓库中</li>\n</ul>\n<span id=\"more\"></span>\n\n\n<h1 id=\"如何将博客发布到GitHub-Pages\"><a href=\"#如何将博客发布到GitHub-Pages\" class=\"headerlink\" title=\"如何将博客发布到GitHub Pages\"></a>如何将博客发布到GitHub Pages</h1><ol>\n<li><p>访问<a href=\"https://github.com/\">GitHub</a>网站，注册一个新账号  </p>\n</li>\n<li><p>登陆GitHub网站，并创建新Repository。如果用户名是john，创建的Repository name必须为john.github.io</p>\n</li>\n</ol>\n<p><img src=\"/2018/11/08/blog/ge-ren-bo-ke-github-pages-pian/09.png\">  </p>\n<ol start=\"3\">\n<li>修改Hexo的配置文件</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">deploy: \n\ttype: <span class=\"token function\">git</span>              \n\trepo: https://github.com/john/john.github.io.git              \n\tbranch: master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"4\">\n<li>打开GitHub Bash, 设置GitHub的账户信息</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config --global user.name <span class=\"token string\">\"GitHub用户名\"</span>\n<span class=\"token function\">git</span> config --global user.email <span class=\"token string\">\"GitHub注册邮箱\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ol start=\"5\">\n<li>安装Git部署插件</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-deployer-git --save<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n<ol start=\"6\">\n<li>运行以下三条命令，将网页内容发布到GitHub Pages</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo clean    // 清除缓存，并删除Public目录  \nhexo g        // 创建Public目录，并在Public目录下生成静态的网页文件  \nhexo d        // 将网页文件同步到GitHub，同步前需要输入GitHub用户名和密码通过身份认证<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"7\">\n<li>登陆GitHub，在Repository的Settings页面中，可以看到博客的访问URL: <a href=\"https://john.github.io./\">https://john.github.io。</a></li>\n</ol>\n<p><img src=\"/2018/11/08/blog/ge-ren-bo-ke-github-pages-pian/10.png\">  </p>\n","site":{"data":{}},"excerpt":"<h1 id=\"什么是GitHub-Pages？\"><a href=\"#什么是GitHub-Pages？\" class=\"headerlink\" title=\"什么是GitHub Pages？\"></a>什么是GitHub Pages？</h1><p><a href=\"https://pages.github.com/\">GitHub Pages</a>是一项免费的静态网站托管服务（不支持PHP, Ruby, or Python.），可用于托管个人、组织或者项目的网页。</p>\n<p><strong>创建和发布网站的两种方式</strong>：  </p>\n<ul>\n<li>利用<a href=\"https://help.github.com/articles/adding-a-jekyll-theme-to-your-github-pages-site-with-the-jekyll-theme-chooser\">Jekyll Theme Chooser</a>在线创建网站</li>\n<li>在本地计算机创建网站，然后利用<a href=\"http://desktop.github.com/\">GitHub Desktop</a> 或者 <a href=\"https://help.github.com/articles/adding-an-existing-project-to-github-using-the-command-line\">the command line</a>将网站发布至GitHub Pages.</li>\n</ul>\n<p><strong>GitHub Pages网站的两种类型</strong>：</p>\n<ul>\n<li>项目网站 —— 该网站与项目关联， 并且网站文件存储于项目仓库的分支中</li>\n<li>个人和组织网站 —— 该网站与项目无关，并且网站文件存储于专用的仓库中</li>\n</ul>","more":"<h1 id=\"如何将博客发布到GitHub-Pages\"><a href=\"#如何将博客发布到GitHub-Pages\" class=\"headerlink\" title=\"如何将博客发布到GitHub Pages\"></a>如何将博客发布到GitHub Pages</h1><ol>\n<li><p>访问<a href=\"https://github.com/\">GitHub</a>网站，注册一个新账号  </p>\n</li>\n<li><p>登陆GitHub网站，并创建新Repository。如果用户名是john，创建的Repository name必须为john.github.io</p>\n</li>\n</ol>\n<p><img src=\"/2018/11/08/blog/ge-ren-bo-ke-github-pages-pian/09.png\">  </p>\n<ol start=\"3\">\n<li>修改Hexo的配置文件</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">deploy: \n\ttype: <span class=\"token function\">git</span>              \n\trepo: https://github.com/john/john.github.io.git              \n\tbranch: master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"4\">\n<li>打开GitHub Bash, 设置GitHub的账户信息</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config --global user.name <span class=\"token string\">\"GitHub用户名\"</span>\n<span class=\"token function\">git</span> config --global user.email <span class=\"token string\">\"GitHub注册邮箱\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ol start=\"5\">\n<li>安装Git部署插件</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-deployer-git --save<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n<ol start=\"6\">\n<li>运行以下三条命令，将网页内容发布到GitHub Pages</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo clean    // 清除缓存，并删除Public目录  \nhexo g        // 创建Public目录，并在Public目录下生成静态的网页文件  \nhexo d        // 将网页文件同步到GitHub，同步前需要输入GitHub用户名和密码通过身份认证<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"7\">\n<li>登陆GitHub，在Repository的Settings页面中，可以看到博客的访问URL: <a href=\"https://john.github.io./\">https://john.github.io。</a></li>\n</ol>\n<p><img src=\"/2018/11/08/blog/ge-ren-bo-ke-github-pages-pian/10.png\">  </p>"},{"title":"个人博客 — Hexo多终端同步篇","date":"2019-01-01T01:45:38.000Z","_content":"如果需要在多台终端设备上发布博客，那么就需要将Hexo源代码发布到GitHub，并且在多台终端设备之间同步。\n\n# 配置远程仓库 #\n1. 在GitHub上创建一个新的分支，例如，分支名称为Hexo\n![](21.png)\n\n2. 将Hexo分支设置成默认分支\n![](22.png)\n\n<!-- more -->\n\n# 配置本地仓库 #\n\n1. 注意！！！如果使用git clone下载的三方主题，要把主题文件夹下面把.git文件夹删除掉，不然主题无法push到远程仓库，导致你发布的博客是一片空白\n\n2. 在初次安装Hexo的设备上，初始化博客所在目录\n```bash\ngit init\n```\n3. 添加本地所有文件到仓库\n```bash\ngit add -A\n```\n\n4. 添加远程仓库  \n\t我执行该命令后，提示fatal: remote origin already exists.可以忽略该报错。\n```bash\ngit remote add origin git@github.com:yourname/yourname.github.io.git\n```\n\n5. 添加本地仓库分支Hexo\n```bash\ngit branch hexo\n```\n6. 将本地Hexo分支的文件强制推送到远程Hexo分支\n```bash\ngit push origin hexo -f\n```\n7. 切换到Hexo分支\n```bash\ngit checkout -b hexo\n```\n上传完成之后，就会拥有两个远程的分支：master和hexo，其中master是部署成博客的分支；hexo是我们可以clone到其他电脑或其他系统的hexo源文件的分支，而且我们已经将它设置成默认仓库。\n\n# 多终端同步和发布博客 #\n\n1. 在其它终端设备上clone远程分支hexo到本地\n```bash\ngit clone -b hexo git@github.com:yourname/yourname.github.io.git\n```\n2. 进入本地仓库执行hexo安装\n```bash\nnpm install\n```\n3. 先将远程分支同步到本地hexo分支\n```bash\ngit pull origin hexo\n```\n4. 编辑本地博客后，同步到远程hexo分支\n```bash\ngit add \"blog files\"\ngit commit -m \"comments\"\ngit push origin hexo\n```\n5. 发布博客\n```bash\nhexo g -d\n```\n","source":"_posts/blog/个人博客-Hexo多终端同步篇.md","raw":"---\ntitle: 个人博客 — Hexo多终端同步篇\ndate: 2019-01-01 09:45:38\ntags:\n- hexo\ncategories:\n- Blog\n---\n如果需要在多台终端设备上发布博客，那么就需要将Hexo源代码发布到GitHub，并且在多台终端设备之间同步。\n\n# 配置远程仓库 #\n1. 在GitHub上创建一个新的分支，例如，分支名称为Hexo\n![](21.png)\n\n2. 将Hexo分支设置成默认分支\n![](22.png)\n\n<!-- more -->\n\n# 配置本地仓库 #\n\n1. 注意！！！如果使用git clone下载的三方主题，要把主题文件夹下面把.git文件夹删除掉，不然主题无法push到远程仓库，导致你发布的博客是一片空白\n\n2. 在初次安装Hexo的设备上，初始化博客所在目录\n```bash\ngit init\n```\n3. 添加本地所有文件到仓库\n```bash\ngit add -A\n```\n\n4. 添加远程仓库  \n\t我执行该命令后，提示fatal: remote origin already exists.可以忽略该报错。\n```bash\ngit remote add origin git@github.com:yourname/yourname.github.io.git\n```\n\n5. 添加本地仓库分支Hexo\n```bash\ngit branch hexo\n```\n6. 将本地Hexo分支的文件强制推送到远程Hexo分支\n```bash\ngit push origin hexo -f\n```\n7. 切换到Hexo分支\n```bash\ngit checkout -b hexo\n```\n上传完成之后，就会拥有两个远程的分支：master和hexo，其中master是部署成博客的分支；hexo是我们可以clone到其他电脑或其他系统的hexo源文件的分支，而且我们已经将它设置成默认仓库。\n\n# 多终端同步和发布博客 #\n\n1. 在其它终端设备上clone远程分支hexo到本地\n```bash\ngit clone -b hexo git@github.com:yourname/yourname.github.io.git\n```\n2. 进入本地仓库执行hexo安装\n```bash\nnpm install\n```\n3. 先将远程分支同步到本地hexo分支\n```bash\ngit pull origin hexo\n```\n4. 编辑本地博客后，同步到远程hexo分支\n```bash\ngit add \"blog files\"\ngit commit -m \"comments\"\ngit push origin hexo\n```\n5. 发布博客\n```bash\nhexo g -d\n```\n","slug":"blog/个人博客-Hexo多终端同步篇","published":1,"updated":"2023-03-03T01:33:03.340Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clexvkk5900065i73dzus23la","content":"<p>如果需要在多台终端设备上发布博客，那么就需要将Hexo源代码发布到GitHub，并且在多台终端设备之间同步。</p>\n<h1 id=\"配置远程仓库\"><a href=\"#配置远程仓库\" class=\"headerlink\" title=\"配置远程仓库\"></a>配置远程仓库</h1><ol>\n<li><p>在GitHub上创建一个新的分支，例如，分支名称为Hexo<br><img src=\"/2019/01/01/blog/ge-ren-bo-ke-hexo-duo-zhong-duan-tong-bu-pian/21.png\"></p>\n</li>\n<li><p>将Hexo分支设置成默认分支<br><img src=\"/2019/01/01/blog/ge-ren-bo-ke-hexo-duo-zhong-duan-tong-bu-pian/22.png\"></p>\n</li>\n</ol>\n<span id=\"more\"></span>\n\n<h1 id=\"配置本地仓库\"><a href=\"#配置本地仓库\" class=\"headerlink\" title=\"配置本地仓库\"></a>配置本地仓库</h1><ol>\n<li><p>注意！！！如果使用git clone下载的三方主题，要把主题文件夹下面把.git文件夹删除掉，不然主题无法push到远程仓库，导致你发布的博客是一片空白</p>\n</li>\n<li><p>在初次安装Hexo的设备上，初始化博客所在目录</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> init<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>添加本地所有文件到仓库</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> -A<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>添加远程仓库<br> 我执行该命令后，提示fatal: remote origin already exists.可以忽略该报错。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin git@github.com:yourname/yourname.github.io.git<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>添加本地仓库分支Hexo</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> branch hexo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>将本地Hexo分支的文件强制推送到远程Hexo分支</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> push origin hexo -f<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>切换到Hexo分支</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout -b hexo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>上传完成之后，就会拥有两个远程的分支：master和hexo，其中master是部署成博客的分支；hexo是我们可以clone到其他电脑或其他系统的hexo源文件的分支，而且我们已经将它设置成默认仓库。</p>\n</li>\n</ol>\n<h1 id=\"多终端同步和发布博客\"><a href=\"#多终端同步和发布博客\" class=\"headerlink\" title=\"多终端同步和发布博客\"></a>多终端同步和发布博客</h1><ol>\n<li>在其它终端设备上clone远程分支hexo到本地<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone -b hexo git@github.com:yourname/yourname.github.io.git<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>进入本地仓库执行hexo安装<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>先将远程分支同步到本地hexo分支<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> pull origin hexo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>编辑本地博客后，同步到远程hexo分支<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token string\">\"blog files\"</span>\n<span class=\"token function\">git</span> commit -m <span class=\"token string\">\"comments\"</span>\n<span class=\"token function\">git</span> push origin hexo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li>发布博客<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo g -d<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>如果需要在多台终端设备上发布博客，那么就需要将Hexo源代码发布到GitHub，并且在多台终端设备之间同步。</p>\n<h1 id=\"配置远程仓库\"><a href=\"#配置远程仓库\" class=\"headerlink\" title=\"配置远程仓库\"></a>配置远程仓库</h1><ol>\n<li><p>在GitHub上创建一个新的分支，例如，分支名称为Hexo<br><img src=\"/2019/01/01/blog/ge-ren-bo-ke-hexo-duo-zhong-duan-tong-bu-pian/21.png\"></p>\n</li>\n<li><p>将Hexo分支设置成默认分支<br><img src=\"/2019/01/01/blog/ge-ren-bo-ke-hexo-duo-zhong-duan-tong-bu-pian/22.png\"></p>\n</li>\n</ol>","more":"<h1 id=\"配置本地仓库\"><a href=\"#配置本地仓库\" class=\"headerlink\" title=\"配置本地仓库\"></a>配置本地仓库</h1><ol>\n<li><p>注意！！！如果使用git clone下载的三方主题，要把主题文件夹下面把.git文件夹删除掉，不然主题无法push到远程仓库，导致你发布的博客是一片空白</p>\n</li>\n<li><p>在初次安装Hexo的设备上，初始化博客所在目录</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> init<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>添加本地所有文件到仓库</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> -A<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>添加远程仓库<br> 我执行该命令后，提示fatal: remote origin already exists.可以忽略该报错。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin git@github.com:yourname/yourname.github.io.git<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>添加本地仓库分支Hexo</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> branch hexo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>将本地Hexo分支的文件强制推送到远程Hexo分支</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> push origin hexo -f<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>切换到Hexo分支</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout -b hexo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>上传完成之后，就会拥有两个远程的分支：master和hexo，其中master是部署成博客的分支；hexo是我们可以clone到其他电脑或其他系统的hexo源文件的分支，而且我们已经将它设置成默认仓库。</p>\n</li>\n</ol>\n<h1 id=\"多终端同步和发布博客\"><a href=\"#多终端同步和发布博客\" class=\"headerlink\" title=\"多终端同步和发布博客\"></a>多终端同步和发布博客</h1><ol>\n<li>在其它终端设备上clone远程分支hexo到本地<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone -b hexo git@github.com:yourname/yourname.github.io.git<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>进入本地仓库执行hexo安装<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>先将远程分支同步到本地hexo分支<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> pull origin hexo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>编辑本地博客后，同步到远程hexo分支<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token string\">\"blog files\"</span>\n<span class=\"token function\">git</span> commit -m <span class=\"token string\">\"comments\"</span>\n<span class=\"token function\">git</span> push origin hexo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li>发布博客<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo g -d<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>"},{"title":"个人博客 — Hexo安装篇","date":"2018-11-07T05:47:15.000Z","_content":"# 个人博客 — Hexo安装篇\n\n## 什么是Hexo #\n\n[Hexo](https://hexo.io/)是一个快速、 简单和强大的博客框架。你可以用Markdown或者其它语言撰写博客内容，Hexo会自动生成静态文件。\n\n## 安装Node.js\n\n**Node.js** 是一个基于 Chrome V8 引擎的 服务器端的JavaScript 运行环境。首先，需要下载并安装[Node.js](https://nodejs.org/en/)，然后再安装`Hexo`以及相关插件。\n\n<!-- more -->\n\n### Windows\n\n1. 下载并安装[Node.js](https://nodejs.org/en/)。\t \n2. 下载并安装[Git](https://git-scm.com/download/win)。 \n\n### 树莓派\n\n在树莓派上，先创建一个目录，用来存放`Node.js`文件，然后把下载的`Node.js`安装文件解压缩到目录`nodejs`下面。\n\n下面以安装文件`node-v16.14.0-linux-armv7l.tar.xz`为例：\n\n```bash\nsudo mkdir -p /usr/local/lib/nodejs\nsudo tar -xJvf node-v16.14.0-linux-armv7l.tar.xz -C /usr/local/lib/nodejs \n```\n\n然后，在当前用户的配置文件`~/.profile`中，设置`Node.js`的环境变量：\n\n```profile\nexport PATH=/usr/local/lib/nodejs/node-v16.14.0-linux-armv7l/bin:$PATH\n```\n\n刷新配置文件：\n\n```bash\n. ~/.profile\n```\n\n完成以上步骤后，`Node.js`已经安装成功。\n\n通过以下命令，可以查看`node`, `npm`和`npx`的版本。\n\n```bash\n$ node -v\nv16.14.0\n\n$ npm -v\n8.3.1\n\n$ npx -v\n8.3.1\n```\n\n通过修改配置文件`~/.profile`设置`Node.js`的方式，只能让当前用户能够使用最新版的node, npm和npx（其它用户，如root等无法使用新版`Node.js`）。而且在某些情况下，例如用crontab配置计划任务，或者将脚本配置为systemd服务的时候，仍然会使用旧版的`Node.js`。\n\n为了解决以上问题，可以删除或者重命名`/usr/bin/`目录下的`node`，`npm`和`npx`，然后为新版的`Node.js`创建软链接：\n\n```bash\nsudo mv /usr/bin/node /usr/bin/node.bak\nsudo mv /usr/bin/npm /usr/bin/npm.bak\nsudo mv /usr/bin/npx /usr/bin/npx.bak\nsudo ln -s /usr/local/lib/nodejs/node-v16.14.0-linux-armv7l/bin/node /usr/bin/node\nsudo ln -s /usr/local/lib/nodejs/node-v16.14.0-linux-armv7l/bin/npm /usr/bin/npm\nsudo ln -s /usr/local/lib/nodejs/node-v16.14.0-linux-armv7l/bin/npx /usr/bin/npx\n```\n\n## 安装Hexo #\n\n在命令行中，运行以下命令，安装`Hexo`：\n\n```Command\nnpm install -g hexo-cli \n```\n\n验证`Hexo`安装成功。输入以下命令，可以看到`Hexo`的版本信息。\n```Command\n[Computer]:> hexo -v\nINFO  Validating config\nhexo: 6.0.0\nhexo-cli: 4.3.0\nos: linux 5.4.51-v7l+ Raspbian GNU/Linux 10 (buster) 10 (buster)\nnode: 16.14.0\nv8: 9.4.146.24-node.20\nuv: 1.43.0\nzlib: 1.2.11\nbrotli: 1.0.9\nares: 1.18.1\nmodules: 93\nnghttp2: 1.45.1\nnapi: 8\nllhttp: 6.0.4\nopenssl: 1.1.1m+quic\ncldr: 40.0\nicu: 70.1\ntz: 2021a3\nunicode: 14.0\nngtcp2: 0.1.0-DEV\nnghttp3: 0.1.0-DEV\n```\n\n## 安装Hexo插件\n\n如果需要将博客部署到`Github Page`，还需要安装插件`hexo-deployer-git`：\n\n```bash\nnpm install hexo-deployer-git --save\n```\n\n插件hexo-permalink-pinyin可以将博文链接中的中文字符转换为拼音：\n\n```bash\nnpm i hexo-permalink-pinyin --save\n```\n\n## 配置Hexo\n\n创建目录`blog`，并完成初始化：\n\n```Command\n[Computer]:> mkdir blog\n[Computer]:> hexo init blog\nINFO  Cloning hexo-starter https://github.com/hexojs/hexo-starter.git\nINFO  Install dependencies\nINFO  Start blogging with Hexo!\n```\n\n设置语言， 用记事本打开`_config.yml`， 设置`language`参数：\n\n```yaml\nlanguage: zh-CN\n```\n\n修改主题：\n\n```Command\ngit clone https://github.com/theme-next/hexo-theme-next themes/next  \n```\n\n 用记事本打开`_config.yml`， 设置`theme`参数。\n\n```yaml\ntheme: next  \n```\n\n## 运行和访问\n\n在命令行窗口中，运行命令:\n\n```Command\n[Computer]:> hexo s\nINFO  Validating config\nINFO  Start processing\nINFO  Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop. \n```\n\n 打开浏览器，输入URL: http://localhost:4000\n ![](08.png)","source":"_posts/blog/个人博客-Hexo安装篇.md","raw":"---\ntitle: 个人博客 — Hexo安装篇\ndate: 2018-11-07 13:47:15\ntags:\n- hexo\ncategories:\n- Blog\n---\n# 个人博客 — Hexo安装篇\n\n## 什么是Hexo #\n\n[Hexo](https://hexo.io/)是一个快速、 简单和强大的博客框架。你可以用Markdown或者其它语言撰写博客内容，Hexo会自动生成静态文件。\n\n## 安装Node.js\n\n**Node.js** 是一个基于 Chrome V8 引擎的 服务器端的JavaScript 运行环境。首先，需要下载并安装[Node.js](https://nodejs.org/en/)，然后再安装`Hexo`以及相关插件。\n\n<!-- more -->\n\n### Windows\n\n1. 下载并安装[Node.js](https://nodejs.org/en/)。\t \n2. 下载并安装[Git](https://git-scm.com/download/win)。 \n\n### 树莓派\n\n在树莓派上，先创建一个目录，用来存放`Node.js`文件，然后把下载的`Node.js`安装文件解压缩到目录`nodejs`下面。\n\n下面以安装文件`node-v16.14.0-linux-armv7l.tar.xz`为例：\n\n```bash\nsudo mkdir -p /usr/local/lib/nodejs\nsudo tar -xJvf node-v16.14.0-linux-armv7l.tar.xz -C /usr/local/lib/nodejs \n```\n\n然后，在当前用户的配置文件`~/.profile`中，设置`Node.js`的环境变量：\n\n```profile\nexport PATH=/usr/local/lib/nodejs/node-v16.14.0-linux-armv7l/bin:$PATH\n```\n\n刷新配置文件：\n\n```bash\n. ~/.profile\n```\n\n完成以上步骤后，`Node.js`已经安装成功。\n\n通过以下命令，可以查看`node`, `npm`和`npx`的版本。\n\n```bash\n$ node -v\nv16.14.0\n\n$ npm -v\n8.3.1\n\n$ npx -v\n8.3.1\n```\n\n通过修改配置文件`~/.profile`设置`Node.js`的方式，只能让当前用户能够使用最新版的node, npm和npx（其它用户，如root等无法使用新版`Node.js`）。而且在某些情况下，例如用crontab配置计划任务，或者将脚本配置为systemd服务的时候，仍然会使用旧版的`Node.js`。\n\n为了解决以上问题，可以删除或者重命名`/usr/bin/`目录下的`node`，`npm`和`npx`，然后为新版的`Node.js`创建软链接：\n\n```bash\nsudo mv /usr/bin/node /usr/bin/node.bak\nsudo mv /usr/bin/npm /usr/bin/npm.bak\nsudo mv /usr/bin/npx /usr/bin/npx.bak\nsudo ln -s /usr/local/lib/nodejs/node-v16.14.0-linux-armv7l/bin/node /usr/bin/node\nsudo ln -s /usr/local/lib/nodejs/node-v16.14.0-linux-armv7l/bin/npm /usr/bin/npm\nsudo ln -s /usr/local/lib/nodejs/node-v16.14.0-linux-armv7l/bin/npx /usr/bin/npx\n```\n\n## 安装Hexo #\n\n在命令行中，运行以下命令，安装`Hexo`：\n\n```Command\nnpm install -g hexo-cli \n```\n\n验证`Hexo`安装成功。输入以下命令，可以看到`Hexo`的版本信息。\n```Command\n[Computer]:> hexo -v\nINFO  Validating config\nhexo: 6.0.0\nhexo-cli: 4.3.0\nos: linux 5.4.51-v7l+ Raspbian GNU/Linux 10 (buster) 10 (buster)\nnode: 16.14.0\nv8: 9.4.146.24-node.20\nuv: 1.43.0\nzlib: 1.2.11\nbrotli: 1.0.9\nares: 1.18.1\nmodules: 93\nnghttp2: 1.45.1\nnapi: 8\nllhttp: 6.0.4\nopenssl: 1.1.1m+quic\ncldr: 40.0\nicu: 70.1\ntz: 2021a3\nunicode: 14.0\nngtcp2: 0.1.0-DEV\nnghttp3: 0.1.0-DEV\n```\n\n## 安装Hexo插件\n\n如果需要将博客部署到`Github Page`，还需要安装插件`hexo-deployer-git`：\n\n```bash\nnpm install hexo-deployer-git --save\n```\n\n插件hexo-permalink-pinyin可以将博文链接中的中文字符转换为拼音：\n\n```bash\nnpm i hexo-permalink-pinyin --save\n```\n\n## 配置Hexo\n\n创建目录`blog`，并完成初始化：\n\n```Command\n[Computer]:> mkdir blog\n[Computer]:> hexo init blog\nINFO  Cloning hexo-starter https://github.com/hexojs/hexo-starter.git\nINFO  Install dependencies\nINFO  Start blogging with Hexo!\n```\n\n设置语言， 用记事本打开`_config.yml`， 设置`language`参数：\n\n```yaml\nlanguage: zh-CN\n```\n\n修改主题：\n\n```Command\ngit clone https://github.com/theme-next/hexo-theme-next themes/next  \n```\n\n 用记事本打开`_config.yml`， 设置`theme`参数。\n\n```yaml\ntheme: next  \n```\n\n## 运行和访问\n\n在命令行窗口中，运行命令:\n\n```Command\n[Computer]:> hexo s\nINFO  Validating config\nINFO  Start processing\nINFO  Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop. \n```\n\n 打开浏览器，输入URL: http://localhost:4000\n ![](08.png)","slug":"blog/个人博客-Hexo安装篇","published":1,"updated":"2023-03-03T01:33:03.340Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clexvkk5e00075i73e3e1bde3","content":"<h1 id=\"个人博客-—-Hexo安装篇\"><a href=\"#个人博客-—-Hexo安装篇\" class=\"headerlink\" title=\"个人博客 — Hexo安装篇\"></a>个人博客 — Hexo安装篇</h1><h2 id=\"什么是Hexo\"><a href=\"#什么是Hexo\" class=\"headerlink\" title=\"什么是Hexo\"></a>什么是Hexo</h2><p><a href=\"https://hexo.io/\">Hexo</a>是一个快速、 简单和强大的博客框架。你可以用Markdown或者其它语言撰写博客内容，Hexo会自动生成静态文件。</p>\n<h2 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h2><p><strong>Node.js</strong> 是一个基于 Chrome V8 引擎的 服务器端的JavaScript 运行环境。首先，需要下载并安装<a href=\"https://nodejs.org/en/\">Node.js</a>，然后再安装<code>Hexo</code>以及相关插件。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h3><ol>\n<li>下载并安装<a href=\"https://nodejs.org/en/\">Node.js</a>。     </li>\n<li>下载并安装<a href=\"https://git-scm.com/download/win\">Git</a>。</li>\n</ol>\n<h3 id=\"树莓派\"><a href=\"#树莓派\" class=\"headerlink\" title=\"树莓派\"></a>树莓派</h3><p>在树莓派上，先创建一个目录，用来存放<code>Node.js</code>文件，然后把下载的<code>Node.js</code>安装文件解压缩到目录<code>nodejs</code>下面。</p>\n<p>下面以安装文件<code>node-v16.14.0-linux-armv7l.tar.xz</code>为例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">mkdir</span> -p /usr/local/lib/nodejs\n<span class=\"token function\">sudo</span> <span class=\"token function\">tar</span> -xJvf node-v16.14.0-linux-armv7l.tar.xz -C /usr/local/lib/nodejs <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>然后，在当前用户的配置文件<code>~/.profile</code>中，设置<code>Node.js</code>的环境变量：</p>\n<pre class=\"line-numbers language-profile\" data-language=\"profile\"><code class=\"language-profile\">export PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;nodejs&#x2F;node-v16.14.0-linux-armv7l&#x2F;bin:$PATH<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>刷新配置文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">.</span> ~/.profile<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>完成以上步骤后，<code>Node.js</code>已经安装成功。</p>\n<p>通过以下命令，可以查看<code>node</code>, <code>npm</code>和<code>npx</code>的版本。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">node</span> -v\nv16.14.0\n\n$ <span class=\"token function\">npm</span> -v\n<span class=\"token number\">8.3</span>.1\n\n$ npx -v\n<span class=\"token number\">8.3</span>.1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>通过修改配置文件<code>~/.profile</code>设置<code>Node.js</code>的方式，只能让当前用户能够使用最新版的node, npm和npx（其它用户，如root等无法使用新版<code>Node.js</code>）。而且在某些情况下，例如用crontab配置计划任务，或者将脚本配置为systemd服务的时候，仍然会使用旧版的<code>Node.js</code>。</p>\n<p>为了解决以上问题，可以删除或者重命名<code>/usr/bin/</code>目录下的<code>node</code>，<code>npm</code>和<code>npx</code>，然后为新版的<code>Node.js</code>创建软链接：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">mv</span> /usr/bin/node /usr/bin/node.bak\n<span class=\"token function\">sudo</span> <span class=\"token function\">mv</span> /usr/bin/npm /usr/bin/npm.bak\n<span class=\"token function\">sudo</span> <span class=\"token function\">mv</span> /usr/bin/npx /usr/bin/npx.bak\n<span class=\"token function\">sudo</span> <span class=\"token function\">ln</span> -s /usr/local/lib/nodejs/node-v16.14.0-linux-armv7l/bin/node /usr/bin/node\n<span class=\"token function\">sudo</span> <span class=\"token function\">ln</span> -s /usr/local/lib/nodejs/node-v16.14.0-linux-armv7l/bin/npm /usr/bin/npm\n<span class=\"token function\">sudo</span> <span class=\"token function\">ln</span> -s /usr/local/lib/nodejs/node-v16.14.0-linux-armv7l/bin/npx /usr/bin/npx<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h2><p>在命令行中，运行以下命令，安装<code>Hexo</code>：</p>\n<pre class=\"line-numbers language-Command\" data-language=\"Command\"><code class=\"language-Command\">npm install -g hexo-cli <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>验证<code>Hexo</code>安装成功。输入以下命令，可以看到<code>Hexo</code>的版本信息。</p>\n<pre class=\"line-numbers language-Command\" data-language=\"Command\"><code class=\"language-Command\">[Computer]:&gt; hexo -v\nINFO  Validating config\nhexo: 6.0.0\nhexo-cli: 4.3.0\nos: linux 5.4.51-v7l+ Raspbian GNU&#x2F;Linux 10 (buster) 10 (buster)\nnode: 16.14.0\nv8: 9.4.146.24-node.20\nuv: 1.43.0\nzlib: 1.2.11\nbrotli: 1.0.9\nares: 1.18.1\nmodules: 93\nnghttp2: 1.45.1\nnapi: 8\nllhttp: 6.0.4\nopenssl: 1.1.1m+quic\ncldr: 40.0\nicu: 70.1\ntz: 2021a3\nunicode: 14.0\nngtcp2: 0.1.0-DEV\nnghttp3: 0.1.0-DEV<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"安装Hexo插件\"><a href=\"#安装Hexo插件\" class=\"headerlink\" title=\"安装Hexo插件\"></a>安装Hexo插件</h2><p>如果需要将博客部署到<code>Github Page</code>，还需要安装插件<code>hexo-deployer-git</code>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-deployer-git --save<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>插件hexo-permalink-pinyin可以将博文链接中的中文字符转换为拼音：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i hexo-permalink-pinyin --save<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"配置Hexo\"><a href=\"#配置Hexo\" class=\"headerlink\" title=\"配置Hexo\"></a>配置Hexo</h2><p>创建目录<code>blog</code>，并完成初始化：</p>\n<pre class=\"line-numbers language-Command\" data-language=\"Command\"><code class=\"language-Command\">[Computer]:&gt; mkdir blog\n[Computer]:&gt; hexo init blog\nINFO  Cloning hexo-starter https:&#x2F;&#x2F;github.com&#x2F;hexojs&#x2F;hexo-starter.git\nINFO  Install dependencies\nINFO  Start blogging with Hexo!<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>设置语言， 用记事本打开<code>_config.yml</code>， 设置<code>language</code>参数：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">language</span><span class=\"token punctuation\">:</span> zh<span class=\"token punctuation\">-</span>CN<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>修改主题：</p>\n<pre class=\"line-numbers language-Command\" data-language=\"Command\"><code class=\"language-Command\">git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next themes&#x2F;next  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p> 用记事本打开<code>_config.yml</code>， 设置<code>theme</code>参数。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">theme</span><span class=\"token punctuation\">:</span> next  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"运行和访问\"><a href=\"#运行和访问\" class=\"headerlink\" title=\"运行和访问\"></a>运行和访问</h2><p>在命令行窗口中，运行命令:</p>\n<pre class=\"line-numbers language-Command\" data-language=\"Command\"><code class=\"language-Command\">[Computer]:&gt; hexo s\nINFO  Validating config\nINFO  Start processing\nINFO  Hexo is running at http:&#x2F;&#x2F;localhost:4000&#x2F; . Press Ctrl+C to stop. <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p> 打开浏览器，输入URL: <a href=\"http://localhost:4000/\">http://localhost:4000</a><br> <img src=\"/2018/11/07/blog/ge-ren-bo-ke-hexo-an-zhuang-pian/08.png\"></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"个人博客-—-Hexo安装篇\"><a href=\"#个人博客-—-Hexo安装篇\" class=\"headerlink\" title=\"个人博客 — Hexo安装篇\"></a>个人博客 — Hexo安装篇</h1><h2 id=\"什么是Hexo\"><a href=\"#什么是Hexo\" class=\"headerlink\" title=\"什么是Hexo\"></a>什么是Hexo</h2><p><a href=\"https://hexo.io/\">Hexo</a>是一个快速、 简单和强大的博客框架。你可以用Markdown或者其它语言撰写博客内容，Hexo会自动生成静态文件。</p>\n<h2 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h2><p><strong>Node.js</strong> 是一个基于 Chrome V8 引擎的 服务器端的JavaScript 运行环境。首先，需要下载并安装<a href=\"https://nodejs.org/en/\">Node.js</a>，然后再安装<code>Hexo</code>以及相关插件。</p>","more":"<h3 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h3><ol>\n<li>下载并安装<a href=\"https://nodejs.org/en/\">Node.js</a>。     </li>\n<li>下载并安装<a href=\"https://git-scm.com/download/win\">Git</a>。</li>\n</ol>\n<h3 id=\"树莓派\"><a href=\"#树莓派\" class=\"headerlink\" title=\"树莓派\"></a>树莓派</h3><p>在树莓派上，先创建一个目录，用来存放<code>Node.js</code>文件，然后把下载的<code>Node.js</code>安装文件解压缩到目录<code>nodejs</code>下面。</p>\n<p>下面以安装文件<code>node-v16.14.0-linux-armv7l.tar.xz</code>为例：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">mkdir</span> -p /usr/local/lib/nodejs\n<span class=\"token function\">sudo</span> <span class=\"token function\">tar</span> -xJvf node-v16.14.0-linux-armv7l.tar.xz -C /usr/local/lib/nodejs <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>然后，在当前用户的配置文件<code>~/.profile</code>中，设置<code>Node.js</code>的环境变量：</p>\n<pre class=\"line-numbers language-profile\" data-language=\"profile\"><code class=\"language-profile\">export PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;nodejs&#x2F;node-v16.14.0-linux-armv7l&#x2F;bin:$PATH<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>刷新配置文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">.</span> ~/.profile<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>完成以上步骤后，<code>Node.js</code>已经安装成功。</p>\n<p>通过以下命令，可以查看<code>node</code>, <code>npm</code>和<code>npx</code>的版本。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">node</span> -v\nv16.14.0\n\n$ <span class=\"token function\">npm</span> -v\n<span class=\"token number\">8.3</span>.1\n\n$ npx -v\n<span class=\"token number\">8.3</span>.1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>通过修改配置文件<code>~/.profile</code>设置<code>Node.js</code>的方式，只能让当前用户能够使用最新版的node, npm和npx（其它用户，如root等无法使用新版<code>Node.js</code>）。而且在某些情况下，例如用crontab配置计划任务，或者将脚本配置为systemd服务的时候，仍然会使用旧版的<code>Node.js</code>。</p>\n<p>为了解决以上问题，可以删除或者重命名<code>/usr/bin/</code>目录下的<code>node</code>，<code>npm</code>和<code>npx</code>，然后为新版的<code>Node.js</code>创建软链接：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">mv</span> /usr/bin/node /usr/bin/node.bak\n<span class=\"token function\">sudo</span> <span class=\"token function\">mv</span> /usr/bin/npm /usr/bin/npm.bak\n<span class=\"token function\">sudo</span> <span class=\"token function\">mv</span> /usr/bin/npx /usr/bin/npx.bak\n<span class=\"token function\">sudo</span> <span class=\"token function\">ln</span> -s /usr/local/lib/nodejs/node-v16.14.0-linux-armv7l/bin/node /usr/bin/node\n<span class=\"token function\">sudo</span> <span class=\"token function\">ln</span> -s /usr/local/lib/nodejs/node-v16.14.0-linux-armv7l/bin/npm /usr/bin/npm\n<span class=\"token function\">sudo</span> <span class=\"token function\">ln</span> -s /usr/local/lib/nodejs/node-v16.14.0-linux-armv7l/bin/npx /usr/bin/npx<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h2><p>在命令行中，运行以下命令，安装<code>Hexo</code>：</p>\n<pre class=\"line-numbers language-Command\" data-language=\"Command\"><code class=\"language-Command\">npm install -g hexo-cli <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>验证<code>Hexo</code>安装成功。输入以下命令，可以看到<code>Hexo</code>的版本信息。</p>\n<pre class=\"line-numbers language-Command\" data-language=\"Command\"><code class=\"language-Command\">[Computer]:&gt; hexo -v\nINFO  Validating config\nhexo: 6.0.0\nhexo-cli: 4.3.0\nos: linux 5.4.51-v7l+ Raspbian GNU&#x2F;Linux 10 (buster) 10 (buster)\nnode: 16.14.0\nv8: 9.4.146.24-node.20\nuv: 1.43.0\nzlib: 1.2.11\nbrotli: 1.0.9\nares: 1.18.1\nmodules: 93\nnghttp2: 1.45.1\nnapi: 8\nllhttp: 6.0.4\nopenssl: 1.1.1m+quic\ncldr: 40.0\nicu: 70.1\ntz: 2021a3\nunicode: 14.0\nngtcp2: 0.1.0-DEV\nnghttp3: 0.1.0-DEV<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"安装Hexo插件\"><a href=\"#安装Hexo插件\" class=\"headerlink\" title=\"安装Hexo插件\"></a>安装Hexo插件</h2><p>如果需要将博客部署到<code>Github Page</code>，还需要安装插件<code>hexo-deployer-git</code>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-deployer-git --save<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>插件hexo-permalink-pinyin可以将博文链接中的中文字符转换为拼音：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i hexo-permalink-pinyin --save<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"配置Hexo\"><a href=\"#配置Hexo\" class=\"headerlink\" title=\"配置Hexo\"></a>配置Hexo</h2><p>创建目录<code>blog</code>，并完成初始化：</p>\n<pre class=\"line-numbers language-Command\" data-language=\"Command\"><code class=\"language-Command\">[Computer]:&gt; mkdir blog\n[Computer]:&gt; hexo init blog\nINFO  Cloning hexo-starter https:&#x2F;&#x2F;github.com&#x2F;hexojs&#x2F;hexo-starter.git\nINFO  Install dependencies\nINFO  Start blogging with Hexo!<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>设置语言， 用记事本打开<code>_config.yml</code>， 设置<code>language</code>参数：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">language</span><span class=\"token punctuation\">:</span> zh<span class=\"token punctuation\">-</span>CN<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>修改主题：</p>\n<pre class=\"line-numbers language-Command\" data-language=\"Command\"><code class=\"language-Command\">git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next themes&#x2F;next  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p> 用记事本打开<code>_config.yml</code>， 设置<code>theme</code>参数。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">theme</span><span class=\"token punctuation\">:</span> next  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"运行和访问\"><a href=\"#运行和访问\" class=\"headerlink\" title=\"运行和访问\"></a>运行和访问</h2><p>在命令行窗口中，运行命令:</p>\n<pre class=\"line-numbers language-Command\" data-language=\"Command\"><code class=\"language-Command\">[Computer]:&gt; hexo s\nINFO  Validating config\nINFO  Start processing\nINFO  Hexo is running at http:&#x2F;&#x2F;localhost:4000&#x2F; . Press Ctrl+C to stop. <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p> 打开浏览器，输入URL: <a href=\"http://localhost:4000/\">http://localhost:4000</a><br> <img src=\"/2018/11/07/blog/ge-ren-bo-ke-hexo-an-zhuang-pian/08.png\"></p>"},{"title":"个人博客 — Hexo标签和分类篇","date":"2018-11-09T05:16:18.000Z","_content":"# 标签 #\n\n## 新建标签页面 ##\n\n1. 在站点目录下，打开Git Bash命令窗口\n2. 输入以下命令，新建标签页面，该命令将在.\\source\\tags目录下创建文件index.md  \n```bash\nhexo new page tags\n```\n\n## 设置页面类型 ##\n\n1. 访问目录.\\source\\tags，并用记事本打开文件index.md\n2. 添加 type: \"tags\", 将页面类型设置为tags\n```\n---\ntitle: 标签\ndate: 2018-11-08 12:02:31\ntype: \"tags\"\n---\n```\n<!-- more -->\n\n## 修改菜单 ##\n\n1. 打开Next配置文件_config.yml\n2. 查找\"Menu settings\"，删除tags设置所在的#号\n```\nmenu:\n\n\thome: /\n\ttags: /tags\n```\n3. 启用Tags以后，首页会显示“标签”的选项\n\n## 为新建的博文添加标签 ##\n\n1. 以下示例为博文添加了两个标签: Blog 和 Hexo \n```\n---\ntitle: 个人博客 —— Hexo标签和分类篇\ndate: 2018-11-09 13:16:18\ntags:\n- Blog\n- Hexo\n```\n# 分类 #\n\n## 新建分类页面 ##\n\n1. 在站点目录下，打开Git Bash命令窗口\n2. 输入以下命令，新建标签页面，该命令将在.\\source\\categories目录下创建文件index.md  \n```\nhexo new page categories\n```\n## 设置页面类型 ##\n\n1. 访问目录.\\source\\categories，并用记事本打开文件index.md\n2. 添加 type: \"categories\", 将页面类型设置为categories\n```\n---\ntitle: 分类\ndate: 2018-11-08 12:02:31\ntype: \"categories\"\n---\n```\n## 修改菜单 ##\n\n1. 打开Next配置文件_config.yml\n2. 查找\"Menu settings\"，删除categories设置所在的#号\n```\nmenu:\n\n\thome: /\n\tcategories: /categories\n```\n3. 启用categories以后，首页会显示“分类”的选项\n\n## 为新建的博文添加标签 ##\n\n1. 以下示例为博文添加了一个分类: 互联网 \n```\n---\ntitle: 个人博客 —— Hexo标签和分类篇\ndate: 2018-11-09 13:16:18\ntags:\n- 互联网\n```","source":"_posts/blog/个人博客-—-Hexo标签和分类篇.md","raw":"---\ntitle: 个人博客 — Hexo标签和分类篇\ndate: 2018-11-09 13:16:18\ntags:\n- hexo\ncategories:\n- Blog\n---\n# 标签 #\n\n## 新建标签页面 ##\n\n1. 在站点目录下，打开Git Bash命令窗口\n2. 输入以下命令，新建标签页面，该命令将在.\\source\\tags目录下创建文件index.md  \n```bash\nhexo new page tags\n```\n\n## 设置页面类型 ##\n\n1. 访问目录.\\source\\tags，并用记事本打开文件index.md\n2. 添加 type: \"tags\", 将页面类型设置为tags\n```\n---\ntitle: 标签\ndate: 2018-11-08 12:02:31\ntype: \"tags\"\n---\n```\n<!-- more -->\n\n## 修改菜单 ##\n\n1. 打开Next配置文件_config.yml\n2. 查找\"Menu settings\"，删除tags设置所在的#号\n```\nmenu:\n\n\thome: /\n\ttags: /tags\n```\n3. 启用Tags以后，首页会显示“标签”的选项\n\n## 为新建的博文添加标签 ##\n\n1. 以下示例为博文添加了两个标签: Blog 和 Hexo \n```\n---\ntitle: 个人博客 —— Hexo标签和分类篇\ndate: 2018-11-09 13:16:18\ntags:\n- Blog\n- Hexo\n```\n# 分类 #\n\n## 新建分类页面 ##\n\n1. 在站点目录下，打开Git Bash命令窗口\n2. 输入以下命令，新建标签页面，该命令将在.\\source\\categories目录下创建文件index.md  \n```\nhexo new page categories\n```\n## 设置页面类型 ##\n\n1. 访问目录.\\source\\categories，并用记事本打开文件index.md\n2. 添加 type: \"categories\", 将页面类型设置为categories\n```\n---\ntitle: 分类\ndate: 2018-11-08 12:02:31\ntype: \"categories\"\n---\n```\n## 修改菜单 ##\n\n1. 打开Next配置文件_config.yml\n2. 查找\"Menu settings\"，删除categories设置所在的#号\n```\nmenu:\n\n\thome: /\n\tcategories: /categories\n```\n3. 启用categories以后，首页会显示“分类”的选项\n\n## 为新建的博文添加标签 ##\n\n1. 以下示例为博文添加了一个分类: 互联网 \n```\n---\ntitle: 个人博客 —— Hexo标签和分类篇\ndate: 2018-11-09 13:16:18\ntags:\n- 互联网\n```","slug":"blog/个人博客-—-Hexo标签和分类篇","published":1,"updated":"2023-03-03T01:33:03.340Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clexvkk5h00085i73d9ruc3jk","content":"<h1 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h1><h2 id=\"新建标签页面\"><a href=\"#新建标签页面\" class=\"headerlink\" title=\"新建标签页面\"></a>新建标签页面</h2><ol>\n<li>在站点目录下，打开Git Bash命令窗口</li>\n<li>输入以下命令，新建标签页面，该命令将在.\\source\\tags目录下创建文件index.md  <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo new page tags<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<h2 id=\"设置页面类型\"><a href=\"#设置页面类型\" class=\"headerlink\" title=\"设置页面类型\"></a>设置页面类型</h2><ol>\n<li>访问目录.\\source\\tags，并用记事本打开文件index.md</li>\n<li>添加 type: “tags”, 将页面类型设置为tags<pre class=\"line-numbers language-none\"><code class=\"language-none\">---\ntitle: 标签\ndate: 2018-11-08 12:02:31\ntype: &quot;tags&quot;\n---<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<span id=\"more\"></span></li>\n</ol>\n<h2 id=\"修改菜单\"><a href=\"#修改菜单\" class=\"headerlink\" title=\"修改菜单\"></a>修改菜单</h2><ol>\n<li>打开Next配置文件_config.yml</li>\n<li>查找”Menu settings”，删除tags设置所在的#号<pre class=\"line-numbers language-none\"><code class=\"language-none\">menu:\n\n\thome: &#x2F;\n\ttags: &#x2F;tags<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>启用Tags以后，首页会显示“标签”的选项</li>\n</ol>\n<h2 id=\"为新建的博文添加标签\"><a href=\"#为新建的博文添加标签\" class=\"headerlink\" title=\"为新建的博文添加标签\"></a>为新建的博文添加标签</h2><ol>\n<li>以下示例为博文添加了两个标签: Blog 和 Hexo <pre class=\"line-numbers language-none\"><code class=\"language-none\">---\ntitle: 个人博客 —— Hexo标签和分类篇\ndate: 2018-11-09 13:16:18\ntags:\n- Blog\n- Hexo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h1></li>\n</ol>\n<h2 id=\"新建分类页面\"><a href=\"#新建分类页面\" class=\"headerlink\" title=\"新建分类页面\"></a>新建分类页面</h2><ol>\n<li><p>在站点目录下，打开Git Bash命令窗口</p>\n</li>\n<li><p>输入以下命令，新建标签页面，该命令将在.\\source\\categories目录下创建文件index.md  </p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">hexo new page categories<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"设置页面类型-1\"><a href=\"#设置页面类型-1\" class=\"headerlink\" title=\"设置页面类型\"></a>设置页面类型</h2></li>\n<li><p>访问目录.\\source\\categories，并用记事本打开文件index.md</p>\n</li>\n<li><p>添加 type: “categories”, 将页面类型设置为categories</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">---\ntitle: 分类\ndate: 2018-11-08 12:02:31\ntype: &quot;categories&quot;\n---<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"修改菜单-1\"><a href=\"#修改菜单-1\" class=\"headerlink\" title=\"修改菜单\"></a>修改菜单</h2></li>\n<li><p>打开Next配置文件_config.yml</p>\n</li>\n<li><p>查找”Menu settings”，删除categories设置所在的#号</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">menu:\n\n\thome: &#x2F;\n\tcategories: &#x2F;categories<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>启用categories以后，首页会显示“分类”的选项</p>\n</li>\n</ol>\n<h2 id=\"为新建的博文添加标签-1\"><a href=\"#为新建的博文添加标签-1\" class=\"headerlink\" title=\"为新建的博文添加标签\"></a>为新建的博文添加标签</h2><ol>\n<li>以下示例为博文添加了一个分类: 互联网 <pre class=\"line-numbers language-none\"><code class=\"language-none\">---\ntitle: 个人博客 —— Hexo标签和分类篇\ndate: 2018-11-09 13:16:18\ntags:\n- 互联网<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n","site":{"data":{}},"excerpt":"<h1 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h1><h2 id=\"新建标签页面\"><a href=\"#新建标签页面\" class=\"headerlink\" title=\"新建标签页面\"></a>新建标签页面</h2><ol>\n<li>在站点目录下，打开Git Bash命令窗口</li>\n<li>输入以下命令，新建标签页面，该命令将在.\\source\\tags目录下创建文件index.md  <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo new page tags<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<h2 id=\"设置页面类型\"><a href=\"#设置页面类型\" class=\"headerlink\" title=\"设置页面类型\"></a>设置页面类型</h2><ol>\n<li>访问目录.\\source\\tags，并用记事本打开文件index.md</li>\n<li>添加 type: “tags”, 将页面类型设置为tags<pre class=\"line-numbers language-none\"><code class=\"language-none\">---\ntitle: 标签\ndate: 2018-11-08 12:02:31\ntype: &quot;tags&quot;\n---<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>","more":"</li>\n</ol>\n<h2 id=\"修改菜单\"><a href=\"#修改菜单\" class=\"headerlink\" title=\"修改菜单\"></a>修改菜单</h2><ol>\n<li>打开Next配置文件_config.yml</li>\n<li>查找”Menu settings”，删除tags设置所在的#号<pre class=\"line-numbers language-none\"><code class=\"language-none\">menu:\n\n\thome: &#x2F;\n\ttags: &#x2F;tags<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>启用Tags以后，首页会显示“标签”的选项</li>\n</ol>\n<h2 id=\"为新建的博文添加标签\"><a href=\"#为新建的博文添加标签\" class=\"headerlink\" title=\"为新建的博文添加标签\"></a>为新建的博文添加标签</h2><ol>\n<li>以下示例为博文添加了两个标签: Blog 和 Hexo <pre class=\"line-numbers language-none\"><code class=\"language-none\">---\ntitle: 个人博客 —— Hexo标签和分类篇\ndate: 2018-11-09 13:16:18\ntags:\n- Blog\n- Hexo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h1></li>\n</ol>\n<h2 id=\"新建分类页面\"><a href=\"#新建分类页面\" class=\"headerlink\" title=\"新建分类页面\"></a>新建分类页面</h2><ol>\n<li><p>在站点目录下，打开Git Bash命令窗口</p>\n</li>\n<li><p>输入以下命令，新建标签页面，该命令将在.\\source\\categories目录下创建文件index.md  </p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">hexo new page categories<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"设置页面类型-1\"><a href=\"#设置页面类型-1\" class=\"headerlink\" title=\"设置页面类型\"></a>设置页面类型</h2></li>\n<li><p>访问目录.\\source\\categories，并用记事本打开文件index.md</p>\n</li>\n<li><p>添加 type: “categories”, 将页面类型设置为categories</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">---\ntitle: 分类\ndate: 2018-11-08 12:02:31\ntype: &quot;categories&quot;\n---<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"修改菜单-1\"><a href=\"#修改菜单-1\" class=\"headerlink\" title=\"修改菜单\"></a>修改菜单</h2></li>\n<li><p>打开Next配置文件_config.yml</p>\n</li>\n<li><p>查找”Menu settings”，删除categories设置所在的#号</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">menu:\n\n\thome: &#x2F;\n\tcategories: &#x2F;categories<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>启用categories以后，首页会显示“分类”的选项</p>\n</li>\n</ol>\n<h2 id=\"为新建的博文添加标签-1\"><a href=\"#为新建的博文添加标签-1\" class=\"headerlink\" title=\"为新建的博文添加标签\"></a>为新建的博文添加标签</h2><ol>\n<li>以下示例为博文添加了一个分类: 互联网 <pre class=\"line-numbers language-none\"><code class=\"language-none\">---\ntitle: 个人博客 —— Hexo标签和分类篇\ndate: 2018-11-09 13:16:18\ntags:\n- 互联网<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>"},{"title":"博客主题","date":"2021-09-16T08:42:00.000Z","_content":"\n经过几天的学习和摸索，总算把博客的主题调整为自己喜欢的风格了。由于不是程序员，所以对于HTML和CSS的语法不太了解，但是幸好找到了一个专门介绍Web开发的网站[W3School](https://www.w3school.com.cn/)，学到很多关于网页开发的知识。\n\n简单总结一下，主要是调整了以下内容：\n\n- 博客网页的标题和文章标题的字体，将其调整为微软雅黑\n- 导航栏的颜色，文章标题的颜色\n- 所有字体的大小\n- 文章中发布的日期、作者、分类等信息的位置，字体大小\n- **图片在文章中的自适应缩放**\n- **网站适配手机屏幕**\n\n为了调整最后两项功能，花费了很多时间学习和修改代码。\n\n以下是PC上的显示效果：\n\n{% asset_img blog_pc.JPG 600 %}\n<!-- more -->\n以下是手机上的显示效果：\n\n{% asset_img 20210915_064223000_iOS.jpg 600 %}\n\n","source":"_posts/blog/博客主题.md","raw":"---\ntitle: 博客主题\ndate: 2021-9-16 16:42:00\ntags: \n - pelican\ncategories: \n - Blog\n---\n\n经过几天的学习和摸索，总算把博客的主题调整为自己喜欢的风格了。由于不是程序员，所以对于HTML和CSS的语法不太了解，但是幸好找到了一个专门介绍Web开发的网站[W3School](https://www.w3school.com.cn/)，学到很多关于网页开发的知识。\n\n简单总结一下，主要是调整了以下内容：\n\n- 博客网页的标题和文章标题的字体，将其调整为微软雅黑\n- 导航栏的颜色，文章标题的颜色\n- 所有字体的大小\n- 文章中发布的日期、作者、分类等信息的位置，字体大小\n- **图片在文章中的自适应缩放**\n- **网站适配手机屏幕**\n\n为了调整最后两项功能，花费了很多时间学习和修改代码。\n\n以下是PC上的显示效果：\n\n{% asset_img blog_pc.JPG 600 %}\n<!-- more -->\n以下是手机上的显示效果：\n\n{% asset_img 20210915_064223000_iOS.jpg 600 %}\n\n","slug":"blog/博客主题","published":1,"updated":"2023-03-03T01:33:03.310Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clexvkk5r000c5i73ekby70kb","content":"<p>经过几天的学习和摸索，总算把博客的主题调整为自己喜欢的风格了。由于不是程序员，所以对于HTML和CSS的语法不太了解，但是幸好找到了一个专门介绍Web开发的网站<a href=\"https://www.w3school.com.cn/\">W3School</a>，学到很多关于网页开发的知识。</p>\n<p>简单总结一下，主要是调整了以下内容：</p>\n<ul>\n<li>博客网页的标题和文章标题的字体，将其调整为微软雅黑</li>\n<li>导航栏的颜色，文章标题的颜色</li>\n<li>所有字体的大小</li>\n<li>文章中发布的日期、作者、分类等信息的位置，字体大小</li>\n<li><strong>图片在文章中的自适应缩放</strong></li>\n<li><strong>网站适配手机屏幕</strong></li>\n</ul>\n<p>为了调整最后两项功能，花费了很多时间学习和修改代码。</p>\n<p>以下是PC上的显示效果：</p>\n<img src=\"/2021/09/16/blog/bo-ke-zhu-ti/blog_pc.JPG\" class=\"\" width=\"600\">\n<span id=\"more\"></span>\n<p>以下是手机上的显示效果：</p>\n<img src=\"/2021/09/16/blog/bo-ke-zhu-ti/20210915_064223000_iOS.jpg\" class=\"\" width=\"600\">\n\n","site":{"data":{}},"excerpt":"<p>经过几天的学习和摸索，总算把博客的主题调整为自己喜欢的风格了。由于不是程序员，所以对于HTML和CSS的语法不太了解，但是幸好找到了一个专门介绍Web开发的网站<a href=\"https://www.w3school.com.cn/\">W3School</a>，学到很多关于网页开发的知识。</p>\n<p>简单总结一下，主要是调整了以下内容：</p>\n<ul>\n<li>博客网页的标题和文章标题的字体，将其调整为微软雅黑</li>\n<li>导航栏的颜色，文章标题的颜色</li>\n<li>所有字体的大小</li>\n<li>文章中发布的日期、作者、分类等信息的位置，字体大小</li>\n<li><strong>图片在文章中的自适应缩放</strong></li>\n<li><strong>网站适配手机屏幕</strong></li>\n</ul>\n<p>为了调整最后两项功能，花费了很多时间学习和修改代码。</p>\n<p>以下是PC上的显示效果：</p>\n<img src=\"/2021/09/16/blog/bo-ke-zhu-ti/blog_pc.JPG\" class=\"\" width=\"600\">","more":"<p>以下是手机上的显示效果：</p>\n<img src=\"/2021/09/16/blog/bo-ke-zhu-ti/20210915_064223000_iOS.jpg\" class=\"\" width=\"600\">"},{"title":"发布博客时调整图片的大小","date":"2023-02-26T04:05:00.000Z","_content":"\n在博客中插入的图片，等发布以后，只能以实际的尺寸显示，无法通过Markdown语句修改图片大小。如果图片很大，就会占用大幅的版面，看起来非常不协调。\n\n例如以下的示例图片就占据了比较大的版面。\n\n![](3C1EC821-5DCC-4853-849C-ADB69AE6B0D4_1_105_c.jpeg)\n\n<!-- more -->\n\n为了能让版面美观一些，只能用画图软件手工调小图片尺寸，然后再插入到博客中。如果图片数量太多，每次调校图片也是不小的工作量。因此，最好的方法就是在写博客的时候，可以直接用语句定义图片的尺寸，然后发布博客的时候，由软件自动完成。\n\n翻了一下Hexo的官方文档，发现[Tag Plugins](https://hexo.io/docs/tag-plugins)中的[Embed image](https://hexo.io/docs/tag-plugins#Embed-image) 语句可以解决这个问题。\n\n`{% asset_img [class names] slug [width] [height] [title text [alt text]] %}`\n\n**asset_imag：** 标签名称，是**必填项**。\n\n**class names：** 设置class属性的名称，是可选项。\n\n**slug：** 图片文件的路径，既可以使用本地路径，也可以使用网络路径，是**必填项**。如果是本地路径，可以使用相对路径，例如，直接填写图片的文件名：example.jpg。\n\n**width：** 图片的宽度，是可选项。\n\n**height：** 图片的高度，是可选项。\n\n**title text：** 图片的名称，显示在图片下方，是可选项。\n\n**alt text：** **用文本替代图片**，在图片无法显示或者用户禁用图片显示时，代替图片显示在浏览器中的内容\n\n下方语句将图片的宽度设置为500， 并且设置了图片的名称为“示例”。\n\n`{% asset_img 3C1EC821-5DCC-4853-849C-ADB69AE6B0D4_1_105_c.jpeg 500 示例%}`\n\n{% asset_img 3C1EC821-5DCC-4853-849C-ADB69AE6B0D4_1_105_c.jpeg 500 示例%}\n\n","source":"_posts/blog/发布博客时调整图片的大小.md","raw":"---\ntitle: 发布博客时调整图片的大小\ndate: 2023-02-26 12:05:00\ntags: \n - hexo\ncategories: \n - Blog\n---\n\n在博客中插入的图片，等发布以后，只能以实际的尺寸显示，无法通过Markdown语句修改图片大小。如果图片很大，就会占用大幅的版面，看起来非常不协调。\n\n例如以下的示例图片就占据了比较大的版面。\n\n![](3C1EC821-5DCC-4853-849C-ADB69AE6B0D4_1_105_c.jpeg)\n\n<!-- more -->\n\n为了能让版面美观一些，只能用画图软件手工调小图片尺寸，然后再插入到博客中。如果图片数量太多，每次调校图片也是不小的工作量。因此，最好的方法就是在写博客的时候，可以直接用语句定义图片的尺寸，然后发布博客的时候，由软件自动完成。\n\n翻了一下Hexo的官方文档，发现[Tag Plugins](https://hexo.io/docs/tag-plugins)中的[Embed image](https://hexo.io/docs/tag-plugins#Embed-image) 语句可以解决这个问题。\n\n`{% asset_img [class names] slug [width] [height] [title text [alt text]] %}`\n\n**asset_imag：** 标签名称，是**必填项**。\n\n**class names：** 设置class属性的名称，是可选项。\n\n**slug：** 图片文件的路径，既可以使用本地路径，也可以使用网络路径，是**必填项**。如果是本地路径，可以使用相对路径，例如，直接填写图片的文件名：example.jpg。\n\n**width：** 图片的宽度，是可选项。\n\n**height：** 图片的高度，是可选项。\n\n**title text：** 图片的名称，显示在图片下方，是可选项。\n\n**alt text：** **用文本替代图片**，在图片无法显示或者用户禁用图片显示时，代替图片显示在浏览器中的内容\n\n下方语句将图片的宽度设置为500， 并且设置了图片的名称为“示例”。\n\n`{% asset_img 3C1EC821-5DCC-4853-849C-ADB69AE6B0D4_1_105_c.jpeg 500 示例%}`\n\n{% asset_img 3C1EC821-5DCC-4853-849C-ADB69AE6B0D4_1_105_c.jpeg 500 示例%}\n\n","slug":"blog/发布博客时调整图片的大小","published":1,"updated":"2023-03-03T01:33:03.340Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clexvkk5w000d5i73ezh2fjz5","content":"<p>在博客中插入的图片，等发布以后，只能以实际的尺寸显示，无法通过Markdown语句修改图片大小。如果图片很大，就会占用大幅的版面，看起来非常不协调。</p>\n<p>例如以下的示例图片就占据了比较大的版面。</p>\n<p><img src=\"/2023/02/26/blog/fa-bu-bo-ke-shi-diao-zheng-tu-pian-de-da-xiao/3C1EC821-5DCC-4853-849C-ADB69AE6B0D4_1_105_c.jpeg\"></p>\n<span id=\"more\"></span>\n\n<p>为了能让版面美观一些，只能用画图软件手工调小图片尺寸，然后再插入到博客中。如果图片数量太多，每次调校图片也是不小的工作量。因此，最好的方法就是在写博客的时候，可以直接用语句定义图片的尺寸，然后发布博客的时候，由软件自动完成。</p>\n<p>翻了一下Hexo的官方文档，发现<a href=\"https://hexo.io/docs/tag-plugins\">Tag Plugins</a>中的<a href=\"https://hexo.io/docs/tag-plugins#Embed-image\">Embed image</a> 语句可以解决这个问题。</p>\n<p><code>&#123;% asset_img [class names] slug [width] [height] [title text [alt text]] %&#125;</code></p>\n<p><strong>asset_imag：</strong> 标签名称，是<strong>必填项</strong>。</p>\n<p><strong>class names：</strong> 设置class属性的名称，是可选项。</p>\n<p><strong>slug：</strong> 图片文件的路径，既可以使用本地路径，也可以使用网络路径，是<strong>必填项</strong>。如果是本地路径，可以使用相对路径，例如，直接填写图片的文件名：example.jpg。</p>\n<p><strong>width：</strong> 图片的宽度，是可选项。</p>\n<p><strong>height：</strong> 图片的高度，是可选项。</p>\n<p><strong>title text：</strong> 图片的名称，显示在图片下方，是可选项。</p>\n<p><strong>alt text：</strong> <strong>用文本替代图片</strong>，在图片无法显示或者用户禁用图片显示时，代替图片显示在浏览器中的内容</p>\n<p>下方语句将图片的宽度设置为500， 并且设置了图片的名称为“示例”。</p>\n<p><code>&#123;% asset_img 3C1EC821-5DCC-4853-849C-ADB69AE6B0D4_1_105_c.jpeg 500 示例%&#125;</code></p>\n<img src=\"/2023/02/26/blog/fa-bu-bo-ke-shi-diao-zheng-tu-pian-de-da-xiao/3C1EC821-5DCC-4853-849C-ADB69AE6B0D4_1_105_c.jpeg\" class=\"\" width=\"500\" title=\"示例\">\n\n","site":{"data":{}},"excerpt":"<p>在博客中插入的图片，等发布以后，只能以实际的尺寸显示，无法通过Markdown语句修改图片大小。如果图片很大，就会占用大幅的版面，看起来非常不协调。</p>\n<p>例如以下的示例图片就占据了比较大的版面。</p>\n<p><img src=\"/2023/02/26/blog/fa-bu-bo-ke-shi-diao-zheng-tu-pian-de-da-xiao/3C1EC821-5DCC-4853-849C-ADB69AE6B0D4_1_105_c.jpeg\"></p>","more":"<p>为了能让版面美观一些，只能用画图软件手工调小图片尺寸，然后再插入到博客中。如果图片数量太多，每次调校图片也是不小的工作量。因此，最好的方法就是在写博客的时候，可以直接用语句定义图片的尺寸，然后发布博客的时候，由软件自动完成。</p>\n<p>翻了一下Hexo的官方文档，发现<a href=\"https://hexo.io/docs/tag-plugins\">Tag Plugins</a>中的<a href=\"https://hexo.io/docs/tag-plugins#Embed-image\">Embed image</a> 语句可以解决这个问题。</p>\n<p><code>&#123;% asset_img [class names] slug [width] [height] [title text [alt text]] %&#125;</code></p>\n<p><strong>asset_imag：</strong> 标签名称，是<strong>必填项</strong>。</p>\n<p><strong>class names：</strong> 设置class属性的名称，是可选项。</p>\n<p><strong>slug：</strong> 图片文件的路径，既可以使用本地路径，也可以使用网络路径，是<strong>必填项</strong>。如果是本地路径，可以使用相对路径，例如，直接填写图片的文件名：example.jpg。</p>\n<p><strong>width：</strong> 图片的宽度，是可选项。</p>\n<p><strong>height：</strong> 图片的高度，是可选项。</p>\n<p><strong>title text：</strong> 图片的名称，显示在图片下方，是可选项。</p>\n<p><strong>alt text：</strong> <strong>用文本替代图片</strong>，在图片无法显示或者用户禁用图片显示时，代替图片显示在浏览器中的内容</p>\n<p>下方语句将图片的宽度设置为500， 并且设置了图片的名称为“示例”。</p>\n<p><code>&#123;% asset_img 3C1EC821-5DCC-4853-849C-ADB69AE6B0D4_1_105_c.jpeg 500 示例%&#125;</code></p>\n<img src=\"/2023/02/26/blog/fa-bu-bo-ke-shi-diao-zheng-tu-pian-de-da-xiao/3C1EC821-5DCC-4853-849C-ADB69AE6B0D4_1_105_c.jpeg\" class=\"\" width=\"500\" title=\"示例\">"},{"title":"如何整理博客中的图片资源","date":"2023-02-24T08:25:00.000Z","_content":"\n图片是一篇优秀博文的重要组成部分，在Hexo中，通常可以用两种方式来储存图片：（1）**全局资源目录**，（2）**博客资源目录**。\n\n## 全局资源目录\n\n**全局资源目录** —— 在`source`目录下，创建`images`目录，把博客中的所有图片都放到该目录下。\n\n![](Pastedimage20230224145541.png)\n这种方法操作起来比较简单，只需要把每一篇博文的图片都存放到`images`目录下，但是，随着图片数量的增加，将来查找和修改博文中的图片会相对麻烦一些。\n\n<!-- more -->\n\n## 博客资源目录\n\n**博客资源目录** —— 每篇博客文章都拥有一个独立的资源目录，目录名称与博客文件的文件名相同。目录中可以存放图片、PDF文件、脚本等资源。\n\n![](Pastedimage20230224145706.png)\n\n与全局资源目录相比，博客资源目录更有弹性，每一篇博文拥有一个单独的资源目录，并且可以存放除图片以外的其它文件。如果需要修改博文中的图片，只需到博客资源目录下查找对应的文件。\n\n如果要启用博客资源目录的功能，需要在配置文件`_config.yml`中，配置参数`post_asset_folder`为`true`。这样，每次用命令`hexo new [layout] <title>`创建新博文的时候，都会自动生成一个与博客文件名相同的资源目录。\n\n```\n_config.yml\n\npost_asset_folder: true\n```\n\n## 使用相对路径引用图片\n\n如果要在文章中引用图片，除了可以使用Markdown语句`![](example.jpg)`以外，还可以使用Hexo的[Tag Plugins](https://hexo.io/docs/tag-plugins#Embed-image)语句`{% asset_img example.jpg %}`。\n\n在以前的Hexo版本中，如果在Markdown语句中使用图片文件的相对路径，图片无法在首页和存档中正常显示，只有点击打开文章后，才能看到里面的图片。这个问题目前已经解决，只需要在`_config.yml`中配置以下参数：\n\n```\n_config.yml\n\npost_asset_folder: true  \nmarked:  \n  prependRoot: true  \n  postAsset: true\n```\n\n此外，除了Markdown语句以外，也可以使用Hexo的[Tag Plugins](https://hexo.io/docs/tag-plugins#Embed-image)语句`{% asset_img slug [title] %}`。\n\n例如，下面的语句就是使用图片的相对路径。\n\n`{% asset_img example.jpg This is an example image %}`","source":"_posts/blog/如何整理博客中的图片资源.md","raw":"---\ntitle: 如何整理博客中的图片资源\ndate: 2023-02-24 16:25:00\ntags: \n - hexo\ncategories: \n - Blog\n---\n\n图片是一篇优秀博文的重要组成部分，在Hexo中，通常可以用两种方式来储存图片：（1）**全局资源目录**，（2）**博客资源目录**。\n\n## 全局资源目录\n\n**全局资源目录** —— 在`source`目录下，创建`images`目录，把博客中的所有图片都放到该目录下。\n\n![](Pastedimage20230224145541.png)\n这种方法操作起来比较简单，只需要把每一篇博文的图片都存放到`images`目录下，但是，随着图片数量的增加，将来查找和修改博文中的图片会相对麻烦一些。\n\n<!-- more -->\n\n## 博客资源目录\n\n**博客资源目录** —— 每篇博客文章都拥有一个独立的资源目录，目录名称与博客文件的文件名相同。目录中可以存放图片、PDF文件、脚本等资源。\n\n![](Pastedimage20230224145706.png)\n\n与全局资源目录相比，博客资源目录更有弹性，每一篇博文拥有一个单独的资源目录，并且可以存放除图片以外的其它文件。如果需要修改博文中的图片，只需到博客资源目录下查找对应的文件。\n\n如果要启用博客资源目录的功能，需要在配置文件`_config.yml`中，配置参数`post_asset_folder`为`true`。这样，每次用命令`hexo new [layout] <title>`创建新博文的时候，都会自动生成一个与博客文件名相同的资源目录。\n\n```\n_config.yml\n\npost_asset_folder: true\n```\n\n## 使用相对路径引用图片\n\n如果要在文章中引用图片，除了可以使用Markdown语句`![](example.jpg)`以外，还可以使用Hexo的[Tag Plugins](https://hexo.io/docs/tag-plugins#Embed-image)语句`{% asset_img example.jpg %}`。\n\n在以前的Hexo版本中，如果在Markdown语句中使用图片文件的相对路径，图片无法在首页和存档中正常显示，只有点击打开文章后，才能看到里面的图片。这个问题目前已经解决，只需要在`_config.yml`中配置以下参数：\n\n```\n_config.yml\n\npost_asset_folder: true  \nmarked:  \n  prependRoot: true  \n  postAsset: true\n```\n\n此外，除了Markdown语句以外，也可以使用Hexo的[Tag Plugins](https://hexo.io/docs/tag-plugins#Embed-image)语句`{% asset_img slug [title] %}`。\n\n例如，下面的语句就是使用图片的相对路径。\n\n`{% asset_img example.jpg This is an example image %}`","slug":"blog/如何整理博客中的图片资源","published":1,"updated":"2023-03-03T01:33:03.330Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clexvkk63000i5i737voq7dx6","content":"<p>图片是一篇优秀博文的重要组成部分，在Hexo中，通常可以用两种方式来储存图片：（1）<strong>全局资源目录</strong>，（2）<strong>博客资源目录</strong>。</p>\n<h2 id=\"全局资源目录\"><a href=\"#全局资源目录\" class=\"headerlink\" title=\"全局资源目录\"></a>全局资源目录</h2><p><strong>全局资源目录</strong> —— 在<code>source</code>目录下，创建<code>images</code>目录，把博客中的所有图片都放到该目录下。</p>\n<p><img src=\"/2023/02/24/blog/ru-he-zheng-li-bo-ke-zhong-de-tu-pian-zi-yuan/Pastedimage20230224145541.png\"><br>这种方法操作起来比较简单，只需要把每一篇博文的图片都存放到<code>images</code>目录下，但是，随着图片数量的增加，将来查找和修改博文中的图片会相对麻烦一些。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"博客资源目录\"><a href=\"#博客资源目录\" class=\"headerlink\" title=\"博客资源目录\"></a>博客资源目录</h2><p><strong>博客资源目录</strong> —— 每篇博客文章都拥有一个独立的资源目录，目录名称与博客文件的文件名相同。目录中可以存放图片、PDF文件、脚本等资源。</p>\n<p><img src=\"/2023/02/24/blog/ru-he-zheng-li-bo-ke-zhong-de-tu-pian-zi-yuan/Pastedimage20230224145706.png\"></p>\n<p>与全局资源目录相比，博客资源目录更有弹性，每一篇博文拥有一个单独的资源目录，并且可以存放除图片以外的其它文件。如果需要修改博文中的图片，只需到博客资源目录下查找对应的文件。</p>\n<p>如果要启用博客资源目录的功能，需要在配置文件<code>_config.yml</code>中，配置参数<code>post_asset_folder</code>为<code>true</code>。这样，每次用命令<code>hexo new [layout] &lt;title&gt;</code>创建新博文的时候，都会自动生成一个与博客文件名相同的资源目录。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">_config.yml\n\npost_asset_folder: true<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"使用相对路径引用图片\"><a href=\"#使用相对路径引用图片\" class=\"headerlink\" title=\"使用相对路径引用图片\"></a>使用相对路径引用图片</h2><p>如果要在文章中引用图片，除了可以使用Markdown语句<code>![](example.jpg)</code>以外，还可以使用Hexo的<a href=\"https://hexo.io/docs/tag-plugins#Embed-image\">Tag Plugins</a>语句<code>&#123;% asset_img example.jpg %&#125;</code>。</p>\n<p>在以前的Hexo版本中，如果在Markdown语句中使用图片文件的相对路径，图片无法在首页和存档中正常显示，只有点击打开文章后，才能看到里面的图片。这个问题目前已经解决，只需要在<code>_config.yml</code>中配置以下参数：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">_config.yml\n\npost_asset_folder: true  \nmarked:  \n  prependRoot: true  \n  postAsset: true<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>此外，除了Markdown语句以外，也可以使用Hexo的<a href=\"https://hexo.io/docs/tag-plugins#Embed-image\">Tag Plugins</a>语句<code>&#123;% asset_img slug [title] %&#125;</code>。</p>\n<p>例如，下面的语句就是使用图片的相对路径。</p>\n<p><code>&#123;% asset_img example.jpg This is an example image %&#125;</code></p>\n","site":{"data":{}},"excerpt":"<p>图片是一篇优秀博文的重要组成部分，在Hexo中，通常可以用两种方式来储存图片：（1）<strong>全局资源目录</strong>，（2）<strong>博客资源目录</strong>。</p>\n<h2 id=\"全局资源目录\"><a href=\"#全局资源目录\" class=\"headerlink\" title=\"全局资源目录\"></a>全局资源目录</h2><p><strong>全局资源目录</strong> —— 在<code>source</code>目录下，创建<code>images</code>目录，把博客中的所有图片都放到该目录下。</p>\n<p><img src=\"/2023/02/24/blog/ru-he-zheng-li-bo-ke-zhong-de-tu-pian-zi-yuan/Pastedimage20230224145541.png\"><br>这种方法操作起来比较简单，只需要把每一篇博文的图片都存放到<code>images</code>目录下，但是，随着图片数量的增加，将来查找和修改博文中的图片会相对麻烦一些。</p>","more":"<h2 id=\"博客资源目录\"><a href=\"#博客资源目录\" class=\"headerlink\" title=\"博客资源目录\"></a>博客资源目录</h2><p><strong>博客资源目录</strong> —— 每篇博客文章都拥有一个独立的资源目录，目录名称与博客文件的文件名相同。目录中可以存放图片、PDF文件、脚本等资源。</p>\n<p><img src=\"/2023/02/24/blog/ru-he-zheng-li-bo-ke-zhong-de-tu-pian-zi-yuan/Pastedimage20230224145706.png\"></p>\n<p>与全局资源目录相比，博客资源目录更有弹性，每一篇博文拥有一个单独的资源目录，并且可以存放除图片以外的其它文件。如果需要修改博文中的图片，只需到博客资源目录下查找对应的文件。</p>\n<p>如果要启用博客资源目录的功能，需要在配置文件<code>_config.yml</code>中，配置参数<code>post_asset_folder</code>为<code>true</code>。这样，每次用命令<code>hexo new [layout] &lt;title&gt;</code>创建新博文的时候，都会自动生成一个与博客文件名相同的资源目录。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">_config.yml\n\npost_asset_folder: true<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"使用相对路径引用图片\"><a href=\"#使用相对路径引用图片\" class=\"headerlink\" title=\"使用相对路径引用图片\"></a>使用相对路径引用图片</h2><p>如果要在文章中引用图片，除了可以使用Markdown语句<code>![](example.jpg)</code>以外，还可以使用Hexo的<a href=\"https://hexo.io/docs/tag-plugins#Embed-image\">Tag Plugins</a>语句<code>&#123;% asset_img example.jpg %&#125;</code>。</p>\n<p>在以前的Hexo版本中，如果在Markdown语句中使用图片文件的相对路径，图片无法在首页和存档中正常显示，只有点击打开文章后，才能看到里面的图片。这个问题目前已经解决，只需要在<code>_config.yml</code>中配置以下参数：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">_config.yml\n\npost_asset_folder: true  \nmarked:  \n  prependRoot: true  \n  postAsset: true<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>此外，除了Markdown语句以外，也可以使用Hexo的<a href=\"https://hexo.io/docs/tag-plugins#Embed-image\">Tag Plugins</a>语句<code>&#123;% asset_img slug [title] %&#125;</code>。</p>\n<p>例如，下面的语句就是使用图片的相对路径。</p>\n<p><code>&#123;% asset_img example.jpg This is an example image %&#125;</code></p>"},{"title":"定期备份博客","date":"2021-09-21T13:05:00.000Z","updated":"2021-09-21T13:05:00.000Z","_content":"\n为了避免数据丢失，决定使用Python脚本来实现定期备份博客的内容。\n\n以下是需要实现的具体内容：\n\n- **每周日晚上11点30开始自动备份**\n- **将Blog目录下面的所有文件打包压缩后，复制到指定的备份目录下方**\n- **备份的文件名格式为: `backup-timestamps.tar.gz`，例如：`backup-2021-09-21_132517.tar.gz`**\n\n<!-- more -->\n\n以下是具体的代码：\n\n```python\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport tarfile\nimport os\nfrom datetime import datetime\nfrom shutil import copy, rmtree\n\n# 指定源文件夹路径，例如：/var/log\nsrc_folder = '/home/pi/blog'\n\n# 指定目标文件夹路径, 例如：/home/backup\ndst_folder = '/media/pi/D1T/backup/blog'\n\n# 备份开始的时间戳\ntimestamp = datetime.now().strftime('%Y-%m-%d_%H%M%S')\n\n# 指定备份的文件名\n\nfilename = 'backup'\n\nfull_filename = '%s/%s-%s.tar.gz' % (src_folder, filename, timestamp)\n\ntar = tarfile.open(full_filename, \"w:gz\")\nos.chdir(src_folder)\n\nfor name in os.listdir(\".\"):\n        tar.add(name)\ntar.close()\n\ncopy(full_filename, dst_folder)\n```\n\n为了能实现定期的自动备份，需要使用Linux系统的计划任务工具Crond。\n\n以下是配置计划任务的格式，从左往右的顺序为：分钟、小时、日、月、周。\n\n```\n# * * * * *  command to execute\n# ┬ ┬ ┬ ┬ ┬\n# │ │ │ │ │\n# │ │ │ │ │\n# │ │ │ │ └───── day of week (0 - 7) (0 to 6 are Sunday to Saturday, or use names; 7 is Sunday, the same as 0)\n# │ │ │ └────────── month (1 - 12)\n# │ │ └─────────────── day of month (1 - 31)\n# │ └──────────────────── hour (0 - 23)\n# └───────────────────────── min (0 - 59)\n```\n\n为了能实现每周日晚上11点30开始自动备份，需要执行命令`crontab -e`，然后配置以下内容：\n\n```\n30 23 * * 7 /usr/bin/python3 /home/pi/python/backup_blog.py\n```\n","source":"_posts/blog/定期备份博客.md","raw":"---\ntitle: 定期备份博客\ndate: 2021-09-21 21:05:00\nupdated: 2021-09-21 21:05:00\ntags: \n - pelican\ncategories: \n - Blog\n---\n\n为了避免数据丢失，决定使用Python脚本来实现定期备份博客的内容。\n\n以下是需要实现的具体内容：\n\n- **每周日晚上11点30开始自动备份**\n- **将Blog目录下面的所有文件打包压缩后，复制到指定的备份目录下方**\n- **备份的文件名格式为: `backup-timestamps.tar.gz`，例如：`backup-2021-09-21_132517.tar.gz`**\n\n<!-- more -->\n\n以下是具体的代码：\n\n```python\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport tarfile\nimport os\nfrom datetime import datetime\nfrom shutil import copy, rmtree\n\n# 指定源文件夹路径，例如：/var/log\nsrc_folder = '/home/pi/blog'\n\n# 指定目标文件夹路径, 例如：/home/backup\ndst_folder = '/media/pi/D1T/backup/blog'\n\n# 备份开始的时间戳\ntimestamp = datetime.now().strftime('%Y-%m-%d_%H%M%S')\n\n# 指定备份的文件名\n\nfilename = 'backup'\n\nfull_filename = '%s/%s-%s.tar.gz' % (src_folder, filename, timestamp)\n\ntar = tarfile.open(full_filename, \"w:gz\")\nos.chdir(src_folder)\n\nfor name in os.listdir(\".\"):\n        tar.add(name)\ntar.close()\n\ncopy(full_filename, dst_folder)\n```\n\n为了能实现定期的自动备份，需要使用Linux系统的计划任务工具Crond。\n\n以下是配置计划任务的格式，从左往右的顺序为：分钟、小时、日、月、周。\n\n```\n# * * * * *  command to execute\n# ┬ ┬ ┬ ┬ ┬\n# │ │ │ │ │\n# │ │ │ │ │\n# │ │ │ │ └───── day of week (0 - 7) (0 to 6 are Sunday to Saturday, or use names; 7 is Sunday, the same as 0)\n# │ │ │ └────────── month (1 - 12)\n# │ │ └─────────────── day of month (1 - 31)\n# │ └──────────────────── hour (0 - 23)\n# └───────────────────────── min (0 - 59)\n```\n\n为了能实现每周日晚上11点30开始自动备份，需要执行命令`crontab -e`，然后配置以下内容：\n\n```\n30 23 * * 7 /usr/bin/python3 /home/pi/python/backup_blog.py\n```\n","slug":"blog/定期备份博客","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clexvkk68000l5i73070u29gf","content":"<p>为了避免数据丢失，决定使用Python脚本来实现定期备份博客的内容。</p>\n<p>以下是需要实现的具体内容：</p>\n<ul>\n<li><strong>每周日晚上11点30开始自动备份</strong></li>\n<li><strong>将Blog目录下面的所有文件打包压缩后，复制到指定的备份目录下方</strong></li>\n<li><strong>备份的文件名格式为: <code>backup-timestamps.tar.gz</code>，例如：<code>backup-2021-09-21_132517.tar.gz</code></strong></li>\n</ul>\n<span id=\"more\"></span>\n\n<p>以下是具体的代码：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">#!/usr/bin/env python</span>\n<span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n\n<span class=\"token keyword\">import</span> tarfile\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">from</span> datetime <span class=\"token keyword\">import</span> datetime\n<span class=\"token keyword\">from</span> shutil <span class=\"token keyword\">import</span> copy<span class=\"token punctuation\">,</span> rmtree\n\n<span class=\"token comment\"># 指定源文件夹路径，例如：/var/log</span>\nsrc_folder <span class=\"token operator\">=</span> <span class=\"token string\">'/home/pi/blog'</span>\n\n<span class=\"token comment\"># 指定目标文件夹路径, 例如：/home/backup</span>\ndst_folder <span class=\"token operator\">=</span> <span class=\"token string\">'/media/pi/D1T/backup/blog'</span>\n\n<span class=\"token comment\"># 备份开始的时间戳</span>\ntimestamp <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">'%Y-%m-%d_%H%M%S'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 指定备份的文件名</span>\n\nfilename <span class=\"token operator\">=</span> <span class=\"token string\">'backup'</span>\n\nfull_filename <span class=\"token operator\">=</span> <span class=\"token string\">'%s/%s-%s.tar.gz'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>src_folder<span class=\"token punctuation\">,</span> filename<span class=\"token punctuation\">,</span> timestamp<span class=\"token punctuation\">)</span>\n\ntar <span class=\"token operator\">=</span> tarfile<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>full_filename<span class=\"token punctuation\">,</span> <span class=\"token string\">\"w:gz\"</span><span class=\"token punctuation\">)</span>\nos<span class=\"token punctuation\">.</span>chdir<span class=\"token punctuation\">(</span>src_folder<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> name <span class=\"token keyword\">in</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        tar<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\ntar<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\ncopy<span class=\"token punctuation\">(</span>full_filename<span class=\"token punctuation\">,</span> dst_folder<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>为了能实现定期的自动备份，需要使用Linux系统的计划任务工具Crond。</p>\n<p>以下是配置计划任务的格式，从左往右的顺序为：分钟、小时、日、月、周。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># * * * * *  command to execute\n# ┬ ┬ ┬ ┬ ┬\n# │ │ │ │ │\n# │ │ │ │ │\n# │ │ │ │ └───── day of week (0 - 7) (0 to 6 are Sunday to Saturday, or use names; 7 is Sunday, the same as 0)\n# │ │ │ └────────── month (1 - 12)\n# │ │ └─────────────── day of month (1 - 31)\n# │ └──────────────────── hour (0 - 23)\n# └───────────────────────── min (0 - 59)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>为了能实现每周日晚上11点30开始自动备份，需要执行命令<code>crontab -e</code>，然后配置以下内容：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">30 23 * * 7 &#x2F;usr&#x2F;bin&#x2F;python3 &#x2F;home&#x2F;pi&#x2F;python&#x2F;backup_blog.py<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"<p>为了避免数据丢失，决定使用Python脚本来实现定期备份博客的内容。</p>\n<p>以下是需要实现的具体内容：</p>\n<ul>\n<li><strong>每周日晚上11点30开始自动备份</strong></li>\n<li><strong>将Blog目录下面的所有文件打包压缩后，复制到指定的备份目录下方</strong></li>\n<li><strong>备份的文件名格式为: <code>backup-timestamps.tar.gz</code>，例如：<code>backup-2021-09-21_132517.tar.gz</code></strong></li>\n</ul>","more":"<p>以下是具体的代码：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">#!/usr/bin/env python</span>\n<span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n\n<span class=\"token keyword\">import</span> tarfile\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">from</span> datetime <span class=\"token keyword\">import</span> datetime\n<span class=\"token keyword\">from</span> shutil <span class=\"token keyword\">import</span> copy<span class=\"token punctuation\">,</span> rmtree\n\n<span class=\"token comment\"># 指定源文件夹路径，例如：/var/log</span>\nsrc_folder <span class=\"token operator\">=</span> <span class=\"token string\">'/home/pi/blog'</span>\n\n<span class=\"token comment\"># 指定目标文件夹路径, 例如：/home/backup</span>\ndst_folder <span class=\"token operator\">=</span> <span class=\"token string\">'/media/pi/D1T/backup/blog'</span>\n\n<span class=\"token comment\"># 备份开始的时间戳</span>\ntimestamp <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">'%Y-%m-%d_%H%M%S'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 指定备份的文件名</span>\n\nfilename <span class=\"token operator\">=</span> <span class=\"token string\">'backup'</span>\n\nfull_filename <span class=\"token operator\">=</span> <span class=\"token string\">'%s/%s-%s.tar.gz'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>src_folder<span class=\"token punctuation\">,</span> filename<span class=\"token punctuation\">,</span> timestamp<span class=\"token punctuation\">)</span>\n\ntar <span class=\"token operator\">=</span> tarfile<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>full_filename<span class=\"token punctuation\">,</span> <span class=\"token string\">\"w:gz\"</span><span class=\"token punctuation\">)</span>\nos<span class=\"token punctuation\">.</span>chdir<span class=\"token punctuation\">(</span>src_folder<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> name <span class=\"token keyword\">in</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        tar<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\ntar<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\ncopy<span class=\"token punctuation\">(</span>full_filename<span class=\"token punctuation\">,</span> dst_folder<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>为了能实现定期的自动备份，需要使用Linux系统的计划任务工具Crond。</p>\n<p>以下是配置计划任务的格式，从左往右的顺序为：分钟、小时、日、月、周。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># * * * * *  command to execute\n# ┬ ┬ ┬ ┬ ┬\n# │ │ │ │ │\n# │ │ │ │ │\n# │ │ │ │ └───── day of week (0 - 7) (0 to 6 are Sunday to Saturday, or use names; 7 is Sunday, the same as 0)\n# │ │ │ └────────── month (1 - 12)\n# │ │ └─────────────── day of month (1 - 31)\n# │ └──────────────────── hour (0 - 23)\n# └───────────────────────── min (0 - 59)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>为了能实现每周日晚上11点30开始自动备份，需要执行命令<code>crontab -e</code>，然后配置以下内容：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">30 23 * * 7 &#x2F;usr&#x2F;bin&#x2F;python3 &#x2F;home&#x2F;pi&#x2F;python&#x2F;backup_blog.py<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>"},{"title":"我的博客","date":"2021-09-13T11:16:00.000Z","_content":"\n最近，很想静下心来写点东西，于是，就想到了创建自己的博客。其实，以前也写过一段时间的博客，采用了HEXO的博客框架。但是，很遗憾，没能坚持下来。后来，在学习Python的过程中，无意中浏览到一位博主的博客使用的是[Pelican](https://blog.getpelican.com/) ——一款用Python编写的静态网站生成工具，想到自己原本就一直对Python很感兴趣，于是决定采用Pelican作为自己的博客框架。\n\n由于家中有一台24小时开机的树莓派，可以被随时访问，所以我决定将博客部署在树莓派上。Pelican的初始安装和部署非常简单，通过执行几条简单的命令，就可以完成安装。但是，由于Pelican是用Python编写，所以部署的时候，必须先确保已经安装了Python。\n\n安装Pelican之前，在/home/pi目录下，先新建blog目录，然后进入该目录。\n\n```bash\nmkdir /home/pi/blog\ncd /home/pi/blog\n```\n\n为了能为Pelican创建一个独立的虚拟Python环境，需要先安装[virtualenv]([Virtualenv — virtualenv 20.7.3.dev3+g19cd823 documentation (pypa.io)](https://virtualenv.pypa.io/en/latest/))，然后再创建和激活虚拟环境。\n\n```bash\npipx install virtualenv\nvirtualenv venv\nsource venv/bin/activate\n```\n\n<!-- more -->\n\n开始安装Pelican。\n\n```bash\npython -m pip install pelican\n```\n\n如果要使用Markdown语言，建议使用以下命令安装Pelican。\n\n```bash\npython -m pip install \"pelican[markdown]\"\n```\n\nPelican安装成功后，完成初始配置。\n\n```bash\npelican-quickstart\n\nThis script will help you create a new Pelican-based website.\n\nPlease answer the following questions so this script can generate the files\nneeded by Pelican.\n\n> Where do you want to create your new web site? [.]\n> What will be the title of this web site? Andy's Blog\t\t           //博客的站点名称\n> Who will be the author of this web site? Andy\t\t\t\t\t\t   //博客的作者名称\n> What will be the default language of this web site? [English] zh     //博客的语言，zh为中文\n> Do you want to enable article pagination? (Y/n) Y\n> How many articles per page do you want? [10] 5\n> What is your time zone? [Europe/Paris] Asia/Shanghai\n> Do you want to generate a tasks.py/Makefile to automate generation and publishing? (Y/n) Y\n> Do you want to upload your website using FTP? (y/N) N\n> Do you want to upload your website using SSH? (y/N) N\n> Do you want to upload your website using Dropbox? (y/N) N\n> Do you want to upload your website using S3? (y/N) N\n> Do you want to upload your website using Rackspace Cloud Files? (y/N) N\n> Do you want to upload your website using GitHub Pages? (y/N) y\n```\n\n完成以上配置后，Pelican可以算是初步部署完成了，如果以后要更改相关配置，可以通过文件`pelicanconf.py`来修改。\n\n好了，下一步就可以直接将写好的文章正式发布到博客了。\n\n![](20230307150931.png)\n","source":"_posts/blog/我的博客.md","raw":"---\ntitle: 我的博客\ndate: 2021-9-13 19:16:00\ntags: \n - pelican\ncategories: \n - Blog\n---\n\n最近，很想静下心来写点东西，于是，就想到了创建自己的博客。其实，以前也写过一段时间的博客，采用了HEXO的博客框架。但是，很遗憾，没能坚持下来。后来，在学习Python的过程中，无意中浏览到一位博主的博客使用的是[Pelican](https://blog.getpelican.com/) ——一款用Python编写的静态网站生成工具，想到自己原本就一直对Python很感兴趣，于是决定采用Pelican作为自己的博客框架。\n\n由于家中有一台24小时开机的树莓派，可以被随时访问，所以我决定将博客部署在树莓派上。Pelican的初始安装和部署非常简单，通过执行几条简单的命令，就可以完成安装。但是，由于Pelican是用Python编写，所以部署的时候，必须先确保已经安装了Python。\n\n安装Pelican之前，在/home/pi目录下，先新建blog目录，然后进入该目录。\n\n```bash\nmkdir /home/pi/blog\ncd /home/pi/blog\n```\n\n为了能为Pelican创建一个独立的虚拟Python环境，需要先安装[virtualenv]([Virtualenv — virtualenv 20.7.3.dev3+g19cd823 documentation (pypa.io)](https://virtualenv.pypa.io/en/latest/))，然后再创建和激活虚拟环境。\n\n```bash\npipx install virtualenv\nvirtualenv venv\nsource venv/bin/activate\n```\n\n<!-- more -->\n\n开始安装Pelican。\n\n```bash\npython -m pip install pelican\n```\n\n如果要使用Markdown语言，建议使用以下命令安装Pelican。\n\n```bash\npython -m pip install \"pelican[markdown]\"\n```\n\nPelican安装成功后，完成初始配置。\n\n```bash\npelican-quickstart\n\nThis script will help you create a new Pelican-based website.\n\nPlease answer the following questions so this script can generate the files\nneeded by Pelican.\n\n> Where do you want to create your new web site? [.]\n> What will be the title of this web site? Andy's Blog\t\t           //博客的站点名称\n> Who will be the author of this web site? Andy\t\t\t\t\t\t   //博客的作者名称\n> What will be the default language of this web site? [English] zh     //博客的语言，zh为中文\n> Do you want to enable article pagination? (Y/n) Y\n> How many articles per page do you want? [10] 5\n> What is your time zone? [Europe/Paris] Asia/Shanghai\n> Do you want to generate a tasks.py/Makefile to automate generation and publishing? (Y/n) Y\n> Do you want to upload your website using FTP? (y/N) N\n> Do you want to upload your website using SSH? (y/N) N\n> Do you want to upload your website using Dropbox? (y/N) N\n> Do you want to upload your website using S3? (y/N) N\n> Do you want to upload your website using Rackspace Cloud Files? (y/N) N\n> Do you want to upload your website using GitHub Pages? (y/N) y\n```\n\n完成以上配置后，Pelican可以算是初步部署完成了，如果以后要更改相关配置，可以通过文件`pelicanconf.py`来修改。\n\n好了，下一步就可以直接将写好的文章正式发布到博客了。\n\n![](20230307150931.png)\n","slug":"blog/我的博客","published":1,"updated":"2023-03-07T07:21:46.141Z","_id":"clexvkk6e000p5i739pi4ehv3","comments":1,"layout":"post","photos":[],"link":"","content":"<p>最近，很想静下心来写点东西，于是，就想到了创建自己的博客。其实，以前也写过一段时间的博客，采用了HEXO的博客框架。但是，很遗憾，没能坚持下来。后来，在学习Python的过程中，无意中浏览到一位博主的博客使用的是<a href=\"https://blog.getpelican.com/\">Pelican</a> ——一款用Python编写的静态网站生成工具，想到自己原本就一直对Python很感兴趣，于是决定采用Pelican作为自己的博客框架。</p>\n<p>由于家中有一台24小时开机的树莓派，可以被随时访问，所以我决定将博客部署在树莓派上。Pelican的初始安装和部署非常简单，通过执行几条简单的命令，就可以完成安装。但是，由于Pelican是用Python编写，所以部署的时候，必须先确保已经安装了Python。</p>\n<p>安装Pelican之前，在&#x2F;home&#x2F;pi目录下，先新建blog目录，然后进入该目录。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> /home/pi/blog\n<span class=\"token builtin class-name\">cd</span> /home/pi/blog<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>为了能为Pelican创建一个独立的虚拟Python环境，需要先安装[virtualenv](<a href=\"https://virtualenv.pypa.io/en/latest/\">Virtualenv — virtualenv 20.7.3.dev3+g19cd823 documentation (pypa.io)</a>)，然后再创建和激活虚拟环境。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pipx <span class=\"token function\">install</span> virtualenv\nvirtualenv venv\n<span class=\"token builtin class-name\">source</span> venv/bin/activate<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<span id=\"more\"></span>\n\n<p>开始安装Pelican。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">python -m pip <span class=\"token function\">install</span> pelican<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果要使用Markdown语言，建议使用以下命令安装Pelican。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">python -m pip <span class=\"token function\">install</span> <span class=\"token string\">\"pelican[markdown]\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>Pelican安装成功后，完成初始配置。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pelican-quickstart\n\nThis script will <span class=\"token builtin class-name\">help</span> you create a new Pelican-based website.\n\nPlease answer the following questions so this script can generate the files\nneeded by Pelican.\n\n<span class=\"token operator\">></span> Where <span class=\"token keyword\">do</span> you want to create your new web site? <span class=\"token punctuation\">[</span>.<span class=\"token punctuation\">]</span>\n<span class=\"token operator\">></span> What will be the title of this web site? Andy's Blog\t\t           //博客的站点名称\n<span class=\"token operator\">></span> Who will be the author of this web site? Andy\t\t\t\t\t\t   //博客的作者名称\n<span class=\"token operator\">></span> What will be the default language of this web site? <span class=\"token punctuation\">[</span>English<span class=\"token punctuation\">]</span> zh     //博客的语言，zh为中文\n<span class=\"token operator\">></span> Do you want to <span class=\"token builtin class-name\">enable</span> article pagination? <span class=\"token punctuation\">(</span>Y/n<span class=\"token punctuation\">)</span> Y\n<span class=\"token operator\">></span> How many articles per page <span class=\"token keyword\">do</span> you want? <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token number\">5</span>\n<span class=\"token operator\">></span> What is your <span class=\"token function\">time</span> zone? <span class=\"token punctuation\">[</span>Europe/Paris<span class=\"token punctuation\">]</span> Asia/Shanghai\n<span class=\"token operator\">></span> Do you want to generate a tasks.py/Makefile to automate generation and publishing? <span class=\"token punctuation\">(</span>Y/n<span class=\"token punctuation\">)</span> Y\n<span class=\"token operator\">></span> Do you want to upload your website using FTP? <span class=\"token punctuation\">(</span>y/N<span class=\"token punctuation\">)</span> N\n<span class=\"token operator\">></span> Do you want to upload your website using SSH? <span class=\"token punctuation\">(</span>y/N<span class=\"token punctuation\">)</span> N\n<span class=\"token operator\">></span> Do you want to upload your website using Dropbox? <span class=\"token punctuation\">(</span>y/N<span class=\"token punctuation\">)</span> N\n<span class=\"token operator\">></span> Do you want to upload your website using S3? <span class=\"token punctuation\">(</span>y/N<span class=\"token punctuation\">)</span> N\n<span class=\"token operator\">></span> Do you want to upload your website using Rackspace Cloud Files? <span class=\"token punctuation\">(</span>y/N<span class=\"token punctuation\">)</span> N\n<span class=\"token operator\">></span> Do you want to upload your website using GitHub Pages? <span class=\"token punctuation\">(</span>y/N<span class=\"token punctuation\">)</span> y<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>完成以上配置后，Pelican可以算是初步部署完成了，如果以后要更改相关配置，可以通过文件<code>pelicanconf.py</code>来修改。</p>\n<p>好了，下一步就可以直接将写好的文章正式发布到博客了。</p>\n<p><img src=\"/2021/09/13/blog/wo-de-bo-ke/20230307150931.png\"></p>\n","site":{"data":{}},"excerpt":"<p>最近，很想静下心来写点东西，于是，就想到了创建自己的博客。其实，以前也写过一段时间的博客，采用了HEXO的博客框架。但是，很遗憾，没能坚持下来。后来，在学习Python的过程中，无意中浏览到一位博主的博客使用的是<a href=\"https://blog.getpelican.com/\">Pelican</a> ——一款用Python编写的静态网站生成工具，想到自己原本就一直对Python很感兴趣，于是决定采用Pelican作为自己的博客框架。</p>\n<p>由于家中有一台24小时开机的树莓派，可以被随时访问，所以我决定将博客部署在树莓派上。Pelican的初始安装和部署非常简单，通过执行几条简单的命令，就可以完成安装。但是，由于Pelican是用Python编写，所以部署的时候，必须先确保已经安装了Python。</p>\n<p>安装Pelican之前，在&#x2F;home&#x2F;pi目录下，先新建blog目录，然后进入该目录。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> /home/pi/blog\n<span class=\"token builtin class-name\">cd</span> /home/pi/blog<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>为了能为Pelican创建一个独立的虚拟Python环境，需要先安装[virtualenv](<a href=\"https://virtualenv.pypa.io/en/latest/\">Virtualenv — virtualenv 20.7.3.dev3+g19cd823 documentation (pypa.io)</a>)，然后再创建和激活虚拟环境。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pipx <span class=\"token function\">install</span> virtualenv\nvirtualenv venv\n<span class=\"token builtin class-name\">source</span> venv/bin/activate<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>","more":"<p>开始安装Pelican。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">python -m pip <span class=\"token function\">install</span> pelican<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果要使用Markdown语言，建议使用以下命令安装Pelican。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">python -m pip <span class=\"token function\">install</span> <span class=\"token string\">\"pelican[markdown]\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>Pelican安装成功后，完成初始配置。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pelican-quickstart\n\nThis script will <span class=\"token builtin class-name\">help</span> you create a new Pelican-based website.\n\nPlease answer the following questions so this script can generate the files\nneeded by Pelican.\n\n<span class=\"token operator\">></span> Where <span class=\"token keyword\">do</span> you want to create your new web site? <span class=\"token punctuation\">[</span>.<span class=\"token punctuation\">]</span>\n<span class=\"token operator\">></span> What will be the title of this web site? Andy's Blog\t\t           //博客的站点名称\n<span class=\"token operator\">></span> Who will be the author of this web site? Andy\t\t\t\t\t\t   //博客的作者名称\n<span class=\"token operator\">></span> What will be the default language of this web site? <span class=\"token punctuation\">[</span>English<span class=\"token punctuation\">]</span> zh     //博客的语言，zh为中文\n<span class=\"token operator\">></span> Do you want to <span class=\"token builtin class-name\">enable</span> article pagination? <span class=\"token punctuation\">(</span>Y/n<span class=\"token punctuation\">)</span> Y\n<span class=\"token operator\">></span> How many articles per page <span class=\"token keyword\">do</span> you want? <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token number\">5</span>\n<span class=\"token operator\">></span> What is your <span class=\"token function\">time</span> zone? <span class=\"token punctuation\">[</span>Europe/Paris<span class=\"token punctuation\">]</span> Asia/Shanghai\n<span class=\"token operator\">></span> Do you want to generate a tasks.py/Makefile to automate generation and publishing? <span class=\"token punctuation\">(</span>Y/n<span class=\"token punctuation\">)</span> Y\n<span class=\"token operator\">></span> Do you want to upload your website using FTP? <span class=\"token punctuation\">(</span>y/N<span class=\"token punctuation\">)</span> N\n<span class=\"token operator\">></span> Do you want to upload your website using SSH? <span class=\"token punctuation\">(</span>y/N<span class=\"token punctuation\">)</span> N\n<span class=\"token operator\">></span> Do you want to upload your website using Dropbox? <span class=\"token punctuation\">(</span>y/N<span class=\"token punctuation\">)</span> N\n<span class=\"token operator\">></span> Do you want to upload your website using S3? <span class=\"token punctuation\">(</span>y/N<span class=\"token punctuation\">)</span> N\n<span class=\"token operator\">></span> Do you want to upload your website using Rackspace Cloud Files? <span class=\"token punctuation\">(</span>y/N<span class=\"token punctuation\">)</span> N\n<span class=\"token operator\">></span> Do you want to upload your website using GitHub Pages? <span class=\"token punctuation\">(</span>y/N<span class=\"token punctuation\">)</span> y<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>完成以上配置后，Pelican可以算是初步部署完成了，如果以后要更改相关配置，可以通过文件<code>pelicanconf.py</code>来修改。</p>\n<p>好了，下一步就可以直接将写好的文章正式发布到博客了。</p>\n<p><img src=\"/2021/09/13/blog/wo-de-bo-ke/20230307150931.png\"></p>"},{"title":"Windows和iOS（二）：同步备忘录","date":"2021-09-29T02:20:00.000Z","_content":"\n**备忘录**是iOS系统内置的一款应用，随着iOS系统的不断改进，备忘录的功能也越来越丰富，使用也更简便。之前曾经使用过印象笔记、OneNote、Drafts等，但是由于各种原因，例如价格、软件臃肿、使用复杂等，最后还是觉得备忘录比较易用，当然更重要的是不用花钱。😀\n\n但是，苹果并没有提供Windows版本的备忘录，在Windows上只能通过浏览器访问网页形式的备忘录。并且，苹果似乎并没有很好的开发网页版的备忘录，例如手机上写的备忘录明明排版很整齐，但是在网页上总会出现一些莫名其妙的格式问题。另外，备忘录的共享文件夹功能，在网页版备忘录上也是无法使用。\n\n最近，无意中发现iPhone手机上的**备忘录**可以和Windows系统中的**便笺**同步。这下可解决了我的一个大难题。\n\n<!-- more -->\n\n具体如何实现同步，可以参考以下的方式：\n\n首先，需要在微软的官方网站申请一个Outlook邮箱账号，然后将该账号添加到iPhone手机。添加的方式需要打开手机上的**设置 - 邮件 - 账户**，点击**添加账户**，选择账户类型为**Outlook.com**，然后输入邮箱的用户名和密码。\n\n![](mainaccount01.png)\n\n![](mainaccount02.png)\n\n账户添加成功后，在账户下方会出现备忘录的选项，打开该选项。\n\n![](mainaccount03.png)\n\n然后，打开备忘录，会发现除了iCloud里面的备忘录以外，还有一个Outlook的备忘录。\n\n![](mainaccount04.png)\n\n在Windows电脑上，打开便笺，可以看到手机上创建的备忘录已经同步到电脑上。同样，电脑上创建的备忘录也可以同步到手机上。\n\n![](windowsnotes.png)\n\n","source":"_posts/手机/Windows和iOS备忘录.md","raw":"---\ntitle: Windows和iOS（二）：同步备忘录\ndate: 2021-9-29 10:20:00\ntags: \n - ios\ncategories: \n - 手机\n---\n\n**备忘录**是iOS系统内置的一款应用，随着iOS系统的不断改进，备忘录的功能也越来越丰富，使用也更简便。之前曾经使用过印象笔记、OneNote、Drafts等，但是由于各种原因，例如价格、软件臃肿、使用复杂等，最后还是觉得备忘录比较易用，当然更重要的是不用花钱。😀\n\n但是，苹果并没有提供Windows版本的备忘录，在Windows上只能通过浏览器访问网页形式的备忘录。并且，苹果似乎并没有很好的开发网页版的备忘录，例如手机上写的备忘录明明排版很整齐，但是在网页上总会出现一些莫名其妙的格式问题。另外，备忘录的共享文件夹功能，在网页版备忘录上也是无法使用。\n\n最近，无意中发现iPhone手机上的**备忘录**可以和Windows系统中的**便笺**同步。这下可解决了我的一个大难题。\n\n<!-- more -->\n\n具体如何实现同步，可以参考以下的方式：\n\n首先，需要在微软的官方网站申请一个Outlook邮箱账号，然后将该账号添加到iPhone手机。添加的方式需要打开手机上的**设置 - 邮件 - 账户**，点击**添加账户**，选择账户类型为**Outlook.com**，然后输入邮箱的用户名和密码。\n\n![](mainaccount01.png)\n\n![](mainaccount02.png)\n\n账户添加成功后，在账户下方会出现备忘录的选项，打开该选项。\n\n![](mainaccount03.png)\n\n然后，打开备忘录，会发现除了iCloud里面的备忘录以外，还有一个Outlook的备忘录。\n\n![](mainaccount04.png)\n\n在Windows电脑上，打开便笺，可以看到手机上创建的备忘录已经同步到电脑上。同样，电脑上创建的备忘录也可以同步到手机上。\n\n![](windowsnotes.png)\n\n","slug":"手机/Windows和iOS备忘录","published":1,"updated":"2023-03-07T06:35:37.828Z","_id":"clexvkk6l000s5i73g7dm4e5o","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong>备忘录</strong>是iOS系统内置的一款应用，随着iOS系统的不断改进，备忘录的功能也越来越丰富，使用也更简便。之前曾经使用过印象笔记、OneNote、Drafts等，但是由于各种原因，例如价格、软件臃肿、使用复杂等，最后还是觉得备忘录比较易用，当然更重要的是不用花钱。😀</p>\n<p>但是，苹果并没有提供Windows版本的备忘录，在Windows上只能通过浏览器访问网页形式的备忘录。并且，苹果似乎并没有很好的开发网页版的备忘录，例如手机上写的备忘录明明排版很整齐，但是在网页上总会出现一些莫名其妙的格式问题。另外，备忘录的共享文件夹功能，在网页版备忘录上也是无法使用。</p>\n<p>最近，无意中发现iPhone手机上的<strong>备忘录</strong>可以和Windows系统中的<strong>便笺</strong>同步。这下可解决了我的一个大难题。</p>\n<span id=\"more\"></span>\n\n<p>具体如何实现同步，可以参考以下的方式：</p>\n<p>首先，需要在微软的官方网站申请一个Outlook邮箱账号，然后将该账号添加到iPhone手机。添加的方式需要打开手机上的<strong>设置 - 邮件 - 账户</strong>，点击<strong>添加账户</strong>，选择账户类型为<strong>Outlook.com</strong>，然后输入邮箱的用户名和密码。</p>\n<p><img src=\"/2021/09/29/shou-ji/windows-he-ios-bei-wang-lu/mainaccount01.png\"></p>\n<p><img src=\"/2021/09/29/shou-ji/windows-he-ios-bei-wang-lu/mainaccount02.png\"></p>\n<p>账户添加成功后，在账户下方会出现备忘录的选项，打开该选项。</p>\n<p><img src=\"/2021/09/29/shou-ji/windows-he-ios-bei-wang-lu/mainaccount03.png\"></p>\n<p>然后，打开备忘录，会发现除了iCloud里面的备忘录以外，还有一个Outlook的备忘录。</p>\n<p><img src=\"/2021/09/29/shou-ji/windows-he-ios-bei-wang-lu/mainaccount04.png\"></p>\n<p>在Windows电脑上，打开便笺，可以看到手机上创建的备忘录已经同步到电脑上。同样，电脑上创建的备忘录也可以同步到手机上。</p>\n<p><img src=\"/2021/09/29/shou-ji/windows-he-ios-bei-wang-lu/windowsnotes.png\"></p>\n","site":{"data":{}},"excerpt":"<p><strong>备忘录</strong>是iOS系统内置的一款应用，随着iOS系统的不断改进，备忘录的功能也越来越丰富，使用也更简便。之前曾经使用过印象笔记、OneNote、Drafts等，但是由于各种原因，例如价格、软件臃肿、使用复杂等，最后还是觉得备忘录比较易用，当然更重要的是不用花钱。😀</p>\n<p>但是，苹果并没有提供Windows版本的备忘录，在Windows上只能通过浏览器访问网页形式的备忘录。并且，苹果似乎并没有很好的开发网页版的备忘录，例如手机上写的备忘录明明排版很整齐，但是在网页上总会出现一些莫名其妙的格式问题。另外，备忘录的共享文件夹功能，在网页版备忘录上也是无法使用。</p>\n<p>最近，无意中发现iPhone手机上的<strong>备忘录</strong>可以和Windows系统中的<strong>便笺</strong>同步。这下可解决了我的一个大难题。</p>","more":"<p>具体如何实现同步，可以参考以下的方式：</p>\n<p>首先，需要在微软的官方网站申请一个Outlook邮箱账号，然后将该账号添加到iPhone手机。添加的方式需要打开手机上的<strong>设置 - 邮件 - 账户</strong>，点击<strong>添加账户</strong>，选择账户类型为<strong>Outlook.com</strong>，然后输入邮箱的用户名和密码。</p>\n<p><img src=\"/2021/09/29/shou-ji/windows-he-ios-bei-wang-lu/mainaccount01.png\"></p>\n<p><img src=\"/2021/09/29/shou-ji/windows-he-ios-bei-wang-lu/mainaccount02.png\"></p>\n<p>账户添加成功后，在账户下方会出现备忘录的选项，打开该选项。</p>\n<p><img src=\"/2021/09/29/shou-ji/windows-he-ios-bei-wang-lu/mainaccount03.png\"></p>\n<p>然后，打开备忘录，会发现除了iCloud里面的备忘录以外，还有一个Outlook的备忘录。</p>\n<p><img src=\"/2021/09/29/shou-ji/windows-he-ios-bei-wang-lu/mainaccount04.png\"></p>\n<p>在Windows电脑上，打开便笺，可以看到手机上创建的备忘录已经同步到电脑上。同样，电脑上创建的备忘录也可以同步到手机上。</p>\n<p><img src=\"/2021/09/29/shou-ji/windows-he-ios-bei-wang-lu/windowsnotes.png\"></p>"},{"title":"Windows和iOS（三）：密码管理器","date":"2021-10-03T02:25:00.000Z","_content":"\n如果同时拥有苹果电脑和手机的用户，应该使用过苹果设备的**钥匙串**功能。**简单来说，这项功能可以帮助用户存储、同步和自动填充账号和密码**。\n\n例如，如果用户在很多的网站上注册了账号，那么每次登录网站的时候，既要记住这些账号信息，并且每次还要手工输入，非常麻烦。通过**钥匙串**功能，就不需要记忆账号和密码，并且还能帮用户自动填充账号信息。\n\n那么，在Windows系统上，是否也有与钥匙串功能相同的应用呢？答案就是**Microsoft Edge**内置的密码管理器。简单归纳，这项功能可以为我们提供以下特性：\n\n- **推荐强密码**\n- **储存**\n- **同步**\n- **自动填充**\n\n### 推荐强密码\n\n 当我们在网站上新注册账号的时候，往往每次都要冥思苦想一个复杂的密码，或者为了简单起见，干脆所有的网站都用相同的密码。这样所带来的问题就是，要么想不出既好记又复杂的密码，或者如果使用相同密码，就会存在极大的安全隐患。\n\n<!-- more -->\n\nMicrosoft Edge的密码管理器功能可以为用户建议强密码，省去了自己去苦想一个密码的麻烦。具体的使用方式，只需要在Edge中打开**设置 - 个人资料 - 密码**， 然后把**推荐强密码**的功能打开即可。\n\n![](2021-10-03092026.png)\n\n下面以注册Outlook邮箱为例，当注册网站账号的时候，需要创建密码，这时候点击右键，就可以在菜单中选择**建议使用强密码**。并且，还可以选择刷新，重新生成新的强密码。\n\n![](2021-10-03092027.png)\n\n![](2021-10-03092028.png)\n\n### 储存\n\n在Microsoft Edge中，注册网站时的账号信息会被自动保存下来。并且，可以在Edge中随时查看。\n\n打开**设置 - 个人资料 - 密码**，然后就可以查看到网站、账号和密码信息。同时，还可以编辑和修改这些信息。\n\n![](2021-10-03092029.png)\n\n### 同步\n\n如果在Windows和iOS平台上都使用Microsoft Edge，那么所有的账号信息都可以双向同步。这样便于我们随时查阅账号信息。\n\n在iOS版的Microsoft Edge中，打开**设置 - 个人 - 密码**，就可以看到手机上保存的账号信息了。\n\n![](2021-10-03092030.png)\n\n### 自动填充\n\n自动填充功能非常方便，省去了手工输入用户名和密码的麻烦，特别是当用户名和密码特别长的时候，这些功能显得尤为省心。\n\n在Windows上，登录网站过程中，输入账号密码的时候，会弹出已经保存的账号信息，供用户选择。\n\n![](2021-10-03092031.png)\n\n在iOS系统上，默认的密码管理器是钥匙串，首先需要在系统设置中启用Edge密码管理器，然后才能用Edge自动填充账号信息。\n\n打开**设置 - 密码 - 自动填充密码**，然后点击选择**Edge**。\n\n![](2021-10-03092032.png)\n\n","source":"_posts/手机/Windows和iOS密码管理器.md","raw":"---\ntitle: Windows和iOS（三）：密码管理器\ndate: 2021-10-03 10:25:00\ntags: \n - ios\ncategories: \n - 手机\n---\n\n如果同时拥有苹果电脑和手机的用户，应该使用过苹果设备的**钥匙串**功能。**简单来说，这项功能可以帮助用户存储、同步和自动填充账号和密码**。\n\n例如，如果用户在很多的网站上注册了账号，那么每次登录网站的时候，既要记住这些账号信息，并且每次还要手工输入，非常麻烦。通过**钥匙串**功能，就不需要记忆账号和密码，并且还能帮用户自动填充账号信息。\n\n那么，在Windows系统上，是否也有与钥匙串功能相同的应用呢？答案就是**Microsoft Edge**内置的密码管理器。简单归纳，这项功能可以为我们提供以下特性：\n\n- **推荐强密码**\n- **储存**\n- **同步**\n- **自动填充**\n\n### 推荐强密码\n\n 当我们在网站上新注册账号的时候，往往每次都要冥思苦想一个复杂的密码，或者为了简单起见，干脆所有的网站都用相同的密码。这样所带来的问题就是，要么想不出既好记又复杂的密码，或者如果使用相同密码，就会存在极大的安全隐患。\n\n<!-- more -->\n\nMicrosoft Edge的密码管理器功能可以为用户建议强密码，省去了自己去苦想一个密码的麻烦。具体的使用方式，只需要在Edge中打开**设置 - 个人资料 - 密码**， 然后把**推荐强密码**的功能打开即可。\n\n![](2021-10-03092026.png)\n\n下面以注册Outlook邮箱为例，当注册网站账号的时候，需要创建密码，这时候点击右键，就可以在菜单中选择**建议使用强密码**。并且，还可以选择刷新，重新生成新的强密码。\n\n![](2021-10-03092027.png)\n\n![](2021-10-03092028.png)\n\n### 储存\n\n在Microsoft Edge中，注册网站时的账号信息会被自动保存下来。并且，可以在Edge中随时查看。\n\n打开**设置 - 个人资料 - 密码**，然后就可以查看到网站、账号和密码信息。同时，还可以编辑和修改这些信息。\n\n![](2021-10-03092029.png)\n\n### 同步\n\n如果在Windows和iOS平台上都使用Microsoft Edge，那么所有的账号信息都可以双向同步。这样便于我们随时查阅账号信息。\n\n在iOS版的Microsoft Edge中，打开**设置 - 个人 - 密码**，就可以看到手机上保存的账号信息了。\n\n![](2021-10-03092030.png)\n\n### 自动填充\n\n自动填充功能非常方便，省去了手工输入用户名和密码的麻烦，特别是当用户名和密码特别长的时候，这些功能显得尤为省心。\n\n在Windows上，登录网站过程中，输入账号密码的时候，会弹出已经保存的账号信息，供用户选择。\n\n![](2021-10-03092031.png)\n\n在iOS系统上，默认的密码管理器是钥匙串，首先需要在系统设置中启用Edge密码管理器，然后才能用Edge自动填充账号信息。\n\n打开**设置 - 密码 - 自动填充密码**，然后点击选择**Edge**。\n\n![](2021-10-03092032.png)\n\n","slug":"手机/Windows和iOS密码管理器","published":1,"updated":"2023-03-07T06:36:26.488Z","_id":"clexvkk6s000w5i73bk53hil9","comments":1,"layout":"post","photos":[],"link":"","content":"<p>如果同时拥有苹果电脑和手机的用户，应该使用过苹果设备的<strong>钥匙串</strong>功能。<strong>简单来说，这项功能可以帮助用户存储、同步和自动填充账号和密码</strong>。</p>\n<p>例如，如果用户在很多的网站上注册了账号，那么每次登录网站的时候，既要记住这些账号信息，并且每次还要手工输入，非常麻烦。通过<strong>钥匙串</strong>功能，就不需要记忆账号和密码，并且还能帮用户自动填充账号信息。</p>\n<p>那么，在Windows系统上，是否也有与钥匙串功能相同的应用呢？答案就是<strong>Microsoft Edge</strong>内置的密码管理器。简单归纳，这项功能可以为我们提供以下特性：</p>\n<ul>\n<li><strong>推荐强密码</strong></li>\n<li><strong>储存</strong></li>\n<li><strong>同步</strong></li>\n<li><strong>自动填充</strong></li>\n</ul>\n<h3 id=\"推荐强密码\"><a href=\"#推荐强密码\" class=\"headerlink\" title=\"推荐强密码\"></a>推荐强密码</h3><p> 当我们在网站上新注册账号的时候，往往每次都要冥思苦想一个复杂的密码，或者为了简单起见，干脆所有的网站都用相同的密码。这样所带来的问题就是，要么想不出既好记又复杂的密码，或者如果使用相同密码，就会存在极大的安全隐患。</p>\n<span id=\"more\"></span>\n\n<p>Microsoft Edge的密码管理器功能可以为用户建议强密码，省去了自己去苦想一个密码的麻烦。具体的使用方式，只需要在Edge中打开<strong>设置 - 个人资料 - 密码</strong>， 然后把<strong>推荐强密码</strong>的功能打开即可。</p>\n<p><img src=\"/2021/10/03/shou-ji/windows-he-ios-mi-ma-guan-li-qi/2021-10-03092026.png\"></p>\n<p>下面以注册Outlook邮箱为例，当注册网站账号的时候，需要创建密码，这时候点击右键，就可以在菜单中选择<strong>建议使用强密码</strong>。并且，还可以选择刷新，重新生成新的强密码。</p>\n<p><img src=\"/2021/10/03/shou-ji/windows-he-ios-mi-ma-guan-li-qi/2021-10-03092027.png\"></p>\n<p><img src=\"/2021/10/03/shou-ji/windows-he-ios-mi-ma-guan-li-qi/2021-10-03092028.png\"></p>\n<h3 id=\"储存\"><a href=\"#储存\" class=\"headerlink\" title=\"储存\"></a>储存</h3><p>在Microsoft Edge中，注册网站时的账号信息会被自动保存下来。并且，可以在Edge中随时查看。</p>\n<p>打开<strong>设置 - 个人资料 - 密码</strong>，然后就可以查看到网站、账号和密码信息。同时，还可以编辑和修改这些信息。</p>\n<p><img src=\"/2021/10/03/shou-ji/windows-he-ios-mi-ma-guan-li-qi/2021-10-03092029.png\"></p>\n<h3 id=\"同步\"><a href=\"#同步\" class=\"headerlink\" title=\"同步\"></a>同步</h3><p>如果在Windows和iOS平台上都使用Microsoft Edge，那么所有的账号信息都可以双向同步。这样便于我们随时查阅账号信息。</p>\n<p>在iOS版的Microsoft Edge中，打开<strong>设置 - 个人 - 密码</strong>，就可以看到手机上保存的账号信息了。</p>\n<p><img src=\"/2021/10/03/shou-ji/windows-he-ios-mi-ma-guan-li-qi/2021-10-03092030.png\"></p>\n<h3 id=\"自动填充\"><a href=\"#自动填充\" class=\"headerlink\" title=\"自动填充\"></a>自动填充</h3><p>自动填充功能非常方便，省去了手工输入用户名和密码的麻烦，特别是当用户名和密码特别长的时候，这些功能显得尤为省心。</p>\n<p>在Windows上，登录网站过程中，输入账号密码的时候，会弹出已经保存的账号信息，供用户选择。</p>\n<p><img src=\"/2021/10/03/shou-ji/windows-he-ios-mi-ma-guan-li-qi/2021-10-03092031.png\"></p>\n<p>在iOS系统上，默认的密码管理器是钥匙串，首先需要在系统设置中启用Edge密码管理器，然后才能用Edge自动填充账号信息。</p>\n<p>打开<strong>设置 - 密码 - 自动填充密码</strong>，然后点击选择<strong>Edge</strong>。</p>\n<p><img src=\"/2021/10/03/shou-ji/windows-he-ios-mi-ma-guan-li-qi/2021-10-03092032.png\"></p>\n","site":{"data":{}},"excerpt":"<p>如果同时拥有苹果电脑和手机的用户，应该使用过苹果设备的<strong>钥匙串</strong>功能。<strong>简单来说，这项功能可以帮助用户存储、同步和自动填充账号和密码</strong>。</p>\n<p>例如，如果用户在很多的网站上注册了账号，那么每次登录网站的时候，既要记住这些账号信息，并且每次还要手工输入，非常麻烦。通过<strong>钥匙串</strong>功能，就不需要记忆账号和密码，并且还能帮用户自动填充账号信息。</p>\n<p>那么，在Windows系统上，是否也有与钥匙串功能相同的应用呢？答案就是<strong>Microsoft Edge</strong>内置的密码管理器。简单归纳，这项功能可以为我们提供以下特性：</p>\n<ul>\n<li><strong>推荐强密码</strong></li>\n<li><strong>储存</strong></li>\n<li><strong>同步</strong></li>\n<li><strong>自动填充</strong></li>\n</ul>\n<h3 id=\"推荐强密码\"><a href=\"#推荐强密码\" class=\"headerlink\" title=\"推荐强密码\"></a>推荐强密码</h3><p> 当我们在网站上新注册账号的时候，往往每次都要冥思苦想一个复杂的密码，或者为了简单起见，干脆所有的网站都用相同的密码。这样所带来的问题就是，要么想不出既好记又复杂的密码，或者如果使用相同密码，就会存在极大的安全隐患。</p>","more":"<p>Microsoft Edge的密码管理器功能可以为用户建议强密码，省去了自己去苦想一个密码的麻烦。具体的使用方式，只需要在Edge中打开<strong>设置 - 个人资料 - 密码</strong>， 然后把<strong>推荐强密码</strong>的功能打开即可。</p>\n<p><img src=\"/2021/10/03/shou-ji/windows-he-ios-mi-ma-guan-li-qi/2021-10-03092026.png\"></p>\n<p>下面以注册Outlook邮箱为例，当注册网站账号的时候，需要创建密码，这时候点击右键，就可以在菜单中选择<strong>建议使用强密码</strong>。并且，还可以选择刷新，重新生成新的强密码。</p>\n<p><img src=\"/2021/10/03/shou-ji/windows-he-ios-mi-ma-guan-li-qi/2021-10-03092027.png\"></p>\n<p><img src=\"/2021/10/03/shou-ji/windows-he-ios-mi-ma-guan-li-qi/2021-10-03092028.png\"></p>\n<h3 id=\"储存\"><a href=\"#储存\" class=\"headerlink\" title=\"储存\"></a>储存</h3><p>在Microsoft Edge中，注册网站时的账号信息会被自动保存下来。并且，可以在Edge中随时查看。</p>\n<p>打开<strong>设置 - 个人资料 - 密码</strong>，然后就可以查看到网站、账号和密码信息。同时，还可以编辑和修改这些信息。</p>\n<p><img src=\"/2021/10/03/shou-ji/windows-he-ios-mi-ma-guan-li-qi/2021-10-03092029.png\"></p>\n<h3 id=\"同步\"><a href=\"#同步\" class=\"headerlink\" title=\"同步\"></a>同步</h3><p>如果在Windows和iOS平台上都使用Microsoft Edge，那么所有的账号信息都可以双向同步。这样便于我们随时查阅账号信息。</p>\n<p>在iOS版的Microsoft Edge中，打开<strong>设置 - 个人 - 密码</strong>，就可以看到手机上保存的账号信息了。</p>\n<p><img src=\"/2021/10/03/shou-ji/windows-he-ios-mi-ma-guan-li-qi/2021-10-03092030.png\"></p>\n<h3 id=\"自动填充\"><a href=\"#自动填充\" class=\"headerlink\" title=\"自动填充\"></a>自动填充</h3><p>自动填充功能非常方便，省去了手工输入用户名和密码的麻烦，特别是当用户名和密码特别长的时候，这些功能显得尤为省心。</p>\n<p>在Windows上，登录网站过程中，输入账号密码的时候，会弹出已经保存的账号信息，供用户选择。</p>\n<p><img src=\"/2021/10/03/shou-ji/windows-he-ios-mi-ma-guan-li-qi/2021-10-03092031.png\"></p>\n<p>在iOS系统上，默认的密码管理器是钥匙串，首先需要在系统设置中启用Edge密码管理器，然后才能用Edge自动填充账号信息。</p>\n<p>打开<strong>设置 - 密码 - 自动填充密码</strong>，然后点击选择<strong>Edge</strong>。</p>\n<p><img src=\"/2021/10/03/shou-ji/windows-he-ios-mi-ma-guan-li-qi/2021-10-03092032.png\"></p>"},{"title":"Windows和iOS（一）：文件共享","date":"2021-09-24T01:01:00.000Z","_content":"\n以前一直在苹果的生态中使用各种苹果的服务，例如AirDrop, iCloud文件, iCloud照片等，但是，后来由于MacBook Air出现电池故障以后，就更换成了一台Windows PC。于是，使用过程中，出现了各种不方便，归根结底，就是数据无法在手机和PC之间方便地同步和共享。\n\n起初，我曾经尝试下载并安装了Windows版本的iCloud。虽然软件的版本已经很久没有更新，但是我只需要使用文件和照片的同步功能，想着应该问题不大，但是在实际使用过程中，遇到的以下一系列问题让我果断卸载了该软件：\n\n- 程序在后台运行导致CPU占用率很高，风扇会持续转动并发出噪音\n\n- Windows上的照片删除后，被删除的照片仍然会保留在手机上\n\n- iPhone上的部分照片无法成功下载到Windows上\n\n- 使用一段时间后，程序会挂起，导致无法同步\n\n  <!-- more -->\n\n经过一番比较和尝试，我决定使用微软的网盘工具[OneDrive](https://www.microsoft.com/zh-cn/microsoft-365/onedrive/download)来解决文件和照片的同步问题。在使用一段时间以后，OneDrive完全能满足我所有的需求。手机和电脑上的文件和照片不仅能实现双向同步，并且，Windows自带的照片管理软件能很方便的查看和编辑所有的照片。\n\n需要注意的是，有些应用，例如在微信的聊天窗口中，如果要发送文件给对方，只能通过iCloud选择需要发送的文件。为了能在iCloud的操作窗口中，访问OneDrive里面的文件，需要在**文件**应用中，**打开OneDrive的选项**。\n\n{% asset_img icloud-onedrive.jpg 600 %}\n\n除了iCloud以外，苹果还有一项非常好用的功能，即AirDrop。这项功能可以让Mac和iPhone只需要通过局域网就可以互传文件，不需要再依赖于互联网。在Windows系统上，我想到了用**Windows的文件共享（CIFS/SMB）**功能来实现类似的效果。在Windows文件夹的属性中，有一个“共享”选项，打开共享功能后，就可以在iPhone上，通过**文件**应用，访问该共享目录。\n\n{% asset_img fileshare01.jpg 600 %}\n\n打开iPhone上的**文件**应用，打开**连接服务器**选项，输入Windows的主机名，例如*smb://nuc*，其中nuc就是Windows的主机名。\n\n{% asset_img icloud-connect-server.jpg 600 %}\n连接服务器成功以后，就可以在iPhone上访问Windows共享文件夹里面的数据了。通过这种方式，就可以在局域网中，让手机和电脑之间互传文件了。\n\n{% asset_img icloud-server-share.jpg 600 %}","source":"_posts/手机/Windows和iOS文件共享.md","raw":"---\ntitle: Windows和iOS（一）：文件共享\ndate: 2021-9-24 09:01:00\ntags: \n - ios\ncategories: \n - 手机\n---\n\n以前一直在苹果的生态中使用各种苹果的服务，例如AirDrop, iCloud文件, iCloud照片等，但是，后来由于MacBook Air出现电池故障以后，就更换成了一台Windows PC。于是，使用过程中，出现了各种不方便，归根结底，就是数据无法在手机和PC之间方便地同步和共享。\n\n起初，我曾经尝试下载并安装了Windows版本的iCloud。虽然软件的版本已经很久没有更新，但是我只需要使用文件和照片的同步功能，想着应该问题不大，但是在实际使用过程中，遇到的以下一系列问题让我果断卸载了该软件：\n\n- 程序在后台运行导致CPU占用率很高，风扇会持续转动并发出噪音\n\n- Windows上的照片删除后，被删除的照片仍然会保留在手机上\n\n- iPhone上的部分照片无法成功下载到Windows上\n\n- 使用一段时间后，程序会挂起，导致无法同步\n\n  <!-- more -->\n\n经过一番比较和尝试，我决定使用微软的网盘工具[OneDrive](https://www.microsoft.com/zh-cn/microsoft-365/onedrive/download)来解决文件和照片的同步问题。在使用一段时间以后，OneDrive完全能满足我所有的需求。手机和电脑上的文件和照片不仅能实现双向同步，并且，Windows自带的照片管理软件能很方便的查看和编辑所有的照片。\n\n需要注意的是，有些应用，例如在微信的聊天窗口中，如果要发送文件给对方，只能通过iCloud选择需要发送的文件。为了能在iCloud的操作窗口中，访问OneDrive里面的文件，需要在**文件**应用中，**打开OneDrive的选项**。\n\n{% asset_img icloud-onedrive.jpg 600 %}\n\n除了iCloud以外，苹果还有一项非常好用的功能，即AirDrop。这项功能可以让Mac和iPhone只需要通过局域网就可以互传文件，不需要再依赖于互联网。在Windows系统上，我想到了用**Windows的文件共享（CIFS/SMB）**功能来实现类似的效果。在Windows文件夹的属性中，有一个“共享”选项，打开共享功能后，就可以在iPhone上，通过**文件**应用，访问该共享目录。\n\n{% asset_img fileshare01.jpg 600 %}\n\n打开iPhone上的**文件**应用，打开**连接服务器**选项，输入Windows的主机名，例如*smb://nuc*，其中nuc就是Windows的主机名。\n\n{% asset_img icloud-connect-server.jpg 600 %}\n连接服务器成功以后，就可以在iPhone上访问Windows共享文件夹里面的数据了。通过这种方式，就可以在局域网中，让手机和电脑之间互传文件了。\n\n{% asset_img icloud-server-share.jpg 600 %}","slug":"手机/Windows和iOS文件共享","published":1,"updated":"2023-03-03T01:33:03.420Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clexvkk6y00105i73fasgalzv","content":"<p>以前一直在苹果的生态中使用各种苹果的服务，例如AirDrop, iCloud文件, iCloud照片等，但是，后来由于MacBook Air出现电池故障以后，就更换成了一台Windows PC。于是，使用过程中，出现了各种不方便，归根结底，就是数据无法在手机和PC之间方便地同步和共享。</p>\n<p>起初，我曾经尝试下载并安装了Windows版本的iCloud。虽然软件的版本已经很久没有更新，但是我只需要使用文件和照片的同步功能，想着应该问题不大，但是在实际使用过程中，遇到的以下一系列问题让我果断卸载了该软件：</p>\n<ul>\n<li><p>程序在后台运行导致CPU占用率很高，风扇会持续转动并发出噪音</p>\n</li>\n<li><p>Windows上的照片删除后，被删除的照片仍然会保留在手机上</p>\n</li>\n<li><p>iPhone上的部分照片无法成功下载到Windows上</p>\n</li>\n<li><p>使用一段时间后，程序会挂起，导致无法同步</p>\n<span id=\"more\"></span></li>\n</ul>\n<p>经过一番比较和尝试，我决定使用微软的网盘工具<a href=\"https://www.microsoft.com/zh-cn/microsoft-365/onedrive/download\">OneDrive</a>来解决文件和照片的同步问题。在使用一段时间以后，OneDrive完全能满足我所有的需求。手机和电脑上的文件和照片不仅能实现双向同步，并且，Windows自带的照片管理软件能很方便的查看和编辑所有的照片。</p>\n<p>需要注意的是，有些应用，例如在微信的聊天窗口中，如果要发送文件给对方，只能通过iCloud选择需要发送的文件。为了能在iCloud的操作窗口中，访问OneDrive里面的文件，需要在<strong>文件</strong>应用中，<strong>打开OneDrive的选项</strong>。</p>\n<img src=\"/2021/09/24/shou-ji/windows-he-ios-wen-jian-gong-xiang/icloud-onedrive.jpg\" class=\"\" width=\"600\">\n\n<p>除了iCloud以外，苹果还有一项非常好用的功能，即AirDrop。这项功能可以让Mac和iPhone只需要通过局域网就可以互传文件，不需要再依赖于互联网。在Windows系统上，我想到了用<strong>Windows的文件共享（CIFS&#x2F;SMB）</strong>功能来实现类似的效果。在Windows文件夹的属性中，有一个“共享”选项，打开共享功能后，就可以在iPhone上，通过<strong>文件</strong>应用，访问该共享目录。</p>\n<img src=\"/2021/09/24/shou-ji/windows-he-ios-wen-jian-gong-xiang/fileshare01.jpg\" class=\"\" width=\"600\">\n\n<p>打开iPhone上的<strong>文件</strong>应用，打开<strong>连接服务器</strong>选项，输入Windows的主机名，例如<em>smb:&#x2F;&#x2F;nuc</em>，其中nuc就是Windows的主机名。</p>\n<img src=\"/2021/09/24/shou-ji/windows-he-ios-wen-jian-gong-xiang/icloud-connect-server.jpg\" class=\"\" width=\"600\">\n<p>连接服务器成功以后，就可以在iPhone上访问Windows共享文件夹里面的数据了。通过这种方式，就可以在局域网中，让手机和电脑之间互传文件了。</p>\n<img src=\"/2021/09/24/shou-ji/windows-he-ios-wen-jian-gong-xiang/icloud-server-share.jpg\" class=\"\" width=\"600\">","site":{"data":{}},"excerpt":"<p>以前一直在苹果的生态中使用各种苹果的服务，例如AirDrop, iCloud文件, iCloud照片等，但是，后来由于MacBook Air出现电池故障以后，就更换成了一台Windows PC。于是，使用过程中，出现了各种不方便，归根结底，就是数据无法在手机和PC之间方便地同步和共享。</p>\n<p>起初，我曾经尝试下载并安装了Windows版本的iCloud。虽然软件的版本已经很久没有更新，但是我只需要使用文件和照片的同步功能，想着应该问题不大，但是在实际使用过程中，遇到的以下一系列问题让我果断卸载了该软件：</p>\n<ul>\n<li><p>程序在后台运行导致CPU占用率很高，风扇会持续转动并发出噪音</p>\n</li>\n<li><p>Windows上的照片删除后，被删除的照片仍然会保留在手机上</p>\n</li>\n<li><p>iPhone上的部分照片无法成功下载到Windows上</p>\n</li>\n<li><p>使用一段时间后，程序会挂起，导致无法同步</p>","more":"</li>\n</ul>\n<p>经过一番比较和尝试，我决定使用微软的网盘工具<a href=\"https://www.microsoft.com/zh-cn/microsoft-365/onedrive/download\">OneDrive</a>来解决文件和照片的同步问题。在使用一段时间以后，OneDrive完全能满足我所有的需求。手机和电脑上的文件和照片不仅能实现双向同步，并且，Windows自带的照片管理软件能很方便的查看和编辑所有的照片。</p>\n<p>需要注意的是，有些应用，例如在微信的聊天窗口中，如果要发送文件给对方，只能通过iCloud选择需要发送的文件。为了能在iCloud的操作窗口中，访问OneDrive里面的文件，需要在<strong>文件</strong>应用中，<strong>打开OneDrive的选项</strong>。</p>\n<img src=\"/2021/09/24/shou-ji/windows-he-ios-wen-jian-gong-xiang/icloud-onedrive.jpg\" class=\"\" width=\"600\">\n\n<p>除了iCloud以外，苹果还有一项非常好用的功能，即AirDrop。这项功能可以让Mac和iPhone只需要通过局域网就可以互传文件，不需要再依赖于互联网。在Windows系统上，我想到了用<strong>Windows的文件共享（CIFS&#x2F;SMB）</strong>功能来实现类似的效果。在Windows文件夹的属性中，有一个“共享”选项，打开共享功能后，就可以在iPhone上，通过<strong>文件</strong>应用，访问该共享目录。</p>\n<img src=\"/2021/09/24/shou-ji/windows-he-ios-wen-jian-gong-xiang/fileshare01.jpg\" class=\"\" width=\"600\">\n\n<p>打开iPhone上的<strong>文件</strong>应用，打开<strong>连接服务器</strong>选项，输入Windows的主机名，例如<em>smb:&#x2F;&#x2F;nuc</em>，其中nuc就是Windows的主机名。</p>\n<img src=\"/2021/09/24/shou-ji/windows-he-ios-wen-jian-gong-xiang/icloud-connect-server.jpg\" class=\"\" width=\"600\">\n<p>连接服务器成功以后，就可以在iPhone上访问Windows共享文件夹里面的数据了。通过这种方式，就可以在局域网中，让手机和电脑之间互传文件了。</p>\n<img src=\"/2021/09/24/shou-ji/windows-he-ios-wen-jian-gong-xiang/icloud-server-share.jpg\" class=\"\" width=\"600\">"},{"title":"ESP32写入MicroPython固件","date":"2021-10-23T04:30:00.000Z","_content":"\n最近，刚入手了一块ESP32开发板。板子比两枚1元硬币略大，相比其它品牌的ESP32产品，价钱稍微贵了些，但是感觉做工还不错。通过这块开发板，我们可以玩比较热门的物联网，可穿戴设备，智能音箱等。\n\n![](20211023_013244373_iOS.jpg)\n\n<!-- more -->\n\n该开发板可以支持**Arduino**和**MicroPython**两种开发环境，由于对Python比较熟悉，所以我首选**MicroPython**。\n\n在烧录固件以前，需要先准备以下内容：\n\n- 一台电脑，操作系统可以是Windows、Linux或者Mac\n- 一条Type-C数据线\n- 下载Python IDE软件[Thonny](https://thonny.org/)\n- 下载[MicroPython](http://www.micropython.org/download/esp32/)固件\n\n首先，需要通过Type-C数据线，将ESP32开发板和电脑相连，其中数据线Type-C口接开发板，USB口接电脑。由于我使用的是Windows 10系统，所以，需要先安装串口芯片的驱动程序，系统才能识别设备。我购买的设备使用的是CH340串口芯片，可以通过以下地址下载驱动。\n\n驱动下载地址：[CH340芯片驱动](https://wiki.dfrobot.com.cn/_SKU_DFR0654_FireBeetle_Board_ESP32_E#target_30)\n\n安装好CH340驱动以后，打开**计算机管理**，查看到**USB-SERIAL CH340K(COM3)** ，说明设备已经被正确识别。\n\n![](2021-10-23113915.png)\n\n打开软件**Thonny**，选择**Run - Select interpreter...**，打开**Interpreter**属性选项。\n\n![](2021-10-23114015.png)\n\n选择**Interpreter**(解释器)的类型为**MicroPython(ESP32)**，选择**Port or WebREPL**为**USB-SERIAL CH340K(COM3)** ，然后点击右下角的**Install or update firmware**。\n\n![](2021-10-23114050.png)\n\n选择Port为**USB-SERIAL CH340K(COM3)** ，点击**Browser...**，找到Fireware的下载路径。我使用的Firmware版本是esp32-idf4-20210202-v1.14.bin。\n\n![](2021-10-23114253.png)\n\n需要注意的是，一开始由于下载的是**SPIRAM**的固件版本，刷入固件后，出现了以下报错信息。更换固件后，就不再出现报错信息。\n\n> E (621) spiram: SPI RAM enabled but initialization failed. Bailing out\n> E (656) spiram: SPI RAM not initialized\n\n![](2021-10-23114815.png)\n\n> 提示：SPIRAM是一种通过SPI接口连接的外部存储，只有型号为ESP32-WROVER才带有SPIRAM。ESP32-WROOM不带SPIRAM。\n\n固件烧录成功以后，就可以看到在交互式Shell中的Python提示符。接下来，就可以开心的玩耍啦。\n\n![](2021-10-23121931.png)\n\n","source":"_posts/智能家居/ESP32写入MicroPython固件.md","raw":"---\ntitle: ESP32写入MicroPython固件\ndate: 2021-10-23 12:30:00\ntags: \n - ESP32\ncategories: \n - 智能家居\n---\n\n最近，刚入手了一块ESP32开发板。板子比两枚1元硬币略大，相比其它品牌的ESP32产品，价钱稍微贵了些，但是感觉做工还不错。通过这块开发板，我们可以玩比较热门的物联网，可穿戴设备，智能音箱等。\n\n![](20211023_013244373_iOS.jpg)\n\n<!-- more -->\n\n该开发板可以支持**Arduino**和**MicroPython**两种开发环境，由于对Python比较熟悉，所以我首选**MicroPython**。\n\n在烧录固件以前，需要先准备以下内容：\n\n- 一台电脑，操作系统可以是Windows、Linux或者Mac\n- 一条Type-C数据线\n- 下载Python IDE软件[Thonny](https://thonny.org/)\n- 下载[MicroPython](http://www.micropython.org/download/esp32/)固件\n\n首先，需要通过Type-C数据线，将ESP32开发板和电脑相连，其中数据线Type-C口接开发板，USB口接电脑。由于我使用的是Windows 10系统，所以，需要先安装串口芯片的驱动程序，系统才能识别设备。我购买的设备使用的是CH340串口芯片，可以通过以下地址下载驱动。\n\n驱动下载地址：[CH340芯片驱动](https://wiki.dfrobot.com.cn/_SKU_DFR0654_FireBeetle_Board_ESP32_E#target_30)\n\n安装好CH340驱动以后，打开**计算机管理**，查看到**USB-SERIAL CH340K(COM3)** ，说明设备已经被正确识别。\n\n![](2021-10-23113915.png)\n\n打开软件**Thonny**，选择**Run - Select interpreter...**，打开**Interpreter**属性选项。\n\n![](2021-10-23114015.png)\n\n选择**Interpreter**(解释器)的类型为**MicroPython(ESP32)**，选择**Port or WebREPL**为**USB-SERIAL CH340K(COM3)** ，然后点击右下角的**Install or update firmware**。\n\n![](2021-10-23114050.png)\n\n选择Port为**USB-SERIAL CH340K(COM3)** ，点击**Browser...**，找到Fireware的下载路径。我使用的Firmware版本是esp32-idf4-20210202-v1.14.bin。\n\n![](2021-10-23114253.png)\n\n需要注意的是，一开始由于下载的是**SPIRAM**的固件版本，刷入固件后，出现了以下报错信息。更换固件后，就不再出现报错信息。\n\n> E (621) spiram: SPI RAM enabled but initialization failed. Bailing out\n> E (656) spiram: SPI RAM not initialized\n\n![](2021-10-23114815.png)\n\n> 提示：SPIRAM是一种通过SPI接口连接的外部存储，只有型号为ESP32-WROVER才带有SPIRAM。ESP32-WROOM不带SPIRAM。\n\n固件烧录成功以后，就可以看到在交互式Shell中的Python提示符。接下来，就可以开心的玩耍啦。\n\n![](2021-10-23121931.png)\n\n","slug":"智能家居/ESP32写入MicroPython固件","published":1,"updated":"2023-03-06T08:51:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clexvkk7300145i73bze6132o","content":"<p>最近，刚入手了一块ESP32开发板。板子比两枚1元硬币略大，相比其它品牌的ESP32产品，价钱稍微贵了些，但是感觉做工还不错。通过这块开发板，我们可以玩比较热门的物联网，可穿戴设备，智能音箱等。</p>\n<p><img src=\"/2021/10/23/zhi-neng-jia-ju/esp32-xie-ru-micropython-gu-jian/20211023_013244373_iOS.jpg\"></p>\n<span id=\"more\"></span>\n\n<p>该开发板可以支持<strong>Arduino</strong>和<strong>MicroPython</strong>两种开发环境，由于对Python比较熟悉，所以我首选<strong>MicroPython</strong>。</p>\n<p>在烧录固件以前，需要先准备以下内容：</p>\n<ul>\n<li>一台电脑，操作系统可以是Windows、Linux或者Mac</li>\n<li>一条Type-C数据线</li>\n<li>下载Python IDE软件<a href=\"https://thonny.org/\">Thonny</a></li>\n<li>下载<a href=\"http://www.micropython.org/download/esp32/\">MicroPython</a>固件</li>\n</ul>\n<p>首先，需要通过Type-C数据线，将ESP32开发板和电脑相连，其中数据线Type-C口接开发板，USB口接电脑。由于我使用的是Windows 10系统，所以，需要先安装串口芯片的驱动程序，系统才能识别设备。我购买的设备使用的是CH340串口芯片，可以通过以下地址下载驱动。</p>\n<p>驱动下载地址：<a href=\"https://wiki.dfrobot.com.cn/_SKU_DFR0654_FireBeetle_Board_ESP32_E#target_30\">CH340芯片驱动</a></p>\n<p>安装好CH340驱动以后，打开<strong>计算机管理</strong>，查看到<strong>USB-SERIAL CH340K(COM3)</strong> ，说明设备已经被正确识别。</p>\n<p><img src=\"/2021/10/23/zhi-neng-jia-ju/esp32-xie-ru-micropython-gu-jian/2021-10-23113915.png\"></p>\n<p>打开软件<strong>Thonny</strong>，选择<strong>Run - Select interpreter…<strong>，打开</strong>Interpreter</strong>属性选项。</p>\n<p><img src=\"/2021/10/23/zhi-neng-jia-ju/esp32-xie-ru-micropython-gu-jian/2021-10-23114015.png\"></p>\n<p>选择<strong>Interpreter</strong>(解释器)的类型为<strong>MicroPython(ESP32)<strong>，选择</strong>Port or WebREPL</strong>为<strong>USB-SERIAL CH340K(COM3)</strong> ，然后点击右下角的<strong>Install or update firmware</strong>。</p>\n<p><img src=\"/2021/10/23/zhi-neng-jia-ju/esp32-xie-ru-micropython-gu-jian/2021-10-23114050.png\"></p>\n<p>选择Port为<strong>USB-SERIAL CH340K(COM3)</strong> ，点击**Browser…**，找到Fireware的下载路径。我使用的Firmware版本是esp32-idf4-20210202-v1.14.bin。</p>\n<p><img src=\"/2021/10/23/zhi-neng-jia-ju/esp32-xie-ru-micropython-gu-jian/2021-10-23114253.png\"></p>\n<p>需要注意的是，一开始由于下载的是<strong>SPIRAM</strong>的固件版本，刷入固件后，出现了以下报错信息。更换固件后，就不再出现报错信息。</p>\n<blockquote>\n<p>E (621) spiram: SPI RAM enabled but initialization failed. Bailing out<br>E (656) spiram: SPI RAM not initialized</p>\n</blockquote>\n<p><img src=\"/2021/10/23/zhi-neng-jia-ju/esp32-xie-ru-micropython-gu-jian/2021-10-23114815.png\"></p>\n<blockquote>\n<p>提示：SPIRAM是一种通过SPI接口连接的外部存储，只有型号为ESP32-WROVER才带有SPIRAM。ESP32-WROOM不带SPIRAM。</p>\n</blockquote>\n<p>固件烧录成功以后，就可以看到在交互式Shell中的Python提示符。接下来，就可以开心的玩耍啦。</p>\n<p><img src=\"/2021/10/23/zhi-neng-jia-ju/esp32-xie-ru-micropython-gu-jian/2021-10-23121931.png\"></p>\n","site":{"data":{}},"excerpt":"<p>最近，刚入手了一块ESP32开发板。板子比两枚1元硬币略大，相比其它品牌的ESP32产品，价钱稍微贵了些，但是感觉做工还不错。通过这块开发板，我们可以玩比较热门的物联网，可穿戴设备，智能音箱等。</p>\n<p><img src=\"/2021/10/23/zhi-neng-jia-ju/esp32-xie-ru-micropython-gu-jian/20211023_013244373_iOS.jpg\"></p>","more":"<p>该开发板可以支持<strong>Arduino</strong>和<strong>MicroPython</strong>两种开发环境，由于对Python比较熟悉，所以我首选<strong>MicroPython</strong>。</p>\n<p>在烧录固件以前，需要先准备以下内容：</p>\n<ul>\n<li>一台电脑，操作系统可以是Windows、Linux或者Mac</li>\n<li>一条Type-C数据线</li>\n<li>下载Python IDE软件<a href=\"https://thonny.org/\">Thonny</a></li>\n<li>下载<a href=\"http://www.micropython.org/download/esp32/\">MicroPython</a>固件</li>\n</ul>\n<p>首先，需要通过Type-C数据线，将ESP32开发板和电脑相连，其中数据线Type-C口接开发板，USB口接电脑。由于我使用的是Windows 10系统，所以，需要先安装串口芯片的驱动程序，系统才能识别设备。我购买的设备使用的是CH340串口芯片，可以通过以下地址下载驱动。</p>\n<p>驱动下载地址：<a href=\"https://wiki.dfrobot.com.cn/_SKU_DFR0654_FireBeetle_Board_ESP32_E#target_30\">CH340芯片驱动</a></p>\n<p>安装好CH340驱动以后，打开<strong>计算机管理</strong>，查看到<strong>USB-SERIAL CH340K(COM3)</strong> ，说明设备已经被正确识别。</p>\n<p><img src=\"/2021/10/23/zhi-neng-jia-ju/esp32-xie-ru-micropython-gu-jian/2021-10-23113915.png\"></p>\n<p>打开软件<strong>Thonny</strong>，选择<strong>Run - Select interpreter…<strong>，打开</strong>Interpreter</strong>属性选项。</p>\n<p><img src=\"/2021/10/23/zhi-neng-jia-ju/esp32-xie-ru-micropython-gu-jian/2021-10-23114015.png\"></p>\n<p>选择<strong>Interpreter</strong>(解释器)的类型为<strong>MicroPython(ESP32)<strong>，选择</strong>Port or WebREPL</strong>为<strong>USB-SERIAL CH340K(COM3)</strong> ，然后点击右下角的<strong>Install or update firmware</strong>。</p>\n<p><img src=\"/2021/10/23/zhi-neng-jia-ju/esp32-xie-ru-micropython-gu-jian/2021-10-23114050.png\"></p>\n<p>选择Port为<strong>USB-SERIAL CH340K(COM3)</strong> ，点击**Browser…**，找到Fireware的下载路径。我使用的Firmware版本是esp32-idf4-20210202-v1.14.bin。</p>\n<p><img src=\"/2021/10/23/zhi-neng-jia-ju/esp32-xie-ru-micropython-gu-jian/2021-10-23114253.png\"></p>\n<p>需要注意的是，一开始由于下载的是<strong>SPIRAM</strong>的固件版本，刷入固件后，出现了以下报错信息。更换固件后，就不再出现报错信息。</p>\n<blockquote>\n<p>E (621) spiram: SPI RAM enabled but initialization failed. Bailing out<br>E (656) spiram: SPI RAM not initialized</p>\n</blockquote>\n<p><img src=\"/2021/10/23/zhi-neng-jia-ju/esp32-xie-ru-micropython-gu-jian/2021-10-23114815.png\"></p>\n<blockquote>\n<p>提示：SPIRAM是一种通过SPI接口连接的外部存储，只有型号为ESP32-WROVER才带有SPIRAM。ESP32-WROOM不带SPIRAM。</p>\n</blockquote>\n<p>固件烧录成功以后，就可以看到在交互式Shell中的Python提示符。接下来，就可以开心的玩耍啦。</p>\n<p><img src=\"/2021/10/23/zhi-neng-jia-ju/esp32-xie-ru-micropython-gu-jian/2021-10-23121931.png\"></p>"},{"title":"ESP32点亮TFT屏幕","date":"2021-10-26T11:32:00.000Z","_content":"\n最近，购买的1.3寸TFT屏幕已经到手，但是数据线不匹配，所以又等了几天。今天，终于可以好好折腾一下这块屏幕啦。\n\n![](20211024_091435141_iOS.jpg)\n\n<!-- more -->\n\n## 接线\n\n首先，肯定是要将屏幕和ESP32开发板用杜邦线连接起来。由于我打算采用MicroPython，因此，特意在Github上找到了专门为MicroPython编译的ST7789驱动。但是，由于接线方式的不同，为此花费了一番时间。\n\n以下是经过多次尝试后，得到的正确结果。\n\n| ST7789 | ESP32       |\n| ------ | ----------- |\n| GND    | GND         |\n| VCC    | 3.3V        |\n| SCL    | GPIO18/SCK  |\n| SDA    | GPIO23/MOSI |\n| RES    | GPIO04      |\n| DC     | GPIO02      |\n| BLK    | GPIO15      |\n\n**注意：BLK端口必须连接，否则屏幕点不亮。**\n\n## 初始化\n\n打开Thonny，通过串口连上ESP32。然后执行以下命令，完成屏幕的初始化：\n\n```\nimport machine\nimport st7789\nspi = machine.SPI(2, baudrate=40000000, polarity=1, sck=machine.Pin(18), mosi=machine.Pin(23))\ndisplay = st7789.ST7789(spi, 240, 240, reset=machine.Pin(4, machine.Pin.OUT), dc=machine.Pin(2, machine.Pin.OUT))\ndisplay.init()\n```\n\n\n\n## 最终效果\n\n执行以下命令，将整屏显示为黄色。\n\n```\ndisplay.fill(YELLOW)\n```\n\n![](20211026_072012179_iOS.jpg)\n\n\n\n","source":"_posts/智能家居/ESP32点亮TFT屏幕.md","raw":"---\ntitle: ESP32点亮TFT屏幕\ndate: 2021-10-26 19:32:00\ntags: \n - ESP32\ncategories: \n - 智能家居\n---\n\n最近，购买的1.3寸TFT屏幕已经到手，但是数据线不匹配，所以又等了几天。今天，终于可以好好折腾一下这块屏幕啦。\n\n![](20211024_091435141_iOS.jpg)\n\n<!-- more -->\n\n## 接线\n\n首先，肯定是要将屏幕和ESP32开发板用杜邦线连接起来。由于我打算采用MicroPython，因此，特意在Github上找到了专门为MicroPython编译的ST7789驱动。但是，由于接线方式的不同，为此花费了一番时间。\n\n以下是经过多次尝试后，得到的正确结果。\n\n| ST7789 | ESP32       |\n| ------ | ----------- |\n| GND    | GND         |\n| VCC    | 3.3V        |\n| SCL    | GPIO18/SCK  |\n| SDA    | GPIO23/MOSI |\n| RES    | GPIO04      |\n| DC     | GPIO02      |\n| BLK    | GPIO15      |\n\n**注意：BLK端口必须连接，否则屏幕点不亮。**\n\n## 初始化\n\n打开Thonny，通过串口连上ESP32。然后执行以下命令，完成屏幕的初始化：\n\n```\nimport machine\nimport st7789\nspi = machine.SPI(2, baudrate=40000000, polarity=1, sck=machine.Pin(18), mosi=machine.Pin(23))\ndisplay = st7789.ST7789(spi, 240, 240, reset=machine.Pin(4, machine.Pin.OUT), dc=machine.Pin(2, machine.Pin.OUT))\ndisplay.init()\n```\n\n\n\n## 最终效果\n\n执行以下命令，将整屏显示为黄色。\n\n```\ndisplay.fill(YELLOW)\n```\n\n![](20211026_072012179_iOS.jpg)\n\n\n\n","slug":"智能家居/ESP32点亮TFT屏幕","published":1,"updated":"2023-03-06T08:39:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clexvkk7600175i73aij303y2","content":"<p>最近，购买的1.3寸TFT屏幕已经到手，但是数据线不匹配，所以又等了几天。今天，终于可以好好折腾一下这块屏幕啦。</p>\n<p><img src=\"/2021/10/26/zhi-neng-jia-ju/esp32-dian-liang-tft-ping-mu/20211024_091435141_iOS.jpg\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"接线\"><a href=\"#接线\" class=\"headerlink\" title=\"接线\"></a>接线</h2><p>首先，肯定是要将屏幕和ESP32开发板用杜邦线连接起来。由于我打算采用MicroPython，因此，特意在Github上找到了专门为MicroPython编译的ST7789驱动。但是，由于接线方式的不同，为此花费了一番时间。</p>\n<p>以下是经过多次尝试后，得到的正确结果。</p>\n<table>\n<thead>\n<tr>\n<th>ST7789</th>\n<th>ESP32</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>GND</td>\n<td>GND</td>\n</tr>\n<tr>\n<td>VCC</td>\n<td>3.3V</td>\n</tr>\n<tr>\n<td>SCL</td>\n<td>GPIO18&#x2F;SCK</td>\n</tr>\n<tr>\n<td>SDA</td>\n<td>GPIO23&#x2F;MOSI</td>\n</tr>\n<tr>\n<td>RES</td>\n<td>GPIO04</td>\n</tr>\n<tr>\n<td>DC</td>\n<td>GPIO02</td>\n</tr>\n<tr>\n<td>BLK</td>\n<td>GPIO15</td>\n</tr>\n</tbody></table>\n<p><strong>注意：BLK端口必须连接，否则屏幕点不亮。</strong></p>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><p>打开Thonny，通过串口连上ESP32。然后执行以下命令，完成屏幕的初始化：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">import machine\nimport st7789\nspi &#x3D; machine.SPI(2, baudrate&#x3D;40000000, polarity&#x3D;1, sck&#x3D;machine.Pin(18), mosi&#x3D;machine.Pin(23))\ndisplay &#x3D; st7789.ST7789(spi, 240, 240, reset&#x3D;machine.Pin(4, machine.Pin.OUT), dc&#x3D;machine.Pin(2, machine.Pin.OUT))\ndisplay.init()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"最终效果\"><a href=\"#最终效果\" class=\"headerlink\" title=\"最终效果\"></a>最终效果</h2><p>执行以下命令，将整屏显示为黄色。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">display.fill(YELLOW)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"/2021/10/26/zhi-neng-jia-ju/esp32-dian-liang-tft-ping-mu/20211026_072012179_iOS.jpg\"></p>\n","site":{"data":{}},"excerpt":"<p>最近，购买的1.3寸TFT屏幕已经到手，但是数据线不匹配，所以又等了几天。今天，终于可以好好折腾一下这块屏幕啦。</p>\n<p><img src=\"/2021/10/26/zhi-neng-jia-ju/esp32-dian-liang-tft-ping-mu/20211024_091435141_iOS.jpg\"></p>","more":"<h2 id=\"接线\"><a href=\"#接线\" class=\"headerlink\" title=\"接线\"></a>接线</h2><p>首先，肯定是要将屏幕和ESP32开发板用杜邦线连接起来。由于我打算采用MicroPython，因此，特意在Github上找到了专门为MicroPython编译的ST7789驱动。但是，由于接线方式的不同，为此花费了一番时间。</p>\n<p>以下是经过多次尝试后，得到的正确结果。</p>\n<table>\n<thead>\n<tr>\n<th>ST7789</th>\n<th>ESP32</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>GND</td>\n<td>GND</td>\n</tr>\n<tr>\n<td>VCC</td>\n<td>3.3V</td>\n</tr>\n<tr>\n<td>SCL</td>\n<td>GPIO18&#x2F;SCK</td>\n</tr>\n<tr>\n<td>SDA</td>\n<td>GPIO23&#x2F;MOSI</td>\n</tr>\n<tr>\n<td>RES</td>\n<td>GPIO04</td>\n</tr>\n<tr>\n<td>DC</td>\n<td>GPIO02</td>\n</tr>\n<tr>\n<td>BLK</td>\n<td>GPIO15</td>\n</tr>\n</tbody></table>\n<p><strong>注意：BLK端口必须连接，否则屏幕点不亮。</strong></p>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><p>打开Thonny，通过串口连上ESP32。然后执行以下命令，完成屏幕的初始化：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">import machine\nimport st7789\nspi &#x3D; machine.SPI(2, baudrate&#x3D;40000000, polarity&#x3D;1, sck&#x3D;machine.Pin(18), mosi&#x3D;machine.Pin(23))\ndisplay &#x3D; st7789.ST7789(spi, 240, 240, reset&#x3D;machine.Pin(4, machine.Pin.OUT), dc&#x3D;machine.Pin(2, machine.Pin.OUT))\ndisplay.init()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"最终效果\"><a href=\"#最终效果\" class=\"headerlink\" title=\"最终效果\"></a>最终效果</h2><p>执行以下命令，将整屏显示为黄色。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">display.fill(YELLOW)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"/2021/10/26/zhi-neng-jia-ju/esp32-dian-liang-tft-ping-mu/20211026_072012179_iOS.jpg\"></p>"},{"title":"Home Assistant配置HTTPS","date":"2021-10-19T07:02:00.000Z","_content":"\n默认情况下，Home Assistant安装完成后，是使用HTTP访问。如果在内网使用，HTTP相对还比较安全。但是，为了能让手机在外网也能访问HA网关，需要将其发布到外网（Internet）。因此，首要任务就是要配置HTTPS，确保数据的安全性。\n\n为了节约成本，我打算使用自签的SSL证书。虽然官方也推荐了免费的TLS/SSL证书提供商：[Let’s Encrypt](https://www.home-assistant.io/docs/ecosystem/certificates/lets_encrypt/)和[Duck DNS integrating Let’s Encrypt](https://www.home-assistant.io/integrations/duckdns/)，但是考虑到自己环境的复杂性，决定暂时先用自签的证书。\n\n<!-- more -->\n\n## 制作自签的证书\n\n证书的制作过程都是在树莓派上使用**openssl**完成。\n\n### 制作根证书\n\n首先，需要创建根证书密钥，该密钥主要用来为证书签名。安全起见，该密钥不能泄露给其他人。\n\n```bash\nopenssl genrsa -des3 -out rootCA.key 4096\n```\n\n**该命令生成的Key默认使用密码保护，如果要取消密码保护，只需要移除选项-des3。**\n\n下面，可以制作根证书。\n\n```bash\nopenssl req -x509 -new -nodes -key rootCA.key -sha256 -days 3650 -out rootCA.pem\n```\n\n如果需要使用苹果设备**macOS vs 10.15 / iOS 13 (or above)**，请使用以下命令：\n\n```bash\nopenssl req -x509 -new -nodes -key rootCA.key -sha256 -days 825 -out rootCA.pem\n```\n\n### 制作HA证书\n\n请根据以下步骤，制作用于HA服务器的证书。\n\n**创建rootCA.csr.cnf文件**\n\n```\n# rootCA.csr.cnf\n[req]\ndefault_bits = 2048\nprompt = no\ndefault_md = sha256\ndistinguished_name = dn\n             \n[dn]\nC=CN\nST=Shanghai\nL=Shanghai\nO=HA\nOU=HAU\nemailAddress=admin@ha.com\nCN = ivpn.asuscomm.com   \n```\n\n**创建v3.ext文件**\n\n```\n# v3.ext\nauthorityKeyIdentifier=keyid,issuer\nbasicConstraints=CA:FALSE\nkeyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment\nsubjectAltName = @alt_names\nextendedKeyUsage=serverAuth\n                \n[alt_names]\nDNS.1 = ivpn.asuscomm.com\nIP.1 = 192.168.1.65\n```\n\n**创建证书密钥**\n\n```bash\nopenssl req -new -sha256 -nodes -out hassio.csr -newkey rsa:2048 -keyout hassio.key -config <( cat rootCA.csr.cnf )\n```\n\n如果在Windows平台上运行该命令，需要注意-config参数后面rootCA.csr.cnf文件的路径地址。请参考以下例子：\n\n```bash\nopenssl req -new -sha256 -nodes -out hassio.csr -newkey rsa:2048 -keyout hassio.key -config \"C:\\Program Files\\Git\\usr\\bin\\rootCA.csr.cnf\"\n```\n\n**创建证书**\n\n```bash\nopenssl x509 -req -in hassio.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out hassio.crt -days 3650 -sha256 -extfile v3.ext\n```\n\n如果需要使用苹果设备**macOS vs 10.15 / iOS 13 (or above)**，请使用以下命令：\n\n```bash\nopenssl x509 -req -in hassio.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out hassio.crt -days 825 -sha256 -extfile v3.ext\n```\n\n\n\n## 配置Home Assistant\n\n将HA证书重新命名：\n\n```\nrename hassio.crt fullchain.pem\nrename hassio.key privkey.pem\n```\n\n将证书复制到`/PATH_TO_YOUR_CONFIG/ssl`目录：\n\n**这里需要注意的是，由于采用了Docker方式安装HA，没有权限访问/etc目录，所以，只能将证书复制到/PATH_TO_YOUR_CONFIG/ssl。**\n\n```bash\nmkdir /PATH_TO_YOUR_CONFIG/ssl\ncp fullchain.pem /PATH_TO_YOUR_CONFIG/ssl/\ncp privkey.pem /PATH_TO_YOUR_CONFIG/ssl/\n```\n\n修改配置文件`configuration.yaml`：\n\n```\nhttp:                                                                       \n\tssl_certificate: ./ssl/fullchain.pem                                     \n\tssl_key: ./ssl/privkey.pem  \n```\n\n\n\n## 将Home Assistant发布到公网\n\n在HA网关上运行以下命令，该命令会将本地的8123端口映射到远端树莓派的50302端口。\n\n```\nautossh -f -M 0 -NR 0.0.0.0:50302:localhost:8123 pi@ivpn.asuscomm.com -p 50001\n```\n\n然后，创建计划任务，每次HA网关重启后，会自动执行以上命令。\n\n```\ncrontab -e\n@reboot autossh -f -M 0 -NR 0.0.0.0:50302:localhost:8123 pi@ivpn.asuscomm.com -p 50001 &\n```\n\n在华硕路由器上，选择**外部网络(WAN) - 端口转发 - 自定义设置** ，添加端口转发的条目。\n\n```\n服务名称：Home-Assistant\n通信协议：TCP\n外部端口：50302\n内部端口：50302\n本地IP地址：192.168.50.68\n```\n\n\n\n## iOS如何安装根证书\n\n点击rootCA.pem文件，安装根证书。\n\n![](20211019_001515000_iOS.png)\n\n打开**设置**应用，找到**已下载描述文件**，点击**安装**，安装过程中需要输入手机密码。\n\n![](20211019_001547000_iOS.png)\n\n安装完成后，需要在**设置 - 通用 - 关于本机 - 证书信任设置**中，启用安装的根证书。\n\n![](20211019_001714000_iOS.png)\n\n\n\n## Android如何安装根证书\n\n重新命名rootCA.pem文件为**rootCA.crt**。\n\n点击安装rootCA.crt文件。\n\n","source":"_posts/智能家居/Home_Assistant_HTTPS.md","raw":"---\ntitle: Home Assistant配置HTTPS\ndate: 2021-10-19 15:02:00\ntags: \n - home_assistant\ncategories: \n - 智能家居\n---\n\n默认情况下，Home Assistant安装完成后，是使用HTTP访问。如果在内网使用，HTTP相对还比较安全。但是，为了能让手机在外网也能访问HA网关，需要将其发布到外网（Internet）。因此，首要任务就是要配置HTTPS，确保数据的安全性。\n\n为了节约成本，我打算使用自签的SSL证书。虽然官方也推荐了免费的TLS/SSL证书提供商：[Let’s Encrypt](https://www.home-assistant.io/docs/ecosystem/certificates/lets_encrypt/)和[Duck DNS integrating Let’s Encrypt](https://www.home-assistant.io/integrations/duckdns/)，但是考虑到自己环境的复杂性，决定暂时先用自签的证书。\n\n<!-- more -->\n\n## 制作自签的证书\n\n证书的制作过程都是在树莓派上使用**openssl**完成。\n\n### 制作根证书\n\n首先，需要创建根证书密钥，该密钥主要用来为证书签名。安全起见，该密钥不能泄露给其他人。\n\n```bash\nopenssl genrsa -des3 -out rootCA.key 4096\n```\n\n**该命令生成的Key默认使用密码保护，如果要取消密码保护，只需要移除选项-des3。**\n\n下面，可以制作根证书。\n\n```bash\nopenssl req -x509 -new -nodes -key rootCA.key -sha256 -days 3650 -out rootCA.pem\n```\n\n如果需要使用苹果设备**macOS vs 10.15 / iOS 13 (or above)**，请使用以下命令：\n\n```bash\nopenssl req -x509 -new -nodes -key rootCA.key -sha256 -days 825 -out rootCA.pem\n```\n\n### 制作HA证书\n\n请根据以下步骤，制作用于HA服务器的证书。\n\n**创建rootCA.csr.cnf文件**\n\n```\n# rootCA.csr.cnf\n[req]\ndefault_bits = 2048\nprompt = no\ndefault_md = sha256\ndistinguished_name = dn\n             \n[dn]\nC=CN\nST=Shanghai\nL=Shanghai\nO=HA\nOU=HAU\nemailAddress=admin@ha.com\nCN = ivpn.asuscomm.com   \n```\n\n**创建v3.ext文件**\n\n```\n# v3.ext\nauthorityKeyIdentifier=keyid,issuer\nbasicConstraints=CA:FALSE\nkeyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment\nsubjectAltName = @alt_names\nextendedKeyUsage=serverAuth\n                \n[alt_names]\nDNS.1 = ivpn.asuscomm.com\nIP.1 = 192.168.1.65\n```\n\n**创建证书密钥**\n\n```bash\nopenssl req -new -sha256 -nodes -out hassio.csr -newkey rsa:2048 -keyout hassio.key -config <( cat rootCA.csr.cnf )\n```\n\n如果在Windows平台上运行该命令，需要注意-config参数后面rootCA.csr.cnf文件的路径地址。请参考以下例子：\n\n```bash\nopenssl req -new -sha256 -nodes -out hassio.csr -newkey rsa:2048 -keyout hassio.key -config \"C:\\Program Files\\Git\\usr\\bin\\rootCA.csr.cnf\"\n```\n\n**创建证书**\n\n```bash\nopenssl x509 -req -in hassio.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out hassio.crt -days 3650 -sha256 -extfile v3.ext\n```\n\n如果需要使用苹果设备**macOS vs 10.15 / iOS 13 (or above)**，请使用以下命令：\n\n```bash\nopenssl x509 -req -in hassio.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out hassio.crt -days 825 -sha256 -extfile v3.ext\n```\n\n\n\n## 配置Home Assistant\n\n将HA证书重新命名：\n\n```\nrename hassio.crt fullchain.pem\nrename hassio.key privkey.pem\n```\n\n将证书复制到`/PATH_TO_YOUR_CONFIG/ssl`目录：\n\n**这里需要注意的是，由于采用了Docker方式安装HA，没有权限访问/etc目录，所以，只能将证书复制到/PATH_TO_YOUR_CONFIG/ssl。**\n\n```bash\nmkdir /PATH_TO_YOUR_CONFIG/ssl\ncp fullchain.pem /PATH_TO_YOUR_CONFIG/ssl/\ncp privkey.pem /PATH_TO_YOUR_CONFIG/ssl/\n```\n\n修改配置文件`configuration.yaml`：\n\n```\nhttp:                                                                       \n\tssl_certificate: ./ssl/fullchain.pem                                     \n\tssl_key: ./ssl/privkey.pem  \n```\n\n\n\n## 将Home Assistant发布到公网\n\n在HA网关上运行以下命令，该命令会将本地的8123端口映射到远端树莓派的50302端口。\n\n```\nautossh -f -M 0 -NR 0.0.0.0:50302:localhost:8123 pi@ivpn.asuscomm.com -p 50001\n```\n\n然后，创建计划任务，每次HA网关重启后，会自动执行以上命令。\n\n```\ncrontab -e\n@reboot autossh -f -M 0 -NR 0.0.0.0:50302:localhost:8123 pi@ivpn.asuscomm.com -p 50001 &\n```\n\n在华硕路由器上，选择**外部网络(WAN) - 端口转发 - 自定义设置** ，添加端口转发的条目。\n\n```\n服务名称：Home-Assistant\n通信协议：TCP\n外部端口：50302\n内部端口：50302\n本地IP地址：192.168.50.68\n```\n\n\n\n## iOS如何安装根证书\n\n点击rootCA.pem文件，安装根证书。\n\n![](20211019_001515000_iOS.png)\n\n打开**设置**应用，找到**已下载描述文件**，点击**安装**，安装过程中需要输入手机密码。\n\n![](20211019_001547000_iOS.png)\n\n安装完成后，需要在**设置 - 通用 - 关于本机 - 证书信任设置**中，启用安装的根证书。\n\n![](20211019_001714000_iOS.png)\n\n\n\n## Android如何安装根证书\n\n重新命名rootCA.pem文件为**rootCA.crt**。\n\n点击安装rootCA.crt文件。\n\n","slug":"智能家居/Home_Assistant_HTTPS","published":1,"updated":"2023-03-06T08:40:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clexvkk7c001c5i7338ho66lm","content":"<p>默认情况下，Home Assistant安装完成后，是使用HTTP访问。如果在内网使用，HTTP相对还比较安全。但是，为了能让手机在外网也能访问HA网关，需要将其发布到外网（Internet）。因此，首要任务就是要配置HTTPS，确保数据的安全性。</p>\n<p>为了节约成本，我打算使用自签的SSL证书。虽然官方也推荐了免费的TLS&#x2F;SSL证书提供商：<a href=\"https://www.home-assistant.io/docs/ecosystem/certificates/lets_encrypt/\">Let’s Encrypt</a>和<a href=\"https://www.home-assistant.io/integrations/duckdns/\">Duck DNS integrating Let’s Encrypt</a>，但是考虑到自己环境的复杂性，决定暂时先用自签的证书。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"制作自签的证书\"><a href=\"#制作自签的证书\" class=\"headerlink\" title=\"制作自签的证书\"></a>制作自签的证书</h2><p>证书的制作过程都是在树莓派上使用<strong>openssl</strong>完成。</p>\n<h3 id=\"制作根证书\"><a href=\"#制作根证书\" class=\"headerlink\" title=\"制作根证书\"></a>制作根证书</h3><p>首先，需要创建根证书密钥，该密钥主要用来为证书签名。安全起见，该密钥不能泄露给其他人。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">openssl genrsa -des3 -out rootCA.key <span class=\"token number\">4096</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>该命令生成的Key默认使用密码保护，如果要取消密码保护，只需要移除选项-des3。</strong></p>\n<p>下面，可以制作根证书。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">openssl req -x509 -new -nodes -key rootCA.key -sha256 -days <span class=\"token number\">3650</span> -out rootCA.pem<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果需要使用苹果设备**macOS vs 10.15 &#x2F; iOS 13 (or above)**，请使用以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">openssl req -x509 -new -nodes -key rootCA.key -sha256 -days <span class=\"token number\">825</span> -out rootCA.pem<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"制作HA证书\"><a href=\"#制作HA证书\" class=\"headerlink\" title=\"制作HA证书\"></a>制作HA证书</h3><p>请根据以下步骤，制作用于HA服务器的证书。</p>\n<p><strong>创建rootCA.csr.cnf文件</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># rootCA.csr.cnf\n[req]\ndefault_bits &#x3D; 2048\nprompt &#x3D; no\ndefault_md &#x3D; sha256\ndistinguished_name &#x3D; dn\n             \n[dn]\nC&#x3D;CN\nST&#x3D;Shanghai\nL&#x3D;Shanghai\nO&#x3D;HA\nOU&#x3D;HAU\nemailAddress&#x3D;admin@ha.com\nCN &#x3D; ivpn.asuscomm.com   <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>创建v3.ext文件</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># v3.ext\nauthorityKeyIdentifier&#x3D;keyid,issuer\nbasicConstraints&#x3D;CA:FALSE\nkeyUsage &#x3D; digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment\nsubjectAltName &#x3D; @alt_names\nextendedKeyUsage&#x3D;serverAuth\n                \n[alt_names]\nDNS.1 &#x3D; ivpn.asuscomm.com\nIP.1 &#x3D; 192.168.1.65<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>创建证书密钥</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">openssl req -new -sha256 -nodes -out hassio.csr -newkey rsa:2048 -keyout hassio.key -config <span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span> <span class=\"token function\">cat</span> rootCA.csr.cnf <span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果在Windows平台上运行该命令，需要注意-config参数后面rootCA.csr.cnf文件的路径地址。请参考以下例子：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">openssl req -new -sha256 -nodes -out hassio.csr -newkey rsa:2048 -keyout hassio.key -config <span class=\"token string\">\"C:\\Program Files\\Git\\usr<span class=\"token entity\" title=\"\\b\">\\b</span>in<span class=\"token entity\" title=\"\\r\">\\r</span>ootCA.csr.cnf\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>创建证书</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">openssl x509 -req -in hassio.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out hassio.crt -days <span class=\"token number\">3650</span> -sha256 -extfile v3.ext<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果需要使用苹果设备**macOS vs 10.15 &#x2F; iOS 13 (or above)**，请使用以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">openssl x509 -req -in hassio.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out hassio.crt -days <span class=\"token number\">825</span> -sha256 -extfile v3.ext<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h2 id=\"配置Home-Assistant\"><a href=\"#配置Home-Assistant\" class=\"headerlink\" title=\"配置Home Assistant\"></a>配置Home Assistant</h2><p>将HA证书重新命名：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">rename hassio.crt fullchain.pem\nrename hassio.key privkey.pem<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>将证书复制到<code>/PATH_TO_YOUR_CONFIG/ssl</code>目录：</p>\n<p><strong>这里需要注意的是，由于采用了Docker方式安装HA，没有权限访问&#x2F;etc目录，所以，只能将证书复制到&#x2F;PATH_TO_YOUR_CONFIG&#x2F;ssl。</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> /PATH_TO_YOUR_CONFIG/ssl\n<span class=\"token function\">cp</span> fullchain.pem /PATH_TO_YOUR_CONFIG/ssl/\n<span class=\"token function\">cp</span> privkey.pem /PATH_TO_YOUR_CONFIG/ssl/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>修改配置文件<code>configuration.yaml</code>：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">http:                                                                       \n\tssl_certificate: .&#x2F;ssl&#x2F;fullchain.pem                                     \n\tssl_key: .&#x2F;ssl&#x2F;privkey.pem  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"将Home-Assistant发布到公网\"><a href=\"#将Home-Assistant发布到公网\" class=\"headerlink\" title=\"将Home Assistant发布到公网\"></a>将Home Assistant发布到公网</h2><p>在HA网关上运行以下命令，该命令会将本地的8123端口映射到远端树莓派的50302端口。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">autossh -f -M 0 -NR 0.0.0.0:50302:localhost:8123 pi@ivpn.asuscomm.com -p 50001<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后，创建计划任务，每次HA网关重启后，会自动执行以上命令。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">crontab -e\n@reboot autossh -f -M 0 -NR 0.0.0.0:50302:localhost:8123 pi@ivpn.asuscomm.com -p 50001 &amp;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>在华硕路由器上，选择<strong>外部网络(WAN) - 端口转发 - 自定义设置</strong> ，添加端口转发的条目。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">服务名称：Home-Assistant\n通信协议：TCP\n外部端口：50302\n内部端口：50302\n本地IP地址：192.168.50.68<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"iOS如何安装根证书\"><a href=\"#iOS如何安装根证书\" class=\"headerlink\" title=\"iOS如何安装根证书\"></a>iOS如何安装根证书</h2><p>点击rootCA.pem文件，安装根证书。</p>\n<p><img src=\"/2021/10/19/zhi-neng-jia-ju/home-assistant-https/20211019_001515000_iOS.png\"></p>\n<p>打开<strong>设置</strong>应用，找到<strong>已下载描述文件</strong>，点击<strong>安装</strong>，安装过程中需要输入手机密码。</p>\n<p><img src=\"/2021/10/19/zhi-neng-jia-ju/home-assistant-https/20211019_001547000_iOS.png\"></p>\n<p>安装完成后，需要在<strong>设置 - 通用 - 关于本机 - 证书信任设置</strong>中，启用安装的根证书。</p>\n<p><img src=\"/2021/10/19/zhi-neng-jia-ju/home-assistant-https/20211019_001714000_iOS.png\"></p>\n<h2 id=\"Android如何安装根证书\"><a href=\"#Android如何安装根证书\" class=\"headerlink\" title=\"Android如何安装根证书\"></a>Android如何安装根证书</h2><p>重新命名rootCA.pem文件为<strong>rootCA.crt</strong>。</p>\n<p>点击安装rootCA.crt文件。</p>\n","site":{"data":{}},"excerpt":"<p>默认情况下，Home Assistant安装完成后，是使用HTTP访问。如果在内网使用，HTTP相对还比较安全。但是，为了能让手机在外网也能访问HA网关，需要将其发布到外网（Internet）。因此，首要任务就是要配置HTTPS，确保数据的安全性。</p>\n<p>为了节约成本，我打算使用自签的SSL证书。虽然官方也推荐了免费的TLS&#x2F;SSL证书提供商：<a href=\"https://www.home-assistant.io/docs/ecosystem/certificates/lets_encrypt/\">Let’s Encrypt</a>和<a href=\"https://www.home-assistant.io/integrations/duckdns/\">Duck DNS integrating Let’s Encrypt</a>，但是考虑到自己环境的复杂性，决定暂时先用自签的证书。</p>","more":"<h2 id=\"制作自签的证书\"><a href=\"#制作自签的证书\" class=\"headerlink\" title=\"制作自签的证书\"></a>制作自签的证书</h2><p>证书的制作过程都是在树莓派上使用<strong>openssl</strong>完成。</p>\n<h3 id=\"制作根证书\"><a href=\"#制作根证书\" class=\"headerlink\" title=\"制作根证书\"></a>制作根证书</h3><p>首先，需要创建根证书密钥，该密钥主要用来为证书签名。安全起见，该密钥不能泄露给其他人。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">openssl genrsa -des3 -out rootCA.key <span class=\"token number\">4096</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>该命令生成的Key默认使用密码保护，如果要取消密码保护，只需要移除选项-des3。</strong></p>\n<p>下面，可以制作根证书。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">openssl req -x509 -new -nodes -key rootCA.key -sha256 -days <span class=\"token number\">3650</span> -out rootCA.pem<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果需要使用苹果设备**macOS vs 10.15 &#x2F; iOS 13 (or above)**，请使用以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">openssl req -x509 -new -nodes -key rootCA.key -sha256 -days <span class=\"token number\">825</span> -out rootCA.pem<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"制作HA证书\"><a href=\"#制作HA证书\" class=\"headerlink\" title=\"制作HA证书\"></a>制作HA证书</h3><p>请根据以下步骤，制作用于HA服务器的证书。</p>\n<p><strong>创建rootCA.csr.cnf文件</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># rootCA.csr.cnf\n[req]\ndefault_bits &#x3D; 2048\nprompt &#x3D; no\ndefault_md &#x3D; sha256\ndistinguished_name &#x3D; dn\n             \n[dn]\nC&#x3D;CN\nST&#x3D;Shanghai\nL&#x3D;Shanghai\nO&#x3D;HA\nOU&#x3D;HAU\nemailAddress&#x3D;admin@ha.com\nCN &#x3D; ivpn.asuscomm.com   <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>创建v3.ext文件</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># v3.ext\nauthorityKeyIdentifier&#x3D;keyid,issuer\nbasicConstraints&#x3D;CA:FALSE\nkeyUsage &#x3D; digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment\nsubjectAltName &#x3D; @alt_names\nextendedKeyUsage&#x3D;serverAuth\n                \n[alt_names]\nDNS.1 &#x3D; ivpn.asuscomm.com\nIP.1 &#x3D; 192.168.1.65<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>创建证书密钥</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">openssl req -new -sha256 -nodes -out hassio.csr -newkey rsa:2048 -keyout hassio.key -config <span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span> <span class=\"token function\">cat</span> rootCA.csr.cnf <span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果在Windows平台上运行该命令，需要注意-config参数后面rootCA.csr.cnf文件的路径地址。请参考以下例子：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">openssl req -new -sha256 -nodes -out hassio.csr -newkey rsa:2048 -keyout hassio.key -config <span class=\"token string\">\"C:\\Program Files\\Git\\usr<span class=\"token entity\" title=\"\\b\">\\b</span>in<span class=\"token entity\" title=\"\\r\">\\r</span>ootCA.csr.cnf\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>创建证书</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">openssl x509 -req -in hassio.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out hassio.crt -days <span class=\"token number\">3650</span> -sha256 -extfile v3.ext<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果需要使用苹果设备**macOS vs 10.15 &#x2F; iOS 13 (or above)**，请使用以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">openssl x509 -req -in hassio.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out hassio.crt -days <span class=\"token number\">825</span> -sha256 -extfile v3.ext<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h2 id=\"配置Home-Assistant\"><a href=\"#配置Home-Assistant\" class=\"headerlink\" title=\"配置Home Assistant\"></a>配置Home Assistant</h2><p>将HA证书重新命名：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">rename hassio.crt fullchain.pem\nrename hassio.key privkey.pem<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>将证书复制到<code>/PATH_TO_YOUR_CONFIG/ssl</code>目录：</p>\n<p><strong>这里需要注意的是，由于采用了Docker方式安装HA，没有权限访问&#x2F;etc目录，所以，只能将证书复制到&#x2F;PATH_TO_YOUR_CONFIG&#x2F;ssl。</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> /PATH_TO_YOUR_CONFIG/ssl\n<span class=\"token function\">cp</span> fullchain.pem /PATH_TO_YOUR_CONFIG/ssl/\n<span class=\"token function\">cp</span> privkey.pem /PATH_TO_YOUR_CONFIG/ssl/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>修改配置文件<code>configuration.yaml</code>：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">http:                                                                       \n\tssl_certificate: .&#x2F;ssl&#x2F;fullchain.pem                                     \n\tssl_key: .&#x2F;ssl&#x2F;privkey.pem  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"将Home-Assistant发布到公网\"><a href=\"#将Home-Assistant发布到公网\" class=\"headerlink\" title=\"将Home Assistant发布到公网\"></a>将Home Assistant发布到公网</h2><p>在HA网关上运行以下命令，该命令会将本地的8123端口映射到远端树莓派的50302端口。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">autossh -f -M 0 -NR 0.0.0.0:50302:localhost:8123 pi@ivpn.asuscomm.com -p 50001<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后，创建计划任务，每次HA网关重启后，会自动执行以上命令。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">crontab -e\n@reboot autossh -f -M 0 -NR 0.0.0.0:50302:localhost:8123 pi@ivpn.asuscomm.com -p 50001 &amp;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>在华硕路由器上，选择<strong>外部网络(WAN) - 端口转发 - 自定义设置</strong> ，添加端口转发的条目。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">服务名称：Home-Assistant\n通信协议：TCP\n外部端口：50302\n内部端口：50302\n本地IP地址：192.168.50.68<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"iOS如何安装根证书\"><a href=\"#iOS如何安装根证书\" class=\"headerlink\" title=\"iOS如何安装根证书\"></a>iOS如何安装根证书</h2><p>点击rootCA.pem文件，安装根证书。</p>\n<p><img src=\"/2021/10/19/zhi-neng-jia-ju/home-assistant-https/20211019_001515000_iOS.png\"></p>\n<p>打开<strong>设置</strong>应用，找到<strong>已下载描述文件</strong>，点击<strong>安装</strong>，安装过程中需要输入手机密码。</p>\n<p><img src=\"/2021/10/19/zhi-neng-jia-ju/home-assistant-https/20211019_001547000_iOS.png\"></p>\n<p>安装完成后，需要在<strong>设置 - 通用 - 关于本机 - 证书信任设置</strong>中，启用安装的根证书。</p>\n<p><img src=\"/2021/10/19/zhi-neng-jia-ju/home-assistant-https/20211019_001714000_iOS.png\"></p>\n<h2 id=\"Android如何安装根证书\"><a href=\"#Android如何安装根证书\" class=\"headerlink\" title=\"Android如何安装根证书\"></a>Android如何安装根证书</h2><p>重新命名rootCA.pem文件为<strong>rootCA.crt</strong>。</p>\n<p>点击安装rootCA.crt文件。</p>"},{"title":"Home Assistant客户端配置","date":"2021-10-19T07:02:00.000Z","_content":"\nHome Assistant支持各种客户端平台的访问，包括**Windows**, **iOS**和**Android**。\n\n由于之前使用的是自签的SSL证书，详细内容，请参考以前的文章[Home Assistant: 配置HTTPS访问](http://pi/home-assistant-pei-zhi-httpsfang-wen.html)，所以，配置客户端之前，需要先安装SSL根证书。\n\n如果是自己购买的TLS/SSL证书，或者使用的是Let's Encrytp提供的免费证书，不需要安装根证书。\n\n<!-- more -->\n\n## Windows客户端\n\n对于Windows平台，可以使用浏览器访问Home Assistant网关。\n\n首先，需要先安装根证书文件。将根证书文件的后缀.pem修改为.crt，然后双击打开文件。\n\n![](2021-10-20094537.png)\n\n点击**安装证书...**，通过安装向导，开始安装。\n\n![](2021-10-20094623.png)\n\n选择**存储位置**为**当前用户**，点击**下一步**。\n\n![](2021-10-20094645.png)\n\n选择默认选项，点击**完成**。\n\n![](2021-10-20094710.png)\n\n![](2021-10-20094728.png)\n\n打开IE浏览器的**工具 - Internet 选项 - 内容 - 证书**，选择受信任的根证书颁发机构，查看根证书HA Root CA已经导入成功。\n\n![](2021-10-20095144.png)\n\n下面，打开浏览器，访问URL: https://ha.example.com:8123，就可以访问Home Assistant的管理界面了。\n\n![](2021-10-20094439.png)\n\n\n\n## iOS客户端\n\n对于iOS平台，Home Assistant提供了配套的客户端应用，可以到苹果的应用商店下载app。\n\n## 安装根证书\n\n先把根证书文件rootCA.pem上传到手机，然后点击rootCA.pem文件，安装根证书。\n\n![](20211019_001515000_iOS1.png)\n\n根据提示，打开**设置**应用，找到**已下载描述文件**，点击**安装**，安装过程中需要输入手机密码。\n\n![](20211019_001547000_iOS2.png)\n\n安装完成后，需要在**设置 - 通用 - 关于本机 - 证书信任设置**中，启用安装的根证书。\n\n![](20211019_001714000_iOS3.png)\n\n## 配置客户端\n\n打开Home Assistant客户端应用，点击**继续**。\n\n![](20211020_024210000_iOS.png)\n\n如果手机与HA网关在同一个局域网，就会自动检测到HA网关，如果没有检测到，就选择**手动输入地址**。\n\n![](20211020_024219000_iOS.png)\n\n输入HA网关的地址，例如: https://ha.example.com:8123，然后点击**连接**。\n\n![](20211020_024258000_iOS.png)\n\n输入用户名和密码，如果启用了双因子认证，还需要输入Google Authenticator生成的6位随机码。（一般建议可以启用双因子认证，以确保账号的安全性。）\n\n![](20211020_024338000_iOS.png)\n\n根据自己的需要，可以有选择地将位置、通知、活动数据、专注模式等权限授予客户端，然后点击**继续**。\n\n![](20211020_024501000_iOS.png)\n\n连接成功后，就可以看到监控的主界面了。如果账号有管理员权限，可以在手机上完成所有的管理员操作。\n\n![](20211020_023853000_iOS.png)\n\n","source":"_posts/智能家居/Home_Assistant_客户端配置.md","raw":"---\ntitle: Home Assistant客户端配置\ndate: 2021-10-19 15:02:00\ntags: \n - home_assistant\ncategories: \n - 智能家居\n---\n\nHome Assistant支持各种客户端平台的访问，包括**Windows**, **iOS**和**Android**。\n\n由于之前使用的是自签的SSL证书，详细内容，请参考以前的文章[Home Assistant: 配置HTTPS访问](http://pi/home-assistant-pei-zhi-httpsfang-wen.html)，所以，配置客户端之前，需要先安装SSL根证书。\n\n如果是自己购买的TLS/SSL证书，或者使用的是Let's Encrytp提供的免费证书，不需要安装根证书。\n\n<!-- more -->\n\n## Windows客户端\n\n对于Windows平台，可以使用浏览器访问Home Assistant网关。\n\n首先，需要先安装根证书文件。将根证书文件的后缀.pem修改为.crt，然后双击打开文件。\n\n![](2021-10-20094537.png)\n\n点击**安装证书...**，通过安装向导，开始安装。\n\n![](2021-10-20094623.png)\n\n选择**存储位置**为**当前用户**，点击**下一步**。\n\n![](2021-10-20094645.png)\n\n选择默认选项，点击**完成**。\n\n![](2021-10-20094710.png)\n\n![](2021-10-20094728.png)\n\n打开IE浏览器的**工具 - Internet 选项 - 内容 - 证书**，选择受信任的根证书颁发机构，查看根证书HA Root CA已经导入成功。\n\n![](2021-10-20095144.png)\n\n下面，打开浏览器，访问URL: https://ha.example.com:8123，就可以访问Home Assistant的管理界面了。\n\n![](2021-10-20094439.png)\n\n\n\n## iOS客户端\n\n对于iOS平台，Home Assistant提供了配套的客户端应用，可以到苹果的应用商店下载app。\n\n## 安装根证书\n\n先把根证书文件rootCA.pem上传到手机，然后点击rootCA.pem文件，安装根证书。\n\n![](20211019_001515000_iOS1.png)\n\n根据提示，打开**设置**应用，找到**已下载描述文件**，点击**安装**，安装过程中需要输入手机密码。\n\n![](20211019_001547000_iOS2.png)\n\n安装完成后，需要在**设置 - 通用 - 关于本机 - 证书信任设置**中，启用安装的根证书。\n\n![](20211019_001714000_iOS3.png)\n\n## 配置客户端\n\n打开Home Assistant客户端应用，点击**继续**。\n\n![](20211020_024210000_iOS.png)\n\n如果手机与HA网关在同一个局域网，就会自动检测到HA网关，如果没有检测到，就选择**手动输入地址**。\n\n![](20211020_024219000_iOS.png)\n\n输入HA网关的地址，例如: https://ha.example.com:8123，然后点击**连接**。\n\n![](20211020_024258000_iOS.png)\n\n输入用户名和密码，如果启用了双因子认证，还需要输入Google Authenticator生成的6位随机码。（一般建议可以启用双因子认证，以确保账号的安全性。）\n\n![](20211020_024338000_iOS.png)\n\n根据自己的需要，可以有选择地将位置、通知、活动数据、专注模式等权限授予客户端，然后点击**继续**。\n\n![](20211020_024501000_iOS.png)\n\n连接成功后，就可以看到监控的主界面了。如果账号有管理员权限，可以在手机上完成所有的管理员操作。\n\n![](20211020_023853000_iOS.png)\n\n","slug":"智能家居/Home_Assistant_客户端配置","published":1,"updated":"2023-03-06T10:18:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clexvkk7g001f5i73eodohrtr","content":"<p>Home Assistant支持各种客户端平台的访问，包括<strong>Windows</strong>, <strong>iOS</strong>和<strong>Android</strong>。</p>\n<p>由于之前使用的是自签的SSL证书，详细内容，请参考以前的文章<a href=\"http://pi/home-assistant-pei-zhi-httpsfang-wen.html\">Home Assistant: 配置HTTPS访问</a>，所以，配置客户端之前，需要先安装SSL根证书。</p>\n<p>如果是自己购买的TLS&#x2F;SSL证书，或者使用的是Let’s Encrytp提供的免费证书，不需要安装根证书。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Windows客户端\"><a href=\"#Windows客户端\" class=\"headerlink\" title=\"Windows客户端\"></a>Windows客户端</h2><p>对于Windows平台，可以使用浏览器访问Home Assistant网关。</p>\n<p>首先，需要先安装根证书文件。将根证书文件的后缀.pem修改为.crt，然后双击打开文件。</p>\n<p><img src=\"/2021/10/19/zhi-neng-jia-ju/home-assistant-ke-hu-duan-pei-zhi/2021-10-20094537.png\"></p>\n<p>点击**安装证书…**，通过安装向导，开始安装。</p>\n<p><img src=\"/2021/10/19/zhi-neng-jia-ju/home-assistant-ke-hu-duan-pei-zhi/2021-10-20094623.png\"></p>\n<p>选择<strong>存储位置</strong>为<strong>当前用户</strong>，点击<strong>下一步</strong>。</p>\n<p><img src=\"/2021/10/19/zhi-neng-jia-ju/home-assistant-ke-hu-duan-pei-zhi/2021-10-20094645.png\"></p>\n<p>选择默认选项，点击<strong>完成</strong>。</p>\n<p><img src=\"/2021/10/19/zhi-neng-jia-ju/home-assistant-ke-hu-duan-pei-zhi/2021-10-20094710.png\"></p>\n<p><img src=\"/2021/10/19/zhi-neng-jia-ju/home-assistant-ke-hu-duan-pei-zhi/2021-10-20094728.png\"></p>\n<p>打开IE浏览器的<strong>工具 - Internet 选项 - 内容 - 证书</strong>，选择受信任的根证书颁发机构，查看根证书HA Root CA已经导入成功。</p>\n<p><img src=\"/2021/10/19/zhi-neng-jia-ju/home-assistant-ke-hu-duan-pei-zhi/2021-10-20095144.png\"></p>\n<p>下面，打开浏览器，访问URL: <a href=\"https://ha.example.com:8123，就可以访问Home\">https://ha.example.com:8123，就可以访问Home</a> Assistant的管理界面了。</p>\n<p><img src=\"/2021/10/19/zhi-neng-jia-ju/home-assistant-ke-hu-duan-pei-zhi/2021-10-20094439.png\"></p>\n<h2 id=\"iOS客户端\"><a href=\"#iOS客户端\" class=\"headerlink\" title=\"iOS客户端\"></a>iOS客户端</h2><p>对于iOS平台，Home Assistant提供了配套的客户端应用，可以到苹果的应用商店下载app。</p>\n<h2 id=\"安装根证书\"><a href=\"#安装根证书\" class=\"headerlink\" title=\"安装根证书\"></a>安装根证书</h2><p>先把根证书文件rootCA.pem上传到手机，然后点击rootCA.pem文件，安装根证书。</p>\n<p><img src=\"/2021/10/19/zhi-neng-jia-ju/home-assistant-ke-hu-duan-pei-zhi/20211019_001515000_iOS1.png\"></p>\n<p>根据提示，打开<strong>设置</strong>应用，找到<strong>已下载描述文件</strong>，点击<strong>安装</strong>，安装过程中需要输入手机密码。</p>\n<p><img src=\"/2021/10/19/zhi-neng-jia-ju/home-assistant-ke-hu-duan-pei-zhi/20211019_001547000_iOS2.png\"></p>\n<p>安装完成后，需要在<strong>设置 - 通用 - 关于本机 - 证书信任设置</strong>中，启用安装的根证书。</p>\n<p><img src=\"/2021/10/19/zhi-neng-jia-ju/home-assistant-ke-hu-duan-pei-zhi/20211019_001714000_iOS3.png\"></p>\n<h2 id=\"配置客户端\"><a href=\"#配置客户端\" class=\"headerlink\" title=\"配置客户端\"></a>配置客户端</h2><p>打开Home Assistant客户端应用，点击<strong>继续</strong>。</p>\n<p><img src=\"/2021/10/19/zhi-neng-jia-ju/home-assistant-ke-hu-duan-pei-zhi/20211020_024210000_iOS.png\"></p>\n<p>如果手机与HA网关在同一个局域网，就会自动检测到HA网关，如果没有检测到，就选择<strong>手动输入地址</strong>。</p>\n<p><img src=\"/2021/10/19/zhi-neng-jia-ju/home-assistant-ke-hu-duan-pei-zhi/20211020_024219000_iOS.png\"></p>\n<p>输入HA网关的地址，例如: <a href=\"https://ha.example.com:8123，然后点击**连接**。\">https://ha.example.com:8123，然后点击**连接**。</a></p>\n<p><img src=\"/2021/10/19/zhi-neng-jia-ju/home-assistant-ke-hu-duan-pei-zhi/20211020_024258000_iOS.png\"></p>\n<p>输入用户名和密码，如果启用了双因子认证，还需要输入Google Authenticator生成的6位随机码。（一般建议可以启用双因子认证，以确保账号的安全性。）</p>\n<p><img src=\"/2021/10/19/zhi-neng-jia-ju/home-assistant-ke-hu-duan-pei-zhi/20211020_024338000_iOS.png\"></p>\n<p>根据自己的需要，可以有选择地将位置、通知、活动数据、专注模式等权限授予客户端，然后点击<strong>继续</strong>。</p>\n<p><img src=\"/2021/10/19/zhi-neng-jia-ju/home-assistant-ke-hu-duan-pei-zhi/20211020_024501000_iOS.png\"></p>\n<p>连接成功后，就可以看到监控的主界面了。如果账号有管理员权限，可以在手机上完成所有的管理员操作。</p>\n<p><img src=\"/2021/10/19/zhi-neng-jia-ju/home-assistant-ke-hu-duan-pei-zhi/20211020_023853000_iOS.png\"></p>\n","site":{"data":{}},"excerpt":"<p>Home Assistant支持各种客户端平台的访问，包括<strong>Windows</strong>, <strong>iOS</strong>和<strong>Android</strong>。</p>\n<p>由于之前使用的是自签的SSL证书，详细内容，请参考以前的文章<a href=\"http://pi/home-assistant-pei-zhi-httpsfang-wen.html\">Home Assistant: 配置HTTPS访问</a>，所以，配置客户端之前，需要先安装SSL根证书。</p>\n<p>如果是自己购买的TLS&#x2F;SSL证书，或者使用的是Let’s Encrytp提供的免费证书，不需要安装根证书。</p>","more":"<h2 id=\"Windows客户端\"><a href=\"#Windows客户端\" class=\"headerlink\" title=\"Windows客户端\"></a>Windows客户端</h2><p>对于Windows平台，可以使用浏览器访问Home Assistant网关。</p>\n<p>首先，需要先安装根证书文件。将根证书文件的后缀.pem修改为.crt，然后双击打开文件。</p>\n<p><img src=\"/2021/10/19/zhi-neng-jia-ju/home-assistant-ke-hu-duan-pei-zhi/2021-10-20094537.png\"></p>\n<p>点击**安装证书…**，通过安装向导，开始安装。</p>\n<p><img src=\"/2021/10/19/zhi-neng-jia-ju/home-assistant-ke-hu-duan-pei-zhi/2021-10-20094623.png\"></p>\n<p>选择<strong>存储位置</strong>为<strong>当前用户</strong>，点击<strong>下一步</strong>。</p>\n<p><img src=\"/2021/10/19/zhi-neng-jia-ju/home-assistant-ke-hu-duan-pei-zhi/2021-10-20094645.png\"></p>\n<p>选择默认选项，点击<strong>完成</strong>。</p>\n<p><img src=\"/2021/10/19/zhi-neng-jia-ju/home-assistant-ke-hu-duan-pei-zhi/2021-10-20094710.png\"></p>\n<p><img src=\"/2021/10/19/zhi-neng-jia-ju/home-assistant-ke-hu-duan-pei-zhi/2021-10-20094728.png\"></p>\n<p>打开IE浏览器的<strong>工具 - Internet 选项 - 内容 - 证书</strong>，选择受信任的根证书颁发机构，查看根证书HA Root CA已经导入成功。</p>\n<p><img src=\"/2021/10/19/zhi-neng-jia-ju/home-assistant-ke-hu-duan-pei-zhi/2021-10-20095144.png\"></p>\n<p>下面，打开浏览器，访问URL: <a href=\"https://ha.example.com:8123，就可以访问Home\">https://ha.example.com:8123，就可以访问Home</a> Assistant的管理界面了。</p>\n<p><img src=\"/2021/10/19/zhi-neng-jia-ju/home-assistant-ke-hu-duan-pei-zhi/2021-10-20094439.png\"></p>\n<h2 id=\"iOS客户端\"><a href=\"#iOS客户端\" class=\"headerlink\" title=\"iOS客户端\"></a>iOS客户端</h2><p>对于iOS平台，Home Assistant提供了配套的客户端应用，可以到苹果的应用商店下载app。</p>\n<h2 id=\"安装根证书\"><a href=\"#安装根证书\" class=\"headerlink\" title=\"安装根证书\"></a>安装根证书</h2><p>先把根证书文件rootCA.pem上传到手机，然后点击rootCA.pem文件，安装根证书。</p>\n<p><img src=\"/2021/10/19/zhi-neng-jia-ju/home-assistant-ke-hu-duan-pei-zhi/20211019_001515000_iOS1.png\"></p>\n<p>根据提示，打开<strong>设置</strong>应用，找到<strong>已下载描述文件</strong>，点击<strong>安装</strong>，安装过程中需要输入手机密码。</p>\n<p><img src=\"/2021/10/19/zhi-neng-jia-ju/home-assistant-ke-hu-duan-pei-zhi/20211019_001547000_iOS2.png\"></p>\n<p>安装完成后，需要在<strong>设置 - 通用 - 关于本机 - 证书信任设置</strong>中，启用安装的根证书。</p>\n<p><img src=\"/2021/10/19/zhi-neng-jia-ju/home-assistant-ke-hu-duan-pei-zhi/20211019_001714000_iOS3.png\"></p>\n<h2 id=\"配置客户端\"><a href=\"#配置客户端\" class=\"headerlink\" title=\"配置客户端\"></a>配置客户端</h2><p>打开Home Assistant客户端应用，点击<strong>继续</strong>。</p>\n<p><img src=\"/2021/10/19/zhi-neng-jia-ju/home-assistant-ke-hu-duan-pei-zhi/20211020_024210000_iOS.png\"></p>\n<p>如果手机与HA网关在同一个局域网，就会自动检测到HA网关，如果没有检测到，就选择<strong>手动输入地址</strong>。</p>\n<p><img src=\"/2021/10/19/zhi-neng-jia-ju/home-assistant-ke-hu-duan-pei-zhi/20211020_024219000_iOS.png\"></p>\n<p>输入HA网关的地址，例如: <a href=\"https://ha.example.com:8123，然后点击**连接**。\">https://ha.example.com:8123，然后点击**连接**。</a></p>\n<p><img src=\"/2021/10/19/zhi-neng-jia-ju/home-assistant-ke-hu-duan-pei-zhi/20211020_024258000_iOS.png\"></p>\n<p>输入用户名和密码，如果启用了双因子认证，还需要输入Google Authenticator生成的6位随机码。（一般建议可以启用双因子认证，以确保账号的安全性。）</p>\n<p><img src=\"/2021/10/19/zhi-neng-jia-ju/home-assistant-ke-hu-duan-pei-zhi/20211020_024338000_iOS.png\"></p>\n<p>根据自己的需要，可以有选择地将位置、通知、活动数据、专注模式等权限授予客户端，然后点击<strong>继续</strong>。</p>\n<p><img src=\"/2021/10/19/zhi-neng-jia-ju/home-assistant-ke-hu-duan-pei-zhi/20211020_024501000_iOS.png\"></p>\n<p>连接成功后，就可以看到监控的主界面了。如果账号有管理员权限，可以在手机上完成所有的管理员操作。</p>\n<p><img src=\"/2021/10/19/zhi-neng-jia-ju/home-assistant-ke-hu-duan-pei-zhi/20211020_023853000_iOS.png\"></p>"},{"title":"Home Assistant安装","date":"2021-10-17T07:02:00.000Z","_content":"\n## 安装Docker\n\n1 更新树莓派的系统。\n\n```bash\nsudo apt-get update\nsudo apt-get upgrade\n```\n\n2 下载脚本，然后安装Docker。\n\n```bash\ncurl -fsSL https://get.docker.com -o get-docker.sh\nsudo sh get-docker.sh --mirror Aliyun\n```\n\n**需要注意的是，--mirror Aliyun可以指定通过阿里云镜像安装Docker，提高安装速度。如果用默认的安装源，很慢，甚至无法安装成功。**\n\n3 默认情况下，只有拥有管理员权限账号才可以运行Docker，如果登录的账号是普通用户，可以通过sudo来运行docker。或者，也可以将普通用户账号添加到Docker用户组，这样也可以允许该用户运行docker的命令。\n\n以下命令可以将Pi用户添加到Docker用户组中。\n\n```bash\nsudo usermod -aG docker Pi\n```\n\n4 查看Docker的版本信息和运行信息。\n\n```bash\ndocker version\ndocker info\n```\n\n<!-- more -->\n\n## 安装Home Assistant\n\n### Raspberry pi 3\n\n```bash\ndocker run -d \\\n  --name homeassistant \\\n  --privileged \\\n  --restart=unless-stopped \\\n  -e TZ=MY_TIME_ZONE \\\n  -v /PATH_TO_YOUR_CONFIG:/config \\\n  --network=host \\\n  ghcr.io/home-assistant/raspberrypi3-homeassistant:stable\n```\n\n### Raspberry pi 4\n\n```bash\ndocker run -d \\\n  --name homeassistant \\\n  --privileged \\\n  --restart=unless-stopped \\\n  -e TZ=MY_TIME_ZONE \\\n  -v /PATH_TO_YOUR_CONFIG:/config \\\n  --network=host \\\n  ghcr.io/home-assistant/raspberrypi4-homeassistant:stable\n```\n\n以上安装命令中，一定要将`/PATH_TO_YOUR_CONFIG`修改成指定的安装路径，例如`/home/pi/homeassistant`，如果忘记修改，配置文件就会保存到`/PATH_TO_YOUR_CONFIG`目录。\n\n安装成功后，打开浏览器访问`http://<host>:8123`，就可以登录Home Assistant的Web界面。\n\n","source":"_posts/智能家居/Home_Assistant安装.md","raw":"---\ntitle: Home Assistant安装\ndate: 2021-10-17 15:02:00\ntags: \n - home_assistant\ncategories: \n - 智能家居\n---\n\n## 安装Docker\n\n1 更新树莓派的系统。\n\n```bash\nsudo apt-get update\nsudo apt-get upgrade\n```\n\n2 下载脚本，然后安装Docker。\n\n```bash\ncurl -fsSL https://get.docker.com -o get-docker.sh\nsudo sh get-docker.sh --mirror Aliyun\n```\n\n**需要注意的是，--mirror Aliyun可以指定通过阿里云镜像安装Docker，提高安装速度。如果用默认的安装源，很慢，甚至无法安装成功。**\n\n3 默认情况下，只有拥有管理员权限账号才可以运行Docker，如果登录的账号是普通用户，可以通过sudo来运行docker。或者，也可以将普通用户账号添加到Docker用户组，这样也可以允许该用户运行docker的命令。\n\n以下命令可以将Pi用户添加到Docker用户组中。\n\n```bash\nsudo usermod -aG docker Pi\n```\n\n4 查看Docker的版本信息和运行信息。\n\n```bash\ndocker version\ndocker info\n```\n\n<!-- more -->\n\n## 安装Home Assistant\n\n### Raspberry pi 3\n\n```bash\ndocker run -d \\\n  --name homeassistant \\\n  --privileged \\\n  --restart=unless-stopped \\\n  -e TZ=MY_TIME_ZONE \\\n  -v /PATH_TO_YOUR_CONFIG:/config \\\n  --network=host \\\n  ghcr.io/home-assistant/raspberrypi3-homeassistant:stable\n```\n\n### Raspberry pi 4\n\n```bash\ndocker run -d \\\n  --name homeassistant \\\n  --privileged \\\n  --restart=unless-stopped \\\n  -e TZ=MY_TIME_ZONE \\\n  -v /PATH_TO_YOUR_CONFIG:/config \\\n  --network=host \\\n  ghcr.io/home-assistant/raspberrypi4-homeassistant:stable\n```\n\n以上安装命令中，一定要将`/PATH_TO_YOUR_CONFIG`修改成指定的安装路径，例如`/home/pi/homeassistant`，如果忘记修改，配置文件就会保存到`/PATH_TO_YOUR_CONFIG`目录。\n\n安装成功后，打开浏览器访问`http://<host>:8123`，就可以登录Home Assistant的Web界面。\n\n","slug":"智能家居/Home_Assistant安装","published":1,"updated":"2023-03-06T08:59:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clexvkk7m001j5i733nx7fsgs","content":"<h2 id=\"安装Docker\"><a href=\"#安装Docker\" class=\"headerlink\" title=\"安装Docker\"></a>安装Docker</h2><p>1 更新树莓派的系统。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> update\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> upgrade<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>2 下载脚本，然后安装Docker。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -fsSL https://get.docker.com -o get-docker.sh\n<span class=\"token function\">sudo</span> <span class=\"token function\">sh</span> get-docker.sh --mirror Aliyun<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>需要注意的是，–mirror Aliyun可以指定通过阿里云镜像安装Docker，提高安装速度。如果用默认的安装源，很慢，甚至无法安装成功。</strong></p>\n<p>3 默认情况下，只有拥有管理员权限账号才可以运行Docker，如果登录的账号是普通用户，可以通过sudo来运行docker。或者，也可以将普通用户账号添加到Docker用户组，这样也可以允许该用户运行docker的命令。</p>\n<p>以下命令可以将Pi用户添加到Docker用户组中。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">usermod</span> -aG <span class=\"token function\">docker</span> Pi<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>4 查看Docker的版本信息和运行信息。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> version\n<span class=\"token function\">docker</span> info<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<span id=\"more\"></span>\n\n<h2 id=\"安装Home-Assistant\"><a href=\"#安装Home-Assistant\" class=\"headerlink\" title=\"安装Home Assistant\"></a>安装Home Assistant</h2><h3 id=\"Raspberry-pi-3\"><a href=\"#Raspberry-pi-3\" class=\"headerlink\" title=\"Raspberry pi 3\"></a>Raspberry pi 3</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run -d <span class=\"token punctuation\">\\</span>\n  --name homeassistant <span class=\"token punctuation\">\\</span>\n  --privileged <span class=\"token punctuation\">\\</span>\n  --restart<span class=\"token operator\">=</span>unless-stopped <span class=\"token punctuation\">\\</span>\n  -e <span class=\"token assign-left variable\">TZ</span><span class=\"token operator\">=</span>MY_TIME_ZONE <span class=\"token punctuation\">\\</span>\n  -v /PATH_TO_YOUR_CONFIG:/config <span class=\"token punctuation\">\\</span>\n  --network<span class=\"token operator\">=</span>host <span class=\"token punctuation\">\\</span>\n  ghcr.io/home-assistant/raspberrypi3-homeassistant:stable<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Raspberry-pi-4\"><a href=\"#Raspberry-pi-4\" class=\"headerlink\" title=\"Raspberry pi 4\"></a>Raspberry pi 4</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run -d <span class=\"token punctuation\">\\</span>\n  --name homeassistant <span class=\"token punctuation\">\\</span>\n  --privileged <span class=\"token punctuation\">\\</span>\n  --restart<span class=\"token operator\">=</span>unless-stopped <span class=\"token punctuation\">\\</span>\n  -e <span class=\"token assign-left variable\">TZ</span><span class=\"token operator\">=</span>MY_TIME_ZONE <span class=\"token punctuation\">\\</span>\n  -v /PATH_TO_YOUR_CONFIG:/config <span class=\"token punctuation\">\\</span>\n  --network<span class=\"token operator\">=</span>host <span class=\"token punctuation\">\\</span>\n  ghcr.io/home-assistant/raspberrypi4-homeassistant:stable<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>以上安装命令中，一定要将<code>/PATH_TO_YOUR_CONFIG</code>修改成指定的安装路径，例如<code>/home/pi/homeassistant</code>，如果忘记修改，配置文件就会保存到<code>/PATH_TO_YOUR_CONFIG</code>目录。</p>\n<p>安装成功后，打开浏览器访问<code>http://&lt;host&gt;:8123</code>，就可以登录Home Assistant的Web界面。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"安装Docker\"><a href=\"#安装Docker\" class=\"headerlink\" title=\"安装Docker\"></a>安装Docker</h2><p>1 更新树莓派的系统。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> update\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> upgrade<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>2 下载脚本，然后安装Docker。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -fsSL https://get.docker.com -o get-docker.sh\n<span class=\"token function\">sudo</span> <span class=\"token function\">sh</span> get-docker.sh --mirror Aliyun<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>需要注意的是，–mirror Aliyun可以指定通过阿里云镜像安装Docker，提高安装速度。如果用默认的安装源，很慢，甚至无法安装成功。</strong></p>\n<p>3 默认情况下，只有拥有管理员权限账号才可以运行Docker，如果登录的账号是普通用户，可以通过sudo来运行docker。或者，也可以将普通用户账号添加到Docker用户组，这样也可以允许该用户运行docker的命令。</p>\n<p>以下命令可以将Pi用户添加到Docker用户组中。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">usermod</span> -aG <span class=\"token function\">docker</span> Pi<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>4 查看Docker的版本信息和运行信息。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> version\n<span class=\"token function\">docker</span> info<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>","more":"<h2 id=\"安装Home-Assistant\"><a href=\"#安装Home-Assistant\" class=\"headerlink\" title=\"安装Home Assistant\"></a>安装Home Assistant</h2><h3 id=\"Raspberry-pi-3\"><a href=\"#Raspberry-pi-3\" class=\"headerlink\" title=\"Raspberry pi 3\"></a>Raspberry pi 3</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run -d <span class=\"token punctuation\">\\</span>\n  --name homeassistant <span class=\"token punctuation\">\\</span>\n  --privileged <span class=\"token punctuation\">\\</span>\n  --restart<span class=\"token operator\">=</span>unless-stopped <span class=\"token punctuation\">\\</span>\n  -e <span class=\"token assign-left variable\">TZ</span><span class=\"token operator\">=</span>MY_TIME_ZONE <span class=\"token punctuation\">\\</span>\n  -v /PATH_TO_YOUR_CONFIG:/config <span class=\"token punctuation\">\\</span>\n  --network<span class=\"token operator\">=</span>host <span class=\"token punctuation\">\\</span>\n  ghcr.io/home-assistant/raspberrypi3-homeassistant:stable<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Raspberry-pi-4\"><a href=\"#Raspberry-pi-4\" class=\"headerlink\" title=\"Raspberry pi 4\"></a>Raspberry pi 4</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run -d <span class=\"token punctuation\">\\</span>\n  --name homeassistant <span class=\"token punctuation\">\\</span>\n  --privileged <span class=\"token punctuation\">\\</span>\n  --restart<span class=\"token operator\">=</span>unless-stopped <span class=\"token punctuation\">\\</span>\n  -e <span class=\"token assign-left variable\">TZ</span><span class=\"token operator\">=</span>MY_TIME_ZONE <span class=\"token punctuation\">\\</span>\n  -v /PATH_TO_YOUR_CONFIG:/config <span class=\"token punctuation\">\\</span>\n  --network<span class=\"token operator\">=</span>host <span class=\"token punctuation\">\\</span>\n  ghcr.io/home-assistant/raspberrypi4-homeassistant:stable<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>以上安装命令中，一定要将<code>/PATH_TO_YOUR_CONFIG</code>修改成指定的安装路径，例如<code>/home/pi/homeassistant</code>，如果忘记修改，配置文件就会保存到<code>/PATH_TO_YOUR_CONFIG</code>目录。</p>\n<p>安装成功后，打开浏览器访问<code>http://&lt;host&gt;:8123</code>，就可以登录Home Assistant的Web界面。</p>"},{"title":"Home_Assistant的定位功能","date":"2021-10-25T06:42:00.000Z","_content":"\n众所周知，苹果手机的**查找**功能，可以让我们方便的查找家人以及朋友的位置信息，但前提是大家使用的都是iPhone。如果使用Android手机，是否可以实现相同的功能呢？并且，如果家人既有iPhone，又有Android，如何实现在同一个界面中查找位置呢？其实，通过Home Assistant就可以实现这些功能。\n\n> 关于如何安装Home Assistant的介绍，请参考文章：Home Assistant: 安装篇\n\n以下图片中展示的是通过Home Assistant实现的效果，既可以在地图上**查找家人的位置**，也可以根据状态显示家人是**在家**还是**离开**。\n\n![](20211023_234305000_iOS.png)\n\n下面，介绍一下如何在Home Assistant中实现位置的定位和追踪。\n\n<!-- more -->\n\n## iOS\n\n对于iOS手机，只需要安装Home Assistant客户端软件，并且Home Assistant的定位服务权限设置为始终允许。iPhone手机就会自动上报位置给HA网关。\n\n![](20211025_071159000_iOS.png)\n\niPhone手机注册到HA网关后，就会出现实体ID: device_tracker.iPhone，可以通过该实体ID来配置位置信息。\n\n![](2021-10-25154947.png)\n\n## Android\n\n对于Android手机，**由于Home Assistant客户端的定位服务依赖于Google Play Service，因此，在国内无法使用Home Assistant的定位功能**。但是，我们可以使用另外一个开源软件**OwnTracks**，该软件可以与Home Assistant集成。\n\n首先，OwnTracks for Android有两个版本：**gms**和**oss**，gms依赖于Google Play Service，并且使用的是谷歌地图，而oss不需要依赖于Google Play Service，并且使用的地图是 OpenStreetMap。所以，**我们应该下载并安装oss版本的OwnTracks**。\n\n![](2021-10-25151814.png)\n\n安装成功后，需要将连接模式更改为HTTP。\n\n![](20211025173103.jpg)\n\nHost设置为HA网关的Web API地址，具体内容请参考以下**HA网关配置**章节的**配置OwnTracks集成**。\n\n![](20211025173127.jpg)\n\n另外，建议可以将上传数据的间隔设置为300s，默认为900s。\n\n![](20211025173136.jpg)\n\n> 提示：OwnTracks分为几种运行模式：\n>\n> Move mode: 只能当OwnTracks在前台运行的时候，才能启用Move模式。这种模式下，当设备出现位置变化，就会发布位置消息。好处是数据比较精确，但是比较耗电。\n>\n> Significant location change mode: 该模式可以在后台运行，并且只有当距离变化大于500米时(iOS，Android略微不同)，才会按照一定的时间间隔，例如5分钟，发布位置消息。这种模式比较省电。\n>\n> 对于Android，建议将locatorDisplacement设置为200，该参数的作用是当距离大于200米，OwnTracks才会发布位置消息。\n>\n> Manual mode: 在OwnTracks应用中手动发布位置消息。\n>\n> Quiet mode: 与Manual mode相同，但是不发布区域事件。\n>\n> 一般建议使用Significant location change mode。\n\n## HA网关配置\n\n### 配置OwnTracks集成\n\n首先，在HA网关中，需要先配置与OwnTracks的集成，这样Android手机才会自动将位置信息上传到HA网关。\n\n在**配置 - 集成 - 添加集成**中，查找并添加OwnTracks。添加成功后，会出现提示框，显示HA网关的Web API地址，该地址必须记录下来，配置OwnTracks客户端时，需要使用。\n\nWeb API地址的格式如下：\n\n```\nhttps://ha.example.com:8123/api/webhook/1323dcce3365adfaf3dafsaf511afdaf8e3259dfafafafasf121324454\n```\n\n如果忘了记录地址，可以到Home Assistant的配置文件所在目录下，打开文件.storage/core.config_entries，查找关键字OwnTracks，找到webhook_id对应的值，然后替换URL中webhook/后面的id就可以了。\n\n![](2021-10-25154637.png)\n\n\n\n### 创建用户\n\n通过创建用户，可以将人和设备关联起来，这样就可以定位人员的位置了。对于同一个用户，可以定义多个追踪设备，除了GPS以外，还可以定义蓝牙，Wi-Fi等。\n\n![](2021-10-25155436.png)\n\n\n\n### 创建视图\n\n我们可以创建两种视图，一种是地图卡片，会将人员显示在地图上。配置卡片时，需要将实体设置为需要追踪的人员。\n\n![](2021-10-25160029.png)\n\n另外一种视图是概览视图，可以显示人员的位置状态，例如在家，离开。配置卡片时，需要将实体设置为需要追踪的人员。\n\n![](2021-10-25160611.png)\n\n","source":"_posts/智能家居/Home_Assistant的定位功能.md","raw":"---\ntitle: Home_Assistant的定位功能\ndate: 2021-10-25 14:42:00\ntags: \n - home_assistant\ncategories: \n - 智能家居\n---\n\n众所周知，苹果手机的**查找**功能，可以让我们方便的查找家人以及朋友的位置信息，但前提是大家使用的都是iPhone。如果使用Android手机，是否可以实现相同的功能呢？并且，如果家人既有iPhone，又有Android，如何实现在同一个界面中查找位置呢？其实，通过Home Assistant就可以实现这些功能。\n\n> 关于如何安装Home Assistant的介绍，请参考文章：Home Assistant: 安装篇\n\n以下图片中展示的是通过Home Assistant实现的效果，既可以在地图上**查找家人的位置**，也可以根据状态显示家人是**在家**还是**离开**。\n\n![](20211023_234305000_iOS.png)\n\n下面，介绍一下如何在Home Assistant中实现位置的定位和追踪。\n\n<!-- more -->\n\n## iOS\n\n对于iOS手机，只需要安装Home Assistant客户端软件，并且Home Assistant的定位服务权限设置为始终允许。iPhone手机就会自动上报位置给HA网关。\n\n![](20211025_071159000_iOS.png)\n\niPhone手机注册到HA网关后，就会出现实体ID: device_tracker.iPhone，可以通过该实体ID来配置位置信息。\n\n![](2021-10-25154947.png)\n\n## Android\n\n对于Android手机，**由于Home Assistant客户端的定位服务依赖于Google Play Service，因此，在国内无法使用Home Assistant的定位功能**。但是，我们可以使用另外一个开源软件**OwnTracks**，该软件可以与Home Assistant集成。\n\n首先，OwnTracks for Android有两个版本：**gms**和**oss**，gms依赖于Google Play Service，并且使用的是谷歌地图，而oss不需要依赖于Google Play Service，并且使用的地图是 OpenStreetMap。所以，**我们应该下载并安装oss版本的OwnTracks**。\n\n![](2021-10-25151814.png)\n\n安装成功后，需要将连接模式更改为HTTP。\n\n![](20211025173103.jpg)\n\nHost设置为HA网关的Web API地址，具体内容请参考以下**HA网关配置**章节的**配置OwnTracks集成**。\n\n![](20211025173127.jpg)\n\n另外，建议可以将上传数据的间隔设置为300s，默认为900s。\n\n![](20211025173136.jpg)\n\n> 提示：OwnTracks分为几种运行模式：\n>\n> Move mode: 只能当OwnTracks在前台运行的时候，才能启用Move模式。这种模式下，当设备出现位置变化，就会发布位置消息。好处是数据比较精确，但是比较耗电。\n>\n> Significant location change mode: 该模式可以在后台运行，并且只有当距离变化大于500米时(iOS，Android略微不同)，才会按照一定的时间间隔，例如5分钟，发布位置消息。这种模式比较省电。\n>\n> 对于Android，建议将locatorDisplacement设置为200，该参数的作用是当距离大于200米，OwnTracks才会发布位置消息。\n>\n> Manual mode: 在OwnTracks应用中手动发布位置消息。\n>\n> Quiet mode: 与Manual mode相同，但是不发布区域事件。\n>\n> 一般建议使用Significant location change mode。\n\n## HA网关配置\n\n### 配置OwnTracks集成\n\n首先，在HA网关中，需要先配置与OwnTracks的集成，这样Android手机才会自动将位置信息上传到HA网关。\n\n在**配置 - 集成 - 添加集成**中，查找并添加OwnTracks。添加成功后，会出现提示框，显示HA网关的Web API地址，该地址必须记录下来，配置OwnTracks客户端时，需要使用。\n\nWeb API地址的格式如下：\n\n```\nhttps://ha.example.com:8123/api/webhook/1323dcce3365adfaf3dafsaf511afdaf8e3259dfafafafasf121324454\n```\n\n如果忘了记录地址，可以到Home Assistant的配置文件所在目录下，打开文件.storage/core.config_entries，查找关键字OwnTracks，找到webhook_id对应的值，然后替换URL中webhook/后面的id就可以了。\n\n![](2021-10-25154637.png)\n\n\n\n### 创建用户\n\n通过创建用户，可以将人和设备关联起来，这样就可以定位人员的位置了。对于同一个用户，可以定义多个追踪设备，除了GPS以外，还可以定义蓝牙，Wi-Fi等。\n\n![](2021-10-25155436.png)\n\n\n\n### 创建视图\n\n我们可以创建两种视图，一种是地图卡片，会将人员显示在地图上。配置卡片时，需要将实体设置为需要追踪的人员。\n\n![](2021-10-25160029.png)\n\n另外一种视图是概览视图，可以显示人员的位置状态，例如在家，离开。配置卡片时，需要将实体设置为需要追踪的人员。\n\n![](2021-10-25160611.png)\n\n","slug":"智能家居/Home_Assistant的定位功能","published":1,"updated":"2023-03-06T10:28:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clexvkk7q001l5i733gct843g","content":"<p>众所周知，苹果手机的<strong>查找</strong>功能，可以让我们方便的查找家人以及朋友的位置信息，但前提是大家使用的都是iPhone。如果使用Android手机，是否可以实现相同的功能呢？并且，如果家人既有iPhone，又有Android，如何实现在同一个界面中查找位置呢？其实，通过Home Assistant就可以实现这些功能。</p>\n<blockquote>\n<p>关于如何安装Home Assistant的介绍，请参考文章：Home Assistant: 安装篇</p>\n</blockquote>\n<p>以下图片中展示的是通过Home Assistant实现的效果，既可以在地图上<strong>查找家人的位置</strong>，也可以根据状态显示家人是<strong>在家</strong>还是<strong>离开</strong>。</p>\n<p><img src=\"/2021/10/25/zhi-neng-jia-ju/home-assistant-de-ding-wei-gong-neng/20211023_234305000_iOS.png\"></p>\n<p>下面，介绍一下如何在Home Assistant中实现位置的定位和追踪。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"iOS\"><a href=\"#iOS\" class=\"headerlink\" title=\"iOS\"></a>iOS</h2><p>对于iOS手机，只需要安装Home Assistant客户端软件，并且Home Assistant的定位服务权限设置为始终允许。iPhone手机就会自动上报位置给HA网关。</p>\n<p><img src=\"/2021/10/25/zhi-neng-jia-ju/home-assistant-de-ding-wei-gong-neng/20211025_071159000_iOS.png\"></p>\n<p>iPhone手机注册到HA网关后，就会出现实体ID: device_tracker.iPhone，可以通过该实体ID来配置位置信息。</p>\n<p><img src=\"/2021/10/25/zhi-neng-jia-ju/home-assistant-de-ding-wei-gong-neng/2021-10-25154947.png\"></p>\n<h2 id=\"Android\"><a href=\"#Android\" class=\"headerlink\" title=\"Android\"></a>Android</h2><p>对于Android手机，<strong>由于Home Assistant客户端的定位服务依赖于Google Play Service，因此，在国内无法使用Home Assistant的定位功能</strong>。但是，我们可以使用另外一个开源软件<strong>OwnTracks</strong>，该软件可以与Home Assistant集成。</p>\n<p>首先，OwnTracks for Android有两个版本：<strong>gms</strong>和<strong>oss</strong>，gms依赖于Google Play Service，并且使用的是谷歌地图，而oss不需要依赖于Google Play Service，并且使用的地图是 OpenStreetMap。所以，<strong>我们应该下载并安装oss版本的OwnTracks</strong>。</p>\n<p><img src=\"/2021/10/25/zhi-neng-jia-ju/home-assistant-de-ding-wei-gong-neng/2021-10-25151814.png\"></p>\n<p>安装成功后，需要将连接模式更改为HTTP。</p>\n<p><img src=\"/2021/10/25/zhi-neng-jia-ju/home-assistant-de-ding-wei-gong-neng/20211025173103.jpg\"></p>\n<p>Host设置为HA网关的Web API地址，具体内容请参考以下<strong>HA网关配置</strong>章节的<strong>配置OwnTracks集成</strong>。</p>\n<p><img src=\"/2021/10/25/zhi-neng-jia-ju/home-assistant-de-ding-wei-gong-neng/20211025173127.jpg\"></p>\n<p>另外，建议可以将上传数据的间隔设置为300s，默认为900s。</p>\n<p><img src=\"/2021/10/25/zhi-neng-jia-ju/home-assistant-de-ding-wei-gong-neng/20211025173136.jpg\"></p>\n<blockquote>\n<p>提示：OwnTracks分为几种运行模式：</p>\n<p>Move mode: 只能当OwnTracks在前台运行的时候，才能启用Move模式。这种模式下，当设备出现位置变化，就会发布位置消息。好处是数据比较精确，但是比较耗电。</p>\n<p>Significant location change mode: 该模式可以在后台运行，并且只有当距离变化大于500米时(iOS，Android略微不同)，才会按照一定的时间间隔，例如5分钟，发布位置消息。这种模式比较省电。</p>\n<p>对于Android，建议将locatorDisplacement设置为200，该参数的作用是当距离大于200米，OwnTracks才会发布位置消息。</p>\n<p>Manual mode: 在OwnTracks应用中手动发布位置消息。</p>\n<p>Quiet mode: 与Manual mode相同，但是不发布区域事件。</p>\n<p>一般建议使用Significant location change mode。</p>\n</blockquote>\n<h2 id=\"HA网关配置\"><a href=\"#HA网关配置\" class=\"headerlink\" title=\"HA网关配置\"></a>HA网关配置</h2><h3 id=\"配置OwnTracks集成\"><a href=\"#配置OwnTracks集成\" class=\"headerlink\" title=\"配置OwnTracks集成\"></a>配置OwnTracks集成</h3><p>首先，在HA网关中，需要先配置与OwnTracks的集成，这样Android手机才会自动将位置信息上传到HA网关。</p>\n<p>在<strong>配置 - 集成 - 添加集成</strong>中，查找并添加OwnTracks。添加成功后，会出现提示框，显示HA网关的Web API地址，该地址必须记录下来，配置OwnTracks客户端时，需要使用。</p>\n<p>Web API地址的格式如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">https:&#x2F;&#x2F;ha.example.com:8123&#x2F;api&#x2F;webhook&#x2F;1323dcce3365adfaf3dafsaf511afdaf8e3259dfafafafasf121324454<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果忘了记录地址，可以到Home Assistant的配置文件所在目录下，打开文件.storage&#x2F;core.config_entries，查找关键字OwnTracks，找到webhook_id对应的值，然后替换URL中webhook&#x2F;后面的id就可以了。</p>\n<p><img src=\"/2021/10/25/zhi-neng-jia-ju/home-assistant-de-ding-wei-gong-neng/2021-10-25154637.png\"></p>\n<h3 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h3><p>通过创建用户，可以将人和设备关联起来，这样就可以定位人员的位置了。对于同一个用户，可以定义多个追踪设备，除了GPS以外，还可以定义蓝牙，Wi-Fi等。</p>\n<p><img src=\"/2021/10/25/zhi-neng-jia-ju/home-assistant-de-ding-wei-gong-neng/2021-10-25155436.png\"></p>\n<h3 id=\"创建视图\"><a href=\"#创建视图\" class=\"headerlink\" title=\"创建视图\"></a>创建视图</h3><p>我们可以创建两种视图，一种是地图卡片，会将人员显示在地图上。配置卡片时，需要将实体设置为需要追踪的人员。</p>\n<p><img src=\"/2021/10/25/zhi-neng-jia-ju/home-assistant-de-ding-wei-gong-neng/2021-10-25160029.png\"></p>\n<p>另外一种视图是概览视图，可以显示人员的位置状态，例如在家，离开。配置卡片时，需要将实体设置为需要追踪的人员。</p>\n<p><img src=\"/2021/10/25/zhi-neng-jia-ju/home-assistant-de-ding-wei-gong-neng/2021-10-25160611.png\"></p>\n","site":{"data":{}},"excerpt":"<p>众所周知，苹果手机的<strong>查找</strong>功能，可以让我们方便的查找家人以及朋友的位置信息，但前提是大家使用的都是iPhone。如果使用Android手机，是否可以实现相同的功能呢？并且，如果家人既有iPhone，又有Android，如何实现在同一个界面中查找位置呢？其实，通过Home Assistant就可以实现这些功能。</p>\n<blockquote>\n<p>关于如何安装Home Assistant的介绍，请参考文章：Home Assistant: 安装篇</p>\n</blockquote>\n<p>以下图片中展示的是通过Home Assistant实现的效果，既可以在地图上<strong>查找家人的位置</strong>，也可以根据状态显示家人是<strong>在家</strong>还是<strong>离开</strong>。</p>\n<p><img src=\"/2021/10/25/zhi-neng-jia-ju/home-assistant-de-ding-wei-gong-neng/20211023_234305000_iOS.png\"></p>\n<p>下面，介绍一下如何在Home Assistant中实现位置的定位和追踪。</p>","more":"<h2 id=\"iOS\"><a href=\"#iOS\" class=\"headerlink\" title=\"iOS\"></a>iOS</h2><p>对于iOS手机，只需要安装Home Assistant客户端软件，并且Home Assistant的定位服务权限设置为始终允许。iPhone手机就会自动上报位置给HA网关。</p>\n<p><img src=\"/2021/10/25/zhi-neng-jia-ju/home-assistant-de-ding-wei-gong-neng/20211025_071159000_iOS.png\"></p>\n<p>iPhone手机注册到HA网关后，就会出现实体ID: device_tracker.iPhone，可以通过该实体ID来配置位置信息。</p>\n<p><img src=\"/2021/10/25/zhi-neng-jia-ju/home-assistant-de-ding-wei-gong-neng/2021-10-25154947.png\"></p>\n<h2 id=\"Android\"><a href=\"#Android\" class=\"headerlink\" title=\"Android\"></a>Android</h2><p>对于Android手机，<strong>由于Home Assistant客户端的定位服务依赖于Google Play Service，因此，在国内无法使用Home Assistant的定位功能</strong>。但是，我们可以使用另外一个开源软件<strong>OwnTracks</strong>，该软件可以与Home Assistant集成。</p>\n<p>首先，OwnTracks for Android有两个版本：<strong>gms</strong>和<strong>oss</strong>，gms依赖于Google Play Service，并且使用的是谷歌地图，而oss不需要依赖于Google Play Service，并且使用的地图是 OpenStreetMap。所以，<strong>我们应该下载并安装oss版本的OwnTracks</strong>。</p>\n<p><img src=\"/2021/10/25/zhi-neng-jia-ju/home-assistant-de-ding-wei-gong-neng/2021-10-25151814.png\"></p>\n<p>安装成功后，需要将连接模式更改为HTTP。</p>\n<p><img src=\"/2021/10/25/zhi-neng-jia-ju/home-assistant-de-ding-wei-gong-neng/20211025173103.jpg\"></p>\n<p>Host设置为HA网关的Web API地址，具体内容请参考以下<strong>HA网关配置</strong>章节的<strong>配置OwnTracks集成</strong>。</p>\n<p><img src=\"/2021/10/25/zhi-neng-jia-ju/home-assistant-de-ding-wei-gong-neng/20211025173127.jpg\"></p>\n<p>另外，建议可以将上传数据的间隔设置为300s，默认为900s。</p>\n<p><img src=\"/2021/10/25/zhi-neng-jia-ju/home-assistant-de-ding-wei-gong-neng/20211025173136.jpg\"></p>\n<blockquote>\n<p>提示：OwnTracks分为几种运行模式：</p>\n<p>Move mode: 只能当OwnTracks在前台运行的时候，才能启用Move模式。这种模式下，当设备出现位置变化，就会发布位置消息。好处是数据比较精确，但是比较耗电。</p>\n<p>Significant location change mode: 该模式可以在后台运行，并且只有当距离变化大于500米时(iOS，Android略微不同)，才会按照一定的时间间隔，例如5分钟，发布位置消息。这种模式比较省电。</p>\n<p>对于Android，建议将locatorDisplacement设置为200，该参数的作用是当距离大于200米，OwnTracks才会发布位置消息。</p>\n<p>Manual mode: 在OwnTracks应用中手动发布位置消息。</p>\n<p>Quiet mode: 与Manual mode相同，但是不发布区域事件。</p>\n<p>一般建议使用Significant location change mode。</p>\n</blockquote>\n<h2 id=\"HA网关配置\"><a href=\"#HA网关配置\" class=\"headerlink\" title=\"HA网关配置\"></a>HA网关配置</h2><h3 id=\"配置OwnTracks集成\"><a href=\"#配置OwnTracks集成\" class=\"headerlink\" title=\"配置OwnTracks集成\"></a>配置OwnTracks集成</h3><p>首先，在HA网关中，需要先配置与OwnTracks的集成，这样Android手机才会自动将位置信息上传到HA网关。</p>\n<p>在<strong>配置 - 集成 - 添加集成</strong>中，查找并添加OwnTracks。添加成功后，会出现提示框，显示HA网关的Web API地址，该地址必须记录下来，配置OwnTracks客户端时，需要使用。</p>\n<p>Web API地址的格式如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">https:&#x2F;&#x2F;ha.example.com:8123&#x2F;api&#x2F;webhook&#x2F;1323dcce3365adfaf3dafsaf511afdaf8e3259dfafafafasf121324454<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果忘了记录地址，可以到Home Assistant的配置文件所在目录下，打开文件.storage&#x2F;core.config_entries，查找关键字OwnTracks，找到webhook_id对应的值，然后替换URL中webhook&#x2F;后面的id就可以了。</p>\n<p><img src=\"/2021/10/25/zhi-neng-jia-ju/home-assistant-de-ding-wei-gong-neng/2021-10-25154637.png\"></p>\n<h3 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h3><p>通过创建用户，可以将人和设备关联起来，这样就可以定位人员的位置了。对于同一个用户，可以定义多个追踪设备，除了GPS以外，还可以定义蓝牙，Wi-Fi等。</p>\n<p><img src=\"/2021/10/25/zhi-neng-jia-ju/home-assistant-de-ding-wei-gong-neng/2021-10-25155436.png\"></p>\n<h3 id=\"创建视图\"><a href=\"#创建视图\" class=\"headerlink\" title=\"创建视图\"></a>创建视图</h3><p>我们可以创建两种视图，一种是地图卡片，会将人员显示在地图上。配置卡片时，需要将实体设置为需要追踪的人员。</p>\n<p><img src=\"/2021/10/25/zhi-neng-jia-ju/home-assistant-de-ding-wei-gong-neng/2021-10-25160029.png\"></p>\n<p>另外一种视图是概览视图，可以显示人员的位置状态，例如在家，离开。配置卡片时，需要将实体设置为需要追踪的人员。</p>\n<p><img src=\"/2021/10/25/zhi-neng-jia-ju/home-assistant-de-ding-wei-gong-neng/2021-10-25160611.png\"></p>"},{"title":"Home Assistant监控Web服务器","date":"2021-10-23T09:15:00.000Z","_content":"\n一般在企业IT运维过程中，都需要对服务器，数据库和存储设备等进行监控，以便在第一时间发现故障，从而能够在最快的时间内作出响应。如果考虑成本，通常有一些开源免费的解决方案供选择，例如Zabbix, Nagios以及Cacti等。\n\n最近，我在折腾Home Assistant的时候，发现除了管理智能家居设备以外，也可以用来监控Web服务。话不多说，下面以监控公网上的Web服务为例，先简单介绍一下实现的原理，然后描述一下整个的配置过程。\n\n<!-- more -->\n\n## 准备工作\n\n- 一台Home Assistant网关\n- Web服务网址，例如：ha.example.com\n- Web服务端口，例如：8123\n\n## 实现方式\n\n首先，Home Assistant支持**Command Line**的集成，或者说模块，简单来说，Home Assistant可以调用我们定义的命令，然后根据命令执行的结果来判断服务的运行状况。由于需要监控的是Web服务，因此，就可以用curl命令来访问远端的Web服务，根据命令执行的结果，来判断Web服务是否在正常运行。如果返回的结果与预期不符合，就发送消息给管理员。管理员收到消息后，就可以作出响应。\n\n更进一步，如果Web服务的异常状况可以通过重启服务来解决，那么，我们甚至可以在Home Assistant上定义一个重启服务的Action（动作）。这样，Home Assistant就可以自动帮我们修复故障，实现了“自愈”功能。\n\n## 配置Command Line集成\n\n由于**Command Line**的功能不支持在Web界面中配置，因此，我们需要通过修改`configuration.yaml`配置文件，来完成配置。\n\n```yaml\nbinary_sensor: \n\t- platform: command_line                                                                                 \n  \t\tname: \"HA WAN\"                                                                                                           \n\t\tcommand: 'response=$(curl -s -L https://ha.example.com:8123 --connect-timeout 5 --cacert ./ssl/HARootCA.pem -o /dev/null -w \"%{http_code}\\n\");test $response -eq 200 && echo \"Running\" || echo \"Stopped\"'     \n\t\tpayload_on: \"Running\"\n\t\tpayload_off: \"Stopped\"                         \t\t \n\t\tscan_interval: 60       \n```\n\n**binary_sensor:** Home Assitant支持各种类型的集成，或者说模块，binary_sensor是其中的一种类型。\n\n**platform:** binary_sensor这种类型的集成中，command_line是其中的一种平台，其它还有小米，HomeKit，Nest等等。\n\n**name:** 定义名称\n\n**command:** 具体需要Home Assistant执行的命令\n\n**payload_on:** 如果返回结果为Running，Home Assistant则判断Web服务正在运行\n\n**payload_off:** 如果返回结果为Stopped，Home Assistant则判断Web服务停止运行\n\n**scan_interval:** 定义检测的时间区间，单位为秒。例如，每1分钟查询一次Web服务的运行状况\n\n下面，再简单介绍一下执行监测任务的命令：\n\n```\n'response=$(curl -s -L https://ha.example.com:8123 --connect-timeout 5 --cacert ./ssl/HARootCA.pem -o /dev/null -w \"%{http_code}\\n\");test $response -eq 200 && echo \"Running\" || echo \"Stopped\"' \n```\n\n其中，-L参数的作用是跟踪网址的重定向(redirection)，有些网站输入网址后，会重定向到另外一个网址，如果不设置-L参数，会导致返回以下的结果。\n\n```\nHTTP/1.1 405 Method Not Allowed\nContent-Type: text/plain; charset=utf-8\nAllow: GET\nContent-Length: 23\nDate: Mon, 18 Oct 2021 11:17:26 GMT\nServer: Python/3.9 aiohttp/3.7.4.post0\n```\n\n因为我是用Docker方式安装的Home Assistant，因此Docker容器中，无法访问/etc/ssl目录下证书，导致Https访问时，无法验证服务器发送的TLS/SSL证书。因此，解决方法就是将根证书HARootCA.pem保存到Home Assistant的配置目录/PATH_TO_YOUR_CONFIG/下。我将证书保存在了/PATH_TO_YOUR_CONFIG/ssl目录下，因此，--cacert参数设置的路径值是./ssl/HARootCA.pem。\n\n通过以下命令，可以判断curl返回的结果是否为200，如果是200，就返回Running，否则，返回Stopped。\n\n```\ntest $response -eq 200 && echo \"Running\" || echo \"Stopped\"\n```\n\n\n\n## 通知模块(IFTTT)\n\n由于我一直习惯于使用IFTTT作为消息通知App，并且Home Assistant支持IFTTT的集成，因此，决定采用IFTTT作为发送消息到手机端的方式。\n\n简单来说，消息的传递路径就是：Home Assistant网关 -> IFTTT云服务 -> IFTTT客户端。\n\n> 提示：IFTTT是另外一套独立的云端自动化服务，并不是Home Assistant的功能模块。IFTTT可以与Home Assistant集成使用。\n\n首先，需要需要修改`configuration.yaml`配置文件，配置IFTTT的集成。注意：Key需要到IFTTT的网址注册申请。\n\n```\nifttt:\n    key: 'adNdkL90kkdliekdif'\n```\n\n手机端需要到应用商店下载IFTTT的客户端。\n\n![](20211023_105828000_iOS.png)\n\nIFTTT服务端，需要配置一个Applet，该Applet的运行逻辑是，如果Home Assistant发送消息内容给IFTTT服务端，IFTTTF服务端就将消息内容推送到用户的手机端。\n\n![](20211023_105936000_iOS.png)\n\n![](20211023_110011000_iOS.png)\n\n根据IFTTT服务端的配置，Home Assistant需要在发送给IFTTT服务端的消息通知中，传递以下三个值给IFTTT服务端。\n\nValue: IFTTT服务端定义的Applet名称\n\nValue1: 消息的标题\n\nValue2: 消息的正文\n\n## 配置自动化\n\nHome Assistant的自动化模块，可以让我们根据定义的触发器，例如，Web服务从状态On变为Off，来触发Action，例如发送消息给管理员。\n\n我们可以通过Web界面来配置自动化，点击**配置** - 自动化 - **添加自动化**，配置**触发条件**和**动作**。\n\n**触发条件**\n\n- 触发条件类型：状态\n- 实体：binary_sensor.ha_wan，就是之前在配置文件中定义的实体\n- 从: on\n- 变为: off\n- 持续：3分钟\n\n![](2021-10-23191544.png)\n\n**动作**\n\n动作类型：调用服务\n\n服务：ifttt.trigger\n\nevent: general // IFTTT中定义的Applet名称\n\nvalue1: 消息的标题\n\nvalue2: 消息的正文\n\n![](2021-10-23191643.png)\n\n## 最终效果\n\n当Web服务异常或者恢复时，手机端就能接收到IFTTT发送的消息。\n\n![](20211023_092850000_iOS.png)\n","source":"_posts/智能家居/Home_Assistant监控Web服务器.md","raw":"---\ntitle: Home Assistant监控Web服务器\ndate: 2021-10-23 17:15:00\ntags: \n - home_assistant\ncategories: \n - 智能家居\n---\n\n一般在企业IT运维过程中，都需要对服务器，数据库和存储设备等进行监控，以便在第一时间发现故障，从而能够在最快的时间内作出响应。如果考虑成本，通常有一些开源免费的解决方案供选择，例如Zabbix, Nagios以及Cacti等。\n\n最近，我在折腾Home Assistant的时候，发现除了管理智能家居设备以外，也可以用来监控Web服务。话不多说，下面以监控公网上的Web服务为例，先简单介绍一下实现的原理，然后描述一下整个的配置过程。\n\n<!-- more -->\n\n## 准备工作\n\n- 一台Home Assistant网关\n- Web服务网址，例如：ha.example.com\n- Web服务端口，例如：8123\n\n## 实现方式\n\n首先，Home Assistant支持**Command Line**的集成，或者说模块，简单来说，Home Assistant可以调用我们定义的命令，然后根据命令执行的结果来判断服务的运行状况。由于需要监控的是Web服务，因此，就可以用curl命令来访问远端的Web服务，根据命令执行的结果，来判断Web服务是否在正常运行。如果返回的结果与预期不符合，就发送消息给管理员。管理员收到消息后，就可以作出响应。\n\n更进一步，如果Web服务的异常状况可以通过重启服务来解决，那么，我们甚至可以在Home Assistant上定义一个重启服务的Action（动作）。这样，Home Assistant就可以自动帮我们修复故障，实现了“自愈”功能。\n\n## 配置Command Line集成\n\n由于**Command Line**的功能不支持在Web界面中配置，因此，我们需要通过修改`configuration.yaml`配置文件，来完成配置。\n\n```yaml\nbinary_sensor: \n\t- platform: command_line                                                                                 \n  \t\tname: \"HA WAN\"                                                                                                           \n\t\tcommand: 'response=$(curl -s -L https://ha.example.com:8123 --connect-timeout 5 --cacert ./ssl/HARootCA.pem -o /dev/null -w \"%{http_code}\\n\");test $response -eq 200 && echo \"Running\" || echo \"Stopped\"'     \n\t\tpayload_on: \"Running\"\n\t\tpayload_off: \"Stopped\"                         \t\t \n\t\tscan_interval: 60       \n```\n\n**binary_sensor:** Home Assitant支持各种类型的集成，或者说模块，binary_sensor是其中的一种类型。\n\n**platform:** binary_sensor这种类型的集成中，command_line是其中的一种平台，其它还有小米，HomeKit，Nest等等。\n\n**name:** 定义名称\n\n**command:** 具体需要Home Assistant执行的命令\n\n**payload_on:** 如果返回结果为Running，Home Assistant则判断Web服务正在运行\n\n**payload_off:** 如果返回结果为Stopped，Home Assistant则判断Web服务停止运行\n\n**scan_interval:** 定义检测的时间区间，单位为秒。例如，每1分钟查询一次Web服务的运行状况\n\n下面，再简单介绍一下执行监测任务的命令：\n\n```\n'response=$(curl -s -L https://ha.example.com:8123 --connect-timeout 5 --cacert ./ssl/HARootCA.pem -o /dev/null -w \"%{http_code}\\n\");test $response -eq 200 && echo \"Running\" || echo \"Stopped\"' \n```\n\n其中，-L参数的作用是跟踪网址的重定向(redirection)，有些网站输入网址后，会重定向到另外一个网址，如果不设置-L参数，会导致返回以下的结果。\n\n```\nHTTP/1.1 405 Method Not Allowed\nContent-Type: text/plain; charset=utf-8\nAllow: GET\nContent-Length: 23\nDate: Mon, 18 Oct 2021 11:17:26 GMT\nServer: Python/3.9 aiohttp/3.7.4.post0\n```\n\n因为我是用Docker方式安装的Home Assistant，因此Docker容器中，无法访问/etc/ssl目录下证书，导致Https访问时，无法验证服务器发送的TLS/SSL证书。因此，解决方法就是将根证书HARootCA.pem保存到Home Assistant的配置目录/PATH_TO_YOUR_CONFIG/下。我将证书保存在了/PATH_TO_YOUR_CONFIG/ssl目录下，因此，--cacert参数设置的路径值是./ssl/HARootCA.pem。\n\n通过以下命令，可以判断curl返回的结果是否为200，如果是200，就返回Running，否则，返回Stopped。\n\n```\ntest $response -eq 200 && echo \"Running\" || echo \"Stopped\"\n```\n\n\n\n## 通知模块(IFTTT)\n\n由于我一直习惯于使用IFTTT作为消息通知App，并且Home Assistant支持IFTTT的集成，因此，决定采用IFTTT作为发送消息到手机端的方式。\n\n简单来说，消息的传递路径就是：Home Assistant网关 -> IFTTT云服务 -> IFTTT客户端。\n\n> 提示：IFTTT是另外一套独立的云端自动化服务，并不是Home Assistant的功能模块。IFTTT可以与Home Assistant集成使用。\n\n首先，需要需要修改`configuration.yaml`配置文件，配置IFTTT的集成。注意：Key需要到IFTTT的网址注册申请。\n\n```\nifttt:\n    key: 'adNdkL90kkdliekdif'\n```\n\n手机端需要到应用商店下载IFTTT的客户端。\n\n![](20211023_105828000_iOS.png)\n\nIFTTT服务端，需要配置一个Applet，该Applet的运行逻辑是，如果Home Assistant发送消息内容给IFTTT服务端，IFTTTF服务端就将消息内容推送到用户的手机端。\n\n![](20211023_105936000_iOS.png)\n\n![](20211023_110011000_iOS.png)\n\n根据IFTTT服务端的配置，Home Assistant需要在发送给IFTTT服务端的消息通知中，传递以下三个值给IFTTT服务端。\n\nValue: IFTTT服务端定义的Applet名称\n\nValue1: 消息的标题\n\nValue2: 消息的正文\n\n## 配置自动化\n\nHome Assistant的自动化模块，可以让我们根据定义的触发器，例如，Web服务从状态On变为Off，来触发Action，例如发送消息给管理员。\n\n我们可以通过Web界面来配置自动化，点击**配置** - 自动化 - **添加自动化**，配置**触发条件**和**动作**。\n\n**触发条件**\n\n- 触发条件类型：状态\n- 实体：binary_sensor.ha_wan，就是之前在配置文件中定义的实体\n- 从: on\n- 变为: off\n- 持续：3分钟\n\n![](2021-10-23191544.png)\n\n**动作**\n\n动作类型：调用服务\n\n服务：ifttt.trigger\n\nevent: general // IFTTT中定义的Applet名称\n\nvalue1: 消息的标题\n\nvalue2: 消息的正文\n\n![](2021-10-23191643.png)\n\n## 最终效果\n\n当Web服务异常或者恢复时，手机端就能接收到IFTTT发送的消息。\n\n![](20211023_092850000_iOS.png)\n","slug":"智能家居/Home_Assistant监控Web服务器","published":1,"updated":"2023-03-06T10:27:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clexvkk7w001p5i73641fgpup","content":"<p>一般在企业IT运维过程中，都需要对服务器，数据库和存储设备等进行监控，以便在第一时间发现故障，从而能够在最快的时间内作出响应。如果考虑成本，通常有一些开源免费的解决方案供选择，例如Zabbix, Nagios以及Cacti等。</p>\n<p>最近，我在折腾Home Assistant的时候，发现除了管理智能家居设备以外，也可以用来监控Web服务。话不多说，下面以监控公网上的Web服务为例，先简单介绍一下实现的原理，然后描述一下整个的配置过程。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><ul>\n<li>一台Home Assistant网关</li>\n<li>Web服务网址，例如：ha.example.com</li>\n<li>Web服务端口，例如：8123</li>\n</ul>\n<h2 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h2><p>首先，Home Assistant支持<strong>Command Line</strong>的集成，或者说模块，简单来说，Home Assistant可以调用我们定义的命令，然后根据命令执行的结果来判断服务的运行状况。由于需要监控的是Web服务，因此，就可以用curl命令来访问远端的Web服务，根据命令执行的结果，来判断Web服务是否在正常运行。如果返回的结果与预期不符合，就发送消息给管理员。管理员收到消息后，就可以作出响应。</p>\n<p>更进一步，如果Web服务的异常状况可以通过重启服务来解决，那么，我们甚至可以在Home Assistant上定义一个重启服务的Action（动作）。这样，Home Assistant就可以自动帮我们修复故障，实现了“自愈”功能。</p>\n<h2 id=\"配置Command-Line集成\"><a href=\"#配置Command-Line集成\" class=\"headerlink\" title=\"配置Command Line集成\"></a>配置Command Line集成</h2><p>由于<strong>Command Line</strong>的功能不支持在Web界面中配置，因此，我们需要通过修改<code>configuration.yaml</code>配置文件，来完成配置。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">binary_sensor</span><span class=\"token punctuation\">:</span> \n\t<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">platform</span><span class=\"token punctuation\">:</span> command_line                                                                                 \n  \t\t<span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"HA WAN\"</span>                                                                                                           \n\t\t<span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'response=$(curl -s -L https://ha.example.com:8123 --connect-timeout 5 --cacert ./ssl/HARootCA.pem -o /dev/null -w \"%&#123;http_code&#125;\\n\");test $response -eq 200 &amp;&amp; echo \"Running\" || echo \"Stopped\"'</span>     \n\t\t<span class=\"token key atrule\">payload_on</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Running\"</span>\n\t\t<span class=\"token key atrule\">payload_off</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Stopped\"</span>                         \t\t \n\t\t<span class=\"token key atrule\">scan_interval</span><span class=\"token punctuation\">:</span> <span class=\"token number\">60</span>       <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>binary_sensor:</strong> Home Assitant支持各种类型的集成，或者说模块，binary_sensor是其中的一种类型。</p>\n<p><strong>platform:</strong> binary_sensor这种类型的集成中，command_line是其中的一种平台，其它还有小米，HomeKit，Nest等等。</p>\n<p><strong>name:</strong> 定义名称</p>\n<p><strong>command:</strong> 具体需要Home Assistant执行的命令</p>\n<p><strong>payload_on:</strong> 如果返回结果为Running，Home Assistant则判断Web服务正在运行</p>\n<p><strong>payload_off:</strong> 如果返回结果为Stopped，Home Assistant则判断Web服务停止运行</p>\n<p><strong>scan_interval:</strong> 定义检测的时间区间，单位为秒。例如，每1分钟查询一次Web服务的运行状况</p>\n<p>下面，再简单介绍一下执行监测任务的命令：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#39;response&#x3D;$(curl -s -L https:&#x2F;&#x2F;ha.example.com:8123 --connect-timeout 5 --cacert .&#x2F;ssl&#x2F;HARootCA.pem -o &#x2F;dev&#x2F;null -w &quot;%&#123;http_code&#125;\\n&quot;);test $response -eq 200 &amp;&amp; echo &quot;Running&quot; || echo &quot;Stopped&quot;&#39; <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>其中，-L参数的作用是跟踪网址的重定向(redirection)，有些网站输入网址后，会重定向到另外一个网址，如果不设置-L参数，会导致返回以下的结果。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">HTTP&#x2F;1.1 405 Method Not Allowed\nContent-Type: text&#x2F;plain; charset&#x3D;utf-8\nAllow: GET\nContent-Length: 23\nDate: Mon, 18 Oct 2021 11:17:26 GMT\nServer: Python&#x2F;3.9 aiohttp&#x2F;3.7.4.post0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>因为我是用Docker方式安装的Home Assistant，因此Docker容器中，无法访问&#x2F;etc&#x2F;ssl目录下证书，导致Https访问时，无法验证服务器发送的TLS&#x2F;SSL证书。因此，解决方法就是将根证书HARootCA.pem保存到Home Assistant的配置目录&#x2F;PATH_TO_YOUR_CONFIG&#x2F;下。我将证书保存在了&#x2F;PATH_TO_YOUR_CONFIG&#x2F;ssl目录下，因此，–cacert参数设置的路径值是.&#x2F;ssl&#x2F;HARootCA.pem。</p>\n<p>通过以下命令，可以判断curl返回的结果是否为200，如果是200，就返回Running，否则，返回Stopped。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">test $response -eq 200 &amp;&amp; echo &quot;Running&quot; || echo &quot;Stopped&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h2 id=\"通知模块-IFTTT\"><a href=\"#通知模块-IFTTT\" class=\"headerlink\" title=\"通知模块(IFTTT)\"></a>通知模块(IFTTT)</h2><p>由于我一直习惯于使用IFTTT作为消息通知App，并且Home Assistant支持IFTTT的集成，因此，决定采用IFTTT作为发送消息到手机端的方式。</p>\n<p>简单来说，消息的传递路径就是：Home Assistant网关 -&gt; IFTTT云服务 -&gt; IFTTT客户端。</p>\n<blockquote>\n<p>提示：IFTTT是另外一套独立的云端自动化服务，并不是Home Assistant的功能模块。IFTTT可以与Home Assistant集成使用。</p>\n</blockquote>\n<p>首先，需要需要修改<code>configuration.yaml</code>配置文件，配置IFTTT的集成。注意：Key需要到IFTTT的网址注册申请。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">ifttt:\n    key: &#39;adNdkL90kkdliekdif&#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>手机端需要到应用商店下载IFTTT的客户端。</p>\n<p><img src=\"/2021/10/23/zhi-neng-jia-ju/home-assistant-jian-kong-web-fu-wu-qi/20211023_105828000_iOS.png\"></p>\n<p>IFTTT服务端，需要配置一个Applet，该Applet的运行逻辑是，如果Home Assistant发送消息内容给IFTTT服务端，IFTTTF服务端就将消息内容推送到用户的手机端。</p>\n<p><img src=\"/2021/10/23/zhi-neng-jia-ju/home-assistant-jian-kong-web-fu-wu-qi/20211023_105936000_iOS.png\"></p>\n<p><img src=\"/2021/10/23/zhi-neng-jia-ju/home-assistant-jian-kong-web-fu-wu-qi/20211023_110011000_iOS.png\"></p>\n<p>根据IFTTT服务端的配置，Home Assistant需要在发送给IFTTT服务端的消息通知中，传递以下三个值给IFTTT服务端。</p>\n<p>Value: IFTTT服务端定义的Applet名称</p>\n<p>Value1: 消息的标题</p>\n<p>Value2: 消息的正文</p>\n<h2 id=\"配置自动化\"><a href=\"#配置自动化\" class=\"headerlink\" title=\"配置自动化\"></a>配置自动化</h2><p>Home Assistant的自动化模块，可以让我们根据定义的触发器，例如，Web服务从状态On变为Off，来触发Action，例如发送消息给管理员。</p>\n<p>我们可以通过Web界面来配置自动化，点击<strong>配置</strong> - 自动化 - <strong>添加自动化</strong>，配置<strong>触发条件</strong>和<strong>动作</strong>。</p>\n<p><strong>触发条件</strong></p>\n<ul>\n<li>触发条件类型：状态</li>\n<li>实体：binary_sensor.ha_wan，就是之前在配置文件中定义的实体</li>\n<li>从: on</li>\n<li>变为: off</li>\n<li>持续：3分钟</li>\n</ul>\n<p><img src=\"/2021/10/23/zhi-neng-jia-ju/home-assistant-jian-kong-web-fu-wu-qi/2021-10-23191544.png\"></p>\n<p><strong>动作</strong></p>\n<p>动作类型：调用服务</p>\n<p>服务：ifttt.trigger</p>\n<p>event: general &#x2F;&#x2F; IFTTT中定义的Applet名称</p>\n<p>value1: 消息的标题</p>\n<p>value2: 消息的正文</p>\n<p><img src=\"/2021/10/23/zhi-neng-jia-ju/home-assistant-jian-kong-web-fu-wu-qi/2021-10-23191643.png\"></p>\n<h2 id=\"最终效果\"><a href=\"#最终效果\" class=\"headerlink\" title=\"最终效果\"></a>最终效果</h2><p>当Web服务异常或者恢复时，手机端就能接收到IFTTT发送的消息。</p>\n<p><img src=\"/2021/10/23/zhi-neng-jia-ju/home-assistant-jian-kong-web-fu-wu-qi/20211023_092850000_iOS.png\"></p>\n","site":{"data":{}},"excerpt":"<p>一般在企业IT运维过程中，都需要对服务器，数据库和存储设备等进行监控，以便在第一时间发现故障，从而能够在最快的时间内作出响应。如果考虑成本，通常有一些开源免费的解决方案供选择，例如Zabbix, Nagios以及Cacti等。</p>\n<p>最近，我在折腾Home Assistant的时候，发现除了管理智能家居设备以外，也可以用来监控Web服务。话不多说，下面以监控公网上的Web服务为例，先简单介绍一下实现的原理，然后描述一下整个的配置过程。</p>","more":"<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><ul>\n<li>一台Home Assistant网关</li>\n<li>Web服务网址，例如：ha.example.com</li>\n<li>Web服务端口，例如：8123</li>\n</ul>\n<h2 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h2><p>首先，Home Assistant支持<strong>Command Line</strong>的集成，或者说模块，简单来说，Home Assistant可以调用我们定义的命令，然后根据命令执行的结果来判断服务的运行状况。由于需要监控的是Web服务，因此，就可以用curl命令来访问远端的Web服务，根据命令执行的结果，来判断Web服务是否在正常运行。如果返回的结果与预期不符合，就发送消息给管理员。管理员收到消息后，就可以作出响应。</p>\n<p>更进一步，如果Web服务的异常状况可以通过重启服务来解决，那么，我们甚至可以在Home Assistant上定义一个重启服务的Action（动作）。这样，Home Assistant就可以自动帮我们修复故障，实现了“自愈”功能。</p>\n<h2 id=\"配置Command-Line集成\"><a href=\"#配置Command-Line集成\" class=\"headerlink\" title=\"配置Command Line集成\"></a>配置Command Line集成</h2><p>由于<strong>Command Line</strong>的功能不支持在Web界面中配置，因此，我们需要通过修改<code>configuration.yaml</code>配置文件，来完成配置。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">binary_sensor</span><span class=\"token punctuation\">:</span> \n\t<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">platform</span><span class=\"token punctuation\">:</span> command_line                                                                                 \n  \t\t<span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"HA WAN\"</span>                                                                                                           \n\t\t<span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'response=$(curl -s -L https://ha.example.com:8123 --connect-timeout 5 --cacert ./ssl/HARootCA.pem -o /dev/null -w \"%&#123;http_code&#125;\\n\");test $response -eq 200 &amp;&amp; echo \"Running\" || echo \"Stopped\"'</span>     \n\t\t<span class=\"token key atrule\">payload_on</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Running\"</span>\n\t\t<span class=\"token key atrule\">payload_off</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Stopped\"</span>                         \t\t \n\t\t<span class=\"token key atrule\">scan_interval</span><span class=\"token punctuation\">:</span> <span class=\"token number\">60</span>       <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>binary_sensor:</strong> Home Assitant支持各种类型的集成，或者说模块，binary_sensor是其中的一种类型。</p>\n<p><strong>platform:</strong> binary_sensor这种类型的集成中，command_line是其中的一种平台，其它还有小米，HomeKit，Nest等等。</p>\n<p><strong>name:</strong> 定义名称</p>\n<p><strong>command:</strong> 具体需要Home Assistant执行的命令</p>\n<p><strong>payload_on:</strong> 如果返回结果为Running，Home Assistant则判断Web服务正在运行</p>\n<p><strong>payload_off:</strong> 如果返回结果为Stopped，Home Assistant则判断Web服务停止运行</p>\n<p><strong>scan_interval:</strong> 定义检测的时间区间，单位为秒。例如，每1分钟查询一次Web服务的运行状况</p>\n<p>下面，再简单介绍一下执行监测任务的命令：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#39;response&#x3D;$(curl -s -L https:&#x2F;&#x2F;ha.example.com:8123 --connect-timeout 5 --cacert .&#x2F;ssl&#x2F;HARootCA.pem -o &#x2F;dev&#x2F;null -w &quot;%&#123;http_code&#125;\\n&quot;);test $response -eq 200 &amp;&amp; echo &quot;Running&quot; || echo &quot;Stopped&quot;&#39; <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>其中，-L参数的作用是跟踪网址的重定向(redirection)，有些网站输入网址后，会重定向到另外一个网址，如果不设置-L参数，会导致返回以下的结果。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">HTTP&#x2F;1.1 405 Method Not Allowed\nContent-Type: text&#x2F;plain; charset&#x3D;utf-8\nAllow: GET\nContent-Length: 23\nDate: Mon, 18 Oct 2021 11:17:26 GMT\nServer: Python&#x2F;3.9 aiohttp&#x2F;3.7.4.post0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>因为我是用Docker方式安装的Home Assistant，因此Docker容器中，无法访问&#x2F;etc&#x2F;ssl目录下证书，导致Https访问时，无法验证服务器发送的TLS&#x2F;SSL证书。因此，解决方法就是将根证书HARootCA.pem保存到Home Assistant的配置目录&#x2F;PATH_TO_YOUR_CONFIG&#x2F;下。我将证书保存在了&#x2F;PATH_TO_YOUR_CONFIG&#x2F;ssl目录下，因此，–cacert参数设置的路径值是.&#x2F;ssl&#x2F;HARootCA.pem。</p>\n<p>通过以下命令，可以判断curl返回的结果是否为200，如果是200，就返回Running，否则，返回Stopped。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">test $response -eq 200 &amp;&amp; echo &quot;Running&quot; || echo &quot;Stopped&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h2 id=\"通知模块-IFTTT\"><a href=\"#通知模块-IFTTT\" class=\"headerlink\" title=\"通知模块(IFTTT)\"></a>通知模块(IFTTT)</h2><p>由于我一直习惯于使用IFTTT作为消息通知App，并且Home Assistant支持IFTTT的集成，因此，决定采用IFTTT作为发送消息到手机端的方式。</p>\n<p>简单来说，消息的传递路径就是：Home Assistant网关 -&gt; IFTTT云服务 -&gt; IFTTT客户端。</p>\n<blockquote>\n<p>提示：IFTTT是另外一套独立的云端自动化服务，并不是Home Assistant的功能模块。IFTTT可以与Home Assistant集成使用。</p>\n</blockquote>\n<p>首先，需要需要修改<code>configuration.yaml</code>配置文件，配置IFTTT的集成。注意：Key需要到IFTTT的网址注册申请。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">ifttt:\n    key: &#39;adNdkL90kkdliekdif&#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>手机端需要到应用商店下载IFTTT的客户端。</p>\n<p><img src=\"/2021/10/23/zhi-neng-jia-ju/home-assistant-jian-kong-web-fu-wu-qi/20211023_105828000_iOS.png\"></p>\n<p>IFTTT服务端，需要配置一个Applet，该Applet的运行逻辑是，如果Home Assistant发送消息内容给IFTTT服务端，IFTTTF服务端就将消息内容推送到用户的手机端。</p>\n<p><img src=\"/2021/10/23/zhi-neng-jia-ju/home-assistant-jian-kong-web-fu-wu-qi/20211023_105936000_iOS.png\"></p>\n<p><img src=\"/2021/10/23/zhi-neng-jia-ju/home-assistant-jian-kong-web-fu-wu-qi/20211023_110011000_iOS.png\"></p>\n<p>根据IFTTT服务端的配置，Home Assistant需要在发送给IFTTT服务端的消息通知中，传递以下三个值给IFTTT服务端。</p>\n<p>Value: IFTTT服务端定义的Applet名称</p>\n<p>Value1: 消息的标题</p>\n<p>Value2: 消息的正文</p>\n<h2 id=\"配置自动化\"><a href=\"#配置自动化\" class=\"headerlink\" title=\"配置自动化\"></a>配置自动化</h2><p>Home Assistant的自动化模块，可以让我们根据定义的触发器，例如，Web服务从状态On变为Off，来触发Action，例如发送消息给管理员。</p>\n<p>我们可以通过Web界面来配置自动化，点击<strong>配置</strong> - 自动化 - <strong>添加自动化</strong>，配置<strong>触发条件</strong>和<strong>动作</strong>。</p>\n<p><strong>触发条件</strong></p>\n<ul>\n<li>触发条件类型：状态</li>\n<li>实体：binary_sensor.ha_wan，就是之前在配置文件中定义的实体</li>\n<li>从: on</li>\n<li>变为: off</li>\n<li>持续：3分钟</li>\n</ul>\n<p><img src=\"/2021/10/23/zhi-neng-jia-ju/home-assistant-jian-kong-web-fu-wu-qi/2021-10-23191544.png\"></p>\n<p><strong>动作</strong></p>\n<p>动作类型：调用服务</p>\n<p>服务：ifttt.trigger</p>\n<p>event: general &#x2F;&#x2F; IFTTT中定义的Applet名称</p>\n<p>value1: 消息的标题</p>\n<p>value2: 消息的正文</p>\n<p><img src=\"/2021/10/23/zhi-neng-jia-ju/home-assistant-jian-kong-web-fu-wu-qi/2021-10-23191643.png\"></p>\n<h2 id=\"最终效果\"><a href=\"#最终效果\" class=\"headerlink\" title=\"最终效果\"></a>最终效果</h2><p>当Web服务异常或者恢复时，手机端就能接收到IFTTT发送的消息。</p>\n<p><img src=\"/2021/10/23/zhi-neng-jia-ju/home-assistant-jian-kong-web-fu-wu-qi/20211023_092850000_iOS.png\"></p>"},{"title":"树莓派 | 一条命令帮你远程连到家里的电脑上","date":"2021-10-26T10:37:00.000Z","_content":"\n平时，我偶尔需要通过远程桌面连回家里面的电脑，下载一些文件或者做一些测试。但是，如果直接把电脑的远程桌面服务（TCP/3389）发布到公网上，数据肯定是得不到保障的。这时候，我想到了家里还有一台7 x 24小时运行的树莓派。这个小身板又能派上大用场了。**我打算利用树莓派的SSH服务，将办公室电脑和家里电脑的连接打通。**\n\n> 提示：不一定要用树莓派，只要是一台运行SSH服务的Linux主机/虚拟机就行。\n\n在这个场景中，主要包含以下内容：\n\n- 家里的电脑：192.168.1.200\n- 树莓派：192.168.1.100\n- 家里公网地址：11.11.11.11\n- 办公室电脑：10.1.1.50\n\n![](20230307142016.png)\n<!-- more -->\n\n首先，需要在家中的路由器上，将SSH服务发布到公网上，建议公网的端口不要使用默认的22端口，尽量使用自定义端口，例如：63235。\n\n具体如果将内网的服务发布到公网，建议可以查看路由器说明书。\n\n然后，在办公室的电脑上，打开PowerShell窗口，执行以下命令：\n\n```\nssh -L 127.0.0.1:53389:192.168.1.200:3389 pi@11.11.11.11 -p 63235 \n```\n\n执行以上命令后，如果没有配置证书认证，还需要输入树莓派或者Linux主机的用户名和密码。\n\n打开远程桌面客户端程序mstsc.exe，然后输入: localhost:53389，就可以连回家里的电脑啦。\n\n![](2021-10-26190304.png)\n","source":"_posts/智能家居/SSH远程连接.md","raw":"---\ntitle: 树莓派 | 一条命令帮你远程连到家里的电脑上\ndate: 2021-10-26 18:37:00\ntags: \n - raspberrypi\ncategories: \n - 智能家居\n---\n\n平时，我偶尔需要通过远程桌面连回家里面的电脑，下载一些文件或者做一些测试。但是，如果直接把电脑的远程桌面服务（TCP/3389）发布到公网上，数据肯定是得不到保障的。这时候，我想到了家里还有一台7 x 24小时运行的树莓派。这个小身板又能派上大用场了。**我打算利用树莓派的SSH服务，将办公室电脑和家里电脑的连接打通。**\n\n> 提示：不一定要用树莓派，只要是一台运行SSH服务的Linux主机/虚拟机就行。\n\n在这个场景中，主要包含以下内容：\n\n- 家里的电脑：192.168.1.200\n- 树莓派：192.168.1.100\n- 家里公网地址：11.11.11.11\n- 办公室电脑：10.1.1.50\n\n![](20230307142016.png)\n<!-- more -->\n\n首先，需要在家中的路由器上，将SSH服务发布到公网上，建议公网的端口不要使用默认的22端口，尽量使用自定义端口，例如：63235。\n\n具体如果将内网的服务发布到公网，建议可以查看路由器说明书。\n\n然后，在办公室的电脑上，打开PowerShell窗口，执行以下命令：\n\n```\nssh -L 127.0.0.1:53389:192.168.1.200:3389 pi@11.11.11.11 -p 63235 \n```\n\n执行以上命令后，如果没有配置证书认证，还需要输入树莓派或者Linux主机的用户名和密码。\n\n打开远程桌面客户端程序mstsc.exe，然后输入: localhost:53389，就可以连回家里的电脑啦。\n\n![](2021-10-26190304.png)\n","slug":"智能家居/SSH远程连接","published":1,"updated":"2023-03-07T06:34:21.949Z","_id":"clexvkk8b001r5i73atphgsgm","comments":1,"layout":"post","photos":[],"link":"","content":"<p>平时，我偶尔需要通过远程桌面连回家里面的电脑，下载一些文件或者做一些测试。但是，如果直接把电脑的远程桌面服务（TCP&#x2F;3389）发布到公网上，数据肯定是得不到保障的。这时候，我想到了家里还有一台7 x 24小时运行的树莓派。这个小身板又能派上大用场了。<strong>我打算利用树莓派的SSH服务，将办公室电脑和家里电脑的连接打通。</strong></p>\n<blockquote>\n<p>提示：不一定要用树莓派，只要是一台运行SSH服务的Linux主机&#x2F;虚拟机就行。</p>\n</blockquote>\n<p>在这个场景中，主要包含以下内容：</p>\n<ul>\n<li>家里的电脑：192.168.1.200</li>\n<li>树莓派：192.168.1.100</li>\n<li>家里公网地址：11.11.11.11</li>\n<li>办公室电脑：10.1.1.50</li>\n</ul>\n<p><img src=\"/2021/10/26/zhi-neng-jia-ju/ssh-yuan-cheng-lian-jie/20230307142016.png\"></p>\n<span id=\"more\"></span>\n\n<p>首先，需要在家中的路由器上，将SSH服务发布到公网上，建议公网的端口不要使用默认的22端口，尽量使用自定义端口，例如：63235。</p>\n<p>具体如果将内网的服务发布到公网，建议可以查看路由器说明书。</p>\n<p>然后，在办公室的电脑上，打开PowerShell窗口，执行以下命令：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">ssh -L 127.0.0.1:53389:192.168.1.200:3389 pi@11.11.11.11 -p 63235 <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>执行以上命令后，如果没有配置证书认证，还需要输入树莓派或者Linux主机的用户名和密码。</p>\n<p>打开远程桌面客户端程序mstsc.exe，然后输入: localhost:53389，就可以连回家里的电脑啦。</p>\n<p><img src=\"/2021/10/26/zhi-neng-jia-ju/ssh-yuan-cheng-lian-jie/2021-10-26190304.png\"></p>\n","site":{"data":{}},"excerpt":"<p>平时，我偶尔需要通过远程桌面连回家里面的电脑，下载一些文件或者做一些测试。但是，如果直接把电脑的远程桌面服务（TCP&#x2F;3389）发布到公网上，数据肯定是得不到保障的。这时候，我想到了家里还有一台7 x 24小时运行的树莓派。这个小身板又能派上大用场了。<strong>我打算利用树莓派的SSH服务，将办公室电脑和家里电脑的连接打通。</strong></p>\n<blockquote>\n<p>提示：不一定要用树莓派，只要是一台运行SSH服务的Linux主机&#x2F;虚拟机就行。</p>\n</blockquote>\n<p>在这个场景中，主要包含以下内容：</p>\n<ul>\n<li>家里的电脑：192.168.1.200</li>\n<li>树莓派：192.168.1.100</li>\n<li>家里公网地址：11.11.11.11</li>\n<li>办公室电脑：10.1.1.50</li>\n</ul>\n<p><img src=\"/2021/10/26/zhi-neng-jia-ju/ssh-yuan-cheng-lian-jie/20230307142016.png\"></p>","more":"<p>首先，需要在家中的路由器上，将SSH服务发布到公网上，建议公网的端口不要使用默认的22端口，尽量使用自定义端口，例如：63235。</p>\n<p>具体如果将内网的服务发布到公网，建议可以查看路由器说明书。</p>\n<p>然后，在办公室的电脑上，打开PowerShell窗口，执行以下命令：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">ssh -L 127.0.0.1:53389:192.168.1.200:3389 pi@11.11.11.11 -p 63235 <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>执行以上命令后，如果没有配置证书认证，还需要输入树莓派或者Linux主机的用户名和密码。</p>\n<p>打开远程桌面客户端程序mstsc.exe，然后输入: localhost:53389，就可以连回家里的电脑啦。</p>\n<p><img src=\"/2021/10/26/zhi-neng-jia-ju/ssh-yuan-cheng-lian-jie/2021-10-26190304.png\"></p>"},{"title":"iRobot扫地机器人使用体验","date":"2016-03-10T04:05:00.000Z","updated":"2016-03-10T04:05:00.000Z","_content":"\n{% asset_img DDAD7481-A2AC-4BAB-8F1B-FA12B3E4D0B0_1_201_a.jpeg 800 iRobot Roomba 650 %}\n\n科技的发展为人们的生活带来了极大的便利性，但是，与此同时，科技也在一定程度上助长了人类的惰性。\n\n现在，购物不用出门，吃饭可以网上订餐，学习可以参加在线视频，甚至打扫家务，也有了扫地机器人。\n\n<!-- more -->\n\n最近，由于工作的原因，当然“懒惰”也是主要因素之一，家里的卫生质量急剧下降，考虑再三，于是决定购买一台扫地机器人来帮助打扫卫生。趁着周末，在网上泡了二天，查询了许多网站和论坛，最终决定选择iRobot公司的产品。\n\n初次见到“爱萝卜” — iRobot扫地机器人，其产品的外观设计和科技质感给我留下了深刻的印象，经过一周的使用，我感受到了爱萝卜人性化的设计，良好的用户体验，以及优秀清扫能力。因此，我决定写一下这次产品的使用体验。下面从几个方面来描述爱萝卜的特点。\n\n## 清扫能力  \n\n我们选购一款扫地机器人，首先注重的是它是否可以帮我们把房子打扫干净。经过一周的使用，爱萝卜完全可以胜任扫地任务，家中将来基本上已经可以不需要使用扫帚，并且，以前像沙发、桌椅和床底下无法清扫的地方，爱萝卜也可以轻松进出打扫，带走满满的灰尘，留下一片洁净。\n\n当然，任何产品都不是百分之百完美的，我发现有些小颗粒灰尘还是会被漏掉，这可能跟产品本身的算法和除尘技术有关。但是，其清扫后的干净度，已经可以让我们放心让它打扫。\n\n## 续航时间\n\n当初之所以选择扫地机，而不是吸尘器的原因之一，就是考虑到设备的续航能力。中低端的吸尘器充电时间长，而续航时间只有短短几十分钟，并且还要利用人工操作。而爱萝卜只需要充电3小时，就可以拥有120分钟的续航时间，对于三室一厅的房子，爱萝卜只用了75分钟就打扫完成，在此过程中，我并没有利用虚拟墙做分区处理，因此，打扫效率还算令人满意。\n\n## 智能程度\n\n虽然说是一款扫地机器人，但是其智能程度只能算一般，虽然有自我学习能力，但是其重复打扫和漏扫的情况还是很难避免，受其算法的限制，打扫效率相对其它品牌产品，如Neato来说，同样的打扫面积，爱萝卜花费的时间要长很多，但好处是其产品故障率相对较低，并且打扫起来比较干净。\n\n在高端型号的产品中，通过利用灯塔以及云计算技术，其智能程度应该已经有所提高。\n\n## 噪音\n\n在购买之前，我对于扫地机产生的噪音还是非常顾忌的，一方面担心自己无法忍受，同时也担心影响邻居。但是，看到网上说只有50分贝的声音，并且比吸尘器的声音还要低。因此，买回使用时，我特意感受了一下，总体来说，还是在可接受范围内，如果站在其旁边看着打扫，噪音并不会让你感到十分烦躁难忍。当然，如果在客厅打扫，看电视肯定会受影响，但是在卧室把门一关，也就几乎不太会留意到外面的扫地机。平时，我会预约每天在固定的时间段打扫，有时候把门一关，出去溜达一圈回来，房子已经打扫完成，爱萝卜也已安静地坐在充电座上充电。\n\n最后，总体来说，我觉得这次购买的产品还是非常值得，对我们这种上班族来说，平时忙着工作，回家已经懒得再打扫卫生，可以说，扫地机为我们充满压力的生活带来了一些轻松和乐趣（看着它勤劳地打扫，感觉非常有趣。），也为枯燥的打扫工作注入了一丝活力。\n\n由于使用时间较短，因此，可能有些缺点和不足还有待发现，至少到目前为止，我对这款产品还算比较满意，其操作非常简便，即使是老年人，上手操作也非常容易，并且由于采用模块化的设计，因此，拆卸清理，替换部件都非常方便。唯一的缺点可能就是价钱相对比较贵。","source":"_posts/智能家居/iRobot扫地机器人使用体验.md","raw":"---\ntitle: iRobot扫地机器人使用体验\ndate: 2016-03-10 12:05:00\nupdated: 2016-03-10 12:05:00\ntags: \n - 扫地机器人\ncategories: \n - 智能家居\n---\n\n{% asset_img DDAD7481-A2AC-4BAB-8F1B-FA12B3E4D0B0_1_201_a.jpeg 800 iRobot Roomba 650 %}\n\n科技的发展为人们的生活带来了极大的便利性，但是，与此同时，科技也在一定程度上助长了人类的惰性。\n\n现在，购物不用出门，吃饭可以网上订餐，学习可以参加在线视频，甚至打扫家务，也有了扫地机器人。\n\n<!-- more -->\n\n最近，由于工作的原因，当然“懒惰”也是主要因素之一，家里的卫生质量急剧下降，考虑再三，于是决定购买一台扫地机器人来帮助打扫卫生。趁着周末，在网上泡了二天，查询了许多网站和论坛，最终决定选择iRobot公司的产品。\n\n初次见到“爱萝卜” — iRobot扫地机器人，其产品的外观设计和科技质感给我留下了深刻的印象，经过一周的使用，我感受到了爱萝卜人性化的设计，良好的用户体验，以及优秀清扫能力。因此，我决定写一下这次产品的使用体验。下面从几个方面来描述爱萝卜的特点。\n\n## 清扫能力  \n\n我们选购一款扫地机器人，首先注重的是它是否可以帮我们把房子打扫干净。经过一周的使用，爱萝卜完全可以胜任扫地任务，家中将来基本上已经可以不需要使用扫帚，并且，以前像沙发、桌椅和床底下无法清扫的地方，爱萝卜也可以轻松进出打扫，带走满满的灰尘，留下一片洁净。\n\n当然，任何产品都不是百分之百完美的，我发现有些小颗粒灰尘还是会被漏掉，这可能跟产品本身的算法和除尘技术有关。但是，其清扫后的干净度，已经可以让我们放心让它打扫。\n\n## 续航时间\n\n当初之所以选择扫地机，而不是吸尘器的原因之一，就是考虑到设备的续航能力。中低端的吸尘器充电时间长，而续航时间只有短短几十分钟，并且还要利用人工操作。而爱萝卜只需要充电3小时，就可以拥有120分钟的续航时间，对于三室一厅的房子，爱萝卜只用了75分钟就打扫完成，在此过程中，我并没有利用虚拟墙做分区处理，因此，打扫效率还算令人满意。\n\n## 智能程度\n\n虽然说是一款扫地机器人，但是其智能程度只能算一般，虽然有自我学习能力，但是其重复打扫和漏扫的情况还是很难避免，受其算法的限制，打扫效率相对其它品牌产品，如Neato来说，同样的打扫面积，爱萝卜花费的时间要长很多，但好处是其产品故障率相对较低，并且打扫起来比较干净。\n\n在高端型号的产品中，通过利用灯塔以及云计算技术，其智能程度应该已经有所提高。\n\n## 噪音\n\n在购买之前，我对于扫地机产生的噪音还是非常顾忌的，一方面担心自己无法忍受，同时也担心影响邻居。但是，看到网上说只有50分贝的声音，并且比吸尘器的声音还要低。因此，买回使用时，我特意感受了一下，总体来说，还是在可接受范围内，如果站在其旁边看着打扫，噪音并不会让你感到十分烦躁难忍。当然，如果在客厅打扫，看电视肯定会受影响，但是在卧室把门一关，也就几乎不太会留意到外面的扫地机。平时，我会预约每天在固定的时间段打扫，有时候把门一关，出去溜达一圈回来，房子已经打扫完成，爱萝卜也已安静地坐在充电座上充电。\n\n最后，总体来说，我觉得这次购买的产品还是非常值得，对我们这种上班族来说，平时忙着工作，回家已经懒得再打扫卫生，可以说，扫地机为我们充满压力的生活带来了一些轻松和乐趣（看着它勤劳地打扫，感觉非常有趣。），也为枯燥的打扫工作注入了一丝活力。\n\n由于使用时间较短，因此，可能有些缺点和不足还有待发现，至少到目前为止，我对这款产品还算比较满意，其操作非常简便，即使是老年人，上手操作也非常容易，并且由于采用模块化的设计，因此，拆卸清理，替换部件都非常方便。唯一的缺点可能就是价钱相对比较贵。","slug":"智能家居/iRobot扫地机器人使用体验","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clexvkk8i001v5i735cup4cm1","content":"<img src=\"/2016/03/10/zhi-neng-jia-ju/irobot-sao-di-ji-qi-ren-shi-yong-ti-yan/DDAD7481-A2AC-4BAB-8F1B-FA12B3E4D0B0_1_201_a.jpeg\" class=\"\" width=\"800\" title=\"iRobot Roomba 650\">\n\n<p>科技的发展为人们的生活带来了极大的便利性，但是，与此同时，科技也在一定程度上助长了人类的惰性。</p>\n<p>现在，购物不用出门，吃饭可以网上订餐，学习可以参加在线视频，甚至打扫家务，也有了扫地机器人。</p>\n<span id=\"more\"></span>\n\n<p>最近，由于工作的原因，当然“懒惰”也是主要因素之一，家里的卫生质量急剧下降，考虑再三，于是决定购买一台扫地机器人来帮助打扫卫生。趁着周末，在网上泡了二天，查询了许多网站和论坛，最终决定选择iRobot公司的产品。</p>\n<p>初次见到“爱萝卜” — iRobot扫地机器人，其产品的外观设计和科技质感给我留下了深刻的印象，经过一周的使用，我感受到了爱萝卜人性化的设计，良好的用户体验，以及优秀清扫能力。因此，我决定写一下这次产品的使用体验。下面从几个方面来描述爱萝卜的特点。</p>\n<h2 id=\"清扫能力\"><a href=\"#清扫能力\" class=\"headerlink\" title=\"清扫能力\"></a>清扫能力</h2><p>我们选购一款扫地机器人，首先注重的是它是否可以帮我们把房子打扫干净。经过一周的使用，爱萝卜完全可以胜任扫地任务，家中将来基本上已经可以不需要使用扫帚，并且，以前像沙发、桌椅和床底下无法清扫的地方，爱萝卜也可以轻松进出打扫，带走满满的灰尘，留下一片洁净。</p>\n<p>当然，任何产品都不是百分之百完美的，我发现有些小颗粒灰尘还是会被漏掉，这可能跟产品本身的算法和除尘技术有关。但是，其清扫后的干净度，已经可以让我们放心让它打扫。</p>\n<h2 id=\"续航时间\"><a href=\"#续航时间\" class=\"headerlink\" title=\"续航时间\"></a>续航时间</h2><p>当初之所以选择扫地机，而不是吸尘器的原因之一，就是考虑到设备的续航能力。中低端的吸尘器充电时间长，而续航时间只有短短几十分钟，并且还要利用人工操作。而爱萝卜只需要充电3小时，就可以拥有120分钟的续航时间，对于三室一厅的房子，爱萝卜只用了75分钟就打扫完成，在此过程中，我并没有利用虚拟墙做分区处理，因此，打扫效率还算令人满意。</p>\n<h2 id=\"智能程度\"><a href=\"#智能程度\" class=\"headerlink\" title=\"智能程度\"></a>智能程度</h2><p>虽然说是一款扫地机器人，但是其智能程度只能算一般，虽然有自我学习能力，但是其重复打扫和漏扫的情况还是很难避免，受其算法的限制，打扫效率相对其它品牌产品，如Neato来说，同样的打扫面积，爱萝卜花费的时间要长很多，但好处是其产品故障率相对较低，并且打扫起来比较干净。</p>\n<p>在高端型号的产品中，通过利用灯塔以及云计算技术，其智能程度应该已经有所提高。</p>\n<h2 id=\"噪音\"><a href=\"#噪音\" class=\"headerlink\" title=\"噪音\"></a>噪音</h2><p>在购买之前，我对于扫地机产生的噪音还是非常顾忌的，一方面担心自己无法忍受，同时也担心影响邻居。但是，看到网上说只有50分贝的声音，并且比吸尘器的声音还要低。因此，买回使用时，我特意感受了一下，总体来说，还是在可接受范围内，如果站在其旁边看着打扫，噪音并不会让你感到十分烦躁难忍。当然，如果在客厅打扫，看电视肯定会受影响，但是在卧室把门一关，也就几乎不太会留意到外面的扫地机。平时，我会预约每天在固定的时间段打扫，有时候把门一关，出去溜达一圈回来，房子已经打扫完成，爱萝卜也已安静地坐在充电座上充电。</p>\n<p>最后，总体来说，我觉得这次购买的产品还是非常值得，对我们这种上班族来说，平时忙着工作，回家已经懒得再打扫卫生，可以说，扫地机为我们充满压力的生活带来了一些轻松和乐趣（看着它勤劳地打扫，感觉非常有趣。），也为枯燥的打扫工作注入了一丝活力。</p>\n<p>由于使用时间较短，因此，可能有些缺点和不足还有待发现，至少到目前为止，我对这款产品还算比较满意，其操作非常简便，即使是老年人，上手操作也非常容易，并且由于采用模块化的设计，因此，拆卸清理，替换部件都非常方便。唯一的缺点可能就是价钱相对比较贵。</p>\n","site":{"data":{}},"excerpt":"<img src=\"/2016/03/10/zhi-neng-jia-ju/irobot-sao-di-ji-qi-ren-shi-yong-ti-yan/DDAD7481-A2AC-4BAB-8F1B-FA12B3E4D0B0_1_201_a.jpeg\" class=\"\" width=\"800\" title=\"iRobot Roomba 650\">\n\n<p>科技的发展为人们的生活带来了极大的便利性，但是，与此同时，科技也在一定程度上助长了人类的惰性。</p>\n<p>现在，购物不用出门，吃饭可以网上订餐，学习可以参加在线视频，甚至打扫家务，也有了扫地机器人。</p>","more":"<p>最近，由于工作的原因，当然“懒惰”也是主要因素之一，家里的卫生质量急剧下降，考虑再三，于是决定购买一台扫地机器人来帮助打扫卫生。趁着周末，在网上泡了二天，查询了许多网站和论坛，最终决定选择iRobot公司的产品。</p>\n<p>初次见到“爱萝卜” — iRobot扫地机器人，其产品的外观设计和科技质感给我留下了深刻的印象，经过一周的使用，我感受到了爱萝卜人性化的设计，良好的用户体验，以及优秀清扫能力。因此，我决定写一下这次产品的使用体验。下面从几个方面来描述爱萝卜的特点。</p>\n<h2 id=\"清扫能力\"><a href=\"#清扫能力\" class=\"headerlink\" title=\"清扫能力\"></a>清扫能力</h2><p>我们选购一款扫地机器人，首先注重的是它是否可以帮我们把房子打扫干净。经过一周的使用，爱萝卜完全可以胜任扫地任务，家中将来基本上已经可以不需要使用扫帚，并且，以前像沙发、桌椅和床底下无法清扫的地方，爱萝卜也可以轻松进出打扫，带走满满的灰尘，留下一片洁净。</p>\n<p>当然，任何产品都不是百分之百完美的，我发现有些小颗粒灰尘还是会被漏掉，这可能跟产品本身的算法和除尘技术有关。但是，其清扫后的干净度，已经可以让我们放心让它打扫。</p>\n<h2 id=\"续航时间\"><a href=\"#续航时间\" class=\"headerlink\" title=\"续航时间\"></a>续航时间</h2><p>当初之所以选择扫地机，而不是吸尘器的原因之一，就是考虑到设备的续航能力。中低端的吸尘器充电时间长，而续航时间只有短短几十分钟，并且还要利用人工操作。而爱萝卜只需要充电3小时，就可以拥有120分钟的续航时间，对于三室一厅的房子，爱萝卜只用了75分钟就打扫完成，在此过程中，我并没有利用虚拟墙做分区处理，因此，打扫效率还算令人满意。</p>\n<h2 id=\"智能程度\"><a href=\"#智能程度\" class=\"headerlink\" title=\"智能程度\"></a>智能程度</h2><p>虽然说是一款扫地机器人，但是其智能程度只能算一般，虽然有自我学习能力，但是其重复打扫和漏扫的情况还是很难避免，受其算法的限制，打扫效率相对其它品牌产品，如Neato来说，同样的打扫面积，爱萝卜花费的时间要长很多，但好处是其产品故障率相对较低，并且打扫起来比较干净。</p>\n<p>在高端型号的产品中，通过利用灯塔以及云计算技术，其智能程度应该已经有所提高。</p>\n<h2 id=\"噪音\"><a href=\"#噪音\" class=\"headerlink\" title=\"噪音\"></a>噪音</h2><p>在购买之前，我对于扫地机产生的噪音还是非常顾忌的，一方面担心自己无法忍受，同时也担心影响邻居。但是，看到网上说只有50分贝的声音，并且比吸尘器的声音还要低。因此，买回使用时，我特意感受了一下，总体来说，还是在可接受范围内，如果站在其旁边看着打扫，噪音并不会让你感到十分烦躁难忍。当然，如果在客厅打扫，看电视肯定会受影响，但是在卧室把门一关，也就几乎不太会留意到外面的扫地机。平时，我会预约每天在固定的时间段打扫，有时候把门一关，出去溜达一圈回来，房子已经打扫完成，爱萝卜也已安静地坐在充电座上充电。</p>\n<p>最后，总体来说，我觉得这次购买的产品还是非常值得，对我们这种上班族来说，平时忙着工作，回家已经懒得再打扫卫生，可以说，扫地机为我们充满压力的生活带来了一些轻松和乐趣（看着它勤劳地打扫，感觉非常有趣。），也为枯燥的打扫工作注入了一丝活力。</p>\n<p>由于使用时间较短，因此，可能有些缺点和不足还有待发现，至少到目前为止，我对这款产品还算比较满意，其操作非常简便，即使是老年人，上手操作也非常容易，并且由于采用模块化的设计，因此，拆卸清理，替换部件都非常方便。唯一的缺点可能就是价钱相对比较贵。</p>"},{"title":"物联网智能小电视","date":"2021-11-01T10:32:00.000Z","_content":"\n最近心血来潮，想自己DIY一些小物件，顺便学习一下嵌入式开发相关知识。于是，购买了ESP32和1.54英寸的TFT液晶屏，先从简单的MicroPython入手，实现一个时钟加天气预报的桌面小摆件。\n\n最近心血来潮，想自己DIY一些小物件，顺便学习一下嵌入式开发相关知识。于是，购买了ESP32和1.54英寸的TFT液晶屏，先从简单的MicroPython入手，实现一个时钟加天气预报的桌面小摆件。\n\n![](20211101_102902238_iOS.jpg)\n\n<!-- more -->\n\n到目前为止，主要实现了以下功能：\n\n- 开机自动连接Wi-Fi\n\n- 显示时间和日期，并通过NTP自动校准时间\n- 显示实时的气温，以及当天的天气状况\n- 根据IP地址定位所在的区域，精确到区级位置\n- 显示Wi-Fi的图标\n\n在制作过程中，遇到了许多的问题，其中，以下问题花费的时间比较多，简单总结一下。\n\n- 由于显示屏驱动的功能局限，不支持透明字体，如果使用背景图片，字体无法呈现透明效果，视觉效果很差。以下是一开始的设计，本打算采用美观一点的背景图片。\n\n![](20211030_014042417_iOS.jpg)\n\n- 还是显示屏驱动的功能局限，只支持jpg格式的图片，不支持透明背景的png格式图片。因此，只能采用“笨办法”，修改图片背景颜色，保持与屏幕显示颜色一致。\n- 购买的两块TFT屏幕，大小分别为1.3和.154英寸。除了尺寸的区别，前者不包含CS引脚（注：1.54英寸屏的CS引脚必须接地GND）。带来的问题就是，1.54寸屏的初始化波特率最高只能达到23Mhz，而1.3寸屏的初始化波特率能达到40Mhz。另外，1.54英寸屏每次上电后，屏幕无法显示画面，或者显示画面几秒后，画面就会消失，重置后能恢复。1.3寸屏没有这样的问题。目前还没有找到原因，猜测可能跟显示屏驱动有关。\n- 为了显示中文字体，需要将字体库文件通过工具转换成bitmap模块。\n\n下一步，需要再进一步优化，并增加新的功能：\n\n- 开机动画\n- 微信扫描后，配置Wi-Fi账号和密码\n- Wi-Fi图标显示网络的通断\n- 手机信息传送到屏幕\n- 显示股票信息\n","source":"_posts/智能家居/物联网智能小电视.md","raw":"---\ntitle: 物联网智能小电视\ndate: 2021-11-1 18:32:00\ntags: \n - ESP32\ncategories: \n - 智能家居\n---\n\n最近心血来潮，想自己DIY一些小物件，顺便学习一下嵌入式开发相关知识。于是，购买了ESP32和1.54英寸的TFT液晶屏，先从简单的MicroPython入手，实现一个时钟加天气预报的桌面小摆件。\n\n最近心血来潮，想自己DIY一些小物件，顺便学习一下嵌入式开发相关知识。于是，购买了ESP32和1.54英寸的TFT液晶屏，先从简单的MicroPython入手，实现一个时钟加天气预报的桌面小摆件。\n\n![](20211101_102902238_iOS.jpg)\n\n<!-- more -->\n\n到目前为止，主要实现了以下功能：\n\n- 开机自动连接Wi-Fi\n\n- 显示时间和日期，并通过NTP自动校准时间\n- 显示实时的气温，以及当天的天气状况\n- 根据IP地址定位所在的区域，精确到区级位置\n- 显示Wi-Fi的图标\n\n在制作过程中，遇到了许多的问题，其中，以下问题花费的时间比较多，简单总结一下。\n\n- 由于显示屏驱动的功能局限，不支持透明字体，如果使用背景图片，字体无法呈现透明效果，视觉效果很差。以下是一开始的设计，本打算采用美观一点的背景图片。\n\n![](20211030_014042417_iOS.jpg)\n\n- 还是显示屏驱动的功能局限，只支持jpg格式的图片，不支持透明背景的png格式图片。因此，只能采用“笨办法”，修改图片背景颜色，保持与屏幕显示颜色一致。\n- 购买的两块TFT屏幕，大小分别为1.3和.154英寸。除了尺寸的区别，前者不包含CS引脚（注：1.54英寸屏的CS引脚必须接地GND）。带来的问题就是，1.54寸屏的初始化波特率最高只能达到23Mhz，而1.3寸屏的初始化波特率能达到40Mhz。另外，1.54英寸屏每次上电后，屏幕无法显示画面，或者显示画面几秒后，画面就会消失，重置后能恢复。1.3寸屏没有这样的问题。目前还没有找到原因，猜测可能跟显示屏驱动有关。\n- 为了显示中文字体，需要将字体库文件通过工具转换成bitmap模块。\n\n下一步，需要再进一步优化，并增加新的功能：\n\n- 开机动画\n- 微信扫描后，配置Wi-Fi账号和密码\n- Wi-Fi图标显示网络的通断\n- 手机信息传送到屏幕\n- 显示股票信息\n","slug":"智能家居/物联网智能小电视","published":1,"updated":"2023-03-06T08:28:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clexvkk8n001x5i734lfx32nl","content":"<p>最近心血来潮，想自己DIY一些小物件，顺便学习一下嵌入式开发相关知识。于是，购买了ESP32和1.54英寸的TFT液晶屏，先从简单的MicroPython入手，实现一个时钟加天气预报的桌面小摆件。</p>\n<p>最近心血来潮，想自己DIY一些小物件，顺便学习一下嵌入式开发相关知识。于是，购买了ESP32和1.54英寸的TFT液晶屏，先从简单的MicroPython入手，实现一个时钟加天气预报的桌面小摆件。</p>\n<p><img src=\"/2021/11/01/zhi-neng-jia-ju/wu-lian-wang-zhi-neng-xiao-dian-shi/20211101_102902238_iOS.jpg\"></p>\n<span id=\"more\"></span>\n\n<p>到目前为止，主要实现了以下功能：</p>\n<ul>\n<li><p>开机自动连接Wi-Fi</p>\n</li>\n<li><p>显示时间和日期，并通过NTP自动校准时间</p>\n</li>\n<li><p>显示实时的气温，以及当天的天气状况</p>\n</li>\n<li><p>根据IP地址定位所在的区域，精确到区级位置</p>\n</li>\n<li><p>显示Wi-Fi的图标</p>\n</li>\n</ul>\n<p>在制作过程中，遇到了许多的问题，其中，以下问题花费的时间比较多，简单总结一下。</p>\n<ul>\n<li>由于显示屏驱动的功能局限，不支持透明字体，如果使用背景图片，字体无法呈现透明效果，视觉效果很差。以下是一开始的设计，本打算采用美观一点的背景图片。</li>\n</ul>\n<p><img src=\"/2021/11/01/zhi-neng-jia-ju/wu-lian-wang-zhi-neng-xiao-dian-shi/20211030_014042417_iOS.jpg\"></p>\n<ul>\n<li>还是显示屏驱动的功能局限，只支持jpg格式的图片，不支持透明背景的png格式图片。因此，只能采用“笨办法”，修改图片背景颜色，保持与屏幕显示颜色一致。</li>\n<li>购买的两块TFT屏幕，大小分别为1.3和.154英寸。除了尺寸的区别，前者不包含CS引脚（注：1.54英寸屏的CS引脚必须接地GND）。带来的问题就是，1.54寸屏的初始化波特率最高只能达到23Mhz，而1.3寸屏的初始化波特率能达到40Mhz。另外，1.54英寸屏每次上电后，屏幕无法显示画面，或者显示画面几秒后，画面就会消失，重置后能恢复。1.3寸屏没有这样的问题。目前还没有找到原因，猜测可能跟显示屏驱动有关。</li>\n<li>为了显示中文字体，需要将字体库文件通过工具转换成bitmap模块。</li>\n</ul>\n<p>下一步，需要再进一步优化，并增加新的功能：</p>\n<ul>\n<li>开机动画</li>\n<li>微信扫描后，配置Wi-Fi账号和密码</li>\n<li>Wi-Fi图标显示网络的通断</li>\n<li>手机信息传送到屏幕</li>\n<li>显示股票信息</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>最近心血来潮，想自己DIY一些小物件，顺便学习一下嵌入式开发相关知识。于是，购买了ESP32和1.54英寸的TFT液晶屏，先从简单的MicroPython入手，实现一个时钟加天气预报的桌面小摆件。</p>\n<p>最近心血来潮，想自己DIY一些小物件，顺便学习一下嵌入式开发相关知识。于是，购买了ESP32和1.54英寸的TFT液晶屏，先从简单的MicroPython入手，实现一个时钟加天气预报的桌面小摆件。</p>\n<p><img src=\"/2021/11/01/zhi-neng-jia-ju/wu-lian-wang-zhi-neng-xiao-dian-shi/20211101_102902238_iOS.jpg\"></p>","more":"<p>到目前为止，主要实现了以下功能：</p>\n<ul>\n<li><p>开机自动连接Wi-Fi</p>\n</li>\n<li><p>显示时间和日期，并通过NTP自动校准时间</p>\n</li>\n<li><p>显示实时的气温，以及当天的天气状况</p>\n</li>\n<li><p>根据IP地址定位所在的区域，精确到区级位置</p>\n</li>\n<li><p>显示Wi-Fi的图标</p>\n</li>\n</ul>\n<p>在制作过程中，遇到了许多的问题，其中，以下问题花费的时间比较多，简单总结一下。</p>\n<ul>\n<li>由于显示屏驱动的功能局限，不支持透明字体，如果使用背景图片，字体无法呈现透明效果，视觉效果很差。以下是一开始的设计，本打算采用美观一点的背景图片。</li>\n</ul>\n<p><img src=\"/2021/11/01/zhi-neng-jia-ju/wu-lian-wang-zhi-neng-xiao-dian-shi/20211030_014042417_iOS.jpg\"></p>\n<ul>\n<li>还是显示屏驱动的功能局限，只支持jpg格式的图片，不支持透明背景的png格式图片。因此，只能采用“笨办法”，修改图片背景颜色，保持与屏幕显示颜色一致。</li>\n<li>购买的两块TFT屏幕，大小分别为1.3和.154英寸。除了尺寸的区别，前者不包含CS引脚（注：1.54英寸屏的CS引脚必须接地GND）。带来的问题就是，1.54寸屏的初始化波特率最高只能达到23Mhz，而1.3寸屏的初始化波特率能达到40Mhz。另外，1.54英寸屏每次上电后，屏幕无法显示画面，或者显示画面几秒后，画面就会消失，重置后能恢复。1.3寸屏没有这样的问题。目前还没有找到原因，猜测可能跟显示屏驱动有关。</li>\n<li>为了显示中文字体，需要将字体库文件通过工具转换成bitmap模块。</li>\n</ul>\n<p>下一步，需要再进一步优化，并增加新的功能：</p>\n<ul>\n<li>开机动画</li>\n<li>微信扫描后，配置Wi-Fi账号和密码</li>\n<li>Wi-Fi图标显示网络的通断</li>\n<li>手机信息传送到屏幕</li>\n<li>显示股票信息</li>\n</ul>"},{"title":"Python介绍","date":"2022-08-31T10:30:08.000Z","img":"/medias/featureimages/31.jpg","_content":"> 注：本文翻译自[Introduction to Python 3](https://realpython.com/python-introduction/)。\n\n# Python介绍\n\nPython是一种高级的解释性脚本语言，其作者**Guido van Rossum**于20世纪80年代（1980s）在荷兰国家数据和计算机科学研究所发明了该编程语言。Python的初始版本发布于1991年，正式的1.0版本发布于1994年。\n\n在2000年，Python 2.0版本发布，此后，Python一直持续发布2.x的版本。到了2008年，Python开发组决定发布Python 3.0版本，与2.x相比，该版本做了一些重要的改变，并且不支持向下兼容版本2.x。\n\n此后，虽然Python开发组仍然为Python 2进行了一段时间的维护和开发，但是最终于2020年1月1日正式宣布停止对Python 2的维护。因此，对于Python新人来说，建议直接学习Python 3。\n\n据说，该编程语言之所以被称为Python，是因为**Guido**是英国喜剧剧团的戏剧作品《巨蟒剧团之飞翔的马戏团》的粉丝。目前，Python仍然由研究所的核心团队维护和开发，并且**Guido**依然是主要负责人，并且已经被Python社区授予BDFL(Benevolent Dictator For Life)的称号。\n\n<!-- more -->\n\n## 为什么选择Python\n\n如果要编写一个程序，有很多的编程语言可以选择。那么，为什么要选择Python呢？\n\n### Python十分流行\n\n在过去的几年，Python正在变得越来越受欢迎。2018年，根据StackOverflow的开发者调查结果显示，Python的受欢迎度排名为第七位，并且是程序员们最想掌握的语言。许多国际大公司，如谷歌、脸书、Instagram等都在使用Python。详情请参考[8 World-Class Software Companies That Use Python](https://realpython.com/world-class-companies-using-python/)。\n\n根据Dice的研究，Python是最热门的技能之一，并且根据PYPL编程语言流行指数的统计，Python是排名第一的编程语言。\n\n由于Python的流行和广泛使用，Python程序员受到企业的追捧，并且可以获得十分可观的收入。\n\n### Python是一种解释性语言\n\n许多编程语言需要编译后才能运行，换句话说，在运行你编写的程序以前，源代码需要被转换成机器语言—一种计算机处理器能够理解的语言，然后程序才能运行。相对而言，用解释性编程语言写的代码，可以由解释器直接运行，不需要经过编译处理。因此，这样带来的好处就是加快了开发周期，提高了开发效率。\n\n但是，相对于需要编译的语言来说，解释性语言的运行速度比较慢。尤其对于一些对运算要求比较高的应用来说，例如图形处理和密集型运算，解释性语言会有一些局限性。\n\n尽管如此，但是在实际的应用中，对于大部分程序来说，毫秒级或者秒级差异的运行速度，用户并不会有太明显的感知区别。因此，使用解释性语言来编程，利大于弊。\n\n> 更多信息：关于解释性语言和编译性语言的区别，请阅读[维基百科](https://en.wikipedia.org/wiki/Interpreted_language)。\n\n### Python是免费的\n\nPython解释器是基于开源许可证发布，因此用户可以免费安装和使用，甚至可以用于开发商用产品。\n\nPython可以支持所有主流的操作系统，包括Unix/Linux, Windows, MacOS和移动设备。\n\n### Python是跨平台的\n\n因为Python是解释性的语言，不需要编译成机器语言，只要操作系统上安装了Python解释器，用Python编写的源代码就可以在该平台上直接运行。\n\n### Python很简单\n\n在编程语言中，可以通过关键字和保留字的数量衡量语言的复杂度，Python 3有33个关键字，Python 2是31个，而C++有62个， Java有53个，相对而言，Python的关键字数量比较少。\n\nPython的代码机构简洁、清晰，非常易懂和易学。\n\n### 但是，Python也不是那么简单\n\n虽然Python的语法很简单，但是Python支持所有高级语言的特性，包括复杂的动态数据类型，结构和功能性编程以及面向对象的编程。\n\n此外，大量的类库和函数为Python提供了强大的扩展功能，包括数据库操作和图形界面的编程。\n\n虽然Python语言本身被设计地很简单，但是功能却十分强大。\n\n## 最后\n\n本文主要简单介绍了一下Python这门编程语言，包括：\n\n- 简单的Python开发历史\n- 为什么要选择Python\n\n无论Python新手，还是编程老司机，Python都是一个很不错的选择。\n\n\n\n","source":"_posts/python/Python介绍.md","raw":"---\ntitle: Python介绍\ndate: 2022-08-31 18:30:08\ntags: \n - python-basic\ncategories: \n - Python\nimg: /medias/featureimages/31.jpg\n---\n> 注：本文翻译自[Introduction to Python 3](https://realpython.com/python-introduction/)。\n\n# Python介绍\n\nPython是一种高级的解释性脚本语言，其作者**Guido van Rossum**于20世纪80年代（1980s）在荷兰国家数据和计算机科学研究所发明了该编程语言。Python的初始版本发布于1991年，正式的1.0版本发布于1994年。\n\n在2000年，Python 2.0版本发布，此后，Python一直持续发布2.x的版本。到了2008年，Python开发组决定发布Python 3.0版本，与2.x相比，该版本做了一些重要的改变，并且不支持向下兼容版本2.x。\n\n此后，虽然Python开发组仍然为Python 2进行了一段时间的维护和开发，但是最终于2020年1月1日正式宣布停止对Python 2的维护。因此，对于Python新人来说，建议直接学习Python 3。\n\n据说，该编程语言之所以被称为Python，是因为**Guido**是英国喜剧剧团的戏剧作品《巨蟒剧团之飞翔的马戏团》的粉丝。目前，Python仍然由研究所的核心团队维护和开发，并且**Guido**依然是主要负责人，并且已经被Python社区授予BDFL(Benevolent Dictator For Life)的称号。\n\n<!-- more -->\n\n## 为什么选择Python\n\n如果要编写一个程序，有很多的编程语言可以选择。那么，为什么要选择Python呢？\n\n### Python十分流行\n\n在过去的几年，Python正在变得越来越受欢迎。2018年，根据StackOverflow的开发者调查结果显示，Python的受欢迎度排名为第七位，并且是程序员们最想掌握的语言。许多国际大公司，如谷歌、脸书、Instagram等都在使用Python。详情请参考[8 World-Class Software Companies That Use Python](https://realpython.com/world-class-companies-using-python/)。\n\n根据Dice的研究，Python是最热门的技能之一，并且根据PYPL编程语言流行指数的统计，Python是排名第一的编程语言。\n\n由于Python的流行和广泛使用，Python程序员受到企业的追捧，并且可以获得十分可观的收入。\n\n### Python是一种解释性语言\n\n许多编程语言需要编译后才能运行，换句话说，在运行你编写的程序以前，源代码需要被转换成机器语言—一种计算机处理器能够理解的语言，然后程序才能运行。相对而言，用解释性编程语言写的代码，可以由解释器直接运行，不需要经过编译处理。因此，这样带来的好处就是加快了开发周期，提高了开发效率。\n\n但是，相对于需要编译的语言来说，解释性语言的运行速度比较慢。尤其对于一些对运算要求比较高的应用来说，例如图形处理和密集型运算，解释性语言会有一些局限性。\n\n尽管如此，但是在实际的应用中，对于大部分程序来说，毫秒级或者秒级差异的运行速度，用户并不会有太明显的感知区别。因此，使用解释性语言来编程，利大于弊。\n\n> 更多信息：关于解释性语言和编译性语言的区别，请阅读[维基百科](https://en.wikipedia.org/wiki/Interpreted_language)。\n\n### Python是免费的\n\nPython解释器是基于开源许可证发布，因此用户可以免费安装和使用，甚至可以用于开发商用产品。\n\nPython可以支持所有主流的操作系统，包括Unix/Linux, Windows, MacOS和移动设备。\n\n### Python是跨平台的\n\n因为Python是解释性的语言，不需要编译成机器语言，只要操作系统上安装了Python解释器，用Python编写的源代码就可以在该平台上直接运行。\n\n### Python很简单\n\n在编程语言中，可以通过关键字和保留字的数量衡量语言的复杂度，Python 3有33个关键字，Python 2是31个，而C++有62个， Java有53个，相对而言，Python的关键字数量比较少。\n\nPython的代码机构简洁、清晰，非常易懂和易学。\n\n### 但是，Python也不是那么简单\n\n虽然Python的语法很简单，但是Python支持所有高级语言的特性，包括复杂的动态数据类型，结构和功能性编程以及面向对象的编程。\n\n此外，大量的类库和函数为Python提供了强大的扩展功能，包括数据库操作和图形界面的编程。\n\n虽然Python语言本身被设计地很简单，但是功能却十分强大。\n\n## 最后\n\n本文主要简单介绍了一下Python这门编程语言，包括：\n\n- 简单的Python开发历史\n- 为什么要选择Python\n\n无论Python新手，还是编程老司机，Python都是一个很不错的选择。\n\n\n\n","slug":"python/Python介绍","published":1,"updated":"2023-03-03T01:33:03.360Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clexvkk8v00215i73gltuatho","content":"<blockquote>\n<p>注：本文翻译自<a href=\"https://realpython.com/python-introduction/\">Introduction to Python 3</a>。</p>\n</blockquote>\n<h1 id=\"Python介绍\"><a href=\"#Python介绍\" class=\"headerlink\" title=\"Python介绍\"></a>Python介绍</h1><p>Python是一种高级的解释性脚本语言，其作者<strong>Guido van Rossum</strong>于20世纪80年代（1980s）在荷兰国家数据和计算机科学研究所发明了该编程语言。Python的初始版本发布于1991年，正式的1.0版本发布于1994年。</p>\n<p>在2000年，Python 2.0版本发布，此后，Python一直持续发布2.x的版本。到了2008年，Python开发组决定发布Python 3.0版本，与2.x相比，该版本做了一些重要的改变，并且不支持向下兼容版本2.x。</p>\n<p>此后，虽然Python开发组仍然为Python 2进行了一段时间的维护和开发，但是最终于2020年1月1日正式宣布停止对Python 2的维护。因此，对于Python新人来说，建议直接学习Python 3。</p>\n<p>据说，该编程语言之所以被称为Python，是因为<strong>Guido</strong>是英国喜剧剧团的戏剧作品《巨蟒剧团之飞翔的马戏团》的粉丝。目前，Python仍然由研究所的核心团队维护和开发，并且<strong>Guido</strong>依然是主要负责人，并且已经被Python社区授予BDFL(Benevolent Dictator For Life)的称号。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"为什么选择Python\"><a href=\"#为什么选择Python\" class=\"headerlink\" title=\"为什么选择Python\"></a>为什么选择Python</h2><p>如果要编写一个程序，有很多的编程语言可以选择。那么，为什么要选择Python呢？</p>\n<h3 id=\"Python十分流行\"><a href=\"#Python十分流行\" class=\"headerlink\" title=\"Python十分流行\"></a>Python十分流行</h3><p>在过去的几年，Python正在变得越来越受欢迎。2018年，根据StackOverflow的开发者调查结果显示，Python的受欢迎度排名为第七位，并且是程序员们最想掌握的语言。许多国际大公司，如谷歌、脸书、Instagram等都在使用Python。详情请参考<a href=\"https://realpython.com/world-class-companies-using-python/\">8 World-Class Software Companies That Use Python</a>。</p>\n<p>根据Dice的研究，Python是最热门的技能之一，并且根据PYPL编程语言流行指数的统计，Python是排名第一的编程语言。</p>\n<p>由于Python的流行和广泛使用，Python程序员受到企业的追捧，并且可以获得十分可观的收入。</p>\n<h3 id=\"Python是一种解释性语言\"><a href=\"#Python是一种解释性语言\" class=\"headerlink\" title=\"Python是一种解释性语言\"></a>Python是一种解释性语言</h3><p>许多编程语言需要编译后才能运行，换句话说，在运行你编写的程序以前，源代码需要被转换成机器语言—一种计算机处理器能够理解的语言，然后程序才能运行。相对而言，用解释性编程语言写的代码，可以由解释器直接运行，不需要经过编译处理。因此，这样带来的好处就是加快了开发周期，提高了开发效率。</p>\n<p>但是，相对于需要编译的语言来说，解释性语言的运行速度比较慢。尤其对于一些对运算要求比较高的应用来说，例如图形处理和密集型运算，解释性语言会有一些局限性。</p>\n<p>尽管如此，但是在实际的应用中，对于大部分程序来说，毫秒级或者秒级差异的运行速度，用户并不会有太明显的感知区别。因此，使用解释性语言来编程，利大于弊。</p>\n<blockquote>\n<p>更多信息：关于解释性语言和编译性语言的区别，请阅读<a href=\"https://en.wikipedia.org/wiki/Interpreted_language\">维基百科</a>。</p>\n</blockquote>\n<h3 id=\"Python是免费的\"><a href=\"#Python是免费的\" class=\"headerlink\" title=\"Python是免费的\"></a>Python是免费的</h3><p>Python解释器是基于开源许可证发布，因此用户可以免费安装和使用，甚至可以用于开发商用产品。</p>\n<p>Python可以支持所有主流的操作系统，包括Unix&#x2F;Linux, Windows, MacOS和移动设备。</p>\n<h3 id=\"Python是跨平台的\"><a href=\"#Python是跨平台的\" class=\"headerlink\" title=\"Python是跨平台的\"></a>Python是跨平台的</h3><p>因为Python是解释性的语言，不需要编译成机器语言，只要操作系统上安装了Python解释器，用Python编写的源代码就可以在该平台上直接运行。</p>\n<h3 id=\"Python很简单\"><a href=\"#Python很简单\" class=\"headerlink\" title=\"Python很简单\"></a>Python很简单</h3><p>在编程语言中，可以通过关键字和保留字的数量衡量语言的复杂度，Python 3有33个关键字，Python 2是31个，而C++有62个， Java有53个，相对而言，Python的关键字数量比较少。</p>\n<p>Python的代码机构简洁、清晰，非常易懂和易学。</p>\n<h3 id=\"但是，Python也不是那么简单\"><a href=\"#但是，Python也不是那么简单\" class=\"headerlink\" title=\"但是，Python也不是那么简单\"></a>但是，Python也不是那么简单</h3><p>虽然Python的语法很简单，但是Python支持所有高级语言的特性，包括复杂的动态数据类型，结构和功能性编程以及面向对象的编程。</p>\n<p>此外，大量的类库和函数为Python提供了强大的扩展功能，包括数据库操作和图形界面的编程。</p>\n<p>虽然Python语言本身被设计地很简单，但是功能却十分强大。</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>本文主要简单介绍了一下Python这门编程语言，包括：</p>\n<ul>\n<li>简单的Python开发历史</li>\n<li>为什么要选择Python</li>\n</ul>\n<p>无论Python新手，还是编程老司机，Python都是一个很不错的选择。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>注：本文翻译自<a href=\"https://realpython.com/python-introduction/\">Introduction to Python 3</a>。</p>\n</blockquote>\n<h1 id=\"Python介绍\"><a href=\"#Python介绍\" class=\"headerlink\" title=\"Python介绍\"></a>Python介绍</h1><p>Python是一种高级的解释性脚本语言，其作者<strong>Guido van Rossum</strong>于20世纪80年代（1980s）在荷兰国家数据和计算机科学研究所发明了该编程语言。Python的初始版本发布于1991年，正式的1.0版本发布于1994年。</p>\n<p>在2000年，Python 2.0版本发布，此后，Python一直持续发布2.x的版本。到了2008年，Python开发组决定发布Python 3.0版本，与2.x相比，该版本做了一些重要的改变，并且不支持向下兼容版本2.x。</p>\n<p>此后，虽然Python开发组仍然为Python 2进行了一段时间的维护和开发，但是最终于2020年1月1日正式宣布停止对Python 2的维护。因此，对于Python新人来说，建议直接学习Python 3。</p>\n<p>据说，该编程语言之所以被称为Python，是因为<strong>Guido</strong>是英国喜剧剧团的戏剧作品《巨蟒剧团之飞翔的马戏团》的粉丝。目前，Python仍然由研究所的核心团队维护和开发，并且<strong>Guido</strong>依然是主要负责人，并且已经被Python社区授予BDFL(Benevolent Dictator For Life)的称号。</p>","more":"<h2 id=\"为什么选择Python\"><a href=\"#为什么选择Python\" class=\"headerlink\" title=\"为什么选择Python\"></a>为什么选择Python</h2><p>如果要编写一个程序，有很多的编程语言可以选择。那么，为什么要选择Python呢？</p>\n<h3 id=\"Python十分流行\"><a href=\"#Python十分流行\" class=\"headerlink\" title=\"Python十分流行\"></a>Python十分流行</h3><p>在过去的几年，Python正在变得越来越受欢迎。2018年，根据StackOverflow的开发者调查结果显示，Python的受欢迎度排名为第七位，并且是程序员们最想掌握的语言。许多国际大公司，如谷歌、脸书、Instagram等都在使用Python。详情请参考<a href=\"https://realpython.com/world-class-companies-using-python/\">8 World-Class Software Companies That Use Python</a>。</p>\n<p>根据Dice的研究，Python是最热门的技能之一，并且根据PYPL编程语言流行指数的统计，Python是排名第一的编程语言。</p>\n<p>由于Python的流行和广泛使用，Python程序员受到企业的追捧，并且可以获得十分可观的收入。</p>\n<h3 id=\"Python是一种解释性语言\"><a href=\"#Python是一种解释性语言\" class=\"headerlink\" title=\"Python是一种解释性语言\"></a>Python是一种解释性语言</h3><p>许多编程语言需要编译后才能运行，换句话说，在运行你编写的程序以前，源代码需要被转换成机器语言—一种计算机处理器能够理解的语言，然后程序才能运行。相对而言，用解释性编程语言写的代码，可以由解释器直接运行，不需要经过编译处理。因此，这样带来的好处就是加快了开发周期，提高了开发效率。</p>\n<p>但是，相对于需要编译的语言来说，解释性语言的运行速度比较慢。尤其对于一些对运算要求比较高的应用来说，例如图形处理和密集型运算，解释性语言会有一些局限性。</p>\n<p>尽管如此，但是在实际的应用中，对于大部分程序来说，毫秒级或者秒级差异的运行速度，用户并不会有太明显的感知区别。因此，使用解释性语言来编程，利大于弊。</p>\n<blockquote>\n<p>更多信息：关于解释性语言和编译性语言的区别，请阅读<a href=\"https://en.wikipedia.org/wiki/Interpreted_language\">维基百科</a>。</p>\n</blockquote>\n<h3 id=\"Python是免费的\"><a href=\"#Python是免费的\" class=\"headerlink\" title=\"Python是免费的\"></a>Python是免费的</h3><p>Python解释器是基于开源许可证发布，因此用户可以免费安装和使用，甚至可以用于开发商用产品。</p>\n<p>Python可以支持所有主流的操作系统，包括Unix&#x2F;Linux, Windows, MacOS和移动设备。</p>\n<h3 id=\"Python是跨平台的\"><a href=\"#Python是跨平台的\" class=\"headerlink\" title=\"Python是跨平台的\"></a>Python是跨平台的</h3><p>因为Python是解释性的语言，不需要编译成机器语言，只要操作系统上安装了Python解释器，用Python编写的源代码就可以在该平台上直接运行。</p>\n<h3 id=\"Python很简单\"><a href=\"#Python很简单\" class=\"headerlink\" title=\"Python很简单\"></a>Python很简单</h3><p>在编程语言中，可以通过关键字和保留字的数量衡量语言的复杂度，Python 3有33个关键字，Python 2是31个，而C++有62个， Java有53个，相对而言，Python的关键字数量比较少。</p>\n<p>Python的代码机构简洁、清晰，非常易懂和易学。</p>\n<h3 id=\"但是，Python也不是那么简单\"><a href=\"#但是，Python也不是那么简单\" class=\"headerlink\" title=\"但是，Python也不是那么简单\"></a>但是，Python也不是那么简单</h3><p>虽然Python的语法很简单，但是Python支持所有高级语言的特性，包括复杂的动态数据类型，结构和功能性编程以及面向对象的编程。</p>\n<p>此外，大量的类库和函数为Python提供了强大的扩展功能，包括数据库操作和图形界面的编程。</p>\n<p>虽然Python语言本身被设计地很简单，但是功能却十分强大。</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>本文主要简单介绍了一下Python这门编程语言，包括：</p>\n<ul>\n<li>简单的Python开发历史</li>\n<li>为什么要选择Python</li>\n</ul>\n<p>无论Python新手，还是编程老司机，Python都是一个很不错的选择。</p>"},{"title":"Python模块和包-介绍","date":"2022-02-03T10:30:08.000Z","img":"/medias/featureimages/27.jpg","_content":"\n> 注：本文翻译自[Python Modules and Packages – An Introduction](https://realpython.com/python-modules-packages/)。\n\n本文主要探讨Python编程语言中的两种便于**模块化编程(Modular programming)**的机制：**模块**和**包**。\n\n**模块化编程**是将大型的、复杂的编程工作，划分成独立、小块且便于管理的子任务或者模块，这些独立的模块可以像积木一样拼凑在一起，用于构建成一个应用。\n\n在开发大型的应用中，模块化编程有以下好处或特性：\n\n- **简易性：**与专注于全局相比，模块通常只需要专注在解决所有编程任务中的某一个局部问题。如果是负责编写一个模块，那么就只要专注于该模块所需要解决的问题，而不用去考虑模块以外的问题。这使得开发任务变得简单且不易出错。\n- **可维护性：**通常在设计模块的时候，需要为各个模块之间实施逻辑边界。如果在编写模块的时候，能够尽量减少模块之间的依赖性，就可以减少由于单个模块的改变，导致对其它模块影响的可能性。（你甚至可以在不了解整个应用架构的情况下，对单个模块更改而不影响应用。）这对于团队的所有程序员能够互相协作完成整个大型应用而言，变得至关重要。\n- **可重复性：**通过合理地定义模块中的接口，模块中定义的功能可以很方便地被应用中的其它部分重复利用。这减少了冗余的代码。\n- **范围：**模块通常定义了一个独立的**命名空间**(**namespace**)，这有助于避免在程序不同部分中包含的标识符冲突。\n\n<!-- more -->\n\n## Python模块概述\n\n在Python中，有三种定义模块的方式：\n\n1. 用Python语言编写的模块\n2. 用**C**语言编写的模块，这种模块通常在程序运行时被动态加载，例如re(**regular expression**)模块\n3. Python内置的模块，例如**itertools**模块\n\n对于以上三种定义模块的方式，都可以使用**import**声明来访问模块的内容。\n\n在本文中，我们主要侧重于用Python语言编写的模块。比较酷的是，用Python语言编写的模块十分容易编译。只需要创建一个文件，文件名以`.py`后缀命名，然后写入合法的Python代码，该文件就可以作为模块使用了。\n\n举例说明，假设你创建了一个名为mod.py的文件，并且包含以下代码：\n\n***mod.py***\n\n```python\ns = \"If Comrade Napoleon says it, it must be right.\"\na = [100, 200, 300]\n\ndef foo(arg):\n    print(f'arg = {arg}')\n\nclass Foo:\n    pass\n```\n\n在`mod.py`中，主要定义了以下对象：\n\n- `s` (a string)\n- `a` (a list)\n- `foo()` (a function)\n- `Foo` (a class)\n\n假设`mod.py`模块已经被放置在合适的位置，那么模块中包含的对象就可以通过`import`的方式访问模块的内容：\n\n```python\n>>> import mod\n>>> print(mod.s)\nIf Comrade Napoleon says it, it must be right.\n>>> mod.a\n[100, 200, 300]\n>>> mod.foo(['quux', 'corge', 'grault'])\narg = ['quux', 'corge', 'grault']\n>>> x = mod.Foo()\n>>> x\n<mod.Foo object at 0x03C181F0>\n```\n\n\n\n## 模块查找路径\n\n继续引用上面的例子，让我们来看一下，当运行`import`声明时，到底发生了什么：\n\n```python\nimport mod\n```\n\n当Python解释器运行以上的`import`声明时，它会在一系列的目录中查找`mod.py`模块。这些目录的位置主要包含以下来源：\n\n- 如果解释器是通过交互式的方式运行，就会在脚本所在的**当前目录**查找`mod.py`模块。\n- 如果设置了Python的环境变量，就会在`PYTHONPATH`环境变量定义的目录中查找模块。\n- Python安装过程中配置的与安装相关的目录\n\n模块的查找路径，可以通过`sys`模块获取：\n\n```python\n>>> import sys\n>>> sys.path\n['', 'C:\\\\Users\\\\john\\\\Documents\\\\Python\\\\doc', 'C:\\\\Python36\\\\Lib\\\\idlelib',\n'C:\\\\Python36\\\\python36.zip', 'C:\\\\Python36\\\\DLLs', 'C:\\\\Python36\\\\lib',\n'C:\\\\Python36', 'C:\\\\Python36\\\\lib\\\\site-packages']\n```\n\n> 注意：根据安装的Python版本和操作系统不同，sys.path的内容会略有不同。以上例子中输出的结果可能与你计算机上看到的结果稍有差异。\n\n因此，为了确保编写的模块能够被Python解释器找到，你需要做以下工作：\n\n- 如果是交互式运行Python，需要将`mod.py`放到脚本所在的目录下面\n- 打开Python解释器之前，修改`PYTHONPATH`环境变量，以包含`mod.py`模块所在的目录，或者也可以将`mod.py`模块复制到`PYTHONPATH`环境变量已经定义的目录下\n- 将`mod.py`模块放到安装相关的目录下，但是根据操作系统的不同，可能对这些目录只有读取的权限，而没有写入的权限。\n\n其实，还有另外一种方法：你可以将模块文件放在任何一个目录下面，然后在运行脚本的时候修改`sys.path`的内容，以包含放置模块的目录。\n\n例如，在下面的例子中，可以将`mod.py`放在目录`C:\\Users\\john`下面，然后运行以下指令：\n\n```python\n>>> sys.path.append(r'C:\\Users\\john')\n>>> sys.path\n['', 'C:\\\\Users\\\\john\\\\Documents\\\\Python\\\\doc', 'C:\\\\Python36\\\\Lib\\\\idlelib',\n'C:\\\\Python36\\\\python36.zip', 'C:\\\\Python36\\\\DLLs', 'C:\\\\Python36\\\\lib',\n'C:\\\\Python36', 'C:\\\\Python36\\\\lib\\\\site-packages', 'C:\\\\Users\\\\john']\n>>> import mod\n```\n\n模块被导入以后，你可以通过模块的属性`__file__`来查看模块文件的路径：\n\n```python\n>>> import mod\n>>> mod.__file__\n'C:\\\\Users\\\\john\\\\mod.py'\n\n>>> import re\n>>> re.__file__\n'C:\\\\Python36\\\\lib\\\\re.py'\n```\n\n`__file__`输出结果的目录部分，应该包含在`sys.path`的目录中。\n\n## import声明\n\n通过`import`声明可以导入模块的内容。`import`声明可以通过几种不同的方式来导入模块，以下一一介绍。\n\n### import \\<module_name\\>\n\n最简单的导入模块的方式如下：\n\n```python\nimport <module_name>\n```\n\n由于模块有独立的命名空间，也就是说，模块有自己的**私有符号表（private symbol table）**，所以，即使在脚本中导入了模块，仍然无法直接访问模块中的对象。因为，这些对象仍然是被定义在模块的私有符号表中，如果要访问这些模块中的对象，必须要通过**dot notation**的方式来访问。\n\n在通过`import`导入模块以后，`mod`已经在当前脚本的本地符号表中，因此，`mod`在当前脚本中可以直接访问：\n\n```python\n>>> import mod\n>>> mod\n<module 'mod' from 'C:\\\\Users\\\\john\\\\Documents\\\\Python\\\\doc\\\\mod.py'>\n```\n\n但是，模块中定义的对象：`s`和`foo`仍然在模块私有符号表中，因此在本地符号表中并没有被定义：\n\n```python\n>>> s\nNameError: name 's' is not defined\n>>> foo('quux')\nNameError: name 'foo' is not defined\n```\n\n为了能在当前脚本中访问模块中的对象，必须在对象前面加上前缀：**<module_name>.**\n\n```python\n>>> mod.s\n'If Comrade Napoleon says it, it must be right.'\n>>> mod.foo('quux')\narg = quux\n```\n\n`import`声明还可以一次导入多个模块，不同模块之间可以用逗号隔开：\n\n```python\nimport <module_name>[, <module_name> ...]\n```\n\n### from \\<module_name\\> import \\<name(s)\\>\n\n`import`声明还可以将模块的对象直接导入到当前脚本的本地符号表中：\n\n```python\nfrom <module_name> import <name(s)>\n```\n\n根据以上的导入方式，对象可以被直接访问，而不需要添加模块名前缀：\n\n```python\n>>> from mod import s, foo\n>>> s\n'If Comrade Napoleon says it, it must be right.'\n>>> foo('quux')\narg = quux\n\n>>> from mod import Foo\n>>> x = Foo()\n>>> x\n<mod.Foo object at 0x02E3AD50>\n```\n\n由于`import`直接把对象导入到当前脚本的本地符号表中，当前脚本如果已经存在相同名称的对象，将会被导入的对象所覆盖：\n\n```python\n>>> a = ['foo', 'bar', 'baz']\n>>> a\n['foo', 'bar', 'baz']\n\n>>> from mod import a\n>>> a\n[100, 200, 300]\n```\n\n通过以下方式，还可以将模块中的所有对象一次性导入到当前的脚本：\n\n```python\nfrom <module_name> import *\n```\n\n这种方式会将模块中的所有对象导入到本地符号表中，除了名称以下划线(__)开始的对象。\n\n```python\n>>> from mod import *\n>>> s\n'If Comrade Napoleon says it, it must be right.'\n>>> a\n[100, 200, 300]\n>>> foo\n<function foo at 0x03B449C0>\n>>> Foo\n<class 'mod.Foo'>\n```\n\n在大规模的代码开发场景中，并不推荐这种一次性导入所有对象的方式。因为，这种方式很容易导致冲突，会将已经定义的对象覆盖，应尽量避免。\n\n但是，如果在交互式解释器中运行，这种方式就非常方便，简单的输入，就能访问模块中的所有内容。\n\n### from \\<module_name\\> import \\<name\\> as \\<alt_name\\>\n\n如果导入的对象名称与本地对象名称冲突，可以用别名来代替模块中的对象名称：\n\n```python\nfrom <module_name> import <name> as <alt_name>[, <name> as <alt_name> …]\n```\n\n这样，就可以既避免冲突，也可以直接将模块对象导入到本地符号表中：\n\n```python\n>>> s = 'foo'\n>>> a = ['foo', 'bar', 'baz']\n\n>>> from mod import s as string, a as alist\n>>> s\n'foo'\n>>> string\n'If Comrade Napoleon says it, it must be right.'\n>>> a\n['foo', 'bar', 'baz']\n>>> alist\n[100, 200, 300]\n```\n\n###  import \\<module_name\\> as \\<alt_name\\>\n\n你也可以在导入模块的时候，指定用别名来代替模块的实际名称：\n\n```python\nimport <module_name> as <alt_name>\n```\n\n```python\n>>> import mod as my_module\n>>> my_module.a\n[100, 200, 300]\n>>> my_module.foo('qux')\narg = qux\n```\n\n另外，在函数的定义中，也可以导入模块的内容。但是，只有当函数被调用的时候，模块才会被导入。\n\n```python\n>>> def bar():\n...     from mod import foo\n...     foo('corge')\n...\n\n>>> bar()\narg = corge\n```\n\n需要注意的是，在Python 3中，不支持用`import *`的语法在函数中定义导入模块的声明：\n\n```python\n>>> def bar():\n...     from mod import *\n...\nSyntaxError: import * only allowed at module level\n```\n\n最后，可以使用` try statement with an except ImportError`语句来处理导入模块失败的情况：\n\n```python\n>>> try:\n...     # Non-existent module\n...     import baz\n... except ImportError:\n...     print('Module not found')\n...\n\nModule not found\n```\n\n```python\n>>> try:\n...     # Existing module, but non-existent object\n...     from mod import baz\n... except ImportError:\n...     print('Object not found in module')\n...\n\nObject not found in module\n```\n\n\n\n## 函数dir()\n\n在一个命名空间中，内置的`dir()`函数会返回一个列表，列表中包含的元素是已定义的名称。默认情况下，生成的列表成员按字母排序。\n\n```python\n>>> dir()\n['__annotations__', '__builtins__', '__doc__', '__loader__', '__name__',\n'__package__', '__spec__']\n\n>>> qux = [1, 2, 3, 4, 5]\n>>> dir()\n['__annotations__', '__builtins__', '__doc__', '__loader__', '__name__',\n'__package__', '__spec__', 'qux']\n\n>>> class Bar():\n...     pass\n...\n>>> x = Bar()\n>>> dir()\n['Bar', '__annotations__', '__builtins__', '__doc__', '__loader__', '__name__',\n'__package__', '__spec__', 'qux', 'x']\n```\n\n从以上例子中可以注意到，第一次调用函数`dir()`后，在命名空间中已经存在预先定义好的名称。等到新的名称定义（qux, Bar, x）以后，就会出现在虽有调用函数`dir()`输出的结果中。\n\n函数`dir()`有助于我们识别哪些对象通过`import`的方式导入到了当前的命名空间中：\n\n```python\n>>> dir()\n['__annotations__', '__builtins__', '__doc__', '__loader__', '__name__',\n'__package__', '__spec__']\n\n>>> import mod\n>>> dir()\n['__annotations__', '__builtins__', '__doc__', '__loader__', '__name__',\n'__package__', '__spec__', 'mod']\n>>> mod.s\n'If Comrade Napoleon says it, it must be right.'\n>>> mod.foo([1, 2, 3])\narg = [1, 2, 3]\n\n>>> from mod import a, Foo\n>>> dir()\n['Foo', '__annotations__', '__builtins__', '__doc__', '__loader__', '__name__',\n'__package__', '__spec__', 'a', 'mod']\n>>> a\n[100, 200, 300]\n>>> x = Foo()\n>>> x\n<mod.Foo object at 0x002EAD50>\n\n>>> from mod import s as string\n>>> dir()\n['Foo', '__annotations__', '__builtins__', '__doc__', '__loader__', '__name__',\n'__package__', '__spec__', 'a', 'mod', 'string', 'x']\n>>> string\n'If Comrade Napoleon says it, it must be right.'\n```\n\n当我们调用函数`dir()`的时候，将模块的名称作为参数，函数`dir()`就会列出模块中定义的所有名称：\n\n```python\n>>> import mod\n>>> dir(mod)\n['Foo', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__',\n'__name__', '__package__', '__spec__', 'a', 'foo', 's']\n```\n\n```python\n>>> dir()\n['__annotations__', '__builtins__', '__doc__', '__loader__', '__name__',\n'__package__', '__spec__']\n>>> from mod import *\n>>> dir()\n['Foo', '__annotations__', '__builtins__', '__doc__', '__loader__', '__name__',\n'__package__', '__spec__', 'a', 'foo', 's']\n```\n\n## 用脚本的方式运行模块\n\n在Python中，任何模块文件同时也是一个脚本，因此，可以直接当成脚本来运行。\n\n下面还是以`mod.py`脚本为例：\n\n***mod.py***\n\n```python\ns = \"If Comrade Napoleon says it, it must be right.\"\na = [100, 200, 300]\n\ndef foo(arg):\n    print(f'arg = {arg}')\n\nclass Foo:\n    pass\n```\n\n该模块如果以脚本来运行：\n\n```Windows Command Prompt\nC:\\Users\\john\\Documents>python mod.py\nC:\\Users\\john\\Documents>\n```\n\n从以上结果来看，没有出现任何错误。因此，说明该脚本运行成功，但是由于只定义了对象，并没有输出任何结果。\n\n下面修改一下脚本，让它输出一些内容：\n\n```python\ns = \"If Comrade Napoleon says it, it must be right.\"\na = [100, 200, 300]\n\ndef foo(arg):\n    print(f'arg = {arg}')\n\nclass Foo:\n    pass\n\nprint(s)\nprint(a)\nfoo('quux')\nx = Foo()\nprint(x)\n```\n\n现在，我们可以看到以下输出结果：\n\n```Windows Command Prompt\nC:\\Users\\john\\Documents>python mod.py\nIf Comrade Napoleon says it, it must be right.\n[100, 200, 300]\narg = quux\n<__main__.Foo object at 0x02F101D0>\n```\n\n如果将其作为模块导入，我们会发现导入模块的过程中，也会输出结果：\n\n```python\n>>> import mod\nIf Comrade Napoleon says it, it must be right.\n[100, 200, 300]\narg = quux\n<mod.Foo object at 0x0169AD50>\n```\n\n通常情况下，我们都希望导入模块的时候，不生成任何结果。只有当模块作为脚本运行的时候，才输出结果。\n\n当模块导入的时候，Python会将变量`__name__`设置为模块的名称，但是当作为脚本运行时，`__name__`会设置为字符串`__main__`。根据该特性，我们可以区分是导入模块还是运行脚本：\n\n```python\ns = \"If Comrade Napoleon says it, it must be right.\"\na = [100, 200, 300]\n\ndef foo(arg):\n    print(f'arg = {arg}')\n\nclass Foo:\n    pass\n\nif (__name__ == '__main__'):\n    print('Executing as standalone script')\n    print(s)\n    print(a)\n    foo('quux')\n    x = Foo()\n    print(x)\n```\n\n现在，如果运行脚本，会得到以下结果：\n\n```Windows Command Prompt\nC:\\Users\\john\\Documents>python mod.py\nExecuting as standalone script\nIf Comrade Napoleon says it, it must be right.\n[100, 200, 300]\narg = quux\n<__main__.Foo object at 0x03450690>\n```\n\n但是，如果当模块导入，就不会有任何结果输出：\n\n```python\n>>> import mod\n>>> mod.foo('grault')\narg = grault\n```\n\n通常在设计模块的时候，为了对模块做单元测试，也需要将模块当作脚本来直接运行。例如，假设创建了一个`fact.py`的模块，该模块包含factorial函数：\n\n```python\ndef fact(n):\n    return 1 if n == 1 else n * fact(n-1)\n\nif (__name__ == '__main__'):\n    import sys\n    if len(sys.argv) > 1:\n        print(fact(int(sys.argv[1])))\n```\n\n将该模块中的`fact()`函数导入：\n\n```python\n>>> from fact import fact\n>>> fact(6)\n720\n```\n\n另外，为了测试，也可以将该模块单独运行，在命令行中输入整型参数：\n\n```Windows Command Prompt\nC:\\Users\\john\\Documents>python fact.py 6\n720\n```\n\n\n\n## 重新加载模块\n\n出于效率的原因，在每一个解释器会话中，模块只会被加载一次。对于函数和类的定义来说，这没什么问题。但是，通常是为了初始化的缘故，模块还可能包含一些可执行的声明。需要注意的是，在当前的解释器会话中，当模块被导入后，这些声明只会被执行一次。即使再次导入模块，这些声明也不会被再次执行。\n\n下面以`mod.py`:\n\n***mod.py***\n\n```python\na = [100, 200, 300]\nprint('a =', a)\n```\n\n```python\n>>> import mod\na = [100, 200, 300]\n>>> import mod\n>>> import mod\n\n>>> mod.a\n[100, 200, 300]\n```\n\n以上例子中，在后续两次import过程中，`print()`声明都没有别执行。其实，声明`a = [100, 200, 300]`也没有再次执行，但是最后`mod.a`的结果显示，一旦赋值声明（assignment statement）执行后，就会将结果保留。\n\n如果更改了模块的内容，并且需要重新加载模块，可以重启解释器，或者使用模块`importlib`中的函数`reload()`:\n\n```python\n>>> import mod\na = [100, 200, 300]\n\n>>> import mod\n\n>>> import importlib\n>>> importlib.reload(mod)\na = [100, 200, 300]\n<module 'mod' from 'C:\\\\Users\\\\john\\\\Documents\\\\Python\\\\doc\\\\mod.py'>\n```\n\n\n\n## Python 包\n\n假设你开发了一个大型的应用，该应用包含许多模块。随着模块数量的增加，尤其是当这些模块有相似的名称和功能的时候，管理这些模块变得越来越困难。你可能会希望有一个更换的方法来分类和组织这些模块。\n\n**包**通过使用点表示法（**dot notation**），可以提供一种层次性结构的模块命名空间。通过这种方式，**模块**可以使得全局变量名之间避免冲突，**包**可以使得模块名之间避免冲突。\n\n创建一个**包**非常简单，只需要创建一个目录，并将模块放到该目录下面。该目录就是一个Python**包**。\n\n可以参考一下下面的例子：\n\n![](pkg1.9af1c7aea48f.png)\n\n以上例子中，目录名为`pkg`，该目录包含两个模块：`mod1.py`和`mod2.py`。模块的内容如下：\n\n***mod1.py***\n\n```python\ndef foo():\n    print('[mod1] foo()')\n\nclass Foo:\n    pass\n```\n\n***mod2.py***\n\n```python\ndef bar():\n    print('[mod2] bar()')\n\nclass Bar:\n    pass\n```\n\n根据这种结构，我们可以继续使用之前导入模块的方法，使用点表示法（**dot notation**）来导入包里面的模块：\n\n```python\nimport <module_name>[, <module_name> ...]\n```\n\n```python\n>>> import pkg.mod1, pkg.mod2\n>>> pkg.mod1.foo()\n[mod1] foo()\n>>> x = pkg.mod2.Bar()\n>>> x\n<pkg.mod2.Bar object at 0x033F7290>\n```\n\n```python\nfrom <module_name> import <name(s)>\n```\n\n```python\n>>> from pkg.mod1 import foo\n>>> foo()\n[mod1] foo()\n```\n\n```python\nfrom <module_name> import <name> as <alt_name>\n```\n\n```python\n>>> from pkg.mod2 import Bar as Qux\n>>> x = Qux()\n>>> x\n<pkg.mod2.Bar object at 0x036DFFD0>\n```\n\n另外，你也可以使用以下方式导入模块：\n\n```python\nfrom <package_name> import <modules_name>[, <module_name> ...]\nfrom <package_name> import <module_name> as <alt_name>\n```\n\n```python\n>>> from pkg import mod1\n>>> mod1.foo()\n[mod1] foo()\n\n>>> from pkg import mod2 as quux\n>>> quux.bar()\n[mod2] bar()\n```\n\n其实，从技术上来讲，你也可以直接导入包：\n\n```python\n>>> import pkg\n>>> pkg\n<module 'pkg' (namespace)>\n```\n\n但是，其实这没有什么用。虽然用这种方式导入了包，但实际上模块并没有被导入到本地命名空间。所以，在调用模块时就会报错。\n\n```python\n>>> pkg.mod1\nTraceback (most recent call last):\n  File \"<pyshell#34>\", line 1, in <module>\n    pkg.mod1\nAttributeError: module 'pkg' has no attribute 'mod1'\n>>> pkg.mod1.foo()\nTraceback (most recent call last):\n  File \"<pyshell#35>\", line 1, in <module>\n    pkg.mod1.foo()\nAttributeError: module 'pkg' has no attribute 'mod1'\n>>> pkg.mod2.Bar()\nTraceback (most recent call last):\n  File \"<pyshell#36>\", line 1, in <module>\n    pkg.mod2.Bar()\nAttributeError: module 'pkg' has no attribute 'mod2'\n```\n\n因此，你需要使用之前的方法导入模块或者模块所包含的对象。\n\n\n\n## 包初始化\n\n如果在包的目录下有文件名为`__init__.py`的文件，当包或者模块被导入的时候，该文件就会被调用执行。文件中包含的代码主要用来对包进行初始化。\n\n下面，可以参考一下以下`__init__.py`文件：\n\n```python\nprint(f'Invoking __init__.py for {__name__}')\nA = ['quux', 'corge', 'grault']\n```\n\n将文件`__init__.py`放到`pkg`目录下方：\n\n![](pkg1_133918.png)\n\n当包被导入的时候，全局列表A会被初始化：\n\n```python\n>>> import pkg\nInvoking __init__.py for pkg\n>>> pkg.A\n['quux', 'corge', 'grault']\n```\n\n在包中的模块也可以访问全局列表A：\n\n***mode1.py***\n\n```python\ndef foo():\n    from pkg import A\n    print('[mod1] foo() / A = ', A)\n\nclass Foo:\n    pass\n```\n\n```python\n>>> from pkg import mod1\nInvoking __init__.py for pkg\n>>> mod1.foo()\n[mod1] foo() / A =  ['quux', 'corge', 'grault']\n```\n\n文件`__init__.py`还可以用来导入包中的模块。例如，之前如果只导入包`import pkg`，实际上模块并没有被导入。但是，如果在文件`__init__.py`中添加以下语句：\n\n```python\nprint(f'Invoking __init__.py for {__name__}')\nimport pkg.mod1, pkg.mod2\n```\n\n当运行`import pkg`的时候，模块mod1和mod2就会自动被导入：\n\n```python\n>>> import pkg\nInvoking __init__.py for pkg\n>>> pkg.mod1.foo()\n[mod1] foo()\n>>> pkg.mod2.bar()\n[mod2] bar()\n```\n\n>\n>\n>注意：大部分的Pyton文档中都声明，如果要创建包，就必须在包目录下创建文件`__init__.py`，即使该文件不包含任何内容，也必须出现在包所在目录下。\n>\n>但是，从Python 3.3开始， [Implicit Namespace Packages](https://www.python.org/dev/peps/pep-0420)允许即使没有文件`__init__.py`文件，仍然可以创建包。当然，如果要初始化包，仍然可以使用`__init__.py`文件。\n\n\n\n## Importing * From a Package\n\n为了便于接下来的讨论，在之前定义的包中增加一些额外的模块：\n\n![](pkg3.d2160908ae77.png)\n\n现在，包里面有4个模块，具体分别如下：\n\n***mod1.py***\n\n```python\ndef foo():\n    print('[mod1] foo()')\n\nclass Foo:\n    pass\n```\n\n***mod2.py***\n\n```python\ndef bar():\n    print('[mod2] bar()')\n\nclass Bar:\n    pass\n```\n\n***mod3.py***\n\n```python\ndef baz():\n    print('[mod3] baz()')\n\nclass Baz:\n    pass\n```\n\n***mod4.py***\n\n```python\ndef qux():\n    print('[mod4] qux()')\n\nclass Qux:\n    pass\n```\n\n根据之前的例子，如果用`from <module name > import *`的方式导入模块，除了以下划线命名的对象以外，可以将模块包含的所有对象导入到本地符号表：\n\n```python\n>>> dir()\n['__annotations__', '__builtins__', '__doc__', '__loader__', '__name__',\n'__package__', '__spec__']\n\n>>> from pkg.mod3 import *\n\n>>> dir()\n['Baz', '__annotations__', '__builtins__', '__doc__', '__loader__', '__name__',\n'__package__', '__spec__', 'baz']\n>>> baz()\n[mod3] baz()\n>>> Baz\n<class 'pkg.mod3.Baz'>\n```\n\n同样，我们也可以用相似的语法导入包：\n\n```python\nfrom <package_name> import *\n```\n\n```python\n>>> dir()\n['__annotations__', '__builtins__', '__doc__', '__loader__', '__name__',\n'__package__', '__spec__']\n\n>>> from pkg import *\n>>> dir()\n['__annotations__', '__builtins__', '__doc__', '__loader__', '__name__',\n'__package__', '__spec__']\n```\n\n但是，与导入模块不同，用`from <package_name> import *`导入包后，结果却显示没有导入任何内容。\n\n其实，Python遵循了一种规范：如果`__init__.py`的代码中有一个名为`__all__`的列表，该列表中定义的模块名，在用`from <package_name> import *`导入时，就会被自动导入。\n\n在当前的例子中，假设你在`pkg`包中创建了一个`__init__.py`的文件，内容如下：\n\n***pkg/__init__.py***\n\n```python\n__all__ = [\n        'mod1',\n        'mod2',\n        'mod3',\n        'mod4'\n        ]\n```\n\n现在用`from pkg import *`导入包后，就可以同时导入4个模块：\n\n```python\n>>> dir()\n['__annotations__', '__builtins__', '__doc__', '__loader__', '__name__',\n'__package__', '__spec__']\n\n>>> from pkg import *\n>>> dir()\n['__annotations__', '__builtins__', '__doc__', '__loader__', '__name__',\n'__package__', '__spec__', 'mod1', 'mod2', 'mod3', 'mod4']\n>>> mod2.bar()\n[mod2] bar()\n>>> mod4.Qux\n<class 'pkg.mod4.Qux'>\n```\n\n通过`__all__`这种方式，我们就可以控制哪些模块可以被`import *`这种方式自动导入。\n\n其实，`__all__`也可以用相同的方式作用于模块：控制模块中的哪些对象可以被`import *`的方式导入。\n\n下面以`mod1.py`为例：\n\n***pkg/mod1.py***\n\n```python\n__all__ = ['foo']\n\ndef foo():\n    print('[mod1] foo()')\n\nclass Foo:\n    pass\n```\n\n根据以上模块中`__all__`的定义，通过`import *`只会导入`foo`对象：\n\n```python\n>>> dir()\n['__annotations__', '__builtins__', '__doc__', '__loader__', '__name__',\n'__package__', '__spec__']\n\n>>> from pkg.mod1 import *\n>>> dir()\n['__annotations__', '__builtins__', '__doc__', '__loader__', '__name__',\n'__package__', '__spec__', 'foo']\n\n>>> foo()\n[mod1] foo()\n>>> Foo\nTraceback (most recent call last):\n  File \"<pyshell#37>\", line 1, in <module>\n    Foo\nNameError: name 'Foo' is not defined\n```\n\n`foo()`被导入到本地命名空间，但是类`Foo`并没有被导入，因为`Foo`并没有被定义在`__all__`中。\n\n总结一下，当使用`import *`语句的时候，`__all__`可以用来定义**包**和**模块**导入的内容。但是，具体的使用上有一些区别：\n\n- 对包而言，当`__all__`没有定义的时候，`import *`不会导入任何内容。\n- 对模块而言，当`__all__`没有定义的时候，`import *`会导入模块中的所有对象（除了以下划线命名的对象）。\n\n## 子包（Subpackages）\n\n包还可以包含子包，对于子包的层级也没有任何限制。例如，对之前的例子做一些修改：\n\n![](pkg4_100818.png)\n\n之前定义的四个模块：`mod1.py`, `mod2.py`, `mod3.py`, `mod4.py`，分别被放到两个子包下面：`sub_pkg1`和`sub_pkg2`。\n\n仍然和之前一样，可以用点表达式的方式导入子包下面的模块：\n\n```python\n>>> import pkg.sub_pkg1.mod1\n>>> pkg.sub_pkg1.mod1.foo()\n[mod1] foo()\n\n>>> from pkg.sub_pkg1 import mod2\n>>> mod2.bar()\n[mod2] bar()\n\n>>> from pkg.sub_pkg2.mod3 import baz\n>>> baz()\n[mod3] baz()\n\n>>> from pkg.sub_pkg2.mod4 import qux as grault\n>>> grault()\n[mod4] qux()\n```\n\n另外，在子包中的模块，还可以引用同级子包中的模块。\n\n例如，假设你想要在模块`mod3`中导入并允许函数模块`mod1`中的函数`foo()`，你可以使用**绝对导入**：\n\n***pkg/sub__pkg2/mod3.py***\n\n```python\ndef baz():\n    print('[mod3] baz()')\n\nclass Baz:\n    pass\n\nfrom pkg.sub_pkg1.mod1 import foo\nfoo()\n```\n\n```python\n>>> from pkg.sub_pkg2 import mod3\n[mod1] foo()\n>>> mod3.foo()\n[mod1] foo()\n```\n\n或者，你还可以使用**相对导入**，在相对导入中，`..`代表的是上一级包。\n\n- `..`代表的是上级包`pkg`\n- `..sub_pkg1`代表的是子包`sub_pkg1`的上一级包\n\n***pkg/sub__pkg2/mod3.py***\n\n```python\ndef baz():\n    print('[mod3] baz()')\n\nclass Baz:\n    pass\n\nfrom .. import sub_pkg1\nprint(sub_pkg1)\n\nfrom ..sub_pkg1.mod1 import foo\nfoo()\n```\n\n```python\n>>> from pkg.sub_pkg2 import mod3\n<module 'pkg.sub_pkg1' (namespace)>\n[mod1] foo()\n```\n\n## 总结\n\n在本指南中，你可以学到以下内容：\n\n- 如何创建Python模块\n- Python解释器如何查找模块\n- 通过`import`语句，如何访问模块中定义的对象\n- 如何将模块作为独立脚本来运行\n- 如何用包和子包的方式组织模块\n- 如何初始化包\n\n关于更多模块和包的内容，可以参考**Python.org**网站的文档：\n\n- [The `import` system](https://docs.python.org/3/reference/import.html)\n- [The Python tutorial: Modules](https://docs.python.org/3/tutorial/modules.html)\n","source":"_posts/python/Python模块和包-介绍.md","raw":"---\ntitle: Python模块和包-介绍\ndate: 2022-02-03 18:30:08\ntags: \n - python-basic\ncategories: \n - Python\nimg: /medias/featureimages/27.jpg\n---\n\n> 注：本文翻译自[Python Modules and Packages – An Introduction](https://realpython.com/python-modules-packages/)。\n\n本文主要探讨Python编程语言中的两种便于**模块化编程(Modular programming)**的机制：**模块**和**包**。\n\n**模块化编程**是将大型的、复杂的编程工作，划分成独立、小块且便于管理的子任务或者模块，这些独立的模块可以像积木一样拼凑在一起，用于构建成一个应用。\n\n在开发大型的应用中，模块化编程有以下好处或特性：\n\n- **简易性：**与专注于全局相比，模块通常只需要专注在解决所有编程任务中的某一个局部问题。如果是负责编写一个模块，那么就只要专注于该模块所需要解决的问题，而不用去考虑模块以外的问题。这使得开发任务变得简单且不易出错。\n- **可维护性：**通常在设计模块的时候，需要为各个模块之间实施逻辑边界。如果在编写模块的时候，能够尽量减少模块之间的依赖性，就可以减少由于单个模块的改变，导致对其它模块影响的可能性。（你甚至可以在不了解整个应用架构的情况下，对单个模块更改而不影响应用。）这对于团队的所有程序员能够互相协作完成整个大型应用而言，变得至关重要。\n- **可重复性：**通过合理地定义模块中的接口，模块中定义的功能可以很方便地被应用中的其它部分重复利用。这减少了冗余的代码。\n- **范围：**模块通常定义了一个独立的**命名空间**(**namespace**)，这有助于避免在程序不同部分中包含的标识符冲突。\n\n<!-- more -->\n\n## Python模块概述\n\n在Python中，有三种定义模块的方式：\n\n1. 用Python语言编写的模块\n2. 用**C**语言编写的模块，这种模块通常在程序运行时被动态加载，例如re(**regular expression**)模块\n3. Python内置的模块，例如**itertools**模块\n\n对于以上三种定义模块的方式，都可以使用**import**声明来访问模块的内容。\n\n在本文中，我们主要侧重于用Python语言编写的模块。比较酷的是，用Python语言编写的模块十分容易编译。只需要创建一个文件，文件名以`.py`后缀命名，然后写入合法的Python代码，该文件就可以作为模块使用了。\n\n举例说明，假设你创建了一个名为mod.py的文件，并且包含以下代码：\n\n***mod.py***\n\n```python\ns = \"If Comrade Napoleon says it, it must be right.\"\na = [100, 200, 300]\n\ndef foo(arg):\n    print(f'arg = {arg}')\n\nclass Foo:\n    pass\n```\n\n在`mod.py`中，主要定义了以下对象：\n\n- `s` (a string)\n- `a` (a list)\n- `foo()` (a function)\n- `Foo` (a class)\n\n假设`mod.py`模块已经被放置在合适的位置，那么模块中包含的对象就可以通过`import`的方式访问模块的内容：\n\n```python\n>>> import mod\n>>> print(mod.s)\nIf Comrade Napoleon says it, it must be right.\n>>> mod.a\n[100, 200, 300]\n>>> mod.foo(['quux', 'corge', 'grault'])\narg = ['quux', 'corge', 'grault']\n>>> x = mod.Foo()\n>>> x\n<mod.Foo object at 0x03C181F0>\n```\n\n\n\n## 模块查找路径\n\n继续引用上面的例子，让我们来看一下，当运行`import`声明时，到底发生了什么：\n\n```python\nimport mod\n```\n\n当Python解释器运行以上的`import`声明时，它会在一系列的目录中查找`mod.py`模块。这些目录的位置主要包含以下来源：\n\n- 如果解释器是通过交互式的方式运行，就会在脚本所在的**当前目录**查找`mod.py`模块。\n- 如果设置了Python的环境变量，就会在`PYTHONPATH`环境变量定义的目录中查找模块。\n- Python安装过程中配置的与安装相关的目录\n\n模块的查找路径，可以通过`sys`模块获取：\n\n```python\n>>> import sys\n>>> sys.path\n['', 'C:\\\\Users\\\\john\\\\Documents\\\\Python\\\\doc', 'C:\\\\Python36\\\\Lib\\\\idlelib',\n'C:\\\\Python36\\\\python36.zip', 'C:\\\\Python36\\\\DLLs', 'C:\\\\Python36\\\\lib',\n'C:\\\\Python36', 'C:\\\\Python36\\\\lib\\\\site-packages']\n```\n\n> 注意：根据安装的Python版本和操作系统不同，sys.path的内容会略有不同。以上例子中输出的结果可能与你计算机上看到的结果稍有差异。\n\n因此，为了确保编写的模块能够被Python解释器找到，你需要做以下工作：\n\n- 如果是交互式运行Python，需要将`mod.py`放到脚本所在的目录下面\n- 打开Python解释器之前，修改`PYTHONPATH`环境变量，以包含`mod.py`模块所在的目录，或者也可以将`mod.py`模块复制到`PYTHONPATH`环境变量已经定义的目录下\n- 将`mod.py`模块放到安装相关的目录下，但是根据操作系统的不同，可能对这些目录只有读取的权限，而没有写入的权限。\n\n其实，还有另外一种方法：你可以将模块文件放在任何一个目录下面，然后在运行脚本的时候修改`sys.path`的内容，以包含放置模块的目录。\n\n例如，在下面的例子中，可以将`mod.py`放在目录`C:\\Users\\john`下面，然后运行以下指令：\n\n```python\n>>> sys.path.append(r'C:\\Users\\john')\n>>> sys.path\n['', 'C:\\\\Users\\\\john\\\\Documents\\\\Python\\\\doc', 'C:\\\\Python36\\\\Lib\\\\idlelib',\n'C:\\\\Python36\\\\python36.zip', 'C:\\\\Python36\\\\DLLs', 'C:\\\\Python36\\\\lib',\n'C:\\\\Python36', 'C:\\\\Python36\\\\lib\\\\site-packages', 'C:\\\\Users\\\\john']\n>>> import mod\n```\n\n模块被导入以后，你可以通过模块的属性`__file__`来查看模块文件的路径：\n\n```python\n>>> import mod\n>>> mod.__file__\n'C:\\\\Users\\\\john\\\\mod.py'\n\n>>> import re\n>>> re.__file__\n'C:\\\\Python36\\\\lib\\\\re.py'\n```\n\n`__file__`输出结果的目录部分，应该包含在`sys.path`的目录中。\n\n## import声明\n\n通过`import`声明可以导入模块的内容。`import`声明可以通过几种不同的方式来导入模块，以下一一介绍。\n\n### import \\<module_name\\>\n\n最简单的导入模块的方式如下：\n\n```python\nimport <module_name>\n```\n\n由于模块有独立的命名空间，也就是说，模块有自己的**私有符号表（private symbol table）**，所以，即使在脚本中导入了模块，仍然无法直接访问模块中的对象。因为，这些对象仍然是被定义在模块的私有符号表中，如果要访问这些模块中的对象，必须要通过**dot notation**的方式来访问。\n\n在通过`import`导入模块以后，`mod`已经在当前脚本的本地符号表中，因此，`mod`在当前脚本中可以直接访问：\n\n```python\n>>> import mod\n>>> mod\n<module 'mod' from 'C:\\\\Users\\\\john\\\\Documents\\\\Python\\\\doc\\\\mod.py'>\n```\n\n但是，模块中定义的对象：`s`和`foo`仍然在模块私有符号表中，因此在本地符号表中并没有被定义：\n\n```python\n>>> s\nNameError: name 's' is not defined\n>>> foo('quux')\nNameError: name 'foo' is not defined\n```\n\n为了能在当前脚本中访问模块中的对象，必须在对象前面加上前缀：**<module_name>.**\n\n```python\n>>> mod.s\n'If Comrade Napoleon says it, it must be right.'\n>>> mod.foo('quux')\narg = quux\n```\n\n`import`声明还可以一次导入多个模块，不同模块之间可以用逗号隔开：\n\n```python\nimport <module_name>[, <module_name> ...]\n```\n\n### from \\<module_name\\> import \\<name(s)\\>\n\n`import`声明还可以将模块的对象直接导入到当前脚本的本地符号表中：\n\n```python\nfrom <module_name> import <name(s)>\n```\n\n根据以上的导入方式，对象可以被直接访问，而不需要添加模块名前缀：\n\n```python\n>>> from mod import s, foo\n>>> s\n'If Comrade Napoleon says it, it must be right.'\n>>> foo('quux')\narg = quux\n\n>>> from mod import Foo\n>>> x = Foo()\n>>> x\n<mod.Foo object at 0x02E3AD50>\n```\n\n由于`import`直接把对象导入到当前脚本的本地符号表中，当前脚本如果已经存在相同名称的对象，将会被导入的对象所覆盖：\n\n```python\n>>> a = ['foo', 'bar', 'baz']\n>>> a\n['foo', 'bar', 'baz']\n\n>>> from mod import a\n>>> a\n[100, 200, 300]\n```\n\n通过以下方式，还可以将模块中的所有对象一次性导入到当前的脚本：\n\n```python\nfrom <module_name> import *\n```\n\n这种方式会将模块中的所有对象导入到本地符号表中，除了名称以下划线(__)开始的对象。\n\n```python\n>>> from mod import *\n>>> s\n'If Comrade Napoleon says it, it must be right.'\n>>> a\n[100, 200, 300]\n>>> foo\n<function foo at 0x03B449C0>\n>>> Foo\n<class 'mod.Foo'>\n```\n\n在大规模的代码开发场景中，并不推荐这种一次性导入所有对象的方式。因为，这种方式很容易导致冲突，会将已经定义的对象覆盖，应尽量避免。\n\n但是，如果在交互式解释器中运行，这种方式就非常方便，简单的输入，就能访问模块中的所有内容。\n\n### from \\<module_name\\> import \\<name\\> as \\<alt_name\\>\n\n如果导入的对象名称与本地对象名称冲突，可以用别名来代替模块中的对象名称：\n\n```python\nfrom <module_name> import <name> as <alt_name>[, <name> as <alt_name> …]\n```\n\n这样，就可以既避免冲突，也可以直接将模块对象导入到本地符号表中：\n\n```python\n>>> s = 'foo'\n>>> a = ['foo', 'bar', 'baz']\n\n>>> from mod import s as string, a as alist\n>>> s\n'foo'\n>>> string\n'If Comrade Napoleon says it, it must be right.'\n>>> a\n['foo', 'bar', 'baz']\n>>> alist\n[100, 200, 300]\n```\n\n###  import \\<module_name\\> as \\<alt_name\\>\n\n你也可以在导入模块的时候，指定用别名来代替模块的实际名称：\n\n```python\nimport <module_name> as <alt_name>\n```\n\n```python\n>>> import mod as my_module\n>>> my_module.a\n[100, 200, 300]\n>>> my_module.foo('qux')\narg = qux\n```\n\n另外，在函数的定义中，也可以导入模块的内容。但是，只有当函数被调用的时候，模块才会被导入。\n\n```python\n>>> def bar():\n...     from mod import foo\n...     foo('corge')\n...\n\n>>> bar()\narg = corge\n```\n\n需要注意的是，在Python 3中，不支持用`import *`的语法在函数中定义导入模块的声明：\n\n```python\n>>> def bar():\n...     from mod import *\n...\nSyntaxError: import * only allowed at module level\n```\n\n最后，可以使用` try statement with an except ImportError`语句来处理导入模块失败的情况：\n\n```python\n>>> try:\n...     # Non-existent module\n...     import baz\n... except ImportError:\n...     print('Module not found')\n...\n\nModule not found\n```\n\n```python\n>>> try:\n...     # Existing module, but non-existent object\n...     from mod import baz\n... except ImportError:\n...     print('Object not found in module')\n...\n\nObject not found in module\n```\n\n\n\n## 函数dir()\n\n在一个命名空间中，内置的`dir()`函数会返回一个列表，列表中包含的元素是已定义的名称。默认情况下，生成的列表成员按字母排序。\n\n```python\n>>> dir()\n['__annotations__', '__builtins__', '__doc__', '__loader__', '__name__',\n'__package__', '__spec__']\n\n>>> qux = [1, 2, 3, 4, 5]\n>>> dir()\n['__annotations__', '__builtins__', '__doc__', '__loader__', '__name__',\n'__package__', '__spec__', 'qux']\n\n>>> class Bar():\n...     pass\n...\n>>> x = Bar()\n>>> dir()\n['Bar', '__annotations__', '__builtins__', '__doc__', '__loader__', '__name__',\n'__package__', '__spec__', 'qux', 'x']\n```\n\n从以上例子中可以注意到，第一次调用函数`dir()`后，在命名空间中已经存在预先定义好的名称。等到新的名称定义（qux, Bar, x）以后，就会出现在虽有调用函数`dir()`输出的结果中。\n\n函数`dir()`有助于我们识别哪些对象通过`import`的方式导入到了当前的命名空间中：\n\n```python\n>>> dir()\n['__annotations__', '__builtins__', '__doc__', '__loader__', '__name__',\n'__package__', '__spec__']\n\n>>> import mod\n>>> dir()\n['__annotations__', '__builtins__', '__doc__', '__loader__', '__name__',\n'__package__', '__spec__', 'mod']\n>>> mod.s\n'If Comrade Napoleon says it, it must be right.'\n>>> mod.foo([1, 2, 3])\narg = [1, 2, 3]\n\n>>> from mod import a, Foo\n>>> dir()\n['Foo', '__annotations__', '__builtins__', '__doc__', '__loader__', '__name__',\n'__package__', '__spec__', 'a', 'mod']\n>>> a\n[100, 200, 300]\n>>> x = Foo()\n>>> x\n<mod.Foo object at 0x002EAD50>\n\n>>> from mod import s as string\n>>> dir()\n['Foo', '__annotations__', '__builtins__', '__doc__', '__loader__', '__name__',\n'__package__', '__spec__', 'a', 'mod', 'string', 'x']\n>>> string\n'If Comrade Napoleon says it, it must be right.'\n```\n\n当我们调用函数`dir()`的时候，将模块的名称作为参数，函数`dir()`就会列出模块中定义的所有名称：\n\n```python\n>>> import mod\n>>> dir(mod)\n['Foo', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__',\n'__name__', '__package__', '__spec__', 'a', 'foo', 's']\n```\n\n```python\n>>> dir()\n['__annotations__', '__builtins__', '__doc__', '__loader__', '__name__',\n'__package__', '__spec__']\n>>> from mod import *\n>>> dir()\n['Foo', '__annotations__', '__builtins__', '__doc__', '__loader__', '__name__',\n'__package__', '__spec__', 'a', 'foo', 's']\n```\n\n## 用脚本的方式运行模块\n\n在Python中，任何模块文件同时也是一个脚本，因此，可以直接当成脚本来运行。\n\n下面还是以`mod.py`脚本为例：\n\n***mod.py***\n\n```python\ns = \"If Comrade Napoleon says it, it must be right.\"\na = [100, 200, 300]\n\ndef foo(arg):\n    print(f'arg = {arg}')\n\nclass Foo:\n    pass\n```\n\n该模块如果以脚本来运行：\n\n```Windows Command Prompt\nC:\\Users\\john\\Documents>python mod.py\nC:\\Users\\john\\Documents>\n```\n\n从以上结果来看，没有出现任何错误。因此，说明该脚本运行成功，但是由于只定义了对象，并没有输出任何结果。\n\n下面修改一下脚本，让它输出一些内容：\n\n```python\ns = \"If Comrade Napoleon says it, it must be right.\"\na = [100, 200, 300]\n\ndef foo(arg):\n    print(f'arg = {arg}')\n\nclass Foo:\n    pass\n\nprint(s)\nprint(a)\nfoo('quux')\nx = Foo()\nprint(x)\n```\n\n现在，我们可以看到以下输出结果：\n\n```Windows Command Prompt\nC:\\Users\\john\\Documents>python mod.py\nIf Comrade Napoleon says it, it must be right.\n[100, 200, 300]\narg = quux\n<__main__.Foo object at 0x02F101D0>\n```\n\n如果将其作为模块导入，我们会发现导入模块的过程中，也会输出结果：\n\n```python\n>>> import mod\nIf Comrade Napoleon says it, it must be right.\n[100, 200, 300]\narg = quux\n<mod.Foo object at 0x0169AD50>\n```\n\n通常情况下，我们都希望导入模块的时候，不生成任何结果。只有当模块作为脚本运行的时候，才输出结果。\n\n当模块导入的时候，Python会将变量`__name__`设置为模块的名称，但是当作为脚本运行时，`__name__`会设置为字符串`__main__`。根据该特性，我们可以区分是导入模块还是运行脚本：\n\n```python\ns = \"If Comrade Napoleon says it, it must be right.\"\na = [100, 200, 300]\n\ndef foo(arg):\n    print(f'arg = {arg}')\n\nclass Foo:\n    pass\n\nif (__name__ == '__main__'):\n    print('Executing as standalone script')\n    print(s)\n    print(a)\n    foo('quux')\n    x = Foo()\n    print(x)\n```\n\n现在，如果运行脚本，会得到以下结果：\n\n```Windows Command Prompt\nC:\\Users\\john\\Documents>python mod.py\nExecuting as standalone script\nIf Comrade Napoleon says it, it must be right.\n[100, 200, 300]\narg = quux\n<__main__.Foo object at 0x03450690>\n```\n\n但是，如果当模块导入，就不会有任何结果输出：\n\n```python\n>>> import mod\n>>> mod.foo('grault')\narg = grault\n```\n\n通常在设计模块的时候，为了对模块做单元测试，也需要将模块当作脚本来直接运行。例如，假设创建了一个`fact.py`的模块，该模块包含factorial函数：\n\n```python\ndef fact(n):\n    return 1 if n == 1 else n * fact(n-1)\n\nif (__name__ == '__main__'):\n    import sys\n    if len(sys.argv) > 1:\n        print(fact(int(sys.argv[1])))\n```\n\n将该模块中的`fact()`函数导入：\n\n```python\n>>> from fact import fact\n>>> fact(6)\n720\n```\n\n另外，为了测试，也可以将该模块单独运行，在命令行中输入整型参数：\n\n```Windows Command Prompt\nC:\\Users\\john\\Documents>python fact.py 6\n720\n```\n\n\n\n## 重新加载模块\n\n出于效率的原因，在每一个解释器会话中，模块只会被加载一次。对于函数和类的定义来说，这没什么问题。但是，通常是为了初始化的缘故，模块还可能包含一些可执行的声明。需要注意的是，在当前的解释器会话中，当模块被导入后，这些声明只会被执行一次。即使再次导入模块，这些声明也不会被再次执行。\n\n下面以`mod.py`:\n\n***mod.py***\n\n```python\na = [100, 200, 300]\nprint('a =', a)\n```\n\n```python\n>>> import mod\na = [100, 200, 300]\n>>> import mod\n>>> import mod\n\n>>> mod.a\n[100, 200, 300]\n```\n\n以上例子中，在后续两次import过程中，`print()`声明都没有别执行。其实，声明`a = [100, 200, 300]`也没有再次执行，但是最后`mod.a`的结果显示，一旦赋值声明（assignment statement）执行后，就会将结果保留。\n\n如果更改了模块的内容，并且需要重新加载模块，可以重启解释器，或者使用模块`importlib`中的函数`reload()`:\n\n```python\n>>> import mod\na = [100, 200, 300]\n\n>>> import mod\n\n>>> import importlib\n>>> importlib.reload(mod)\na = [100, 200, 300]\n<module 'mod' from 'C:\\\\Users\\\\john\\\\Documents\\\\Python\\\\doc\\\\mod.py'>\n```\n\n\n\n## Python 包\n\n假设你开发了一个大型的应用，该应用包含许多模块。随着模块数量的增加，尤其是当这些模块有相似的名称和功能的时候，管理这些模块变得越来越困难。你可能会希望有一个更换的方法来分类和组织这些模块。\n\n**包**通过使用点表示法（**dot notation**），可以提供一种层次性结构的模块命名空间。通过这种方式，**模块**可以使得全局变量名之间避免冲突，**包**可以使得模块名之间避免冲突。\n\n创建一个**包**非常简单，只需要创建一个目录，并将模块放到该目录下面。该目录就是一个Python**包**。\n\n可以参考一下下面的例子：\n\n![](pkg1.9af1c7aea48f.png)\n\n以上例子中，目录名为`pkg`，该目录包含两个模块：`mod1.py`和`mod2.py`。模块的内容如下：\n\n***mod1.py***\n\n```python\ndef foo():\n    print('[mod1] foo()')\n\nclass Foo:\n    pass\n```\n\n***mod2.py***\n\n```python\ndef bar():\n    print('[mod2] bar()')\n\nclass Bar:\n    pass\n```\n\n根据这种结构，我们可以继续使用之前导入模块的方法，使用点表示法（**dot notation**）来导入包里面的模块：\n\n```python\nimport <module_name>[, <module_name> ...]\n```\n\n```python\n>>> import pkg.mod1, pkg.mod2\n>>> pkg.mod1.foo()\n[mod1] foo()\n>>> x = pkg.mod2.Bar()\n>>> x\n<pkg.mod2.Bar object at 0x033F7290>\n```\n\n```python\nfrom <module_name> import <name(s)>\n```\n\n```python\n>>> from pkg.mod1 import foo\n>>> foo()\n[mod1] foo()\n```\n\n```python\nfrom <module_name> import <name> as <alt_name>\n```\n\n```python\n>>> from pkg.mod2 import Bar as Qux\n>>> x = Qux()\n>>> x\n<pkg.mod2.Bar object at 0x036DFFD0>\n```\n\n另外，你也可以使用以下方式导入模块：\n\n```python\nfrom <package_name> import <modules_name>[, <module_name> ...]\nfrom <package_name> import <module_name> as <alt_name>\n```\n\n```python\n>>> from pkg import mod1\n>>> mod1.foo()\n[mod1] foo()\n\n>>> from pkg import mod2 as quux\n>>> quux.bar()\n[mod2] bar()\n```\n\n其实，从技术上来讲，你也可以直接导入包：\n\n```python\n>>> import pkg\n>>> pkg\n<module 'pkg' (namespace)>\n```\n\n但是，其实这没有什么用。虽然用这种方式导入了包，但实际上模块并没有被导入到本地命名空间。所以，在调用模块时就会报错。\n\n```python\n>>> pkg.mod1\nTraceback (most recent call last):\n  File \"<pyshell#34>\", line 1, in <module>\n    pkg.mod1\nAttributeError: module 'pkg' has no attribute 'mod1'\n>>> pkg.mod1.foo()\nTraceback (most recent call last):\n  File \"<pyshell#35>\", line 1, in <module>\n    pkg.mod1.foo()\nAttributeError: module 'pkg' has no attribute 'mod1'\n>>> pkg.mod2.Bar()\nTraceback (most recent call last):\n  File \"<pyshell#36>\", line 1, in <module>\n    pkg.mod2.Bar()\nAttributeError: module 'pkg' has no attribute 'mod2'\n```\n\n因此，你需要使用之前的方法导入模块或者模块所包含的对象。\n\n\n\n## 包初始化\n\n如果在包的目录下有文件名为`__init__.py`的文件，当包或者模块被导入的时候，该文件就会被调用执行。文件中包含的代码主要用来对包进行初始化。\n\n下面，可以参考一下以下`__init__.py`文件：\n\n```python\nprint(f'Invoking __init__.py for {__name__}')\nA = ['quux', 'corge', 'grault']\n```\n\n将文件`__init__.py`放到`pkg`目录下方：\n\n![](pkg1_133918.png)\n\n当包被导入的时候，全局列表A会被初始化：\n\n```python\n>>> import pkg\nInvoking __init__.py for pkg\n>>> pkg.A\n['quux', 'corge', 'grault']\n```\n\n在包中的模块也可以访问全局列表A：\n\n***mode1.py***\n\n```python\ndef foo():\n    from pkg import A\n    print('[mod1] foo() / A = ', A)\n\nclass Foo:\n    pass\n```\n\n```python\n>>> from pkg import mod1\nInvoking __init__.py for pkg\n>>> mod1.foo()\n[mod1] foo() / A =  ['quux', 'corge', 'grault']\n```\n\n文件`__init__.py`还可以用来导入包中的模块。例如，之前如果只导入包`import pkg`，实际上模块并没有被导入。但是，如果在文件`__init__.py`中添加以下语句：\n\n```python\nprint(f'Invoking __init__.py for {__name__}')\nimport pkg.mod1, pkg.mod2\n```\n\n当运行`import pkg`的时候，模块mod1和mod2就会自动被导入：\n\n```python\n>>> import pkg\nInvoking __init__.py for pkg\n>>> pkg.mod1.foo()\n[mod1] foo()\n>>> pkg.mod2.bar()\n[mod2] bar()\n```\n\n>\n>\n>注意：大部分的Pyton文档中都声明，如果要创建包，就必须在包目录下创建文件`__init__.py`，即使该文件不包含任何内容，也必须出现在包所在目录下。\n>\n>但是，从Python 3.3开始， [Implicit Namespace Packages](https://www.python.org/dev/peps/pep-0420)允许即使没有文件`__init__.py`文件，仍然可以创建包。当然，如果要初始化包，仍然可以使用`__init__.py`文件。\n\n\n\n## Importing * From a Package\n\n为了便于接下来的讨论，在之前定义的包中增加一些额外的模块：\n\n![](pkg3.d2160908ae77.png)\n\n现在，包里面有4个模块，具体分别如下：\n\n***mod1.py***\n\n```python\ndef foo():\n    print('[mod1] foo()')\n\nclass Foo:\n    pass\n```\n\n***mod2.py***\n\n```python\ndef bar():\n    print('[mod2] bar()')\n\nclass Bar:\n    pass\n```\n\n***mod3.py***\n\n```python\ndef baz():\n    print('[mod3] baz()')\n\nclass Baz:\n    pass\n```\n\n***mod4.py***\n\n```python\ndef qux():\n    print('[mod4] qux()')\n\nclass Qux:\n    pass\n```\n\n根据之前的例子，如果用`from <module name > import *`的方式导入模块，除了以下划线命名的对象以外，可以将模块包含的所有对象导入到本地符号表：\n\n```python\n>>> dir()\n['__annotations__', '__builtins__', '__doc__', '__loader__', '__name__',\n'__package__', '__spec__']\n\n>>> from pkg.mod3 import *\n\n>>> dir()\n['Baz', '__annotations__', '__builtins__', '__doc__', '__loader__', '__name__',\n'__package__', '__spec__', 'baz']\n>>> baz()\n[mod3] baz()\n>>> Baz\n<class 'pkg.mod3.Baz'>\n```\n\n同样，我们也可以用相似的语法导入包：\n\n```python\nfrom <package_name> import *\n```\n\n```python\n>>> dir()\n['__annotations__', '__builtins__', '__doc__', '__loader__', '__name__',\n'__package__', '__spec__']\n\n>>> from pkg import *\n>>> dir()\n['__annotations__', '__builtins__', '__doc__', '__loader__', '__name__',\n'__package__', '__spec__']\n```\n\n但是，与导入模块不同，用`from <package_name> import *`导入包后，结果却显示没有导入任何内容。\n\n其实，Python遵循了一种规范：如果`__init__.py`的代码中有一个名为`__all__`的列表，该列表中定义的模块名，在用`from <package_name> import *`导入时，就会被自动导入。\n\n在当前的例子中，假设你在`pkg`包中创建了一个`__init__.py`的文件，内容如下：\n\n***pkg/__init__.py***\n\n```python\n__all__ = [\n        'mod1',\n        'mod2',\n        'mod3',\n        'mod4'\n        ]\n```\n\n现在用`from pkg import *`导入包后，就可以同时导入4个模块：\n\n```python\n>>> dir()\n['__annotations__', '__builtins__', '__doc__', '__loader__', '__name__',\n'__package__', '__spec__']\n\n>>> from pkg import *\n>>> dir()\n['__annotations__', '__builtins__', '__doc__', '__loader__', '__name__',\n'__package__', '__spec__', 'mod1', 'mod2', 'mod3', 'mod4']\n>>> mod2.bar()\n[mod2] bar()\n>>> mod4.Qux\n<class 'pkg.mod4.Qux'>\n```\n\n通过`__all__`这种方式，我们就可以控制哪些模块可以被`import *`这种方式自动导入。\n\n其实，`__all__`也可以用相同的方式作用于模块：控制模块中的哪些对象可以被`import *`的方式导入。\n\n下面以`mod1.py`为例：\n\n***pkg/mod1.py***\n\n```python\n__all__ = ['foo']\n\ndef foo():\n    print('[mod1] foo()')\n\nclass Foo:\n    pass\n```\n\n根据以上模块中`__all__`的定义，通过`import *`只会导入`foo`对象：\n\n```python\n>>> dir()\n['__annotations__', '__builtins__', '__doc__', '__loader__', '__name__',\n'__package__', '__spec__']\n\n>>> from pkg.mod1 import *\n>>> dir()\n['__annotations__', '__builtins__', '__doc__', '__loader__', '__name__',\n'__package__', '__spec__', 'foo']\n\n>>> foo()\n[mod1] foo()\n>>> Foo\nTraceback (most recent call last):\n  File \"<pyshell#37>\", line 1, in <module>\n    Foo\nNameError: name 'Foo' is not defined\n```\n\n`foo()`被导入到本地命名空间，但是类`Foo`并没有被导入，因为`Foo`并没有被定义在`__all__`中。\n\n总结一下，当使用`import *`语句的时候，`__all__`可以用来定义**包**和**模块**导入的内容。但是，具体的使用上有一些区别：\n\n- 对包而言，当`__all__`没有定义的时候，`import *`不会导入任何内容。\n- 对模块而言，当`__all__`没有定义的时候，`import *`会导入模块中的所有对象（除了以下划线命名的对象）。\n\n## 子包（Subpackages）\n\n包还可以包含子包，对于子包的层级也没有任何限制。例如，对之前的例子做一些修改：\n\n![](pkg4_100818.png)\n\n之前定义的四个模块：`mod1.py`, `mod2.py`, `mod3.py`, `mod4.py`，分别被放到两个子包下面：`sub_pkg1`和`sub_pkg2`。\n\n仍然和之前一样，可以用点表达式的方式导入子包下面的模块：\n\n```python\n>>> import pkg.sub_pkg1.mod1\n>>> pkg.sub_pkg1.mod1.foo()\n[mod1] foo()\n\n>>> from pkg.sub_pkg1 import mod2\n>>> mod2.bar()\n[mod2] bar()\n\n>>> from pkg.sub_pkg2.mod3 import baz\n>>> baz()\n[mod3] baz()\n\n>>> from pkg.sub_pkg2.mod4 import qux as grault\n>>> grault()\n[mod4] qux()\n```\n\n另外，在子包中的模块，还可以引用同级子包中的模块。\n\n例如，假设你想要在模块`mod3`中导入并允许函数模块`mod1`中的函数`foo()`，你可以使用**绝对导入**：\n\n***pkg/sub__pkg2/mod3.py***\n\n```python\ndef baz():\n    print('[mod3] baz()')\n\nclass Baz:\n    pass\n\nfrom pkg.sub_pkg1.mod1 import foo\nfoo()\n```\n\n```python\n>>> from pkg.sub_pkg2 import mod3\n[mod1] foo()\n>>> mod3.foo()\n[mod1] foo()\n```\n\n或者，你还可以使用**相对导入**，在相对导入中，`..`代表的是上一级包。\n\n- `..`代表的是上级包`pkg`\n- `..sub_pkg1`代表的是子包`sub_pkg1`的上一级包\n\n***pkg/sub__pkg2/mod3.py***\n\n```python\ndef baz():\n    print('[mod3] baz()')\n\nclass Baz:\n    pass\n\nfrom .. import sub_pkg1\nprint(sub_pkg1)\n\nfrom ..sub_pkg1.mod1 import foo\nfoo()\n```\n\n```python\n>>> from pkg.sub_pkg2 import mod3\n<module 'pkg.sub_pkg1' (namespace)>\n[mod1] foo()\n```\n\n## 总结\n\n在本指南中，你可以学到以下内容：\n\n- 如何创建Python模块\n- Python解释器如何查找模块\n- 通过`import`语句，如何访问模块中定义的对象\n- 如何将模块作为独立脚本来运行\n- 如何用包和子包的方式组织模块\n- 如何初始化包\n\n关于更多模块和包的内容，可以参考**Python.org**网站的文档：\n\n- [The `import` system](https://docs.python.org/3/reference/import.html)\n- [The Python tutorial: Modules](https://docs.python.org/3/tutorial/modules.html)\n","slug":"python/Python模块和包-介绍","published":1,"updated":"2023-03-03T01:33:03.370Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clexvkk9000245i734q09biam","content":"<blockquote>\n<p>注：本文翻译自<a href=\"https://realpython.com/python-modules-packages/\">Python Modules and Packages – An Introduction</a>。</p>\n</blockquote>\n<p>本文主要探讨Python编程语言中的两种便于<strong>模块化编程(Modular programming)<strong>的机制：</strong>模块</strong>和<strong>包</strong>。</p>\n<p><strong>模块化编程</strong>是将大型的、复杂的编程工作，划分成独立、小块且便于管理的子任务或者模块，这些独立的模块可以像积木一样拼凑在一起，用于构建成一个应用。</p>\n<p>在开发大型的应用中，模块化编程有以下好处或特性：</p>\n<ul>\n<li><strong>简易性：</strong>与专注于全局相比，模块通常只需要专注在解决所有编程任务中的某一个局部问题。如果是负责编写一个模块，那么就只要专注于该模块所需要解决的问题，而不用去考虑模块以外的问题。这使得开发任务变得简单且不易出错。</li>\n<li><strong>可维护性：</strong>通常在设计模块的时候，需要为各个模块之间实施逻辑边界。如果在编写模块的时候，能够尽量减少模块之间的依赖性，就可以减少由于单个模块的改变，导致对其它模块影响的可能性。（你甚至可以在不了解整个应用架构的情况下，对单个模块更改而不影响应用。）这对于团队的所有程序员能够互相协作完成整个大型应用而言，变得至关重要。</li>\n<li><strong>可重复性：</strong>通过合理地定义模块中的接口，模块中定义的功能可以很方便地被应用中的其它部分重复利用。这减少了冗余的代码。</li>\n<li><strong>范围：</strong>模块通常定义了一个独立的<strong>命名空间</strong>(<strong>namespace</strong>)，这有助于避免在程序不同部分中包含的标识符冲突。</li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"Python模块概述\"><a href=\"#Python模块概述\" class=\"headerlink\" title=\"Python模块概述\"></a>Python模块概述</h2><p>在Python中，有三种定义模块的方式：</p>\n<ol>\n<li>用Python语言编写的模块</li>\n<li>用<strong>C</strong>语言编写的模块，这种模块通常在程序运行时被动态加载，例如re(<strong>regular expression</strong>)模块</li>\n<li>Python内置的模块，例如<strong>itertools</strong>模块</li>\n</ol>\n<p>对于以上三种定义模块的方式，都可以使用<strong>import</strong>声明来访问模块的内容。</p>\n<p>在本文中，我们主要侧重于用Python语言编写的模块。比较酷的是，用Python语言编写的模块十分容易编译。只需要创建一个文件，文件名以<code>.py</code>后缀命名，然后写入合法的Python代码，该文件就可以作为模块使用了。</p>\n<p>举例说明，假设你创建了一个名为mod.py的文件，并且包含以下代码：</p>\n<p><em><strong>mod.py</strong></em></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">s <span class=\"token operator\">=</span> <span class=\"token string\">\"If Comrade Napoleon says it, it must be right.\"</span>\na <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'arg = </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>arg<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在<code>mod.py</code>中，主要定义了以下对象：</p>\n<ul>\n<li><code>s</code> (a string)</li>\n<li><code>a</code> (a list)</li>\n<li><code>foo()</code> (a function)</li>\n<li><code>Foo</code> (a class)</li>\n</ul>\n<p>假设<code>mod.py</code>模块已经被放置在合适的位置，那么模块中包含的对象就可以通过<code>import</code>的方式访问模块的内容：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> mod\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">)</span>\nIf Comrade Napoleon says it<span class=\"token punctuation\">,</span> it must be right<span class=\"token punctuation\">.</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mod<span class=\"token punctuation\">.</span>a\n<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mod<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'quux'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'corge'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'grault'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\narg <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'quux'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'corge'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'grault'</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> x <span class=\"token operator\">=</span> mod<span class=\"token punctuation\">.</span>Foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> x\n<span class=\"token operator\">&lt;</span>mod<span class=\"token punctuation\">.</span>Foo <span class=\"token builtin\">object</span> at <span class=\"token number\">0x03C181F0</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"模块查找路径\"><a href=\"#模块查找路径\" class=\"headerlink\" title=\"模块查找路径\"></a>模块查找路径</h2><p>继续引用上面的例子，让我们来看一下，当运行<code>import</code>声明时，到底发生了什么：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> mod<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>当Python解释器运行以上的<code>import</code>声明时，它会在一系列的目录中查找<code>mod.py</code>模块。这些目录的位置主要包含以下来源：</p>\n<ul>\n<li>如果解释器是通过交互式的方式运行，就会在脚本所在的<strong>当前目录</strong>查找<code>mod.py</code>模块。</li>\n<li>如果设置了Python的环境变量，就会在<code>PYTHONPATH</code>环境变量定义的目录中查找模块。</li>\n<li>Python安装过程中配置的与安装相关的目录</li>\n</ul>\n<p>模块的查找路径，可以通过<code>sys</code>模块获取：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> sys\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> sys<span class=\"token punctuation\">.</span>path\n<span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C:\\\\Users\\\\john\\\\Documents\\\\Python\\\\doc'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C:\\\\Python36\\\\Lib\\\\idlelib'</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">'C:\\\\Python36\\\\python36.zip'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C:\\\\Python36\\\\DLLs'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C:\\\\Python36\\\\lib'</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">'C:\\\\Python36'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C:\\\\Python36\\\\lib\\\\site-packages'</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>注意：根据安装的Python版本和操作系统不同，sys.path的内容会略有不同。以上例子中输出的结果可能与你计算机上看到的结果稍有差异。</p>\n</blockquote>\n<p>因此，为了确保编写的模块能够被Python解释器找到，你需要做以下工作：</p>\n<ul>\n<li>如果是交互式运行Python，需要将<code>mod.py</code>放到脚本所在的目录下面</li>\n<li>打开Python解释器之前，修改<code>PYTHONPATH</code>环境变量，以包含<code>mod.py</code>模块所在的目录，或者也可以将<code>mod.py</code>模块复制到<code>PYTHONPATH</code>环境变量已经定义的目录下</li>\n<li>将<code>mod.py</code>模块放到安装相关的目录下，但是根据操作系统的不同，可能对这些目录只有读取的权限，而没有写入的权限。</li>\n</ul>\n<p>其实，还有另外一种方法：你可以将模块文件放在任何一个目录下面，然后在运行脚本的时候修改<code>sys.path</code>的内容，以包含放置模块的目录。</p>\n<p>例如，在下面的例子中，可以将<code>mod.py</code>放在目录<code>C:\\Users\\john</code>下面，然后运行以下指令：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> sys<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">r'C:\\Users\\john'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> sys<span class=\"token punctuation\">.</span>path\n<span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C:\\\\Users\\\\john\\\\Documents\\\\Python\\\\doc'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C:\\\\Python36\\\\Lib\\\\idlelib'</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">'C:\\\\Python36\\\\python36.zip'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C:\\\\Python36\\\\DLLs'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C:\\\\Python36\\\\lib'</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">'C:\\\\Python36'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C:\\\\Python36\\\\lib\\\\site-packages'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C:\\\\Users\\\\john'</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> mod<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>模块被导入以后，你可以通过模块的属性<code>__file__</code>来查看模块文件的路径：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> mod\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mod<span class=\"token punctuation\">.</span>__file__\n<span class=\"token string\">'C:\\\\Users\\\\john\\\\mod.py'</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> re\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> re<span class=\"token punctuation\">.</span>__file__\n<span class=\"token string\">'C:\\\\Python36\\\\lib\\\\re.py'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>__file__</code>输出结果的目录部分，应该包含在<code>sys.path</code>的目录中。</p>\n<h2 id=\"import声明\"><a href=\"#import声明\" class=\"headerlink\" title=\"import声明\"></a>import声明</h2><p>通过<code>import</code>声明可以导入模块的内容。<code>import</code>声明可以通过几种不同的方式来导入模块，以下一一介绍。</p>\n<h3 id=\"import-lt-module-name-gt\"><a href=\"#import-lt-module-name-gt\" class=\"headerlink\" title=\"import &lt;module_name&gt;\"></a>import &lt;module_name&gt;</h3><p>最简单的导入模块的方式如下：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> <span class=\"token operator\">&lt;</span>module_name<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>由于模块有独立的命名空间，也就是说，模块有自己的<strong>私有符号表（private symbol table）</strong>，所以，即使在脚本中导入了模块，仍然无法直接访问模块中的对象。因为，这些对象仍然是被定义在模块的私有符号表中，如果要访问这些模块中的对象，必须要通过<strong>dot notation</strong>的方式来访问。</p>\n<p>在通过<code>import</code>导入模块以后，<code>mod</code>已经在当前脚本的本地符号表中，因此，<code>mod</code>在当前脚本中可以直接访问：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> mod\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mod\n<span class=\"token operator\">&lt;</span>module <span class=\"token string\">'mod'</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'C:\\\\Users\\\\john\\\\Documents\\\\Python\\\\doc\\\\mod.py'</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>但是，模块中定义的对象：<code>s</code>和<code>foo</code>仍然在模块私有符号表中，因此在本地符号表中并没有被定义：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> s\nNameError<span class=\"token punctuation\">:</span> name <span class=\"token string\">'s'</span> <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> defined\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> foo<span class=\"token punctuation\">(</span><span class=\"token string\">'quux'</span><span class=\"token punctuation\">)</span>\nNameError<span class=\"token punctuation\">:</span> name <span class=\"token string\">'foo'</span> <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> defined<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>为了能在当前脚本中访问模块中的对象，必须在对象前面加上前缀：**<module_name>.**</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> mod<span class=\"token punctuation\">.</span>s\n<span class=\"token string\">'If Comrade Napoleon says it, it must be right.'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mod<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">(</span><span class=\"token string\">'quux'</span><span class=\"token punctuation\">)</span>\narg <span class=\"token operator\">=</span> quux<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>import</code>声明还可以一次导入多个模块，不同模块之间可以用逗号隔开：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> <span class=\"token operator\">&lt;</span>module_name<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span>module_name<span class=\"token operator\">></span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"from-lt-module-name-gt-import-lt-name-s-gt\"><a href=\"#from-lt-module-name-gt-import-lt-name-s-gt\" class=\"headerlink\" title=\"from &lt;module_name&gt; import &lt;name(s)&gt;\"></a>from &lt;module_name&gt; import &lt;name(s)&gt;</h3><p><code>import</code>声明还可以将模块的对象直接导入到当前脚本的本地符号表中：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> <span class=\"token operator\">&lt;</span>module_name<span class=\"token operator\">></span> <span class=\"token keyword\">import</span> <span class=\"token operator\">&lt;</span>name<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>根据以上的导入方式，对象可以被直接访问，而不需要添加模块名前缀：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> mod <span class=\"token keyword\">import</span> s<span class=\"token punctuation\">,</span> foo\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> s\n<span class=\"token string\">'If Comrade Napoleon says it, it must be right.'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> foo<span class=\"token punctuation\">(</span><span class=\"token string\">'quux'</span><span class=\"token punctuation\">)</span>\narg <span class=\"token operator\">=</span> quux\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> mod <span class=\"token keyword\">import</span> Foo\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> x <span class=\"token operator\">=</span> Foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> x\n<span class=\"token operator\">&lt;</span>mod<span class=\"token punctuation\">.</span>Foo <span class=\"token builtin\">object</span> at <span class=\"token number\">0x02E3AD50</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>由于<code>import</code>直接把对象导入到当前脚本的本地符号表中，当前脚本如果已经存在相同名称的对象，将会被导入的对象所覆盖：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'baz'</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> a\n<span class=\"token punctuation\">[</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'baz'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> mod <span class=\"token keyword\">import</span> a\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> a\n<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>通过以下方式，还可以将模块中的所有对象一次性导入到当前的脚本：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> <span class=\"token operator\">&lt;</span>module_name<span class=\"token operator\">></span> <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这种方式会将模块中的所有对象导入到本地符号表中，除了名称以下划线(__)开始的对象。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> mod <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> s\n<span class=\"token string\">'If Comrade Napoleon says it, it must be right.'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> a\n<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> foo\n<span class=\"token operator\">&lt;</span>function foo at <span class=\"token number\">0x03B449C0</span><span class=\"token operator\">></span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> Foo\n<span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token string\">'mod.Foo'</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在大规模的代码开发场景中，并不推荐这种一次性导入所有对象的方式。因为，这种方式很容易导致冲突，会将已经定义的对象覆盖，应尽量避免。</p>\n<p>但是，如果在交互式解释器中运行，这种方式就非常方便，简单的输入，就能访问模块中的所有内容。</p>\n<h3 id=\"from-lt-module-name-gt-import-lt-name-gt-as-lt-alt-name-gt\"><a href=\"#from-lt-module-name-gt-import-lt-name-gt-as-lt-alt-name-gt\" class=\"headerlink\" title=\"from &lt;module_name&gt; import &lt;name&gt; as &lt;alt_name&gt;\"></a>from &lt;module_name&gt; import &lt;name&gt; as &lt;alt_name&gt;</h3><p>如果导入的对象名称与本地对象名称冲突，可以用别名来代替模块中的对象名称：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> <span class=\"token operator\">&lt;</span>module_name<span class=\"token operator\">></span> <span class=\"token keyword\">import</span> <span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span> <span class=\"token keyword\">as</span> <span class=\"token operator\">&lt;</span>alt_name<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span> <span class=\"token keyword\">as</span> <span class=\"token operator\">&lt;</span>alt_name<span class=\"token operator\">></span> …<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这样，就可以既避免冲突，也可以直接将模块对象导入到本地符号表中：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> s <span class=\"token operator\">=</span> <span class=\"token string\">'foo'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'baz'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> mod <span class=\"token keyword\">import</span> s <span class=\"token keyword\">as</span> string<span class=\"token punctuation\">,</span> a <span class=\"token keyword\">as</span> alist\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> s\n<span class=\"token string\">'foo'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> string\n<span class=\"token string\">'If Comrade Napoleon says it, it must be right.'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> a\n<span class=\"token punctuation\">[</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'baz'</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> alist\n<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"import-lt-module-name-gt-as-lt-alt-name-gt\"><a href=\"#import-lt-module-name-gt-as-lt-alt-name-gt\" class=\"headerlink\" title=\"import &lt;module_name&gt; as &lt;alt_name&gt;\"></a>import &lt;module_name&gt; as &lt;alt_name&gt;</h3><p>你也可以在导入模块的时候，指定用别名来代替模块的实际名称：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> <span class=\"token operator\">&lt;</span>module_name<span class=\"token operator\">></span> <span class=\"token keyword\">as</span> <span class=\"token operator\">&lt;</span>alt_name<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> mod <span class=\"token keyword\">as</span> my_module\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> my_module<span class=\"token punctuation\">.</span>a\n<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> my_module<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">(</span><span class=\"token string\">'qux'</span><span class=\"token punctuation\">)</span>\narg <span class=\"token operator\">=</span> qux<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>另外，在函数的定义中，也可以导入模块的内容。但是，只有当函数被调用的时候，模块才会被导入。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">from</span> mod <span class=\"token keyword\">import</span> foo\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     foo<span class=\"token punctuation\">(</span><span class=\"token string\">'corge'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> bar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\narg <span class=\"token operator\">=</span> corge<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>需要注意的是，在Python 3中，不支持用<code>import *</code>的语法在函数中定义导入模块的声明：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">from</span> mod <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\nSyntaxError<span class=\"token punctuation\">:</span> <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> only allowed at module level<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>最后，可以使用<code> try statement with an except ImportError</code>语句来处理导入模块失败的情况：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token comment\"># Non-existent module</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">import</span> baz\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token keyword\">except</span> ImportError<span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Module not found'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\nModule <span class=\"token keyword\">not</span> found<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token comment\"># Existing module, but non-existent object</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">from</span> mod <span class=\"token keyword\">import</span> baz\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token keyword\">except</span> ImportError<span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Object not found in module'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\nObject <span class=\"token keyword\">not</span> found <span class=\"token keyword\">in</span> module<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"函数dir\"><a href=\"#函数dir\" class=\"headerlink\" title=\"函数dir()\"></a>函数dir()</h2><p>在一个命名空间中，内置的<code>dir()</code>函数会返回一个列表，列表中包含的元素是已定义的名称。默认情况下，生成的列表成员按字母排序。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'__annotations__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__builtins__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__doc__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__loader__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__name__'</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">'__package__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__spec__'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> qux <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'__annotations__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__builtins__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__doc__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__loader__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__name__'</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">'__package__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__spec__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'qux'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">pass</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> x <span class=\"token operator\">=</span> Bar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'Bar'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__annotations__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__builtins__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__doc__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__loader__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__name__'</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">'__package__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__spec__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'qux'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'x'</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>从以上例子中可以注意到，第一次调用函数<code>dir()</code>后，在命名空间中已经存在预先定义好的名称。等到新的名称定义（qux, Bar, x）以后，就会出现在虽有调用函数<code>dir()</code>输出的结果中。</p>\n<p>函数<code>dir()</code>有助于我们识别哪些对象通过<code>import</code>的方式导入到了当前的命名空间中：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'__annotations__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__builtins__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__doc__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__loader__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__name__'</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">'__package__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__spec__'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> mod\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'__annotations__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__builtins__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__doc__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__loader__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__name__'</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">'__package__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__spec__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'mod'</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mod<span class=\"token punctuation\">.</span>s\n<span class=\"token string\">'If Comrade Napoleon says it, it must be right.'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mod<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\narg <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> mod <span class=\"token keyword\">import</span> a<span class=\"token punctuation\">,</span> Foo\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'Foo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__annotations__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__builtins__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__doc__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__loader__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__name__'</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">'__package__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__spec__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'mod'</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> a\n<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> x <span class=\"token operator\">=</span> Foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> x\n<span class=\"token operator\">&lt;</span>mod<span class=\"token punctuation\">.</span>Foo <span class=\"token builtin\">object</span> at <span class=\"token number\">0x002EAD50</span><span class=\"token operator\">></span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> mod <span class=\"token keyword\">import</span> s <span class=\"token keyword\">as</span> string\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'Foo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__annotations__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__builtins__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__doc__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__loader__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__name__'</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">'__package__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__spec__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'mod'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'x'</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> string\n<span class=\"token string\">'If Comrade Napoleon says it, it must be right.'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>当我们调用函数<code>dir()</code>的时候，将模块的名称作为参数，函数<code>dir()</code>就会列出模块中定义的所有名称：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> mod\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'Foo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__builtins__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__cached__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__doc__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__file__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__loader__'</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">'__name__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__package__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__spec__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'s'</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'__annotations__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__builtins__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__doc__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__loader__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__name__'</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">'__package__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__spec__'</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> mod <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'Foo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__annotations__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__builtins__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__doc__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__loader__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__name__'</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">'__package__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__spec__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'s'</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"用脚本的方式运行模块\"><a href=\"#用脚本的方式运行模块\" class=\"headerlink\" title=\"用脚本的方式运行模块\"></a>用脚本的方式运行模块</h2><p>在Python中，任何模块文件同时也是一个脚本，因此，可以直接当成脚本来运行。</p>\n<p>下面还是以<code>mod.py</code>脚本为例：</p>\n<p><em><strong>mod.py</strong></em></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">s <span class=\"token operator\">=</span> <span class=\"token string\">\"If Comrade Napoleon says it, it must be right.\"</span>\na <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'arg = </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>arg<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>该模块如果以脚本来运行：</p>\n<pre class=\"line-numbers language-Windows\" data-language=\"Windows\"><div class=\"caption\"><span>Command Prompt</span></div><code class=\"language-Windows\">C:\\Users\\john\\Documents&gt;python mod.py\nC:\\Users\\john\\Documents&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>从以上结果来看，没有出现任何错误。因此，说明该脚本运行成功，但是由于只定义了对象，并没有输出任何结果。</p>\n<p>下面修改一下脚本，让它输出一些内容：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">s <span class=\"token operator\">=</span> <span class=\"token string\">\"If Comrade Napoleon says it, it must be right.\"</span>\na <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'arg = </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>arg<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\nfoo<span class=\"token punctuation\">(</span><span class=\"token string\">'quux'</span><span class=\"token punctuation\">)</span>\nx <span class=\"token operator\">=</span> Foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>现在，我们可以看到以下输出结果：</p>\n<pre class=\"line-numbers language-Windows\" data-language=\"Windows\"><div class=\"caption\"><span>Command Prompt</span></div><code class=\"language-Windows\">C:\\Users\\john\\Documents&gt;python mod.py\nIf Comrade Napoleon says it, it must be right.\n[100, 200, 300]\narg &#x3D; quux\n&lt;__main__.Foo object at 0x02F101D0&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果将其作为模块导入，我们会发现导入模块的过程中，也会输出结果：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> mod\nIf Comrade Napoleon says it<span class=\"token punctuation\">,</span> it must be right<span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">]</span>\narg <span class=\"token operator\">=</span> quux\n<span class=\"token operator\">&lt;</span>mod<span class=\"token punctuation\">.</span>Foo <span class=\"token builtin\">object</span> at <span class=\"token number\">0x0169AD50</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>通常情况下，我们都希望导入模块的时候，不生成任何结果。只有当模块作为脚本运行的时候，才输出结果。</p>\n<p>当模块导入的时候，Python会将变量<code>__name__</code>设置为模块的名称，但是当作为脚本运行时，<code>__name__</code>会设置为字符串<code>__main__</code>。根据该特性，我们可以区分是导入模块还是运行脚本：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">s <span class=\"token operator\">=</span> <span class=\"token string\">\"If Comrade Napoleon says it, it must be right.\"</span>\na <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'arg = </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>arg<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>__name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Executing as standalone script'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n    foo<span class=\"token punctuation\">(</span><span class=\"token string\">'quux'</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>现在，如果运行脚本，会得到以下结果：</p>\n<pre class=\"line-numbers language-Windows\" data-language=\"Windows\"><div class=\"caption\"><span>Command Prompt</span></div><code class=\"language-Windows\">C:\\Users\\john\\Documents&gt;python mod.py\nExecuting as standalone script\nIf Comrade Napoleon says it, it must be right.\n[100, 200, 300]\narg &#x3D; quux\n&lt;__main__.Foo object at 0x03450690&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>但是，如果当模块导入，就不会有任何结果输出：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> mod\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mod<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">(</span><span class=\"token string\">'grault'</span><span class=\"token punctuation\">)</span>\narg <span class=\"token operator\">=</span> grault<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>通常在设计模块的时候，为了对模块做单元测试，也需要将模块当作脚本来直接运行。例如，假设创建了一个<code>fact.py</code>的模块，该模块包含factorial函数：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">fact</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span> <span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token keyword\">else</span> n <span class=\"token operator\">*</span> fact<span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>__name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">import</span> sys\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>fact<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>将该模块中的<code>fact()</code>函数导入：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> fact <span class=\"token keyword\">import</span> fact\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> fact<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">720</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>另外，为了测试，也可以将该模块单独运行，在命令行中输入整型参数：</p>\n<pre class=\"line-numbers language-Windows\" data-language=\"Windows\"><div class=\"caption\"><span>Command Prompt</span></div><code class=\"language-Windows\">C:\\Users\\john\\Documents&gt;python fact.py 6\n720<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"重新加载模块\"><a href=\"#重新加载模块\" class=\"headerlink\" title=\"重新加载模块\"></a>重新加载模块</h2><p>出于效率的原因，在每一个解释器会话中，模块只会被加载一次。对于函数和类的定义来说，这没什么问题。但是，通常是为了初始化的缘故，模块还可能包含一些可执行的声明。需要注意的是，在当前的解释器会话中，当模块被导入后，这些声明只会被执行一次。即使再次导入模块，这些声明也不会被再次执行。</p>\n<p>下面以<code>mod.py</code>:</p>\n<p><em><strong>mod.py</strong></em></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a ='</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> mod\na <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> mod\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> mod\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mod<span class=\"token punctuation\">.</span>a\n<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>以上例子中，在后续两次import过程中，<code>print()</code>声明都没有别执行。其实，声明<code>a = [100, 200, 300]</code>也没有再次执行，但是最后<code>mod.a</code>的结果显示，一旦赋值声明（assignment statement）执行后，就会将结果保留。</p>\n<p>如果更改了模块的内容，并且需要重新加载模块，可以重启解释器，或者使用模块<code>importlib</code>中的函数<code>reload()</code>:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> mod\na <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> mod\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> importlib\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> importlib<span class=\"token punctuation\">.</span><span class=\"token builtin\">reload</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">)</span>\na <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">&lt;</span>module <span class=\"token string\">'mod'</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'C:\\\\Users\\\\john\\\\Documents\\\\Python\\\\doc\\\\mod.py'</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"Python-包\"><a href=\"#Python-包\" class=\"headerlink\" title=\"Python 包\"></a>Python 包</h2><p>假设你开发了一个大型的应用，该应用包含许多模块。随着模块数量的增加，尤其是当这些模块有相似的名称和功能的时候，管理这些模块变得越来越困难。你可能会希望有一个更换的方法来分类和组织这些模块。</p>\n<p><strong>包</strong>通过使用点表示法（<strong>dot notation</strong>），可以提供一种层次性结构的模块命名空间。通过这种方式，<strong>模块</strong>可以使得全局变量名之间避免冲突，<strong>包</strong>可以使得模块名之间避免冲突。</p>\n<p>创建一个<strong>包</strong>非常简单，只需要创建一个目录，并将模块放到该目录下面。该目录就是一个Python<strong>包</strong>。</p>\n<p>可以参考一下下面的例子：</p>\n<p><img src=\"/2022/02/03/python/python-mo-kuai-he-bao-jie-shao/pkg1.9af1c7aea48f.png\"></p>\n<p>以上例子中，目录名为<code>pkg</code>，该目录包含两个模块：<code>mod1.py</code>和<code>mod2.py</code>。模块的内容如下：</p>\n<p><em><strong>mod1.py</strong></em></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[mod1] foo()'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><em><strong>mod2.py</strong></em></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[mod2] bar()'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Bar</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>根据这种结构，我们可以继续使用之前导入模块的方法，使用点表示法（<strong>dot notation</strong>）来导入包里面的模块：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> <span class=\"token operator\">&lt;</span>module_name<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span>module_name<span class=\"token operator\">></span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> pkg<span class=\"token punctuation\">.</span>mod1<span class=\"token punctuation\">,</span> pkg<span class=\"token punctuation\">.</span>mod2\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> pkg<span class=\"token punctuation\">.</span>mod1<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span>mod1<span class=\"token punctuation\">]</span> foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> x <span class=\"token operator\">=</span> pkg<span class=\"token punctuation\">.</span>mod2<span class=\"token punctuation\">.</span>Bar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> x\n<span class=\"token operator\">&lt;</span>pkg<span class=\"token punctuation\">.</span>mod2<span class=\"token punctuation\">.</span>Bar <span class=\"token builtin\">object</span> at <span class=\"token number\">0x033F7290</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> <span class=\"token operator\">&lt;</span>module_name<span class=\"token operator\">></span> <span class=\"token keyword\">import</span> <span class=\"token operator\">&lt;</span>name<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> pkg<span class=\"token punctuation\">.</span>mod1 <span class=\"token keyword\">import</span> foo\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span>mod1<span class=\"token punctuation\">]</span> foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> <span class=\"token operator\">&lt;</span>module_name<span class=\"token operator\">></span> <span class=\"token keyword\">import</span> <span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span> <span class=\"token keyword\">as</span> <span class=\"token operator\">&lt;</span>alt_name<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> pkg<span class=\"token punctuation\">.</span>mod2 <span class=\"token keyword\">import</span> Bar <span class=\"token keyword\">as</span> Qux\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> x <span class=\"token operator\">=</span> Qux<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> x\n<span class=\"token operator\">&lt;</span>pkg<span class=\"token punctuation\">.</span>mod2<span class=\"token punctuation\">.</span>Bar <span class=\"token builtin\">object</span> at <span class=\"token number\">0x036DFFD0</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>另外，你也可以使用以下方式导入模块：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> <span class=\"token operator\">&lt;</span>package_name<span class=\"token operator\">></span> <span class=\"token keyword\">import</span> <span class=\"token operator\">&lt;</span>modules_name<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span>module_name<span class=\"token operator\">></span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">from</span> <span class=\"token operator\">&lt;</span>package_name<span class=\"token operator\">></span> <span class=\"token keyword\">import</span> <span class=\"token operator\">&lt;</span>module_name<span class=\"token operator\">></span> <span class=\"token keyword\">as</span> <span class=\"token operator\">&lt;</span>alt_name<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> pkg <span class=\"token keyword\">import</span> mod1\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mod1<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span>mod1<span class=\"token punctuation\">]</span> foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> pkg <span class=\"token keyword\">import</span> mod2 <span class=\"token keyword\">as</span> quux\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> quux<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span>mod2<span class=\"token punctuation\">]</span> bar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>其实，从技术上来讲，你也可以直接导入包：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> pkg\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> pkg\n<span class=\"token operator\">&lt;</span>module <span class=\"token string\">'pkg'</span> <span class=\"token punctuation\">(</span>namespace<span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>但是，其实这没有什么用。虽然用这种方式导入了包，但实际上模块并没有被导入到本地命名空间。所以，在调用模块时就会报错。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> pkg<span class=\"token punctuation\">.</span>mod1\nTraceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  File <span class=\"token string\">\"&lt;pyshell#34>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span>\n    pkg<span class=\"token punctuation\">.</span>mod1\nAttributeError<span class=\"token punctuation\">:</span> module <span class=\"token string\">'pkg'</span> has no attribute <span class=\"token string\">'mod1'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> pkg<span class=\"token punctuation\">.</span>mod1<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nTraceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  File <span class=\"token string\">\"&lt;pyshell#35>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span>\n    pkg<span class=\"token punctuation\">.</span>mod1<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nAttributeError<span class=\"token punctuation\">:</span> module <span class=\"token string\">'pkg'</span> has no attribute <span class=\"token string\">'mod1'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> pkg<span class=\"token punctuation\">.</span>mod2<span class=\"token punctuation\">.</span>Bar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nTraceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  File <span class=\"token string\">\"&lt;pyshell#36>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span>\n    pkg<span class=\"token punctuation\">.</span>mod2<span class=\"token punctuation\">.</span>Bar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nAttributeError<span class=\"token punctuation\">:</span> module <span class=\"token string\">'pkg'</span> has no attribute <span class=\"token string\">'mod2'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>因此，你需要使用之前的方法导入模块或者模块所包含的对象。</p>\n<h2 id=\"包初始化\"><a href=\"#包初始化\" class=\"headerlink\" title=\"包初始化\"></a>包初始化</h2><p>如果在包的目录下有文件名为<code>__init__.py</code>的文件，当包或者模块被导入的时候，该文件就会被调用执行。文件中包含的代码主要用来对包进行初始化。</p>\n<p>下面，可以参考一下以下<code>__init__.py</code>文件：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Invoking __init__.py for </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>__name__<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\nA <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'quux'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'corge'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'grault'</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>将文件<code>__init__.py</code>放到<code>pkg</code>目录下方：</p>\n<p><img src=\"/2022/02/03/python/python-mo-kuai-he-bao-jie-shao/pkg1_133918.png\"></p>\n<p>当包被导入的时候，全局列表A会被初始化：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> pkg\nInvoking __init__<span class=\"token punctuation\">.</span>py <span class=\"token keyword\">for</span> pkg\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> pkg<span class=\"token punctuation\">.</span>A\n<span class=\"token punctuation\">[</span><span class=\"token string\">'quux'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'corge'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'grault'</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在包中的模块也可以访问全局列表A：</p>\n<p><em><strong>mode1.py</strong></em></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">from</span> pkg <span class=\"token keyword\">import</span> A\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[mod1] foo() / A = '</span><span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> pkg <span class=\"token keyword\">import</span> mod1\nInvoking __init__<span class=\"token punctuation\">.</span>py <span class=\"token keyword\">for</span> pkg\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mod1<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span>mod1<span class=\"token punctuation\">]</span> foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> A <span class=\"token operator\">=</span>  <span class=\"token punctuation\">[</span><span class=\"token string\">'quux'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'corge'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'grault'</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>文件<code>__init__.py</code>还可以用来导入包中的模块。例如，之前如果只导入包<code>import pkg</code>，实际上模块并没有被导入。但是，如果在文件<code>__init__.py</code>中添加以下语句：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Invoking __init__.py for </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>__name__<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">import</span> pkg<span class=\"token punctuation\">.</span>mod1<span class=\"token punctuation\">,</span> pkg<span class=\"token punctuation\">.</span>mod2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>当运行<code>import pkg</code>的时候，模块mod1和mod2就会自动被导入：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> pkg\nInvoking __init__<span class=\"token punctuation\">.</span>py <span class=\"token keyword\">for</span> pkg\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> pkg<span class=\"token punctuation\">.</span>mod1<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span>mod1<span class=\"token punctuation\">]</span> foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> pkg<span class=\"token punctuation\">.</span>mod2<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span>mod2<span class=\"token punctuation\">]</span> bar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>注意：大部分的Pyton文档中都声明，如果要创建包，就必须在包目录下创建文件<code>__init__.py</code>，即使该文件不包含任何内容，也必须出现在包所在目录下。</p>\n<p>但是，从Python 3.3开始， <a href=\"https://www.python.org/dev/peps/pep-0420\">Implicit Namespace Packages</a>允许即使没有文件<code>__init__.py</code>文件，仍然可以创建包。当然，如果要初始化包，仍然可以使用<code>__init__.py</code>文件。</p>\n</blockquote>\n<h2 id=\"Importing-From-a-Package\"><a href=\"#Importing-From-a-Package\" class=\"headerlink\" title=\"Importing * From a Package\"></a>Importing * From a Package</h2><p>为了便于接下来的讨论，在之前定义的包中增加一些额外的模块：</p>\n<p><img src=\"/2022/02/03/python/python-mo-kuai-he-bao-jie-shao/pkg3.d2160908ae77.png\"></p>\n<p>现在，包里面有4个模块，具体分别如下：</p>\n<p><em><strong>mod1.py</strong></em></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[mod1] foo()'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><em><strong>mod2.py</strong></em></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[mod2] bar()'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Bar</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><em><strong>mod3.py</strong></em></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">baz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[mod3] baz()'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Baz</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><em><strong>mod4.py</strong></em></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">qux</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[mod4] qux()'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Qux</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>根据之前的例子，如果用<code>from &lt;module name &gt; import *</code>的方式导入模块，除了以下划线命名的对象以外，可以将模块包含的所有对象导入到本地符号表：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'__annotations__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__builtins__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__doc__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__loader__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__name__'</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">'__package__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__spec__'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> pkg<span class=\"token punctuation\">.</span>mod3 <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'Baz'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__annotations__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__builtins__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__doc__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__loader__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__name__'</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">'__package__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__spec__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'baz'</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> baz<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span>mod3<span class=\"token punctuation\">]</span> baz<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> Baz\n<span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token string\">'pkg.mod3.Baz'</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>同样，我们也可以用相似的语法导入包：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> <span class=\"token operator\">&lt;</span>package_name<span class=\"token operator\">></span> <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'__annotations__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__builtins__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__doc__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__loader__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__name__'</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">'__package__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__spec__'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> pkg <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'__annotations__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__builtins__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__doc__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__loader__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__name__'</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">'__package__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__spec__'</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>但是，与导入模块不同，用<code>from &lt;package_name&gt; import *</code>导入包后，结果却显示没有导入任何内容。</p>\n<p>其实，Python遵循了一种规范：如果<code>__init__.py</code>的代码中有一个名为<code>__all__</code>的列表，该列表中定义的模块名，在用<code>from &lt;package_name&gt; import *</code>导入时，就会被自动导入。</p>\n<p>在当前的例子中，假设你在<code>pkg</code>包中创建了一个<code>__init__.py</code>的文件，内容如下：</p>\n<p><em><strong>pkg&#x2F;<strong>init</strong>.py</strong></em></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">__all__ <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">'mod1'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'mod2'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'mod3'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'mod4'</span>\n        <span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>现在用<code>from pkg import *</code>导入包后，就可以同时导入4个模块：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'__annotations__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__builtins__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__doc__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__loader__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__name__'</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">'__package__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__spec__'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> pkg <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'__annotations__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__builtins__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__doc__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__loader__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__name__'</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">'__package__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__spec__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'mod1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'mod2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'mod3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'mod4'</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mod2<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span>mod2<span class=\"token punctuation\">]</span> bar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mod4<span class=\"token punctuation\">.</span>Qux\n<span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token string\">'pkg.mod4.Qux'</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>通过<code>__all__</code>这种方式，我们就可以控制哪些模块可以被<code>import *</code>这种方式自动导入。</p>\n<p>其实，<code>__all__</code>也可以用相同的方式作用于模块：控制模块中的哪些对象可以被<code>import *</code>的方式导入。</p>\n<p>下面以<code>mod1.py</code>为例：</p>\n<p><em><strong>pkg&#x2F;mod1.py</strong></em></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">__all__ <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[mod1] foo()'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>根据以上模块中<code>__all__</code>的定义，通过<code>import *</code>只会导入<code>foo</code>对象：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'__annotations__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__builtins__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__doc__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__loader__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__name__'</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">'__package__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__spec__'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> pkg<span class=\"token punctuation\">.</span>mod1 <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'__annotations__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__builtins__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__doc__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__loader__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__name__'</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">'__package__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__spec__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span>mod1<span class=\"token punctuation\">]</span> foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> Foo\nTraceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  File <span class=\"token string\">\"&lt;pyshell#37>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span>\n    Foo\nNameError<span class=\"token punctuation\">:</span> name <span class=\"token string\">'Foo'</span> <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> defined<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>foo()</code>被导入到本地命名空间，但是类<code>Foo</code>并没有被导入，因为<code>Foo</code>并没有被定义在<code>__all__</code>中。</p>\n<p>总结一下，当使用<code>import *</code>语句的时候，<code>__all__</code>可以用来定义<strong>包</strong>和<strong>模块</strong>导入的内容。但是，具体的使用上有一些区别：</p>\n<ul>\n<li>对包而言，当<code>__all__</code>没有定义的时候，<code>import *</code>不会导入任何内容。</li>\n<li>对模块而言，当<code>__all__</code>没有定义的时候，<code>import *</code>会导入模块中的所有对象（除了以下划线命名的对象）。</li>\n</ul>\n<h2 id=\"子包（Subpackages）\"><a href=\"#子包（Subpackages）\" class=\"headerlink\" title=\"子包（Subpackages）\"></a>子包（Subpackages）</h2><p>包还可以包含子包，对于子包的层级也没有任何限制。例如，对之前的例子做一些修改：</p>\n<p><img src=\"/2022/02/03/python/python-mo-kuai-he-bao-jie-shao/pkg4_100818.png\"></p>\n<p>之前定义的四个模块：<code>mod1.py</code>, <code>mod2.py</code>, <code>mod3.py</code>, <code>mod4.py</code>，分别被放到两个子包下面：<code>sub_pkg1</code>和<code>sub_pkg2</code>。</p>\n<p>仍然和之前一样，可以用点表达式的方式导入子包下面的模块：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> pkg<span class=\"token punctuation\">.</span>sub_pkg1<span class=\"token punctuation\">.</span>mod1\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> pkg<span class=\"token punctuation\">.</span>sub_pkg1<span class=\"token punctuation\">.</span>mod1<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span>mod1<span class=\"token punctuation\">]</span> foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> pkg<span class=\"token punctuation\">.</span>sub_pkg1 <span class=\"token keyword\">import</span> mod2\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mod2<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span>mod2<span class=\"token punctuation\">]</span> bar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> pkg<span class=\"token punctuation\">.</span>sub_pkg2<span class=\"token punctuation\">.</span>mod3 <span class=\"token keyword\">import</span> baz\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> baz<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span>mod3<span class=\"token punctuation\">]</span> baz<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> pkg<span class=\"token punctuation\">.</span>sub_pkg2<span class=\"token punctuation\">.</span>mod4 <span class=\"token keyword\">import</span> qux <span class=\"token keyword\">as</span> grault\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> grault<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span>mod4<span class=\"token punctuation\">]</span> qux<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>另外，在子包中的模块，还可以引用同级子包中的模块。</p>\n<p>例如，假设你想要在模块<code>mod3</code>中导入并允许函数模块<code>mod1</code>中的函数<code>foo()</code>，你可以使用<strong>绝对导入</strong>：</p>\n<p><em><strong>pkg&#x2F;sub__pkg2&#x2F;mod3.py</strong></em></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">baz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[mod3] baz()'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Baz</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n<span class=\"token keyword\">from</span> pkg<span class=\"token punctuation\">.</span>sub_pkg1<span class=\"token punctuation\">.</span>mod1 <span class=\"token keyword\">import</span> foo\nfoo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> pkg<span class=\"token punctuation\">.</span>sub_pkg2 <span class=\"token keyword\">import</span> mod3\n<span class=\"token punctuation\">[</span>mod1<span class=\"token punctuation\">]</span> foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mod3<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span>mod1<span class=\"token punctuation\">]</span> foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>或者，你还可以使用<strong>相对导入</strong>，在相对导入中，<code>..</code>代表的是上一级包。</p>\n<ul>\n<li><code>..</code>代表的是上级包<code>pkg</code></li>\n<li><code>..sub_pkg1</code>代表的是子包<code>sub_pkg1</code>的上一级包</li>\n</ul>\n<p><em><strong>pkg&#x2F;sub__pkg2&#x2F;mod3.py</strong></em></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">baz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[mod3] baz()'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Baz</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token keyword\">import</span> sub_pkg1\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sub_pkg1<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>sub_pkg1<span class=\"token punctuation\">.</span>mod1 <span class=\"token keyword\">import</span> foo\nfoo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> pkg<span class=\"token punctuation\">.</span>sub_pkg2 <span class=\"token keyword\">import</span> mod3\n<span class=\"token operator\">&lt;</span>module <span class=\"token string\">'pkg.sub_pkg1'</span> <span class=\"token punctuation\">(</span>namespace<span class=\"token punctuation\">)</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">[</span>mod1<span class=\"token punctuation\">]</span> foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在本指南中，你可以学到以下内容：</p>\n<ul>\n<li>如何创建Python模块</li>\n<li>Python解释器如何查找模块</li>\n<li>通过<code>import</code>语句，如何访问模块中定义的对象</li>\n<li>如何将模块作为独立脚本来运行</li>\n<li>如何用包和子包的方式组织模块</li>\n<li>如何初始化包</li>\n</ul>\n<p>关于更多模块和包的内容，可以参考<strong>Python.org</strong>网站的文档：</p>\n<ul>\n<li><a href=\"https://docs.python.org/3/reference/import.html\">The <code>import</code> system</a></li>\n<li><a href=\"https://docs.python.org/3/tutorial/modules.html\">The Python tutorial: Modules</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>注：本文翻译自<a href=\"https://realpython.com/python-modules-packages/\">Python Modules and Packages – An Introduction</a>。</p>\n</blockquote>\n<p>本文主要探讨Python编程语言中的两种便于<strong>模块化编程(Modular programming)<strong>的机制：</strong>模块</strong>和<strong>包</strong>。</p>\n<p><strong>模块化编程</strong>是将大型的、复杂的编程工作，划分成独立、小块且便于管理的子任务或者模块，这些独立的模块可以像积木一样拼凑在一起，用于构建成一个应用。</p>\n<p>在开发大型的应用中，模块化编程有以下好处或特性：</p>\n<ul>\n<li><strong>简易性：</strong>与专注于全局相比，模块通常只需要专注在解决所有编程任务中的某一个局部问题。如果是负责编写一个模块，那么就只要专注于该模块所需要解决的问题，而不用去考虑模块以外的问题。这使得开发任务变得简单且不易出错。</li>\n<li><strong>可维护性：</strong>通常在设计模块的时候，需要为各个模块之间实施逻辑边界。如果在编写模块的时候，能够尽量减少模块之间的依赖性，就可以减少由于单个模块的改变，导致对其它模块影响的可能性。（你甚至可以在不了解整个应用架构的情况下，对单个模块更改而不影响应用。）这对于团队的所有程序员能够互相协作完成整个大型应用而言，变得至关重要。</li>\n<li><strong>可重复性：</strong>通过合理地定义模块中的接口，模块中定义的功能可以很方便地被应用中的其它部分重复利用。这减少了冗余的代码。</li>\n<li><strong>范围：</strong>模块通常定义了一个独立的<strong>命名空间</strong>(<strong>namespace</strong>)，这有助于避免在程序不同部分中包含的标识符冲突。</li>\n</ul>","more":"<h2 id=\"Python模块概述\"><a href=\"#Python模块概述\" class=\"headerlink\" title=\"Python模块概述\"></a>Python模块概述</h2><p>在Python中，有三种定义模块的方式：</p>\n<ol>\n<li>用Python语言编写的模块</li>\n<li>用<strong>C</strong>语言编写的模块，这种模块通常在程序运行时被动态加载，例如re(<strong>regular expression</strong>)模块</li>\n<li>Python内置的模块，例如<strong>itertools</strong>模块</li>\n</ol>\n<p>对于以上三种定义模块的方式，都可以使用<strong>import</strong>声明来访问模块的内容。</p>\n<p>在本文中，我们主要侧重于用Python语言编写的模块。比较酷的是，用Python语言编写的模块十分容易编译。只需要创建一个文件，文件名以<code>.py</code>后缀命名，然后写入合法的Python代码，该文件就可以作为模块使用了。</p>\n<p>举例说明，假设你创建了一个名为mod.py的文件，并且包含以下代码：</p>\n<p><em><strong>mod.py</strong></em></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">s <span class=\"token operator\">=</span> <span class=\"token string\">\"If Comrade Napoleon says it, it must be right.\"</span>\na <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'arg = </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>arg<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在<code>mod.py</code>中，主要定义了以下对象：</p>\n<ul>\n<li><code>s</code> (a string)</li>\n<li><code>a</code> (a list)</li>\n<li><code>foo()</code> (a function)</li>\n<li><code>Foo</code> (a class)</li>\n</ul>\n<p>假设<code>mod.py</code>模块已经被放置在合适的位置，那么模块中包含的对象就可以通过<code>import</code>的方式访问模块的内容：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> mod\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">)</span>\nIf Comrade Napoleon says it<span class=\"token punctuation\">,</span> it must be right<span class=\"token punctuation\">.</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mod<span class=\"token punctuation\">.</span>a\n<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mod<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'quux'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'corge'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'grault'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\narg <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'quux'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'corge'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'grault'</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> x <span class=\"token operator\">=</span> mod<span class=\"token punctuation\">.</span>Foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> x\n<span class=\"token operator\">&lt;</span>mod<span class=\"token punctuation\">.</span>Foo <span class=\"token builtin\">object</span> at <span class=\"token number\">0x03C181F0</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"模块查找路径\"><a href=\"#模块查找路径\" class=\"headerlink\" title=\"模块查找路径\"></a>模块查找路径</h2><p>继续引用上面的例子，让我们来看一下，当运行<code>import</code>声明时，到底发生了什么：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> mod<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>当Python解释器运行以上的<code>import</code>声明时，它会在一系列的目录中查找<code>mod.py</code>模块。这些目录的位置主要包含以下来源：</p>\n<ul>\n<li>如果解释器是通过交互式的方式运行，就会在脚本所在的<strong>当前目录</strong>查找<code>mod.py</code>模块。</li>\n<li>如果设置了Python的环境变量，就会在<code>PYTHONPATH</code>环境变量定义的目录中查找模块。</li>\n<li>Python安装过程中配置的与安装相关的目录</li>\n</ul>\n<p>模块的查找路径，可以通过<code>sys</code>模块获取：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> sys\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> sys<span class=\"token punctuation\">.</span>path\n<span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C:\\\\Users\\\\john\\\\Documents\\\\Python\\\\doc'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C:\\\\Python36\\\\Lib\\\\idlelib'</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">'C:\\\\Python36\\\\python36.zip'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C:\\\\Python36\\\\DLLs'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C:\\\\Python36\\\\lib'</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">'C:\\\\Python36'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C:\\\\Python36\\\\lib\\\\site-packages'</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>注意：根据安装的Python版本和操作系统不同，sys.path的内容会略有不同。以上例子中输出的结果可能与你计算机上看到的结果稍有差异。</p>\n</blockquote>\n<p>因此，为了确保编写的模块能够被Python解释器找到，你需要做以下工作：</p>\n<ul>\n<li>如果是交互式运行Python，需要将<code>mod.py</code>放到脚本所在的目录下面</li>\n<li>打开Python解释器之前，修改<code>PYTHONPATH</code>环境变量，以包含<code>mod.py</code>模块所在的目录，或者也可以将<code>mod.py</code>模块复制到<code>PYTHONPATH</code>环境变量已经定义的目录下</li>\n<li>将<code>mod.py</code>模块放到安装相关的目录下，但是根据操作系统的不同，可能对这些目录只有读取的权限，而没有写入的权限。</li>\n</ul>\n<p>其实，还有另外一种方法：你可以将模块文件放在任何一个目录下面，然后在运行脚本的时候修改<code>sys.path</code>的内容，以包含放置模块的目录。</p>\n<p>例如，在下面的例子中，可以将<code>mod.py</code>放在目录<code>C:\\Users\\john</code>下面，然后运行以下指令：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> sys<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">r'C:\\Users\\john'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> sys<span class=\"token punctuation\">.</span>path\n<span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C:\\\\Users\\\\john\\\\Documents\\\\Python\\\\doc'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C:\\\\Python36\\\\Lib\\\\idlelib'</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">'C:\\\\Python36\\\\python36.zip'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C:\\\\Python36\\\\DLLs'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C:\\\\Python36\\\\lib'</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">'C:\\\\Python36'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C:\\\\Python36\\\\lib\\\\site-packages'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C:\\\\Users\\\\john'</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> mod<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>模块被导入以后，你可以通过模块的属性<code>__file__</code>来查看模块文件的路径：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> mod\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mod<span class=\"token punctuation\">.</span>__file__\n<span class=\"token string\">'C:\\\\Users\\\\john\\\\mod.py'</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> re\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> re<span class=\"token punctuation\">.</span>__file__\n<span class=\"token string\">'C:\\\\Python36\\\\lib\\\\re.py'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>__file__</code>输出结果的目录部分，应该包含在<code>sys.path</code>的目录中。</p>\n<h2 id=\"import声明\"><a href=\"#import声明\" class=\"headerlink\" title=\"import声明\"></a>import声明</h2><p>通过<code>import</code>声明可以导入模块的内容。<code>import</code>声明可以通过几种不同的方式来导入模块，以下一一介绍。</p>\n<h3 id=\"import-lt-module-name-gt\"><a href=\"#import-lt-module-name-gt\" class=\"headerlink\" title=\"import &lt;module_name&gt;\"></a>import &lt;module_name&gt;</h3><p>最简单的导入模块的方式如下：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> <span class=\"token operator\">&lt;</span>module_name<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>由于模块有独立的命名空间，也就是说，模块有自己的<strong>私有符号表（private symbol table）</strong>，所以，即使在脚本中导入了模块，仍然无法直接访问模块中的对象。因为，这些对象仍然是被定义在模块的私有符号表中，如果要访问这些模块中的对象，必须要通过<strong>dot notation</strong>的方式来访问。</p>\n<p>在通过<code>import</code>导入模块以后，<code>mod</code>已经在当前脚本的本地符号表中，因此，<code>mod</code>在当前脚本中可以直接访问：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> mod\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mod\n<span class=\"token operator\">&lt;</span>module <span class=\"token string\">'mod'</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'C:\\\\Users\\\\john\\\\Documents\\\\Python\\\\doc\\\\mod.py'</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>但是，模块中定义的对象：<code>s</code>和<code>foo</code>仍然在模块私有符号表中，因此在本地符号表中并没有被定义：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> s\nNameError<span class=\"token punctuation\">:</span> name <span class=\"token string\">'s'</span> <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> defined\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> foo<span class=\"token punctuation\">(</span><span class=\"token string\">'quux'</span><span class=\"token punctuation\">)</span>\nNameError<span class=\"token punctuation\">:</span> name <span class=\"token string\">'foo'</span> <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> defined<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>为了能在当前脚本中访问模块中的对象，必须在对象前面加上前缀：**<module_name>.**</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> mod<span class=\"token punctuation\">.</span>s\n<span class=\"token string\">'If Comrade Napoleon says it, it must be right.'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mod<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">(</span><span class=\"token string\">'quux'</span><span class=\"token punctuation\">)</span>\narg <span class=\"token operator\">=</span> quux<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>import</code>声明还可以一次导入多个模块，不同模块之间可以用逗号隔开：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> <span class=\"token operator\">&lt;</span>module_name<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span>module_name<span class=\"token operator\">></span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"from-lt-module-name-gt-import-lt-name-s-gt\"><a href=\"#from-lt-module-name-gt-import-lt-name-s-gt\" class=\"headerlink\" title=\"from &lt;module_name&gt; import &lt;name(s)&gt;\"></a>from &lt;module_name&gt; import &lt;name(s)&gt;</h3><p><code>import</code>声明还可以将模块的对象直接导入到当前脚本的本地符号表中：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> <span class=\"token operator\">&lt;</span>module_name<span class=\"token operator\">></span> <span class=\"token keyword\">import</span> <span class=\"token operator\">&lt;</span>name<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>根据以上的导入方式，对象可以被直接访问，而不需要添加模块名前缀：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> mod <span class=\"token keyword\">import</span> s<span class=\"token punctuation\">,</span> foo\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> s\n<span class=\"token string\">'If Comrade Napoleon says it, it must be right.'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> foo<span class=\"token punctuation\">(</span><span class=\"token string\">'quux'</span><span class=\"token punctuation\">)</span>\narg <span class=\"token operator\">=</span> quux\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> mod <span class=\"token keyword\">import</span> Foo\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> x <span class=\"token operator\">=</span> Foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> x\n<span class=\"token operator\">&lt;</span>mod<span class=\"token punctuation\">.</span>Foo <span class=\"token builtin\">object</span> at <span class=\"token number\">0x02E3AD50</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>由于<code>import</code>直接把对象导入到当前脚本的本地符号表中，当前脚本如果已经存在相同名称的对象，将会被导入的对象所覆盖：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'baz'</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> a\n<span class=\"token punctuation\">[</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'baz'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> mod <span class=\"token keyword\">import</span> a\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> a\n<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>通过以下方式，还可以将模块中的所有对象一次性导入到当前的脚本：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> <span class=\"token operator\">&lt;</span>module_name<span class=\"token operator\">></span> <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这种方式会将模块中的所有对象导入到本地符号表中，除了名称以下划线(__)开始的对象。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> mod <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> s\n<span class=\"token string\">'If Comrade Napoleon says it, it must be right.'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> a\n<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> foo\n<span class=\"token operator\">&lt;</span>function foo at <span class=\"token number\">0x03B449C0</span><span class=\"token operator\">></span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> Foo\n<span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token string\">'mod.Foo'</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在大规模的代码开发场景中，并不推荐这种一次性导入所有对象的方式。因为，这种方式很容易导致冲突，会将已经定义的对象覆盖，应尽量避免。</p>\n<p>但是，如果在交互式解释器中运行，这种方式就非常方便，简单的输入，就能访问模块中的所有内容。</p>\n<h3 id=\"from-lt-module-name-gt-import-lt-name-gt-as-lt-alt-name-gt\"><a href=\"#from-lt-module-name-gt-import-lt-name-gt-as-lt-alt-name-gt\" class=\"headerlink\" title=\"from &lt;module_name&gt; import &lt;name&gt; as &lt;alt_name&gt;\"></a>from &lt;module_name&gt; import &lt;name&gt; as &lt;alt_name&gt;</h3><p>如果导入的对象名称与本地对象名称冲突，可以用别名来代替模块中的对象名称：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> <span class=\"token operator\">&lt;</span>module_name<span class=\"token operator\">></span> <span class=\"token keyword\">import</span> <span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span> <span class=\"token keyword\">as</span> <span class=\"token operator\">&lt;</span>alt_name<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span> <span class=\"token keyword\">as</span> <span class=\"token operator\">&lt;</span>alt_name<span class=\"token operator\">></span> …<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这样，就可以既避免冲突，也可以直接将模块对象导入到本地符号表中：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> s <span class=\"token operator\">=</span> <span class=\"token string\">'foo'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'baz'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> mod <span class=\"token keyword\">import</span> s <span class=\"token keyword\">as</span> string<span class=\"token punctuation\">,</span> a <span class=\"token keyword\">as</span> alist\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> s\n<span class=\"token string\">'foo'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> string\n<span class=\"token string\">'If Comrade Napoleon says it, it must be right.'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> a\n<span class=\"token punctuation\">[</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'baz'</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> alist\n<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"import-lt-module-name-gt-as-lt-alt-name-gt\"><a href=\"#import-lt-module-name-gt-as-lt-alt-name-gt\" class=\"headerlink\" title=\"import &lt;module_name&gt; as &lt;alt_name&gt;\"></a>import &lt;module_name&gt; as &lt;alt_name&gt;</h3><p>你也可以在导入模块的时候，指定用别名来代替模块的实际名称：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> <span class=\"token operator\">&lt;</span>module_name<span class=\"token operator\">></span> <span class=\"token keyword\">as</span> <span class=\"token operator\">&lt;</span>alt_name<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> mod <span class=\"token keyword\">as</span> my_module\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> my_module<span class=\"token punctuation\">.</span>a\n<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> my_module<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">(</span><span class=\"token string\">'qux'</span><span class=\"token punctuation\">)</span>\narg <span class=\"token operator\">=</span> qux<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>另外，在函数的定义中，也可以导入模块的内容。但是，只有当函数被调用的时候，模块才会被导入。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">from</span> mod <span class=\"token keyword\">import</span> foo\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     foo<span class=\"token punctuation\">(</span><span class=\"token string\">'corge'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> bar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\narg <span class=\"token operator\">=</span> corge<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>需要注意的是，在Python 3中，不支持用<code>import *</code>的语法在函数中定义导入模块的声明：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">from</span> mod <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\nSyntaxError<span class=\"token punctuation\">:</span> <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> only allowed at module level<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>最后，可以使用<code> try statement with an except ImportError</code>语句来处理导入模块失败的情况：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token comment\"># Non-existent module</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">import</span> baz\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token keyword\">except</span> ImportError<span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Module not found'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\nModule <span class=\"token keyword\">not</span> found<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token comment\"># Existing module, but non-existent object</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">from</span> mod <span class=\"token keyword\">import</span> baz\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token keyword\">except</span> ImportError<span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Object not found in module'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\nObject <span class=\"token keyword\">not</span> found <span class=\"token keyword\">in</span> module<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"函数dir\"><a href=\"#函数dir\" class=\"headerlink\" title=\"函数dir()\"></a>函数dir()</h2><p>在一个命名空间中，内置的<code>dir()</code>函数会返回一个列表，列表中包含的元素是已定义的名称。默认情况下，生成的列表成员按字母排序。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'__annotations__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__builtins__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__doc__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__loader__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__name__'</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">'__package__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__spec__'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> qux <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'__annotations__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__builtins__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__doc__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__loader__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__name__'</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">'__package__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__spec__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'qux'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">pass</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> x <span class=\"token operator\">=</span> Bar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'Bar'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__annotations__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__builtins__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__doc__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__loader__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__name__'</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">'__package__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__spec__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'qux'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'x'</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>从以上例子中可以注意到，第一次调用函数<code>dir()</code>后，在命名空间中已经存在预先定义好的名称。等到新的名称定义（qux, Bar, x）以后，就会出现在虽有调用函数<code>dir()</code>输出的结果中。</p>\n<p>函数<code>dir()</code>有助于我们识别哪些对象通过<code>import</code>的方式导入到了当前的命名空间中：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'__annotations__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__builtins__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__doc__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__loader__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__name__'</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">'__package__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__spec__'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> mod\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'__annotations__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__builtins__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__doc__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__loader__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__name__'</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">'__package__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__spec__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'mod'</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mod<span class=\"token punctuation\">.</span>s\n<span class=\"token string\">'If Comrade Napoleon says it, it must be right.'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mod<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\narg <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> mod <span class=\"token keyword\">import</span> a<span class=\"token punctuation\">,</span> Foo\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'Foo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__annotations__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__builtins__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__doc__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__loader__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__name__'</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">'__package__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__spec__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'mod'</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> a\n<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> x <span class=\"token operator\">=</span> Foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> x\n<span class=\"token operator\">&lt;</span>mod<span class=\"token punctuation\">.</span>Foo <span class=\"token builtin\">object</span> at <span class=\"token number\">0x002EAD50</span><span class=\"token operator\">></span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> mod <span class=\"token keyword\">import</span> s <span class=\"token keyword\">as</span> string\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'Foo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__annotations__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__builtins__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__doc__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__loader__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__name__'</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">'__package__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__spec__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'mod'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'x'</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> string\n<span class=\"token string\">'If Comrade Napoleon says it, it must be right.'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>当我们调用函数<code>dir()</code>的时候，将模块的名称作为参数，函数<code>dir()</code>就会列出模块中定义的所有名称：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> mod\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'Foo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__builtins__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__cached__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__doc__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__file__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__loader__'</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">'__name__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__package__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__spec__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'s'</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'__annotations__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__builtins__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__doc__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__loader__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__name__'</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">'__package__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__spec__'</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> mod <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'Foo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__annotations__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__builtins__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__doc__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__loader__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__name__'</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">'__package__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__spec__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'s'</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"用脚本的方式运行模块\"><a href=\"#用脚本的方式运行模块\" class=\"headerlink\" title=\"用脚本的方式运行模块\"></a>用脚本的方式运行模块</h2><p>在Python中，任何模块文件同时也是一个脚本，因此，可以直接当成脚本来运行。</p>\n<p>下面还是以<code>mod.py</code>脚本为例：</p>\n<p><em><strong>mod.py</strong></em></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">s <span class=\"token operator\">=</span> <span class=\"token string\">\"If Comrade Napoleon says it, it must be right.\"</span>\na <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'arg = </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>arg<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>该模块如果以脚本来运行：</p>\n<pre class=\"line-numbers language-Windows\" data-language=\"Windows\"><div class=\"caption\"><span>Command Prompt</span></div><code class=\"language-Windows\">C:\\Users\\john\\Documents&gt;python mod.py\nC:\\Users\\john\\Documents&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>从以上结果来看，没有出现任何错误。因此，说明该脚本运行成功，但是由于只定义了对象，并没有输出任何结果。</p>\n<p>下面修改一下脚本，让它输出一些内容：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">s <span class=\"token operator\">=</span> <span class=\"token string\">\"If Comrade Napoleon says it, it must be right.\"</span>\na <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'arg = </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>arg<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\nfoo<span class=\"token punctuation\">(</span><span class=\"token string\">'quux'</span><span class=\"token punctuation\">)</span>\nx <span class=\"token operator\">=</span> Foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>现在，我们可以看到以下输出结果：</p>\n<pre class=\"line-numbers language-Windows\" data-language=\"Windows\"><div class=\"caption\"><span>Command Prompt</span></div><code class=\"language-Windows\">C:\\Users\\john\\Documents&gt;python mod.py\nIf Comrade Napoleon says it, it must be right.\n[100, 200, 300]\narg &#x3D; quux\n&lt;__main__.Foo object at 0x02F101D0&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果将其作为模块导入，我们会发现导入模块的过程中，也会输出结果：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> mod\nIf Comrade Napoleon says it<span class=\"token punctuation\">,</span> it must be right<span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">]</span>\narg <span class=\"token operator\">=</span> quux\n<span class=\"token operator\">&lt;</span>mod<span class=\"token punctuation\">.</span>Foo <span class=\"token builtin\">object</span> at <span class=\"token number\">0x0169AD50</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>通常情况下，我们都希望导入模块的时候，不生成任何结果。只有当模块作为脚本运行的时候，才输出结果。</p>\n<p>当模块导入的时候，Python会将变量<code>__name__</code>设置为模块的名称，但是当作为脚本运行时，<code>__name__</code>会设置为字符串<code>__main__</code>。根据该特性，我们可以区分是导入模块还是运行脚本：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">s <span class=\"token operator\">=</span> <span class=\"token string\">\"If Comrade Napoleon says it, it must be right.\"</span>\na <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'arg = </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>arg<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>__name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Executing as standalone script'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n    foo<span class=\"token punctuation\">(</span><span class=\"token string\">'quux'</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> Foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>现在，如果运行脚本，会得到以下结果：</p>\n<pre class=\"line-numbers language-Windows\" data-language=\"Windows\"><div class=\"caption\"><span>Command Prompt</span></div><code class=\"language-Windows\">C:\\Users\\john\\Documents&gt;python mod.py\nExecuting as standalone script\nIf Comrade Napoleon says it, it must be right.\n[100, 200, 300]\narg &#x3D; quux\n&lt;__main__.Foo object at 0x03450690&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>但是，如果当模块导入，就不会有任何结果输出：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> mod\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mod<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">(</span><span class=\"token string\">'grault'</span><span class=\"token punctuation\">)</span>\narg <span class=\"token operator\">=</span> grault<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>通常在设计模块的时候，为了对模块做单元测试，也需要将模块当作脚本来直接运行。例如，假设创建了一个<code>fact.py</code>的模块，该模块包含factorial函数：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">fact</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span> <span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token keyword\">else</span> n <span class=\"token operator\">*</span> fact<span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>__name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">import</span> sys\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>fact<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>将该模块中的<code>fact()</code>函数导入：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> fact <span class=\"token keyword\">import</span> fact\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> fact<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">720</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>另外，为了测试，也可以将该模块单独运行，在命令行中输入整型参数：</p>\n<pre class=\"line-numbers language-Windows\" data-language=\"Windows\"><div class=\"caption\"><span>Command Prompt</span></div><code class=\"language-Windows\">C:\\Users\\john\\Documents&gt;python fact.py 6\n720<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"重新加载模块\"><a href=\"#重新加载模块\" class=\"headerlink\" title=\"重新加载模块\"></a>重新加载模块</h2><p>出于效率的原因，在每一个解释器会话中，模块只会被加载一次。对于函数和类的定义来说，这没什么问题。但是，通常是为了初始化的缘故，模块还可能包含一些可执行的声明。需要注意的是，在当前的解释器会话中，当模块被导入后，这些声明只会被执行一次。即使再次导入模块，这些声明也不会被再次执行。</p>\n<p>下面以<code>mod.py</code>:</p>\n<p><em><strong>mod.py</strong></em></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a ='</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> mod\na <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> mod\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> mod\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mod<span class=\"token punctuation\">.</span>a\n<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>以上例子中，在后续两次import过程中，<code>print()</code>声明都没有别执行。其实，声明<code>a = [100, 200, 300]</code>也没有再次执行，但是最后<code>mod.a</code>的结果显示，一旦赋值声明（assignment statement）执行后，就会将结果保留。</p>\n<p>如果更改了模块的内容，并且需要重新加载模块，可以重启解释器，或者使用模块<code>importlib</code>中的函数<code>reload()</code>:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> mod\na <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> mod\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> importlib\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> importlib<span class=\"token punctuation\">.</span><span class=\"token builtin\">reload</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">)</span>\na <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">&lt;</span>module <span class=\"token string\">'mod'</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'C:\\\\Users\\\\john\\\\Documents\\\\Python\\\\doc\\\\mod.py'</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"Python-包\"><a href=\"#Python-包\" class=\"headerlink\" title=\"Python 包\"></a>Python 包</h2><p>假设你开发了一个大型的应用，该应用包含许多模块。随着模块数量的增加，尤其是当这些模块有相似的名称和功能的时候，管理这些模块变得越来越困难。你可能会希望有一个更换的方法来分类和组织这些模块。</p>\n<p><strong>包</strong>通过使用点表示法（<strong>dot notation</strong>），可以提供一种层次性结构的模块命名空间。通过这种方式，<strong>模块</strong>可以使得全局变量名之间避免冲突，<strong>包</strong>可以使得模块名之间避免冲突。</p>\n<p>创建一个<strong>包</strong>非常简单，只需要创建一个目录，并将模块放到该目录下面。该目录就是一个Python<strong>包</strong>。</p>\n<p>可以参考一下下面的例子：</p>\n<p><img src=\"/2022/02/03/python/python-mo-kuai-he-bao-jie-shao/pkg1.9af1c7aea48f.png\"></p>\n<p>以上例子中，目录名为<code>pkg</code>，该目录包含两个模块：<code>mod1.py</code>和<code>mod2.py</code>。模块的内容如下：</p>\n<p><em><strong>mod1.py</strong></em></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[mod1] foo()'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><em><strong>mod2.py</strong></em></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[mod2] bar()'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Bar</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>根据这种结构，我们可以继续使用之前导入模块的方法，使用点表示法（<strong>dot notation</strong>）来导入包里面的模块：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> <span class=\"token operator\">&lt;</span>module_name<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span>module_name<span class=\"token operator\">></span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> pkg<span class=\"token punctuation\">.</span>mod1<span class=\"token punctuation\">,</span> pkg<span class=\"token punctuation\">.</span>mod2\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> pkg<span class=\"token punctuation\">.</span>mod1<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span>mod1<span class=\"token punctuation\">]</span> foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> x <span class=\"token operator\">=</span> pkg<span class=\"token punctuation\">.</span>mod2<span class=\"token punctuation\">.</span>Bar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> x\n<span class=\"token operator\">&lt;</span>pkg<span class=\"token punctuation\">.</span>mod2<span class=\"token punctuation\">.</span>Bar <span class=\"token builtin\">object</span> at <span class=\"token number\">0x033F7290</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> <span class=\"token operator\">&lt;</span>module_name<span class=\"token operator\">></span> <span class=\"token keyword\">import</span> <span class=\"token operator\">&lt;</span>name<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> pkg<span class=\"token punctuation\">.</span>mod1 <span class=\"token keyword\">import</span> foo\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span>mod1<span class=\"token punctuation\">]</span> foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> <span class=\"token operator\">&lt;</span>module_name<span class=\"token operator\">></span> <span class=\"token keyword\">import</span> <span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span> <span class=\"token keyword\">as</span> <span class=\"token operator\">&lt;</span>alt_name<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> pkg<span class=\"token punctuation\">.</span>mod2 <span class=\"token keyword\">import</span> Bar <span class=\"token keyword\">as</span> Qux\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> x <span class=\"token operator\">=</span> Qux<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> x\n<span class=\"token operator\">&lt;</span>pkg<span class=\"token punctuation\">.</span>mod2<span class=\"token punctuation\">.</span>Bar <span class=\"token builtin\">object</span> at <span class=\"token number\">0x036DFFD0</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>另外，你也可以使用以下方式导入模块：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> <span class=\"token operator\">&lt;</span>package_name<span class=\"token operator\">></span> <span class=\"token keyword\">import</span> <span class=\"token operator\">&lt;</span>modules_name<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span>module_name<span class=\"token operator\">></span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">from</span> <span class=\"token operator\">&lt;</span>package_name<span class=\"token operator\">></span> <span class=\"token keyword\">import</span> <span class=\"token operator\">&lt;</span>module_name<span class=\"token operator\">></span> <span class=\"token keyword\">as</span> <span class=\"token operator\">&lt;</span>alt_name<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> pkg <span class=\"token keyword\">import</span> mod1\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mod1<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span>mod1<span class=\"token punctuation\">]</span> foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> pkg <span class=\"token keyword\">import</span> mod2 <span class=\"token keyword\">as</span> quux\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> quux<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span>mod2<span class=\"token punctuation\">]</span> bar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>其实，从技术上来讲，你也可以直接导入包：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> pkg\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> pkg\n<span class=\"token operator\">&lt;</span>module <span class=\"token string\">'pkg'</span> <span class=\"token punctuation\">(</span>namespace<span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>但是，其实这没有什么用。虽然用这种方式导入了包，但实际上模块并没有被导入到本地命名空间。所以，在调用模块时就会报错。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> pkg<span class=\"token punctuation\">.</span>mod1\nTraceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  File <span class=\"token string\">\"&lt;pyshell#34>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span>\n    pkg<span class=\"token punctuation\">.</span>mod1\nAttributeError<span class=\"token punctuation\">:</span> module <span class=\"token string\">'pkg'</span> has no attribute <span class=\"token string\">'mod1'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> pkg<span class=\"token punctuation\">.</span>mod1<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nTraceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  File <span class=\"token string\">\"&lt;pyshell#35>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span>\n    pkg<span class=\"token punctuation\">.</span>mod1<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nAttributeError<span class=\"token punctuation\">:</span> module <span class=\"token string\">'pkg'</span> has no attribute <span class=\"token string\">'mod1'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> pkg<span class=\"token punctuation\">.</span>mod2<span class=\"token punctuation\">.</span>Bar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nTraceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  File <span class=\"token string\">\"&lt;pyshell#36>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span>\n    pkg<span class=\"token punctuation\">.</span>mod2<span class=\"token punctuation\">.</span>Bar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nAttributeError<span class=\"token punctuation\">:</span> module <span class=\"token string\">'pkg'</span> has no attribute <span class=\"token string\">'mod2'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>因此，你需要使用之前的方法导入模块或者模块所包含的对象。</p>\n<h2 id=\"包初始化\"><a href=\"#包初始化\" class=\"headerlink\" title=\"包初始化\"></a>包初始化</h2><p>如果在包的目录下有文件名为<code>__init__.py</code>的文件，当包或者模块被导入的时候，该文件就会被调用执行。文件中包含的代码主要用来对包进行初始化。</p>\n<p>下面，可以参考一下以下<code>__init__.py</code>文件：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Invoking __init__.py for </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>__name__<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\nA <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'quux'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'corge'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'grault'</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>将文件<code>__init__.py</code>放到<code>pkg</code>目录下方：</p>\n<p><img src=\"/2022/02/03/python/python-mo-kuai-he-bao-jie-shao/pkg1_133918.png\"></p>\n<p>当包被导入的时候，全局列表A会被初始化：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> pkg\nInvoking __init__<span class=\"token punctuation\">.</span>py <span class=\"token keyword\">for</span> pkg\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> pkg<span class=\"token punctuation\">.</span>A\n<span class=\"token punctuation\">[</span><span class=\"token string\">'quux'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'corge'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'grault'</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在包中的模块也可以访问全局列表A：</p>\n<p><em><strong>mode1.py</strong></em></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">from</span> pkg <span class=\"token keyword\">import</span> A\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[mod1] foo() / A = '</span><span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> pkg <span class=\"token keyword\">import</span> mod1\nInvoking __init__<span class=\"token punctuation\">.</span>py <span class=\"token keyword\">for</span> pkg\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mod1<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span>mod1<span class=\"token punctuation\">]</span> foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> A <span class=\"token operator\">=</span>  <span class=\"token punctuation\">[</span><span class=\"token string\">'quux'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'corge'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'grault'</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>文件<code>__init__.py</code>还可以用来导入包中的模块。例如，之前如果只导入包<code>import pkg</code>，实际上模块并没有被导入。但是，如果在文件<code>__init__.py</code>中添加以下语句：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Invoking __init__.py for </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>__name__<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">import</span> pkg<span class=\"token punctuation\">.</span>mod1<span class=\"token punctuation\">,</span> pkg<span class=\"token punctuation\">.</span>mod2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>当运行<code>import pkg</code>的时候，模块mod1和mod2就会自动被导入：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> pkg\nInvoking __init__<span class=\"token punctuation\">.</span>py <span class=\"token keyword\">for</span> pkg\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> pkg<span class=\"token punctuation\">.</span>mod1<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span>mod1<span class=\"token punctuation\">]</span> foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> pkg<span class=\"token punctuation\">.</span>mod2<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span>mod2<span class=\"token punctuation\">]</span> bar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>注意：大部分的Pyton文档中都声明，如果要创建包，就必须在包目录下创建文件<code>__init__.py</code>，即使该文件不包含任何内容，也必须出现在包所在目录下。</p>\n<p>但是，从Python 3.3开始， <a href=\"https://www.python.org/dev/peps/pep-0420\">Implicit Namespace Packages</a>允许即使没有文件<code>__init__.py</code>文件，仍然可以创建包。当然，如果要初始化包，仍然可以使用<code>__init__.py</code>文件。</p>\n</blockquote>\n<h2 id=\"Importing-From-a-Package\"><a href=\"#Importing-From-a-Package\" class=\"headerlink\" title=\"Importing * From a Package\"></a>Importing * From a Package</h2><p>为了便于接下来的讨论，在之前定义的包中增加一些额外的模块：</p>\n<p><img src=\"/2022/02/03/python/python-mo-kuai-he-bao-jie-shao/pkg3.d2160908ae77.png\"></p>\n<p>现在，包里面有4个模块，具体分别如下：</p>\n<p><em><strong>mod1.py</strong></em></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[mod1] foo()'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><em><strong>mod2.py</strong></em></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[mod2] bar()'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Bar</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><em><strong>mod3.py</strong></em></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">baz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[mod3] baz()'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Baz</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><em><strong>mod4.py</strong></em></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">qux</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[mod4] qux()'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Qux</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>根据之前的例子，如果用<code>from &lt;module name &gt; import *</code>的方式导入模块，除了以下划线命名的对象以外，可以将模块包含的所有对象导入到本地符号表：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'__annotations__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__builtins__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__doc__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__loader__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__name__'</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">'__package__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__spec__'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> pkg<span class=\"token punctuation\">.</span>mod3 <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'Baz'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__annotations__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__builtins__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__doc__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__loader__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__name__'</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">'__package__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__spec__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'baz'</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> baz<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span>mod3<span class=\"token punctuation\">]</span> baz<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> Baz\n<span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token string\">'pkg.mod3.Baz'</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>同样，我们也可以用相似的语法导入包：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> <span class=\"token operator\">&lt;</span>package_name<span class=\"token operator\">></span> <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'__annotations__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__builtins__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__doc__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__loader__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__name__'</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">'__package__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__spec__'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> pkg <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'__annotations__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__builtins__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__doc__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__loader__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__name__'</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">'__package__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__spec__'</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>但是，与导入模块不同，用<code>from &lt;package_name&gt; import *</code>导入包后，结果却显示没有导入任何内容。</p>\n<p>其实，Python遵循了一种规范：如果<code>__init__.py</code>的代码中有一个名为<code>__all__</code>的列表，该列表中定义的模块名，在用<code>from &lt;package_name&gt; import *</code>导入时，就会被自动导入。</p>\n<p>在当前的例子中，假设你在<code>pkg</code>包中创建了一个<code>__init__.py</code>的文件，内容如下：</p>\n<p><em><strong>pkg&#x2F;<strong>init</strong>.py</strong></em></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">__all__ <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">'mod1'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'mod2'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'mod3'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'mod4'</span>\n        <span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>现在用<code>from pkg import *</code>导入包后，就可以同时导入4个模块：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'__annotations__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__builtins__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__doc__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__loader__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__name__'</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">'__package__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__spec__'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> pkg <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'__annotations__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__builtins__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__doc__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__loader__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__name__'</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">'__package__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__spec__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'mod1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'mod2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'mod3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'mod4'</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mod2<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span>mod2<span class=\"token punctuation\">]</span> bar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mod4<span class=\"token punctuation\">.</span>Qux\n<span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token string\">'pkg.mod4.Qux'</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>通过<code>__all__</code>这种方式，我们就可以控制哪些模块可以被<code>import *</code>这种方式自动导入。</p>\n<p>其实，<code>__all__</code>也可以用相同的方式作用于模块：控制模块中的哪些对象可以被<code>import *</code>的方式导入。</p>\n<p>下面以<code>mod1.py</code>为例：</p>\n<p><em><strong>pkg&#x2F;mod1.py</strong></em></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">__all__ <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[mod1] foo()'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>根据以上模块中<code>__all__</code>的定义，通过<code>import *</code>只会导入<code>foo</code>对象：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'__annotations__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__builtins__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__doc__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__loader__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__name__'</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">'__package__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__spec__'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> pkg<span class=\"token punctuation\">.</span>mod1 <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'__annotations__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__builtins__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__doc__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__loader__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__name__'</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">'__package__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'__spec__'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span>mod1<span class=\"token punctuation\">]</span> foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> Foo\nTraceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  File <span class=\"token string\">\"&lt;pyshell#37>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span>\n    Foo\nNameError<span class=\"token punctuation\">:</span> name <span class=\"token string\">'Foo'</span> <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> defined<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>foo()</code>被导入到本地命名空间，但是类<code>Foo</code>并没有被导入，因为<code>Foo</code>并没有被定义在<code>__all__</code>中。</p>\n<p>总结一下，当使用<code>import *</code>语句的时候，<code>__all__</code>可以用来定义<strong>包</strong>和<strong>模块</strong>导入的内容。但是，具体的使用上有一些区别：</p>\n<ul>\n<li>对包而言，当<code>__all__</code>没有定义的时候，<code>import *</code>不会导入任何内容。</li>\n<li>对模块而言，当<code>__all__</code>没有定义的时候，<code>import *</code>会导入模块中的所有对象（除了以下划线命名的对象）。</li>\n</ul>\n<h2 id=\"子包（Subpackages）\"><a href=\"#子包（Subpackages）\" class=\"headerlink\" title=\"子包（Subpackages）\"></a>子包（Subpackages）</h2><p>包还可以包含子包，对于子包的层级也没有任何限制。例如，对之前的例子做一些修改：</p>\n<p><img src=\"/2022/02/03/python/python-mo-kuai-he-bao-jie-shao/pkg4_100818.png\"></p>\n<p>之前定义的四个模块：<code>mod1.py</code>, <code>mod2.py</code>, <code>mod3.py</code>, <code>mod4.py</code>，分别被放到两个子包下面：<code>sub_pkg1</code>和<code>sub_pkg2</code>。</p>\n<p>仍然和之前一样，可以用点表达式的方式导入子包下面的模块：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> pkg<span class=\"token punctuation\">.</span>sub_pkg1<span class=\"token punctuation\">.</span>mod1\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> pkg<span class=\"token punctuation\">.</span>sub_pkg1<span class=\"token punctuation\">.</span>mod1<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span>mod1<span class=\"token punctuation\">]</span> foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> pkg<span class=\"token punctuation\">.</span>sub_pkg1 <span class=\"token keyword\">import</span> mod2\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mod2<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span>mod2<span class=\"token punctuation\">]</span> bar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> pkg<span class=\"token punctuation\">.</span>sub_pkg2<span class=\"token punctuation\">.</span>mod3 <span class=\"token keyword\">import</span> baz\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> baz<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span>mod3<span class=\"token punctuation\">]</span> baz<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> pkg<span class=\"token punctuation\">.</span>sub_pkg2<span class=\"token punctuation\">.</span>mod4 <span class=\"token keyword\">import</span> qux <span class=\"token keyword\">as</span> grault\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> grault<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span>mod4<span class=\"token punctuation\">]</span> qux<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>另外，在子包中的模块，还可以引用同级子包中的模块。</p>\n<p>例如，假设你想要在模块<code>mod3</code>中导入并允许函数模块<code>mod1</code>中的函数<code>foo()</code>，你可以使用<strong>绝对导入</strong>：</p>\n<p><em><strong>pkg&#x2F;sub__pkg2&#x2F;mod3.py</strong></em></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">baz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[mod3] baz()'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Baz</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n<span class=\"token keyword\">from</span> pkg<span class=\"token punctuation\">.</span>sub_pkg1<span class=\"token punctuation\">.</span>mod1 <span class=\"token keyword\">import</span> foo\nfoo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> pkg<span class=\"token punctuation\">.</span>sub_pkg2 <span class=\"token keyword\">import</span> mod3\n<span class=\"token punctuation\">[</span>mod1<span class=\"token punctuation\">]</span> foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> mod3<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span>mod1<span class=\"token punctuation\">]</span> foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>或者，你还可以使用<strong>相对导入</strong>，在相对导入中，<code>..</code>代表的是上一级包。</p>\n<ul>\n<li><code>..</code>代表的是上级包<code>pkg</code></li>\n<li><code>..sub_pkg1</code>代表的是子包<code>sub_pkg1</code>的上一级包</li>\n</ul>\n<p><em><strong>pkg&#x2F;sub__pkg2&#x2F;mod3.py</strong></em></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">baz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[mod3] baz()'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Baz</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token keyword\">import</span> sub_pkg1\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sub_pkg1<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>sub_pkg1<span class=\"token punctuation\">.</span>mod1 <span class=\"token keyword\">import</span> foo\nfoo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> pkg<span class=\"token punctuation\">.</span>sub_pkg2 <span class=\"token keyword\">import</span> mod3\n<span class=\"token operator\">&lt;</span>module <span class=\"token string\">'pkg.sub_pkg1'</span> <span class=\"token punctuation\">(</span>namespace<span class=\"token punctuation\">)</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">[</span>mod1<span class=\"token punctuation\">]</span> foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在本指南中，你可以学到以下内容：</p>\n<ul>\n<li>如何创建Python模块</li>\n<li>Python解释器如何查找模块</li>\n<li>通过<code>import</code>语句，如何访问模块中定义的对象</li>\n<li>如何将模块作为独立脚本来运行</li>\n<li>如何用包和子包的方式组织模块</li>\n<li>如何初始化包</li>\n</ul>\n<p>关于更多模块和包的内容，可以参考<strong>Python.org</strong>网站的文档：</p>\n<ul>\n<li><a href=\"https://docs.python.org/3/reference/import.html\">The <code>import</code> system</a></li>\n<li><a href=\"https://docs.python.org/3/tutorial/modules.html\">The Python tutorial: Modules</a></li>\n</ul>"},{"title":"Requests库使用指南","date":"2022-02-08T07:40:20.000Z","img":"/medias/featureimages/28.jpg","_content":"\n> 注：本文翻译自[Python’s Requests Library (Guide)](https://realpython.com/python-requests/)。\n\n# Requests库使用指南\n\n在Python中，`requests`库是处理HTTP请求的标准。它使得复杂的HTTP请求变得简单、易用，让你可以专注于处理与服务之间的交互，为应用获取所需的数据。\n\n通过本文，你可以学到许多`requests`库中的有用功能，并且可以根据实际的需求，定制和优化这些功能。你还会学到如何有效地使用`requests`库，避免由于访问外部服务而影响应用的响应速度。\n\n在本指南中，你将学到以下内容：\n\n- 通过`requests`使用HTTP中最常见的方式\n- 定制`requests`中的报头和数据，使用询问字符和消息内容\n- 检查查询和响应中的数据\n- 发送认证请求\n- 配置请求，防止应用的响应速度变慢\n\n<!-- more -->\n\n## 开始使用requests\n\n首先，需要安装`requests`库：\n\n```shell\n$ pip install requests\n```\n\n安装完成后，需要先导入`requests`库：\n\n```python\nimport requests\n```\n\n## GET请求\n\nHTTP有很多种请求方式，例如GET和POST，不同的请求方式，所执行的操作是不同的。其中，GET是最常用的HTTP请求。GET主要是用来获取Web数据。如果发起一个GET请求，就会调用`requests.get()`。\n\n以下例子中，你可以看到通过调用`get()`发送GET请求给Github的[Root REST API](https://developer.github.com/v3/#root-endpoint)。\n\n```python\n>>> requests.get('https://api.github.com')\n<Response [200]>\n```\n\n ## 响应\n\n通过发送GET请求以后，我们可以得到一个Response的对象。将该对象存储到一个变量中后，我们可以查看该对象的属性和方法：\n\n```python\n>>> response = requests.get('https://api.github.com')\n```\n\n在以上例子中，我们将响应对象存储到`response`变量中。\n\n### 状态码（Status Codes）\n\n从响应`Response`中首先可以获取状态码，通过状态码来判断请求是否成功。\n\n例如，如果状态码是`200 OK`，那么说明请求是成功的，但是如果状态码是`404 NOT FOUND`，则说明未找到需要获取的资源。关于状态码的详细说明，请参考文档：[many other possible status codes](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes)\n\n通过访问响应`response`的属性`.status_code`，可以看到服务器返回的状态码：\n\n```python\n>>> response.status_code\n200\n```\n\n`.status_code`返回的是`200`，说明请求时成功的，并且服务器返回了你需要获取的数据。\n\n有些情况下，你可能想要通过状态码来作为判断条件：\n\n```python\nif response.status_code == 200:\n    print('Success!')\nelif response.status_code == 404:\n    print('Not Found.')\n```\n\n以上例子中，如果服务器返回`200`的状态码，那么程序就会打印`Success!`。如果服务器返回`404`的状态码，程序就会打印`Not Found.`。\n\n`requests`提供了一种更为简便的方法。如果直接使用`Response`实例作为判断的条件，假设状态码在`200`和`400`之间，那么表达式就会被评估为`True`，否则就会被评估为`False`。\n\n因此，你可以将之前的例子改写如下：\n\n```python\nif response:\n    print('Success!')\nelse:\n    print('An error has occurred.')\n```\n\n> 技术细节：This [Truth Value Test](https://docs.python.org/3/library/stdtypes.html#truth-value-testing) is made possible because [`__bool__()` is an overloaded method](https://realpython.com/operator-function-overloading/#making-your-objects-truthy-or-falsey-using-bool) on `Response`.\n>\n> This means that the default behavior of `Response` has been redefined to take the status code into account when determining the truth value of the object.\n\n记住这种方式并不是检验状态码是否等于`200`，而是检验状态码是否在`200`到`400`之间，例如`204 NO CONTENT`和`304 NOT MODIFIED`，也被认为是请求成功的。\n\n例如，`204`是说明请求是成功的，但是返回的消息正文并没有任何内容。\n\n因此，如果只是为了知道请求是否成功，可以使用这种简便的方法，否则，建议还是根据具体的状态码来判断。\n\n有时候，可能你不希望用`if`语句来检查状态码，而是希望在请求失败的情况下，引发异常。那么你就可以使用`.raise_for_status()`：\n\n```python\nimport requests\nfrom requests.exceptions import HTTPError\n\nfor url in ['https://api.github.com', 'https://api.github.com/invalid']:\n    try:\n        response = requests.get(url)\n\n        # If the response was successful, no Exception will be raised\n        response.raise_for_status()\n    except HTTPError as http_err:\n        print(f'HTTP error occurred: {http_err}')  # Python 3.6\n    except Exception as err:\n        print(f'Other error occurred: {err}')  # Python 3.6\n    else:\n        print('Success!')\n```\n\n如果你调用`.raise_for_status()`，就会对某些失败的状态码引发`HTTPError`的异常错误。如果状态码显示请求是成功的，那么程序就不会引发异常。\n\n通过以上内容，你了解了很多关于如何处理状态码的知识。下面，你将看到如何查看服务器返回的具体数据内容。\n\n### 内容（Content）\n\nGET请求得到的响应经常包含很多有价值的信息，如消息正文中的payload。通过使用`Response`的属性和方法，你可以用不同的格式来查看payload。\n\n用bytes的格式查看响应的内容，你可以使用`.content`：\n\n```python\n>>> response = requests.get('https://api.github.com')\n>>> response.content\nb'{\"current_user_url\":\"https://api.github.com/user\",\"current_user_authorizations_html_url\":\"https://github.com/settings/connections/applications{/client_id}\",\"authorizations_url\":\"https://api.github.com/authorizations\",\"code_search_url\":\"https://api.github.com/search/code?q={query}{&page,per_page,sort,order}\",\"commit_search_url\":\"https://api.github.com/search/commits?q={query}{&page,per_page,sort,order}\",\"emails_url\":\"https://api.github.com/user/emails\",\"emojis_url\":\"https://api.github.com/emojis\",\"events_url\":\"https://api.github.com/events\",\"feeds_url\":\"https://api.github.com/feeds\",\"followers_url\":\"https://api.github.com/user/followers\",\"following_url\":\"https://api.github.com/user/following{/target}\",\"gists_url\":\"https://api.github.com/gists{/gist_id}\",\"hub_url\":\"https://api.github.com/hub\",\"issue_search_url\":\"https://api.github.com/search/issues?q={query}{&page,per_page,sort,order}\",\"issues_url\":\"https://api.github.com/issues\",\"keys_url\":\"https://api.github.com/user/keys\",\"notifications_url\":\"https://api.github.com/notifications\",\"organization_repositories_url\":\"https://api.github.com/orgs/{org}/repos{?type,page,per_page,sort}\",\"organization_url\":\"https://api.github.com/orgs/{org}\",\"public_gists_url\":\"https://api.github.com/gists/public\",\"rate_limit_url\":\"https://api.github.com/rate_limit\",\"repository_url\":\"https://api.github.com/repos/{owner}/{repo}\",\"repository_search_url\":\"https://api.github.com/search/repositories?q={query}{&page,per_page,sort,order}\",\"current_user_repositories_url\":\"https://api.github.com/user/repos{?type,page,per_page,sort}\",\"starred_url\":\"https://api.github.com/user/starred{/owner}{/repo}\",\"starred_gists_url\":\"https://api.github.com/gists/starred\",\"team_url\":\"https://api.github.com/teams\",\"user_url\":\"https://api.github.com/users/{user}\",\"user_organizations_url\":\"https://api.github.com/user/orgs\",\"user_repositories_url\":\"https://api.github.com/users/{user}/repos{?type,page,per_page,sort}\",\"user_search_url\":\"https://api.github.com/search/users?q={query}{&page,per_page,sort,order}\"}'\n```\n\n通过`.content`读取到的是字节格式的payload，如果你想要将其转换成UTF-8编码的字符串，你可以使用`.text`：\n\n```python\n>>> response.text\n'{\"current_user_url\":\"https://api.github.com/user\",\"current_user_authorizations_html_url\":\"https://github.com/settings/connections/applications{/client_id}\",\"authorizations_url\":\"https://api.github.com/authorizations\",\"code_search_url\":\"https://api.github.com/search/code?q={query}{&page,per_page,sort,order}\",\"commit_search_url\":\"https://api.github.com/search/commits?q={query}{&page,per_page,sort,order}\",\"emails_url\":\"https://api.github.com/user/emails\",\"emojis_url\":\"https://api.github.com/emojis\",\"events_url\":\"https://api.github.com/events\",\"feeds_url\":\"https://api.github.com/feeds\",\"followers_url\":\"https://api.github.com/user/followers\",\"following_url\":\"https://api.github.com/user/following{/target}\",\"gists_url\":\"https://api.github.com/gists{/gist_id}\",\"hub_url\":\"https://api.github.com/hub\",\"issue_search_url\":\"https://api.github.com/search/issues?q={query}{&page,per_page,sort,order}\",\"issues_url\":\"https://api.github.com/issues\",\"keys_url\":\"https://api.github.com/user/keys\",\"notifications_url\":\"https://api.github.com/notifications\",\"organization_repositories_url\":\"https://api.github.com/orgs/{org}/repos{?type,page,per_page,sort}\",\"organization_url\":\"https://api.github.com/orgs/{org}\",\"public_gists_url\":\"https://api.github.com/gists/public\",\"rate_limit_url\":\"https://api.github.com/rate_limit\",\"repository_url\":\"https://api.github.com/repos/{owner}/{repo}\",\"repository_search_url\":\"https://api.github.com/search/repositories?q={query}{&page,per_page,sort,order}\",\"current_user_repositories_url\":\"https://api.github.com/user/repos{?type,page,per_page,sort}\",\"starred_url\":\"https://api.github.com/user/starred{/owner}{/repo}\",\"starred_gists_url\":\"https://api.github.com/gists/starred\",\"team_url\":\"https://api.github.com/teams\",\"user_url\":\"https://api.github.com/users/{user}\",\"user_organizations_url\":\"https://api.github.com/user/orgs\",\"user_repositories_url\":\"https://api.github.com/users/{user}/repos{?type,page,per_page,sort}\",\"user_search_url\":\"https://api.github.com/search/users?q={query}{&page,per_page,sort,order}\"}'\n```\n\n因为将`bytes`转换成`str`需要指定编码的方式，`requests`会根据响应中的`hearders`内容来猜测编码的方式，或者，你也可以通过设置`.encoding`指定编码的方式：\n\n```python\n>>> response.encoding = 'utf-8' # Optional: requests infers this internally\n>>> response.text\n'{\"current_user_url\":\"https://api.github.com/user\",\"current_user_authorizations_html_url\":\"https://github.com/settings/connections/applications{/client_id}\",\"authorizations_url\":\"https://api.github.com/authorizations\",\"code_search_url\":\"https://api.github.com/search/code?q={query}{&page,per_page,sort,order}\",\"commit_search_url\":\"https://api.github.com/search/commits?q={query}{&page,per_page,sort,order}\",\"emails_url\":\"https://api.github.com/user/emails\",\"emojis_url\":\"https://api.github.com/emojis\",\"events_url\":\"https://api.github.com/events\",\"feeds_url\":\"https://api.github.com/feeds\",\"followers_url\":\"https://api.github.com/user/followers\",\"following_url\":\"https://api.github.com/user/following{/target}\",\"gists_url\":\"https://api.github.com/gists{/gist_id}\",\"hub_url\":\"https://api.github.com/hub\",\"issue_search_url\":\"https://api.github.com/search/issues?q={query}{&page,per_page,sort,order}\",\"issues_url\":\"https://api.github.com/issues\",\"keys_url\":\"https://api.github.com/user/keys\",\"notifications_url\":\"https://api.github.com/notifications\",\"organization_repositories_url\":\"https://api.github.com/orgs/{org}/repos{?type,page,per_page,sort}\",\"organization_url\":\"https://api.github.com/orgs/{org}\",\"public_gists_url\":\"https://api.github.com/gists/public\",\"rate_limit_url\":\"https://api.github.com/rate_limit\",\"repository_url\":\"https://api.github.com/repos/{owner}/{repo}\",\"repository_search_url\":\"https://api.github.com/search/repositories?q={query}{&page,per_page,sort,order}\",\"current_user_repositories_url\":\"https://api.github.com/user/repos{?type,page,per_page,sort}\",\"starred_url\":\"https://api.github.com/user/starred{/owner}{/repo}\",\"starred_gists_url\":\"https://api.github.com/gists/starred\",\"team_url\":\"https://api.github.com/teams\",\"user_url\":\"https://api.github.com/users/{user}\",\"user_organizations_url\":\"https://api.github.com/user/orgs\",\"user_repositories_url\":\"https://api.github.com/users/{user}/repos{?type,page,per_page,sort}\",\"user_search_url\":\"https://api.github.com/search/users?q={query}{&page,per_page,sort,order}\"}'\n```\n\n如果你仔细看一下响应的内容，你会发现实际上是序列化的`JSON`内容。因此，你可以通过`.text`的方式先获取字符串，然后再通过[`json.loads()`](https://realpython.com/python-json/#deserializing-json)的方式获取字典。其实，还有一种更为简单的方法，可以i使用`.json()`：\n\n```python\n>>> response.json()\n{'current_user_url': 'https://api.github.com/user', 'current_user_authorizations_html_url': 'https://github.com/settings/connections/applications{/client_id}', 'authorizations_url': 'https://api.github.com/authorizations', 'code_search_url': 'https://api.github.com/search/code?q={query}{&page,per_page,sort,order}', 'commit_search_url': 'https://api.github.com/search/commits?q={query}{&page,per_page,sort,order}', 'emails_url': 'https://api.github.com/user/emails', 'emojis_url': 'https://api.github.com/emojis', 'events_url': 'https://api.github.com/events', 'feeds_url': 'https://api.github.com/feeds', 'followers_url': 'https://api.github.com/user/followers', 'following_url': 'https://api.github.com/user/following{/target}', 'gists_url': 'https://api.github.com/gists{/gist_id}', 'hub_url': 'https://api.github.com/hub', 'issue_search_url': 'https://api.github.com/search/issues?q={query}{&page,per_page,sort,order}', 'issues_url': 'https://api.github.com/issues', 'keys_url': 'https://api.github.com/user/keys', 'notifications_url': 'https://api.github.com/notifications', 'organization_repositories_url': 'https://api.github.com/orgs/{org}/repos{?type,page,per_page,sort}', 'organization_url': 'https://api.github.com/orgs/{org}', 'public_gists_url': 'https://api.github.com/gists/public', 'rate_limit_url': 'https://api.github.com/rate_limit', 'repository_url': 'https://api.github.com/repos/{owner}/{repo}', 'repository_search_url': 'https://api.github.com/search/repositories?q={query}{&page,per_page,sort,order}', 'current_user_repositories_url': 'https://api.github.com/user/repos{?type,page,per_page,sort}', 'starred_url': 'https://api.github.com/user/starred{/owner}{/repo}', 'starred_gists_url': 'https://api.github.com/gists/starred', 'team_url': 'https://api.github.com/teams', 'user_url': 'https://api.github.com/users/{user}', 'user_organizations_url': 'https://api.github.com/user/orgs', 'user_repositories_url': 'https://api.github.com/users/{user}/repos{?type,page,per_page,sort}', 'user_search_url': 'https://api.github.com/search/users?q={query}{&page,per_page,sort,order}'}\n```\n\n`.json()`返回的结果是一个字典，因此你可以通过键来访问字典中的值。\n\n除了状态码和消息正文，你还可以查看响应中的Headers。\n\n### 报头（Headers）\n\n响应中的报头通常包含很多有用的信息，例如内容类型，缓存内容的时间限制。\n\n可以通过`.headers`来查看报头的内容：\n\n```python\n>>> response.headers\n{'Server': 'GitHub.com', 'Date': 'Mon, 10 Dec 2018 17:49:54 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Transfer-Encoding': 'chunked', 'Status': '200 OK', 'X-RateLimit-Limit': '60', 'X-RateLimit-Remaining': '59', 'X-RateLimit-Reset': '1544467794', 'Cache-Control': 'public, max-age=60, s-maxage=60', 'Vary': 'Accept', 'ETag': 'W/\"7dc470913f1fe9bb6c7355b50a0737bc\"', 'X-GitHub-Media-Type': 'github.v3; format=json', 'Access-Control-Expose-Headers': 'ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type', 'Access-Control-Allow-Origin': '*', 'Strict-Transport-Security': 'max-age=31536000; includeSubdomains; preload', 'X-Frame-Options': 'deny', 'X-Content-Type-Options': 'nosniff', 'X-XSS-Protection': '1; mode=block', 'Referrer-Policy': 'origin-when-cross-origin, strict-origin-when-cross-origin', 'Content-Security-Policy': \"default-src 'none'\", 'Content-Encoding': 'gzip', 'X-GitHub-Request-Id': 'E439:4581:CF2351:1CA3E06:5C0EA741'}\n```\n\n`.headers`返回的是字典类型的**对象**，因此，你可以像访问字典一样来获取值：\n\n```python\n>>> response.headers['Content-Type']\n'application/json; charset=utf-8'\n```\n\nheaders对象有一个特殊的地方。由于HTTP标准定义headers不区分大小写，所有，我们访问headers的时候，不需要担心大小写：\n\n```python\n>>> response.headers['content-type']\n'application/json; charset=utf-8'\n```\n\n以上例子中，无论使用`content-type`还是`Content-Type`，你都能得到相同的结果。\n\n## 查询字符串参数（Query String Parameters）\n\n通过在URL中传递查询字符串参数，可以定制GET请求。在方法`get()`中，可以传递参数`params`。例如，你可以使用GitHub的查询API来查找`requests`库。\n\n```python\nimport requests\n\n# Search GitHub's repositories for requests\nresponse = requests.get(\n    'https://api.github.com/search/repositories',\n    params={'q': 'requests+language:python'},\n)\n\n# Inspect some attributes of the `requests` repository\njson_response = response.json()\nrepository = json_response['items'][0]\nprint(f'Repository name: {repository[\"name\"]}')  # Python 3.6+\nprint(f'Repository description: {repository[\"description\"]}')  # Python 3.6+\n```\n\n在方法`.get()`中，通过将字典`{'q': 'requests+language:python'}`传递给参数`params`，你可以改变从查询API返回的结果。\n\n你接可以用字典作为参数`params`的值，也可以使用以元组为成员的数组作为参数`params`的值：\n\n```python\n>>> requests.get(\n...     'https://api.github.com/search/repositories',\n...     params=[('q', 'requests+language:python')],\n... )\n<Response [200]>\n```\n\n甚至，你还可以传递bytes作为值传递给参数：\n\n```python\n>>> requests.get(\n...     'https://api.github.com/search/repositories',\n...     params=b'q=requests+language:python',\n... )\n<Response [200]>\n```\n\n查询字符串对于自定义GET请求非常有用。同时，你还可以通过添加或者修改报头来自定义GET请求。\n\n## 请求报头（Request Headers）\n\n在方法`.get()`中，你可以通过将字典作为值传递给参数`headers`的方式，来自定义报头。例如，在之前的查询例子中，你可以通过在`Accept`报头中指定`text-match`类型：\n\n```python\nimport requests\n\nresponse = requests.get(\n    'https://api.github.com/search/repositories',\n    params={'q': 'requests+language:python'},\n    headers={'Accept': 'application/vnd.github.v3.text-match+json'},\n)\n\n# View the new `text-matches` array which provides information\n# about your search term within the results\njson_response = response.json()\nrepository = json_response['items'][0]\nprint(f'Text matches: {repository[\"text_matches\"]}')\n```\n\n`Accept`报头可以告诉服务器，你的应用可以处理的消息正文类型。在本例中，你使用的报头值是`application/vnd.github.v3.text-match+json`，这是GitHub网站`Accept`报头的专有属性，正文内容是一种特殊的JSON格式。\n\n在学习其它自定义请求的方式之前，我们先简单了解一下其它的HTTP方法。\n\n## 其它的HTTP方法\n\n除了GET以前，HTTP还支持`POST`, `PUT`, `DELETE`, `HEAD`, `PATCH`和`OPTIONS`。在`requests`库中给，这些方法的使用方法和`get()`相似：\n\n```python\n>>> requests.post('https://httpbin.org/post', data={'key':'value'})\n>>> requests.put('https://httpbin.org/put', data={'key':'value'})\n>>> requests.delete('https://httpbin.org/delete')\n>>> requests.head('https://httpbin.org/get')\n>>> requests.patch('https://httpbin.org/patch', data={'key':'value'})\n>>> requests.options('https://httpbin.org/get')\n```\n\n以下例子中，每一个函数调用都会对httpbin服务发起相应的HTTP方法。每一种方法，你都可以使用和之前相同的方式，查看服务器响应的内容：\n\n```python\n>>> response = requests.head('https://httpbin.org/get')\n>>> response.headers['Content-Type']\n'application/json'\n\n>>> response = requests.delete('https://httpbin.org/delete')\n>>> json_response = response.json()\n>>> json_response['args']\n{}\n```\n\n报头、响应正文、状态码和其它信息都会包含在每一种HTTP方法的`Response`中。接下来，你将更为详细地了解`POST`，`PUT`和`PATCH`方法，以及它们之间的区别。\n\n## 消息正文\n\n根据HTTP的规格说明，`POST`，`PUT`和`PATCH`都是通过将数据传递给消息正文，而不是通过将查询字符串传递给参数的方式。通过使用`requests`，你可以将`payload`传递给`data`参数。\n\n你可以将字典，元组为成员的列表或者文件对象传递给参数`data`。在请求的正文中，根据具体的类型需要，你可以采用不同的数据类型：\n\n例如，如果你请求的内容类型为`application/x-www-form-urlencoded`，那么你就可以将字典作为表格数据，传递给参数`data`。\n\n```python\n>>> requests.post('https://httpbin.org/post', data={'key':'value'})\n<Response [200]>\n```\n\n你也可以使用以元组为成员的列表：\n\n```python\n>>> requests.post('https://httpbin.org/post', data=[('key', 'value')])\n<Response [200]>\n```\n\n但是，如果你需要发送JSON格式的数据，你可以使用参数`json`。当你将值传递给参数`json`后，`requests`库会序列化你的数据和正确的`Content-Type`报头。\n\n[httpbin.org](https://httpbin.org/)是由`requests`库的开发者 [Kenneth Reitz](https://realpython.com/interview-kenneth-reitz/)创建的一个用于测试的网站。该网站可以用来测试`requests`发起的各种请求。例如，你可以用它来测试POST请求：\n\n```python\n>>> response = requests.post('https://httpbin.org/post', json={'key':'value'})\n>>> json_response = response.json()\n>>> json_response['data']\n'{\"key\": \"value\"}'\n>>> json_response['headers']['Content-Type']\n'application/json'\n```\n\n## 检查请求\n\n在发送请求到服务器之前，`requests`库会先将请求准备好。请求的准备包括验证报头以及序列化JSON内容。\n\n你可以通过`.request`来访问准备请求（`PrepareRequest`）：\n\n```python\n>>> response = requests.post('https://httpbin.org/post', json={'key':'value'})\n>>> response.request.headers['Content-Type']\n'application/json'\n>>> response.request.url\n'https://httpbin.org/post'\n>>> response.request.body\nb'{\"key\": \"value\"}'\n```\n\n检查准备请求可以让你访问各种信息，包括payload, URL, headers, authentication等等。\n\n## 认证\n\n认证可以让服务器知道你是谁。通常情况下，你可以通过`Authorization`报头提供你的身份信息，或者也可以通过自定义的报头来提供身份信息。在`requests`中，你可以使用参数`auth`来传递你的身份信息。\n\n下面以GitHub的[Authenticated User](https://developer.github.com/v3/users/#get-the-authenticated-user) API为例。为了访问该API，你需要通过一个元组来传递用户名和密码：\n\n```python\n>>> from getpass import getpass\n>>> requests.get('https://api.github.com/user', auth=('username', getpass()))\n<Response [200]>\n```\n\n如果身份信息正确，request请求就会返回成功过。如果request请求中没有包含身份信息，服务器就会返回`401 Unauthorized`：\n\n```python\n>>> requests.get('https://api.github.com/user')\n<Response [401]>\n```\n\n当你通过以上这种方式传递身份信息的时候，实际上`requests`使用的是HTTP的 [Basic access authentication scheme](https://en.wikipedia.org/wiki/Basic_access_authentication)。\n\n因此，你还可以使用`HTTPBasicAuth`来传递身份信息：\n\n```python\n>>> from requests.auth import HTTPBasicAuth\n>>> from getpass import getpass\n>>> requests.get(\n...     'https://api.github.com/user',\n...     auth=HTTPBasicAuth('username', getpass())\n... )\n<Response [200]>\n```\n\n除了Basic认证方式以外，`requests`还支持其它认证方式，例如`HTTPDigestAuth`和`HTTPProxyAuth`。\n\n你甚至还可以提供自定义的认证方式。但是，你必须首先创建一个继承`AuthBase`的子类。然后，你需要定义`__call__()`函数：\n\n```python\nimport requests\nfrom requests.auth import AuthBase\n\nclass TokenAuth(AuthBase):\n    \"\"\"Implements a custom authentication scheme.\"\"\"\n\n    def __init__(self, token):\n        self.token = token\n\n    def __call__(self, r):\n        \"\"\"Attach an API token to a custom auth header.\"\"\"\n        r.headers['X-TokenAuth'] = f'{self.token}'  # Python 3.6+\n        return r\n\n\nrequests.get('https://httpbin.org/get', auth=TokenAuth('12345abcde-token'))\n```\n\n以上例子中，自定义的类`TokenAuth`会收到一个Token，然后将收到的token放到`x-TokenAuth`报头中。\n\n不健全的认证机制会导致安全隐患，所以除非有特殊需求，否则应该使用成熟的认证机制，比如Basic或者OAuth。\n\n## SSL证书验证\n\n任何时候，当发送和接收的信息比较机密，安全往往是最重要的。因此，当你访问安全站点的时候，都会通过SSL建立安全连接，这时候对服务器的SSL证书进行验证显得尤为重要。\n\n默认情况下，`requests`已经为你执行了SSL证书的验证。但是，在某些情况下，你可能希望改变这种默认的行为。\n\n如果你想要关闭SSL证书的验证，你可以将参数`verify`设置为`False`：\n\n```python\n>>> requests.get('https://api.github.com', verify=False)\nInsecureRequestWarning: Unverified HTTPS request is being made. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings\n  InsecureRequestWarning)\n<Response [200]>\n```\n\n当你正在访问一个不安全的站点时，`requests`会发出警告信息提醒你。\n\n> 注意：`requests`使用[`certifi`](http://docs.python-requests.org/en/master/user/advanced/#ca-certificates)来提供SSL证书的颁发机构（ Certificate Authorities）。这可以让`requests`知道有哪些可以信任的证书颁发机构。因此，你需要定期更新`certifi`来保证安全性。\n\n## 性能\n\n当在生产环境中使用`requests`的时候，特别需要考虑性能的影响。`requests`库的一些特性，例如超时控制（timeout control），会话（sessions）和重试限制（retry limits）可以使得应用运行得更流畅。\n\n### Timeouts\n\n当你向服务发送请求以后，你得应用将会等待服务端的响应，得到响应以后，才会执行下一步操作。如果应用等待的时间太长，请求就会一直处于等待状态，导致用户体验变差，或者后台任务挂起。\n\n默认情况下，`requests`将会无限制地等待响应，所以你应该指定一个超时的时间值。你可以通过参数`timeout`来设置超时的时间值。`timeout`的值可以是整型或者浮点型，时间的单位是秒。\n\n```python\n>>> requests.get('https://api.github.com', timeout=1)\n<Response [200]>\n>>> requests.get('https://api.github.com', timeout=3.05)\n<Response [200]>\n```\n\n以上例子中，第一个请求的超时时间是1秒，第二个请求的超时时间是3.05秒。\n\n你还可以传递一个[元组](http://docs.python-requests.org/en/master/user/advanced/#timeouts)给参数`timeout`，元组中的第一个值是连接的超时时间（客户端和服务器之间建立连接的时长），第二个值是读取的超时时间（建立连接后，等待响应的超时时间）：\n\n```python\n>>> requests.get('https://api.github.com', timeout=(2, 5))\n<Response [200]>\n```\n\n如果请求建立连接的时间在2秒以内，建立连接后，接收数据的时间在5秒以内，那么就可以正常获取到响应。但是，如果请求超时，那么函数就会抛出一个`Timeout`的异常。\n\n```python\nimport requests\nfrom requests.exceptions import Timeout\n\ntry:\n    response = requests.get('https://api.github.com', timeout=1)\nexcept Timeout:\n    print('The request timed out')\nelse:\n    print('The request did not time out')\n```\n\n你的程序可以捕获这个`Timeout`的异常，并做相应的处理。\n\n### The Session Object\n\n到目前为止，你都是使用`requests`的`get()`和`post()`来发送请求。这些函数隐藏了一些细节，例如连接是如何建立以及管理的。\n\n实际上，这些细节都是由类`Session`来负责处理。如果你需要微调你的请求，或者改进性能，你需要直接使用`Session`的实例。\n\n会话主要是在一些列的请求中，保持持久的参数。例如，如果你想要在多个请求中使用相同的认证信息，你就可以使用会话：\n\n```python\nimport requests\nfrom getpass import getpass\n\n# By using a context manager, you can ensure the resources used by\n# the session will be released after use\nwith requests.Session() as session:\n    session.auth = ('username', getpass())\n\n    # Instead of requests.get(), you'll use session.get()\n    response = session.get('https://api.github.com/user')\n\n# You can inspect the response just like you did before\nprint(response.headers)\nprint(response.json())\n```\n\n每次你用session发起请求，一旦该会话在初始化时，设定了认证的身份信息，那么该身份信息就可以在多个requests中重复使用。\n\n通过session改进性能，主要是通过保持长连接的方式。当你的应用通过Session来发起请求，它就会在连接池中长时间保持该连接。当应用想要再次连接到同一个服务器的时候，就可以重复使用连接池中的连接，而不需要再新建连接。\n\n### Max Retries\n\n当请求失败的时候，你可能希望应用重新发起同样的请求。但是，`requests`默认并不会帮你重新发送请求。为了实现这个功能，你需要使用[Transport Adapter](http://docs.python-requests.org/en/master/user/advanced/#transport-adapters)。\n\nTransport Adapters可以让你为每一个需要访问的服务定义一组配置信息。例如，你想要所有访问`https://api.github.com`的请求失败后都重复三次，你可以创建一个Transport Adapter，设置参数`max_retries`的值为3，并将其挂载到当前的会话上：\n\n```python\nimport requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.exceptions import ConnectionError\n\ngithub_adapter = HTTPAdapter(max_retries=3)\n\nsession = requests.Session()\n\n# Use `github_adapter` for all requests to endpoints that start with this URL\nsession.mount('https://api.github.com', github_adapter)\n\ntry:\n    session.get('https://api.github.com')\nexcept ConnectionError as ce:\n    print(ce)\n```\n\n当你挂载HTTPAdapter， github_adapter到会话的时候，会话会遵循该配置的设置。\n\n## 总结\n\n通过以上内容，你现在可以：\n\n- 发送不同的HTTP请求，例如：GET, POST, PUT\n- 通过修改报头，认证，查询字符串和消息这个问，自定义请求\n- 检查发送给服务器的数据，以及从服务器接收的数据\n- SSL证书验证\n- 通过max_retries, timeout, Sessions和Transport Adapters，更有效的使用`requests`\n","source":"_posts/python/Requests库使用指南.md","raw":"---\ntitle: Requests库使用指南\ndate: 2022-02-08 15:40:20\ntags:\n - python-web\ncategories: \n - Python\nimg: /medias/featureimages/28.jpg\n---\n\n> 注：本文翻译自[Python’s Requests Library (Guide)](https://realpython.com/python-requests/)。\n\n# Requests库使用指南\n\n在Python中，`requests`库是处理HTTP请求的标准。它使得复杂的HTTP请求变得简单、易用，让你可以专注于处理与服务之间的交互，为应用获取所需的数据。\n\n通过本文，你可以学到许多`requests`库中的有用功能，并且可以根据实际的需求，定制和优化这些功能。你还会学到如何有效地使用`requests`库，避免由于访问外部服务而影响应用的响应速度。\n\n在本指南中，你将学到以下内容：\n\n- 通过`requests`使用HTTP中最常见的方式\n- 定制`requests`中的报头和数据，使用询问字符和消息内容\n- 检查查询和响应中的数据\n- 发送认证请求\n- 配置请求，防止应用的响应速度变慢\n\n<!-- more -->\n\n## 开始使用requests\n\n首先，需要安装`requests`库：\n\n```shell\n$ pip install requests\n```\n\n安装完成后，需要先导入`requests`库：\n\n```python\nimport requests\n```\n\n## GET请求\n\nHTTP有很多种请求方式，例如GET和POST，不同的请求方式，所执行的操作是不同的。其中，GET是最常用的HTTP请求。GET主要是用来获取Web数据。如果发起一个GET请求，就会调用`requests.get()`。\n\n以下例子中，你可以看到通过调用`get()`发送GET请求给Github的[Root REST API](https://developer.github.com/v3/#root-endpoint)。\n\n```python\n>>> requests.get('https://api.github.com')\n<Response [200]>\n```\n\n ## 响应\n\n通过发送GET请求以后，我们可以得到一个Response的对象。将该对象存储到一个变量中后，我们可以查看该对象的属性和方法：\n\n```python\n>>> response = requests.get('https://api.github.com')\n```\n\n在以上例子中，我们将响应对象存储到`response`变量中。\n\n### 状态码（Status Codes）\n\n从响应`Response`中首先可以获取状态码，通过状态码来判断请求是否成功。\n\n例如，如果状态码是`200 OK`，那么说明请求是成功的，但是如果状态码是`404 NOT FOUND`，则说明未找到需要获取的资源。关于状态码的详细说明，请参考文档：[many other possible status codes](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes)\n\n通过访问响应`response`的属性`.status_code`，可以看到服务器返回的状态码：\n\n```python\n>>> response.status_code\n200\n```\n\n`.status_code`返回的是`200`，说明请求时成功的，并且服务器返回了你需要获取的数据。\n\n有些情况下，你可能想要通过状态码来作为判断条件：\n\n```python\nif response.status_code == 200:\n    print('Success!')\nelif response.status_code == 404:\n    print('Not Found.')\n```\n\n以上例子中，如果服务器返回`200`的状态码，那么程序就会打印`Success!`。如果服务器返回`404`的状态码，程序就会打印`Not Found.`。\n\n`requests`提供了一种更为简便的方法。如果直接使用`Response`实例作为判断的条件，假设状态码在`200`和`400`之间，那么表达式就会被评估为`True`，否则就会被评估为`False`。\n\n因此，你可以将之前的例子改写如下：\n\n```python\nif response:\n    print('Success!')\nelse:\n    print('An error has occurred.')\n```\n\n> 技术细节：This [Truth Value Test](https://docs.python.org/3/library/stdtypes.html#truth-value-testing) is made possible because [`__bool__()` is an overloaded method](https://realpython.com/operator-function-overloading/#making-your-objects-truthy-or-falsey-using-bool) on `Response`.\n>\n> This means that the default behavior of `Response` has been redefined to take the status code into account when determining the truth value of the object.\n\n记住这种方式并不是检验状态码是否等于`200`，而是检验状态码是否在`200`到`400`之间，例如`204 NO CONTENT`和`304 NOT MODIFIED`，也被认为是请求成功的。\n\n例如，`204`是说明请求是成功的，但是返回的消息正文并没有任何内容。\n\n因此，如果只是为了知道请求是否成功，可以使用这种简便的方法，否则，建议还是根据具体的状态码来判断。\n\n有时候，可能你不希望用`if`语句来检查状态码，而是希望在请求失败的情况下，引发异常。那么你就可以使用`.raise_for_status()`：\n\n```python\nimport requests\nfrom requests.exceptions import HTTPError\n\nfor url in ['https://api.github.com', 'https://api.github.com/invalid']:\n    try:\n        response = requests.get(url)\n\n        # If the response was successful, no Exception will be raised\n        response.raise_for_status()\n    except HTTPError as http_err:\n        print(f'HTTP error occurred: {http_err}')  # Python 3.6\n    except Exception as err:\n        print(f'Other error occurred: {err}')  # Python 3.6\n    else:\n        print('Success!')\n```\n\n如果你调用`.raise_for_status()`，就会对某些失败的状态码引发`HTTPError`的异常错误。如果状态码显示请求是成功的，那么程序就不会引发异常。\n\n通过以上内容，你了解了很多关于如何处理状态码的知识。下面，你将看到如何查看服务器返回的具体数据内容。\n\n### 内容（Content）\n\nGET请求得到的响应经常包含很多有价值的信息，如消息正文中的payload。通过使用`Response`的属性和方法，你可以用不同的格式来查看payload。\n\n用bytes的格式查看响应的内容，你可以使用`.content`：\n\n```python\n>>> response = requests.get('https://api.github.com')\n>>> response.content\nb'{\"current_user_url\":\"https://api.github.com/user\",\"current_user_authorizations_html_url\":\"https://github.com/settings/connections/applications{/client_id}\",\"authorizations_url\":\"https://api.github.com/authorizations\",\"code_search_url\":\"https://api.github.com/search/code?q={query}{&page,per_page,sort,order}\",\"commit_search_url\":\"https://api.github.com/search/commits?q={query}{&page,per_page,sort,order}\",\"emails_url\":\"https://api.github.com/user/emails\",\"emojis_url\":\"https://api.github.com/emojis\",\"events_url\":\"https://api.github.com/events\",\"feeds_url\":\"https://api.github.com/feeds\",\"followers_url\":\"https://api.github.com/user/followers\",\"following_url\":\"https://api.github.com/user/following{/target}\",\"gists_url\":\"https://api.github.com/gists{/gist_id}\",\"hub_url\":\"https://api.github.com/hub\",\"issue_search_url\":\"https://api.github.com/search/issues?q={query}{&page,per_page,sort,order}\",\"issues_url\":\"https://api.github.com/issues\",\"keys_url\":\"https://api.github.com/user/keys\",\"notifications_url\":\"https://api.github.com/notifications\",\"organization_repositories_url\":\"https://api.github.com/orgs/{org}/repos{?type,page,per_page,sort}\",\"organization_url\":\"https://api.github.com/orgs/{org}\",\"public_gists_url\":\"https://api.github.com/gists/public\",\"rate_limit_url\":\"https://api.github.com/rate_limit\",\"repository_url\":\"https://api.github.com/repos/{owner}/{repo}\",\"repository_search_url\":\"https://api.github.com/search/repositories?q={query}{&page,per_page,sort,order}\",\"current_user_repositories_url\":\"https://api.github.com/user/repos{?type,page,per_page,sort}\",\"starred_url\":\"https://api.github.com/user/starred{/owner}{/repo}\",\"starred_gists_url\":\"https://api.github.com/gists/starred\",\"team_url\":\"https://api.github.com/teams\",\"user_url\":\"https://api.github.com/users/{user}\",\"user_organizations_url\":\"https://api.github.com/user/orgs\",\"user_repositories_url\":\"https://api.github.com/users/{user}/repos{?type,page,per_page,sort}\",\"user_search_url\":\"https://api.github.com/search/users?q={query}{&page,per_page,sort,order}\"}'\n```\n\n通过`.content`读取到的是字节格式的payload，如果你想要将其转换成UTF-8编码的字符串，你可以使用`.text`：\n\n```python\n>>> response.text\n'{\"current_user_url\":\"https://api.github.com/user\",\"current_user_authorizations_html_url\":\"https://github.com/settings/connections/applications{/client_id}\",\"authorizations_url\":\"https://api.github.com/authorizations\",\"code_search_url\":\"https://api.github.com/search/code?q={query}{&page,per_page,sort,order}\",\"commit_search_url\":\"https://api.github.com/search/commits?q={query}{&page,per_page,sort,order}\",\"emails_url\":\"https://api.github.com/user/emails\",\"emojis_url\":\"https://api.github.com/emojis\",\"events_url\":\"https://api.github.com/events\",\"feeds_url\":\"https://api.github.com/feeds\",\"followers_url\":\"https://api.github.com/user/followers\",\"following_url\":\"https://api.github.com/user/following{/target}\",\"gists_url\":\"https://api.github.com/gists{/gist_id}\",\"hub_url\":\"https://api.github.com/hub\",\"issue_search_url\":\"https://api.github.com/search/issues?q={query}{&page,per_page,sort,order}\",\"issues_url\":\"https://api.github.com/issues\",\"keys_url\":\"https://api.github.com/user/keys\",\"notifications_url\":\"https://api.github.com/notifications\",\"organization_repositories_url\":\"https://api.github.com/orgs/{org}/repos{?type,page,per_page,sort}\",\"organization_url\":\"https://api.github.com/orgs/{org}\",\"public_gists_url\":\"https://api.github.com/gists/public\",\"rate_limit_url\":\"https://api.github.com/rate_limit\",\"repository_url\":\"https://api.github.com/repos/{owner}/{repo}\",\"repository_search_url\":\"https://api.github.com/search/repositories?q={query}{&page,per_page,sort,order}\",\"current_user_repositories_url\":\"https://api.github.com/user/repos{?type,page,per_page,sort}\",\"starred_url\":\"https://api.github.com/user/starred{/owner}{/repo}\",\"starred_gists_url\":\"https://api.github.com/gists/starred\",\"team_url\":\"https://api.github.com/teams\",\"user_url\":\"https://api.github.com/users/{user}\",\"user_organizations_url\":\"https://api.github.com/user/orgs\",\"user_repositories_url\":\"https://api.github.com/users/{user}/repos{?type,page,per_page,sort}\",\"user_search_url\":\"https://api.github.com/search/users?q={query}{&page,per_page,sort,order}\"}'\n```\n\n因为将`bytes`转换成`str`需要指定编码的方式，`requests`会根据响应中的`hearders`内容来猜测编码的方式，或者，你也可以通过设置`.encoding`指定编码的方式：\n\n```python\n>>> response.encoding = 'utf-8' # Optional: requests infers this internally\n>>> response.text\n'{\"current_user_url\":\"https://api.github.com/user\",\"current_user_authorizations_html_url\":\"https://github.com/settings/connections/applications{/client_id}\",\"authorizations_url\":\"https://api.github.com/authorizations\",\"code_search_url\":\"https://api.github.com/search/code?q={query}{&page,per_page,sort,order}\",\"commit_search_url\":\"https://api.github.com/search/commits?q={query}{&page,per_page,sort,order}\",\"emails_url\":\"https://api.github.com/user/emails\",\"emojis_url\":\"https://api.github.com/emojis\",\"events_url\":\"https://api.github.com/events\",\"feeds_url\":\"https://api.github.com/feeds\",\"followers_url\":\"https://api.github.com/user/followers\",\"following_url\":\"https://api.github.com/user/following{/target}\",\"gists_url\":\"https://api.github.com/gists{/gist_id}\",\"hub_url\":\"https://api.github.com/hub\",\"issue_search_url\":\"https://api.github.com/search/issues?q={query}{&page,per_page,sort,order}\",\"issues_url\":\"https://api.github.com/issues\",\"keys_url\":\"https://api.github.com/user/keys\",\"notifications_url\":\"https://api.github.com/notifications\",\"organization_repositories_url\":\"https://api.github.com/orgs/{org}/repos{?type,page,per_page,sort}\",\"organization_url\":\"https://api.github.com/orgs/{org}\",\"public_gists_url\":\"https://api.github.com/gists/public\",\"rate_limit_url\":\"https://api.github.com/rate_limit\",\"repository_url\":\"https://api.github.com/repos/{owner}/{repo}\",\"repository_search_url\":\"https://api.github.com/search/repositories?q={query}{&page,per_page,sort,order}\",\"current_user_repositories_url\":\"https://api.github.com/user/repos{?type,page,per_page,sort}\",\"starred_url\":\"https://api.github.com/user/starred{/owner}{/repo}\",\"starred_gists_url\":\"https://api.github.com/gists/starred\",\"team_url\":\"https://api.github.com/teams\",\"user_url\":\"https://api.github.com/users/{user}\",\"user_organizations_url\":\"https://api.github.com/user/orgs\",\"user_repositories_url\":\"https://api.github.com/users/{user}/repos{?type,page,per_page,sort}\",\"user_search_url\":\"https://api.github.com/search/users?q={query}{&page,per_page,sort,order}\"}'\n```\n\n如果你仔细看一下响应的内容，你会发现实际上是序列化的`JSON`内容。因此，你可以通过`.text`的方式先获取字符串，然后再通过[`json.loads()`](https://realpython.com/python-json/#deserializing-json)的方式获取字典。其实，还有一种更为简单的方法，可以i使用`.json()`：\n\n```python\n>>> response.json()\n{'current_user_url': 'https://api.github.com/user', 'current_user_authorizations_html_url': 'https://github.com/settings/connections/applications{/client_id}', 'authorizations_url': 'https://api.github.com/authorizations', 'code_search_url': 'https://api.github.com/search/code?q={query}{&page,per_page,sort,order}', 'commit_search_url': 'https://api.github.com/search/commits?q={query}{&page,per_page,sort,order}', 'emails_url': 'https://api.github.com/user/emails', 'emojis_url': 'https://api.github.com/emojis', 'events_url': 'https://api.github.com/events', 'feeds_url': 'https://api.github.com/feeds', 'followers_url': 'https://api.github.com/user/followers', 'following_url': 'https://api.github.com/user/following{/target}', 'gists_url': 'https://api.github.com/gists{/gist_id}', 'hub_url': 'https://api.github.com/hub', 'issue_search_url': 'https://api.github.com/search/issues?q={query}{&page,per_page,sort,order}', 'issues_url': 'https://api.github.com/issues', 'keys_url': 'https://api.github.com/user/keys', 'notifications_url': 'https://api.github.com/notifications', 'organization_repositories_url': 'https://api.github.com/orgs/{org}/repos{?type,page,per_page,sort}', 'organization_url': 'https://api.github.com/orgs/{org}', 'public_gists_url': 'https://api.github.com/gists/public', 'rate_limit_url': 'https://api.github.com/rate_limit', 'repository_url': 'https://api.github.com/repos/{owner}/{repo}', 'repository_search_url': 'https://api.github.com/search/repositories?q={query}{&page,per_page,sort,order}', 'current_user_repositories_url': 'https://api.github.com/user/repos{?type,page,per_page,sort}', 'starred_url': 'https://api.github.com/user/starred{/owner}{/repo}', 'starred_gists_url': 'https://api.github.com/gists/starred', 'team_url': 'https://api.github.com/teams', 'user_url': 'https://api.github.com/users/{user}', 'user_organizations_url': 'https://api.github.com/user/orgs', 'user_repositories_url': 'https://api.github.com/users/{user}/repos{?type,page,per_page,sort}', 'user_search_url': 'https://api.github.com/search/users?q={query}{&page,per_page,sort,order}'}\n```\n\n`.json()`返回的结果是一个字典，因此你可以通过键来访问字典中的值。\n\n除了状态码和消息正文，你还可以查看响应中的Headers。\n\n### 报头（Headers）\n\n响应中的报头通常包含很多有用的信息，例如内容类型，缓存内容的时间限制。\n\n可以通过`.headers`来查看报头的内容：\n\n```python\n>>> response.headers\n{'Server': 'GitHub.com', 'Date': 'Mon, 10 Dec 2018 17:49:54 GMT', 'Content-Type': 'application/json; charset=utf-8', 'Transfer-Encoding': 'chunked', 'Status': '200 OK', 'X-RateLimit-Limit': '60', 'X-RateLimit-Remaining': '59', 'X-RateLimit-Reset': '1544467794', 'Cache-Control': 'public, max-age=60, s-maxage=60', 'Vary': 'Accept', 'ETag': 'W/\"7dc470913f1fe9bb6c7355b50a0737bc\"', 'X-GitHub-Media-Type': 'github.v3; format=json', 'Access-Control-Expose-Headers': 'ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type', 'Access-Control-Allow-Origin': '*', 'Strict-Transport-Security': 'max-age=31536000; includeSubdomains; preload', 'X-Frame-Options': 'deny', 'X-Content-Type-Options': 'nosniff', 'X-XSS-Protection': '1; mode=block', 'Referrer-Policy': 'origin-when-cross-origin, strict-origin-when-cross-origin', 'Content-Security-Policy': \"default-src 'none'\", 'Content-Encoding': 'gzip', 'X-GitHub-Request-Id': 'E439:4581:CF2351:1CA3E06:5C0EA741'}\n```\n\n`.headers`返回的是字典类型的**对象**，因此，你可以像访问字典一样来获取值：\n\n```python\n>>> response.headers['Content-Type']\n'application/json; charset=utf-8'\n```\n\nheaders对象有一个特殊的地方。由于HTTP标准定义headers不区分大小写，所有，我们访问headers的时候，不需要担心大小写：\n\n```python\n>>> response.headers['content-type']\n'application/json; charset=utf-8'\n```\n\n以上例子中，无论使用`content-type`还是`Content-Type`，你都能得到相同的结果。\n\n## 查询字符串参数（Query String Parameters）\n\n通过在URL中传递查询字符串参数，可以定制GET请求。在方法`get()`中，可以传递参数`params`。例如，你可以使用GitHub的查询API来查找`requests`库。\n\n```python\nimport requests\n\n# Search GitHub's repositories for requests\nresponse = requests.get(\n    'https://api.github.com/search/repositories',\n    params={'q': 'requests+language:python'},\n)\n\n# Inspect some attributes of the `requests` repository\njson_response = response.json()\nrepository = json_response['items'][0]\nprint(f'Repository name: {repository[\"name\"]}')  # Python 3.6+\nprint(f'Repository description: {repository[\"description\"]}')  # Python 3.6+\n```\n\n在方法`.get()`中，通过将字典`{'q': 'requests+language:python'}`传递给参数`params`，你可以改变从查询API返回的结果。\n\n你接可以用字典作为参数`params`的值，也可以使用以元组为成员的数组作为参数`params`的值：\n\n```python\n>>> requests.get(\n...     'https://api.github.com/search/repositories',\n...     params=[('q', 'requests+language:python')],\n... )\n<Response [200]>\n```\n\n甚至，你还可以传递bytes作为值传递给参数：\n\n```python\n>>> requests.get(\n...     'https://api.github.com/search/repositories',\n...     params=b'q=requests+language:python',\n... )\n<Response [200]>\n```\n\n查询字符串对于自定义GET请求非常有用。同时，你还可以通过添加或者修改报头来自定义GET请求。\n\n## 请求报头（Request Headers）\n\n在方法`.get()`中，你可以通过将字典作为值传递给参数`headers`的方式，来自定义报头。例如，在之前的查询例子中，你可以通过在`Accept`报头中指定`text-match`类型：\n\n```python\nimport requests\n\nresponse = requests.get(\n    'https://api.github.com/search/repositories',\n    params={'q': 'requests+language:python'},\n    headers={'Accept': 'application/vnd.github.v3.text-match+json'},\n)\n\n# View the new `text-matches` array which provides information\n# about your search term within the results\njson_response = response.json()\nrepository = json_response['items'][0]\nprint(f'Text matches: {repository[\"text_matches\"]}')\n```\n\n`Accept`报头可以告诉服务器，你的应用可以处理的消息正文类型。在本例中，你使用的报头值是`application/vnd.github.v3.text-match+json`，这是GitHub网站`Accept`报头的专有属性，正文内容是一种特殊的JSON格式。\n\n在学习其它自定义请求的方式之前，我们先简单了解一下其它的HTTP方法。\n\n## 其它的HTTP方法\n\n除了GET以前，HTTP还支持`POST`, `PUT`, `DELETE`, `HEAD`, `PATCH`和`OPTIONS`。在`requests`库中给，这些方法的使用方法和`get()`相似：\n\n```python\n>>> requests.post('https://httpbin.org/post', data={'key':'value'})\n>>> requests.put('https://httpbin.org/put', data={'key':'value'})\n>>> requests.delete('https://httpbin.org/delete')\n>>> requests.head('https://httpbin.org/get')\n>>> requests.patch('https://httpbin.org/patch', data={'key':'value'})\n>>> requests.options('https://httpbin.org/get')\n```\n\n以下例子中，每一个函数调用都会对httpbin服务发起相应的HTTP方法。每一种方法，你都可以使用和之前相同的方式，查看服务器响应的内容：\n\n```python\n>>> response = requests.head('https://httpbin.org/get')\n>>> response.headers['Content-Type']\n'application/json'\n\n>>> response = requests.delete('https://httpbin.org/delete')\n>>> json_response = response.json()\n>>> json_response['args']\n{}\n```\n\n报头、响应正文、状态码和其它信息都会包含在每一种HTTP方法的`Response`中。接下来，你将更为详细地了解`POST`，`PUT`和`PATCH`方法，以及它们之间的区别。\n\n## 消息正文\n\n根据HTTP的规格说明，`POST`，`PUT`和`PATCH`都是通过将数据传递给消息正文，而不是通过将查询字符串传递给参数的方式。通过使用`requests`，你可以将`payload`传递给`data`参数。\n\n你可以将字典，元组为成员的列表或者文件对象传递给参数`data`。在请求的正文中，根据具体的类型需要，你可以采用不同的数据类型：\n\n例如，如果你请求的内容类型为`application/x-www-form-urlencoded`，那么你就可以将字典作为表格数据，传递给参数`data`。\n\n```python\n>>> requests.post('https://httpbin.org/post', data={'key':'value'})\n<Response [200]>\n```\n\n你也可以使用以元组为成员的列表：\n\n```python\n>>> requests.post('https://httpbin.org/post', data=[('key', 'value')])\n<Response [200]>\n```\n\n但是，如果你需要发送JSON格式的数据，你可以使用参数`json`。当你将值传递给参数`json`后，`requests`库会序列化你的数据和正确的`Content-Type`报头。\n\n[httpbin.org](https://httpbin.org/)是由`requests`库的开发者 [Kenneth Reitz](https://realpython.com/interview-kenneth-reitz/)创建的一个用于测试的网站。该网站可以用来测试`requests`发起的各种请求。例如，你可以用它来测试POST请求：\n\n```python\n>>> response = requests.post('https://httpbin.org/post', json={'key':'value'})\n>>> json_response = response.json()\n>>> json_response['data']\n'{\"key\": \"value\"}'\n>>> json_response['headers']['Content-Type']\n'application/json'\n```\n\n## 检查请求\n\n在发送请求到服务器之前，`requests`库会先将请求准备好。请求的准备包括验证报头以及序列化JSON内容。\n\n你可以通过`.request`来访问准备请求（`PrepareRequest`）：\n\n```python\n>>> response = requests.post('https://httpbin.org/post', json={'key':'value'})\n>>> response.request.headers['Content-Type']\n'application/json'\n>>> response.request.url\n'https://httpbin.org/post'\n>>> response.request.body\nb'{\"key\": \"value\"}'\n```\n\n检查准备请求可以让你访问各种信息，包括payload, URL, headers, authentication等等。\n\n## 认证\n\n认证可以让服务器知道你是谁。通常情况下，你可以通过`Authorization`报头提供你的身份信息，或者也可以通过自定义的报头来提供身份信息。在`requests`中，你可以使用参数`auth`来传递你的身份信息。\n\n下面以GitHub的[Authenticated User](https://developer.github.com/v3/users/#get-the-authenticated-user) API为例。为了访问该API，你需要通过一个元组来传递用户名和密码：\n\n```python\n>>> from getpass import getpass\n>>> requests.get('https://api.github.com/user', auth=('username', getpass()))\n<Response [200]>\n```\n\n如果身份信息正确，request请求就会返回成功过。如果request请求中没有包含身份信息，服务器就会返回`401 Unauthorized`：\n\n```python\n>>> requests.get('https://api.github.com/user')\n<Response [401]>\n```\n\n当你通过以上这种方式传递身份信息的时候，实际上`requests`使用的是HTTP的 [Basic access authentication scheme](https://en.wikipedia.org/wiki/Basic_access_authentication)。\n\n因此，你还可以使用`HTTPBasicAuth`来传递身份信息：\n\n```python\n>>> from requests.auth import HTTPBasicAuth\n>>> from getpass import getpass\n>>> requests.get(\n...     'https://api.github.com/user',\n...     auth=HTTPBasicAuth('username', getpass())\n... )\n<Response [200]>\n```\n\n除了Basic认证方式以外，`requests`还支持其它认证方式，例如`HTTPDigestAuth`和`HTTPProxyAuth`。\n\n你甚至还可以提供自定义的认证方式。但是，你必须首先创建一个继承`AuthBase`的子类。然后，你需要定义`__call__()`函数：\n\n```python\nimport requests\nfrom requests.auth import AuthBase\n\nclass TokenAuth(AuthBase):\n    \"\"\"Implements a custom authentication scheme.\"\"\"\n\n    def __init__(self, token):\n        self.token = token\n\n    def __call__(self, r):\n        \"\"\"Attach an API token to a custom auth header.\"\"\"\n        r.headers['X-TokenAuth'] = f'{self.token}'  # Python 3.6+\n        return r\n\n\nrequests.get('https://httpbin.org/get', auth=TokenAuth('12345abcde-token'))\n```\n\n以上例子中，自定义的类`TokenAuth`会收到一个Token，然后将收到的token放到`x-TokenAuth`报头中。\n\n不健全的认证机制会导致安全隐患，所以除非有特殊需求，否则应该使用成熟的认证机制，比如Basic或者OAuth。\n\n## SSL证书验证\n\n任何时候，当发送和接收的信息比较机密，安全往往是最重要的。因此，当你访问安全站点的时候，都会通过SSL建立安全连接，这时候对服务器的SSL证书进行验证显得尤为重要。\n\n默认情况下，`requests`已经为你执行了SSL证书的验证。但是，在某些情况下，你可能希望改变这种默认的行为。\n\n如果你想要关闭SSL证书的验证，你可以将参数`verify`设置为`False`：\n\n```python\n>>> requests.get('https://api.github.com', verify=False)\nInsecureRequestWarning: Unverified HTTPS request is being made. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings\n  InsecureRequestWarning)\n<Response [200]>\n```\n\n当你正在访问一个不安全的站点时，`requests`会发出警告信息提醒你。\n\n> 注意：`requests`使用[`certifi`](http://docs.python-requests.org/en/master/user/advanced/#ca-certificates)来提供SSL证书的颁发机构（ Certificate Authorities）。这可以让`requests`知道有哪些可以信任的证书颁发机构。因此，你需要定期更新`certifi`来保证安全性。\n\n## 性能\n\n当在生产环境中使用`requests`的时候，特别需要考虑性能的影响。`requests`库的一些特性，例如超时控制（timeout control），会话（sessions）和重试限制（retry limits）可以使得应用运行得更流畅。\n\n### Timeouts\n\n当你向服务发送请求以后，你得应用将会等待服务端的响应，得到响应以后，才会执行下一步操作。如果应用等待的时间太长，请求就会一直处于等待状态，导致用户体验变差，或者后台任务挂起。\n\n默认情况下，`requests`将会无限制地等待响应，所以你应该指定一个超时的时间值。你可以通过参数`timeout`来设置超时的时间值。`timeout`的值可以是整型或者浮点型，时间的单位是秒。\n\n```python\n>>> requests.get('https://api.github.com', timeout=1)\n<Response [200]>\n>>> requests.get('https://api.github.com', timeout=3.05)\n<Response [200]>\n```\n\n以上例子中，第一个请求的超时时间是1秒，第二个请求的超时时间是3.05秒。\n\n你还可以传递一个[元组](http://docs.python-requests.org/en/master/user/advanced/#timeouts)给参数`timeout`，元组中的第一个值是连接的超时时间（客户端和服务器之间建立连接的时长），第二个值是读取的超时时间（建立连接后，等待响应的超时时间）：\n\n```python\n>>> requests.get('https://api.github.com', timeout=(2, 5))\n<Response [200]>\n```\n\n如果请求建立连接的时间在2秒以内，建立连接后，接收数据的时间在5秒以内，那么就可以正常获取到响应。但是，如果请求超时，那么函数就会抛出一个`Timeout`的异常。\n\n```python\nimport requests\nfrom requests.exceptions import Timeout\n\ntry:\n    response = requests.get('https://api.github.com', timeout=1)\nexcept Timeout:\n    print('The request timed out')\nelse:\n    print('The request did not time out')\n```\n\n你的程序可以捕获这个`Timeout`的异常，并做相应的处理。\n\n### The Session Object\n\n到目前为止，你都是使用`requests`的`get()`和`post()`来发送请求。这些函数隐藏了一些细节，例如连接是如何建立以及管理的。\n\n实际上，这些细节都是由类`Session`来负责处理。如果你需要微调你的请求，或者改进性能，你需要直接使用`Session`的实例。\n\n会话主要是在一些列的请求中，保持持久的参数。例如，如果你想要在多个请求中使用相同的认证信息，你就可以使用会话：\n\n```python\nimport requests\nfrom getpass import getpass\n\n# By using a context manager, you can ensure the resources used by\n# the session will be released after use\nwith requests.Session() as session:\n    session.auth = ('username', getpass())\n\n    # Instead of requests.get(), you'll use session.get()\n    response = session.get('https://api.github.com/user')\n\n# You can inspect the response just like you did before\nprint(response.headers)\nprint(response.json())\n```\n\n每次你用session发起请求，一旦该会话在初始化时，设定了认证的身份信息，那么该身份信息就可以在多个requests中重复使用。\n\n通过session改进性能，主要是通过保持长连接的方式。当你的应用通过Session来发起请求，它就会在连接池中长时间保持该连接。当应用想要再次连接到同一个服务器的时候，就可以重复使用连接池中的连接，而不需要再新建连接。\n\n### Max Retries\n\n当请求失败的时候，你可能希望应用重新发起同样的请求。但是，`requests`默认并不会帮你重新发送请求。为了实现这个功能，你需要使用[Transport Adapter](http://docs.python-requests.org/en/master/user/advanced/#transport-adapters)。\n\nTransport Adapters可以让你为每一个需要访问的服务定义一组配置信息。例如，你想要所有访问`https://api.github.com`的请求失败后都重复三次，你可以创建一个Transport Adapter，设置参数`max_retries`的值为3，并将其挂载到当前的会话上：\n\n```python\nimport requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.exceptions import ConnectionError\n\ngithub_adapter = HTTPAdapter(max_retries=3)\n\nsession = requests.Session()\n\n# Use `github_adapter` for all requests to endpoints that start with this URL\nsession.mount('https://api.github.com', github_adapter)\n\ntry:\n    session.get('https://api.github.com')\nexcept ConnectionError as ce:\n    print(ce)\n```\n\n当你挂载HTTPAdapter， github_adapter到会话的时候，会话会遵循该配置的设置。\n\n## 总结\n\n通过以上内容，你现在可以：\n\n- 发送不同的HTTP请求，例如：GET, POST, PUT\n- 通过修改报头，认证，查询字符串和消息这个问，自定义请求\n- 检查发送给服务器的数据，以及从服务器接收的数据\n- SSL证书验证\n- 通过max_retries, timeout, Sessions和Transport Adapters，更有效的使用`requests`\n","slug":"python/Requests库使用指南","published":1,"updated":"2023-03-03T01:33:03.360Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clexvkk9600285i739ycgbwwa","content":"<blockquote>\n<p>注：本文翻译自<a href=\"https://realpython.com/python-requests/\">Python’s Requests Library (Guide)</a>。</p>\n</blockquote>\n<h1 id=\"Requests库使用指南\"><a href=\"#Requests库使用指南\" class=\"headerlink\" title=\"Requests库使用指南\"></a>Requests库使用指南</h1><p>在Python中，<code>requests</code>库是处理HTTP请求的标准。它使得复杂的HTTP请求变得简单、易用，让你可以专注于处理与服务之间的交互，为应用获取所需的数据。</p>\n<p>通过本文，你可以学到许多<code>requests</code>库中的有用功能，并且可以根据实际的需求，定制和优化这些功能。你还会学到如何有效地使用<code>requests</code>库，避免由于访问外部服务而影响应用的响应速度。</p>\n<p>在本指南中，你将学到以下内容：</p>\n<ul>\n<li>通过<code>requests</code>使用HTTP中最常见的方式</li>\n<li>定制<code>requests</code>中的报头和数据，使用询问字符和消息内容</li>\n<li>检查查询和响应中的数据</li>\n<li>发送认证请求</li>\n<li>配置请求，防止应用的响应速度变慢</li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"开始使用requests\"><a href=\"#开始使用requests\" class=\"headerlink\" title=\"开始使用requests\"></a>开始使用requests</h2><p>首先，需要安装<code>requests</code>库：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">$ pip <span class=\"token function\">install</span> requests<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>安装完成后，需要先导入<code>requests</code>库：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> requests<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"GET请求\"><a href=\"#GET请求\" class=\"headerlink\" title=\"GET请求\"></a>GET请求</h2><p>HTTP有很多种请求方式，例如GET和POST，不同的请求方式，所执行的操作是不同的。其中，GET是最常用的HTTP请求。GET主要是用来获取Web数据。如果发起一个GET请求，就会调用<code>requests.get()</code>。</p>\n<p>以下例子中，你可以看到通过调用<code>get()</code>发送GET请求给Github的<a href=\"https://developer.github.com/v3/#root-endpoint\">Root REST API</a>。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'https://api.github.com'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>Response <span class=\"token punctuation\">[</span><span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"响应\"><a href=\"#响应\" class=\"headerlink\" title=\"响应\"></a>响应</h2><p>通过发送GET请求以后，我们可以得到一个Response的对象。将该对象存储到一个变量中后，我们可以查看该对象的属性和方法：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'https://api.github.com'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>在以上例子中，我们将响应对象存储到<code>response</code>变量中。</p>\n<h3 id=\"状态码（Status-Codes）\"><a href=\"#状态码（Status-Codes）\" class=\"headerlink\" title=\"状态码（Status Codes）\"></a>状态码（Status Codes）</h3><p>从响应<code>Response</code>中首先可以获取状态码，通过状态码来判断请求是否成功。</p>\n<p>例如，如果状态码是<code>200 OK</code>，那么说明请求是成功的，但是如果状态码是<code>404 NOT FOUND</code>，则说明未找到需要获取的资源。关于状态码的详细说明，请参考文档：<a href=\"https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\">many other possible status codes</a></p>\n<p>通过访问响应<code>response</code>的属性<code>.status_code</code>，可以看到服务器返回的状态码：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> response<span class=\"token punctuation\">.</span>status_code\n<span class=\"token number\">200</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><code>.status_code</code>返回的是<code>200</code>，说明请求时成功的，并且服务器返回了你需要获取的数据。</p>\n<p>有些情况下，你可能想要通过状态码来作为判断条件：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">if</span> response<span class=\"token punctuation\">.</span>status_code <span class=\"token operator\">==</span> <span class=\"token number\">200</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Success!'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">elif</span> response<span class=\"token punctuation\">.</span>status_code <span class=\"token operator\">==</span> <span class=\"token number\">404</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Not Found.'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>以上例子中，如果服务器返回<code>200</code>的状态码，那么程序就会打印<code>Success!</code>。如果服务器返回<code>404</code>的状态码，程序就会打印<code>Not Found.</code>。</p>\n<p><code>requests</code>提供了一种更为简便的方法。如果直接使用<code>Response</code>实例作为判断的条件，假设状态码在<code>200</code>和<code>400</code>之间，那么表达式就会被评估为<code>True</code>，否则就会被评估为<code>False</code>。</p>\n<p>因此，你可以将之前的例子改写如下：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">if</span> response<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Success!'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'An error has occurred.'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>技术细节：This <a href=\"https://docs.python.org/3/library/stdtypes.html#truth-value-testing\">Truth Value Test</a> is made possible because <a href=\"https://realpython.com/operator-function-overloading/#making-your-objects-truthy-or-falsey-using-bool\"><code>__bool__()</code> is an overloaded method</a> on <code>Response</code>.</p>\n<p>This means that the default behavior of <code>Response</code> has been redefined to take the status code into account when determining the truth value of the object.</p>\n</blockquote>\n<p>记住这种方式并不是检验状态码是否等于<code>200</code>，而是检验状态码是否在<code>200</code>到<code>400</code>之间，例如<code>204 NO CONTENT</code>和<code>304 NOT MODIFIED</code>，也被认为是请求成功的。</p>\n<p>例如，<code>204</code>是说明请求是成功的，但是返回的消息正文并没有任何内容。</p>\n<p>因此，如果只是为了知道请求是否成功，可以使用这种简便的方法，否则，建议还是根据具体的状态码来判断。</p>\n<p>有时候，可能你不希望用<code>if</code>语句来检查状态码，而是希望在请求失败的情况下，引发异常。那么你就可以使用<code>.raise_for_status()</code>：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">from</span> requests<span class=\"token punctuation\">.</span>exceptions <span class=\"token keyword\">import</span> HTTPError\n\n<span class=\"token keyword\">for</span> url <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'https://api.github.com'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'https://api.github.com/invalid'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># If the response was successful, no Exception will be raised</span>\n        response<span class=\"token punctuation\">.</span>raise_for_status<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> HTTPError <span class=\"token keyword\">as</span> http_err<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'HTTP error occurred: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>http_err<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Python 3.6</span>\n    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> err<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Other error occurred: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>err<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Python 3.6</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Success!'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果你调用<code>.raise_for_status()</code>，就会对某些失败的状态码引发<code>HTTPError</code>的异常错误。如果状态码显示请求是成功的，那么程序就不会引发异常。</p>\n<p>通过以上内容，你了解了很多关于如何处理状态码的知识。下面，你将看到如何查看服务器返回的具体数据内容。</p>\n<h3 id=\"内容（Content）\"><a href=\"#内容（Content）\" class=\"headerlink\" title=\"内容（Content）\"></a>内容（Content）</h3><p>GET请求得到的响应经常包含很多有价值的信息，如消息正文中的payload。通过使用<code>Response</code>的属性和方法，你可以用不同的格式来查看payload。</p>\n<p>用bytes的格式查看响应的内容，你可以使用<code>.content</code>：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'https://api.github.com'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> response<span class=\"token punctuation\">.</span>content\n<span class=\"token string\">b'&#123;\"current_user_url\":\"https://api.github.com/user\",\"current_user_authorizations_html_url\":\"https://github.com/settings/connections/applications&#123;/client_id&#125;\",\"authorizations_url\":\"https://api.github.com/authorizations\",\"code_search_url\":\"https://api.github.com/search/code?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;\",\"commit_search_url\":\"https://api.github.com/search/commits?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;\",\"emails_url\":\"https://api.github.com/user/emails\",\"emojis_url\":\"https://api.github.com/emojis\",\"events_url\":\"https://api.github.com/events\",\"feeds_url\":\"https://api.github.com/feeds\",\"followers_url\":\"https://api.github.com/user/followers\",\"following_url\":\"https://api.github.com/user/following&#123;/target&#125;\",\"gists_url\":\"https://api.github.com/gists&#123;/gist_id&#125;\",\"hub_url\":\"https://api.github.com/hub\",\"issue_search_url\":\"https://api.github.com/search/issues?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;\",\"issues_url\":\"https://api.github.com/issues\",\"keys_url\":\"https://api.github.com/user/keys\",\"notifications_url\":\"https://api.github.com/notifications\",\"organization_repositories_url\":\"https://api.github.com/orgs/&#123;org&#125;/repos&#123;?type,page,per_page,sort&#125;\",\"organization_url\":\"https://api.github.com/orgs/&#123;org&#125;\",\"public_gists_url\":\"https://api.github.com/gists/public\",\"rate_limit_url\":\"https://api.github.com/rate_limit\",\"repository_url\":\"https://api.github.com/repos/&#123;owner&#125;/&#123;repo&#125;\",\"repository_search_url\":\"https://api.github.com/search/repositories?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;\",\"current_user_repositories_url\":\"https://api.github.com/user/repos&#123;?type,page,per_page,sort&#125;\",\"starred_url\":\"https://api.github.com/user/starred&#123;/owner&#125;&#123;/repo&#125;\",\"starred_gists_url\":\"https://api.github.com/gists/starred\",\"team_url\":\"https://api.github.com/teams\",\"user_url\":\"https://api.github.com/users/&#123;user&#125;\",\"user_organizations_url\":\"https://api.github.com/user/orgs\",\"user_repositories_url\":\"https://api.github.com/users/&#123;user&#125;/repos&#123;?type,page,per_page,sort&#125;\",\"user_search_url\":\"https://api.github.com/search/users?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;\"&#125;'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>通过<code>.content</code>读取到的是字节格式的payload，如果你想要将其转换成UTF-8编码的字符串，你可以使用<code>.text</code>：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> response<span class=\"token punctuation\">.</span>text\n<span class=\"token string\">'&#123;\"current_user_url\":\"https://api.github.com/user\",\"current_user_authorizations_html_url\":\"https://github.com/settings/connections/applications&#123;/client_id&#125;\",\"authorizations_url\":\"https://api.github.com/authorizations\",\"code_search_url\":\"https://api.github.com/search/code?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;\",\"commit_search_url\":\"https://api.github.com/search/commits?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;\",\"emails_url\":\"https://api.github.com/user/emails\",\"emojis_url\":\"https://api.github.com/emojis\",\"events_url\":\"https://api.github.com/events\",\"feeds_url\":\"https://api.github.com/feeds\",\"followers_url\":\"https://api.github.com/user/followers\",\"following_url\":\"https://api.github.com/user/following&#123;/target&#125;\",\"gists_url\":\"https://api.github.com/gists&#123;/gist_id&#125;\",\"hub_url\":\"https://api.github.com/hub\",\"issue_search_url\":\"https://api.github.com/search/issues?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;\",\"issues_url\":\"https://api.github.com/issues\",\"keys_url\":\"https://api.github.com/user/keys\",\"notifications_url\":\"https://api.github.com/notifications\",\"organization_repositories_url\":\"https://api.github.com/orgs/&#123;org&#125;/repos&#123;?type,page,per_page,sort&#125;\",\"organization_url\":\"https://api.github.com/orgs/&#123;org&#125;\",\"public_gists_url\":\"https://api.github.com/gists/public\",\"rate_limit_url\":\"https://api.github.com/rate_limit\",\"repository_url\":\"https://api.github.com/repos/&#123;owner&#125;/&#123;repo&#125;\",\"repository_search_url\":\"https://api.github.com/search/repositories?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;\",\"current_user_repositories_url\":\"https://api.github.com/user/repos&#123;?type,page,per_page,sort&#125;\",\"starred_url\":\"https://api.github.com/user/starred&#123;/owner&#125;&#123;/repo&#125;\",\"starred_gists_url\":\"https://api.github.com/gists/starred\",\"team_url\":\"https://api.github.com/teams\",\"user_url\":\"https://api.github.com/users/&#123;user&#125;\",\"user_organizations_url\":\"https://api.github.com/user/orgs\",\"user_repositories_url\":\"https://api.github.com/users/&#123;user&#125;/repos&#123;?type,page,per_page,sort&#125;\",\"user_search_url\":\"https://api.github.com/search/users?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;\"&#125;'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>因为将<code>bytes</code>转换成<code>str</code>需要指定编码的方式，<code>requests</code>会根据响应中的<code>hearders</code>内容来猜测编码的方式，或者，你也可以通过设置<code>.encoding</code>指定编码的方式：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> response<span class=\"token punctuation\">.</span>encoding <span class=\"token operator\">=</span> <span class=\"token string\">'utf-8'</span> <span class=\"token comment\"># Optional: requests infers this internally</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> response<span class=\"token punctuation\">.</span>text\n<span class=\"token string\">'&#123;\"current_user_url\":\"https://api.github.com/user\",\"current_user_authorizations_html_url\":\"https://github.com/settings/connections/applications&#123;/client_id&#125;\",\"authorizations_url\":\"https://api.github.com/authorizations\",\"code_search_url\":\"https://api.github.com/search/code?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;\",\"commit_search_url\":\"https://api.github.com/search/commits?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;\",\"emails_url\":\"https://api.github.com/user/emails\",\"emojis_url\":\"https://api.github.com/emojis\",\"events_url\":\"https://api.github.com/events\",\"feeds_url\":\"https://api.github.com/feeds\",\"followers_url\":\"https://api.github.com/user/followers\",\"following_url\":\"https://api.github.com/user/following&#123;/target&#125;\",\"gists_url\":\"https://api.github.com/gists&#123;/gist_id&#125;\",\"hub_url\":\"https://api.github.com/hub\",\"issue_search_url\":\"https://api.github.com/search/issues?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;\",\"issues_url\":\"https://api.github.com/issues\",\"keys_url\":\"https://api.github.com/user/keys\",\"notifications_url\":\"https://api.github.com/notifications\",\"organization_repositories_url\":\"https://api.github.com/orgs/&#123;org&#125;/repos&#123;?type,page,per_page,sort&#125;\",\"organization_url\":\"https://api.github.com/orgs/&#123;org&#125;\",\"public_gists_url\":\"https://api.github.com/gists/public\",\"rate_limit_url\":\"https://api.github.com/rate_limit\",\"repository_url\":\"https://api.github.com/repos/&#123;owner&#125;/&#123;repo&#125;\",\"repository_search_url\":\"https://api.github.com/search/repositories?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;\",\"current_user_repositories_url\":\"https://api.github.com/user/repos&#123;?type,page,per_page,sort&#125;\",\"starred_url\":\"https://api.github.com/user/starred&#123;/owner&#125;&#123;/repo&#125;\",\"starred_gists_url\":\"https://api.github.com/gists/starred\",\"team_url\":\"https://api.github.com/teams\",\"user_url\":\"https://api.github.com/users/&#123;user&#125;\",\"user_organizations_url\":\"https://api.github.com/user/orgs\",\"user_repositories_url\":\"https://api.github.com/users/&#123;user&#125;/repos&#123;?type,page,per_page,sort&#125;\",\"user_search_url\":\"https://api.github.com/search/users?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;\"&#125;'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>如果你仔细看一下响应的内容，你会发现实际上是序列化的<code>JSON</code>内容。因此，你可以通过<code>.text</code>的方式先获取字符串，然后再通过<a href=\"https://realpython.com/python-json/#deserializing-json\"><code>json.loads()</code></a>的方式获取字典。其实，还有一种更为简单的方法，可以i使用<code>.json()</code>：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> response<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span><span class=\"token string\">'current_user_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com/user'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'current_user_authorizations_html_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://github.com/settings/connections/applications&#123;/client_id&#125;'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'authorizations_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com/authorizations'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'code_search_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com/search/code?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'commit_search_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com/search/commits?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'emails_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com/user/emails'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'emojis_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com/emojis'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'events_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com/events'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'feeds_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com/feeds'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'followers_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com/user/followers'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'following_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com/user/following&#123;/target&#125;'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'gists_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com/gists&#123;/gist_id&#125;'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hub_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com/hub'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'issue_search_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com/search/issues?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'issues_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com/issues'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'keys_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com/user/keys'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'notifications_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com/notifications'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'organization_repositories_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com/orgs/&#123;org&#125;/repos&#123;?type,page,per_page,sort&#125;'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'organization_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com/orgs/&#123;org&#125;'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'public_gists_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com/gists/public'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rate_limit_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com/rate_limit'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'repository_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com/repos/&#123;owner&#125;/&#123;repo&#125;'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'repository_search_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com/search/repositories?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'current_user_repositories_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com/user/repos&#123;?type,page,per_page,sort&#125;'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'starred_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com/user/starred&#123;/owner&#125;&#123;/repo&#125;'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'starred_gists_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com/gists/starred'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'team_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com/teams'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'user_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com/users/&#123;user&#125;'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'user_organizations_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com/user/orgs'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'user_repositories_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com/users/&#123;user&#125;/repos&#123;?type,page,per_page,sort&#125;'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'user_search_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com/search/users?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;'</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><code>.json()</code>返回的结果是一个字典，因此你可以通过键来访问字典中的值。</p>\n<p>除了状态码和消息正文，你还可以查看响应中的Headers。</p>\n<h3 id=\"报头（Headers）\"><a href=\"#报头（Headers）\" class=\"headerlink\" title=\"报头（Headers）\"></a>报头（Headers）</h3><p>响应中的报头通常包含很多有用的信息，例如内容类型，缓存内容的时间限制。</p>\n<p>可以通过<code>.headers</code>来查看报头的内容：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> response<span class=\"token punctuation\">.</span>headers\n<span class=\"token punctuation\">&#123;</span><span class=\"token string\">'Server'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'GitHub.com'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Date'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Mon, 10 Dec 2018 17:49:54 GMT'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'application/json; charset=utf-8'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Transfer-Encoding'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'chunked'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Status'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'200 OK'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'X-RateLimit-Limit'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'60'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'X-RateLimit-Remaining'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'59'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'X-RateLimit-Reset'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'1544467794'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Cache-Control'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'public, max-age=60, s-maxage=60'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Vary'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Accept'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ETag'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'W/\"7dc470913f1fe9bb6c7355b50a0737bc\"'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'X-GitHub-Media-Type'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'github.v3; format=json'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Access-Control-Expose-Headers'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Access-Control-Allow-Origin'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Strict-Transport-Security'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'max-age=31536000; includeSubdomains; preload'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'X-Frame-Options'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'deny'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'X-Content-Type-Options'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'nosniff'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'X-XSS-Protection'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'1; mode=block'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Referrer-Policy'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'origin-when-cross-origin, strict-origin-when-cross-origin'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Content-Security-Policy'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"default-src 'none'\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Content-Encoding'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'gzip'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'X-GitHub-Request-Id'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'E439:4581:CF2351:1CA3E06:5C0EA741'</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><code>.headers</code>返回的是字典类型的<strong>对象</strong>，因此，你可以像访问字典一样来获取值：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> response<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">]</span>\n<span class=\"token string\">'application/json; charset=utf-8'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>headers对象有一个特殊的地方。由于HTTP标准定义headers不区分大小写，所有，我们访问headers的时候，不需要担心大小写：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> response<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">'content-type'</span><span class=\"token punctuation\">]</span>\n<span class=\"token string\">'application/json; charset=utf-8'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>以上例子中，无论使用<code>content-type</code>还是<code>Content-Type</code>，你都能得到相同的结果。</p>\n<h2 id=\"查询字符串参数（Query-String-Parameters）\"><a href=\"#查询字符串参数（Query-String-Parameters）\" class=\"headerlink\" title=\"查询字符串参数（Query String Parameters）\"></a>查询字符串参数（Query String Parameters）</h2><p>通过在URL中传递查询字符串参数，可以定制GET请求。在方法<code>get()</code>中，可以传递参数<code>params</code>。例如，你可以使用GitHub的查询API来查找<code>requests</code>库。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> requests\n\n<span class=\"token comment\"># Search GitHub's repositories for requests</span>\nresponse <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'https://api.github.com/search/repositories'</span><span class=\"token punctuation\">,</span>\n    params<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'q'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'requests+language:python'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Inspect some attributes of the `requests` repository</span>\njson_response <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nrepository <span class=\"token operator\">=</span> json_response<span class=\"token punctuation\">[</span><span class=\"token string\">'items'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Repository name: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>repository<span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Python 3.6+</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Repository description: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>repository<span class=\"token punctuation\">[</span><span class=\"token string\">\"description\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Python 3.6+</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在方法<code>.get()</code>中，通过将字典<code>&#123;&#39;q&#39;: &#39;requests+language:python&#39;&#125;</code>传递给参数<code>params</code>，你可以改变从查询API返回的结果。</p>\n<p>你接可以用字典作为参数<code>params</code>的值，也可以使用以元组为成员的数组作为参数<code>params</code>的值：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token string\">'https://api.github.com/search/repositories'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     params<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">'q'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'requests+language:python'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>Response <span class=\"token punctuation\">[</span><span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>甚至，你还可以传递bytes作为值传递给参数：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token string\">'https://api.github.com/search/repositories'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     params<span class=\"token operator\">=</span><span class=\"token string\">b'q=requests+language:python'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>Response <span class=\"token punctuation\">[</span><span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>查询字符串对于自定义GET请求非常有用。同时，你还可以通过添加或者修改报头来自定义GET请求。</p>\n<h2 id=\"请求报头（Request-Headers）\"><a href=\"#请求报头（Request-Headers）\" class=\"headerlink\" title=\"请求报头（Request Headers）\"></a>请求报头（Request Headers）</h2><p>在方法<code>.get()</code>中，你可以通过将字典作为值传递给参数<code>headers</code>的方式，来自定义报头。例如，在之前的查询例子中，你可以通过在<code>Accept</code>报头中指定<code>text-match</code>类型：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> requests\n\nresponse <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'https://api.github.com/search/repositories'</span><span class=\"token punctuation\">,</span>\n    params<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'q'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'requests+language:python'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    headers<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'Accept'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'application/vnd.github.v3.text-match+json'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># View the new `text-matches` array which provides information</span>\n<span class=\"token comment\"># about your search term within the results</span>\njson_response <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nrepository <span class=\"token operator\">=</span> json_response<span class=\"token punctuation\">[</span><span class=\"token string\">'items'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Text matches: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>repository<span class=\"token punctuation\">[</span><span class=\"token string\">\"text_matches\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>Accept</code>报头可以告诉服务器，你的应用可以处理的消息正文类型。在本例中，你使用的报头值是<code>application/vnd.github.v3.text-match+json</code>，这是GitHub网站<code>Accept</code>报头的专有属性，正文内容是一种特殊的JSON格式。</p>\n<p>在学习其它自定义请求的方式之前，我们先简单了解一下其它的HTTP方法。</p>\n<h2 id=\"其它的HTTP方法\"><a href=\"#其它的HTTP方法\" class=\"headerlink\" title=\"其它的HTTP方法\"></a>其它的HTTP方法</h2><p>除了GET以前，HTTP还支持<code>POST</code>, <code>PUT</code>, <code>DELETE</code>, <code>HEAD</code>, <code>PATCH</code>和<code>OPTIONS</code>。在<code>requests</code>库中给，这些方法的使用方法和<code>get()</code>相似：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span><span class=\"token string\">'https://httpbin.org/post'</span><span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'key'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> requests<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">'https://httpbin.org/put'</span><span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'key'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> requests<span class=\"token punctuation\">.</span>delete<span class=\"token punctuation\">(</span><span class=\"token string\">'https://httpbin.org/delete'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> requests<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">(</span><span class=\"token string\">'https://httpbin.org/get'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> requests<span class=\"token punctuation\">.</span>patch<span class=\"token punctuation\">(</span><span class=\"token string\">'https://httpbin.org/patch'</span><span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'key'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> requests<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">(</span><span class=\"token string\">'https://httpbin.org/get'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>以下例子中，每一个函数调用都会对httpbin服务发起相应的HTTP方法。每一种方法，你都可以使用和之前相同的方式，查看服务器响应的内容：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">(</span><span class=\"token string\">'https://httpbin.org/get'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> response<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">]</span>\n<span class=\"token string\">'application/json'</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>delete<span class=\"token punctuation\">(</span><span class=\"token string\">'https://httpbin.org/delete'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> json_response <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> json_response<span class=\"token punctuation\">[</span><span class=\"token string\">'args'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>报头、响应正文、状态码和其它信息都会包含在每一种HTTP方法的<code>Response</code>中。接下来，你将更为详细地了解<code>POST</code>，<code>PUT</code>和<code>PATCH</code>方法，以及它们之间的区别。</p>\n<h2 id=\"消息正文\"><a href=\"#消息正文\" class=\"headerlink\" title=\"消息正文\"></a>消息正文</h2><p>根据HTTP的规格说明，<code>POST</code>，<code>PUT</code>和<code>PATCH</code>都是通过将数据传递给消息正文，而不是通过将查询字符串传递给参数的方式。通过使用<code>requests</code>，你可以将<code>payload</code>传递给<code>data</code>参数。</p>\n<p>你可以将字典，元组为成员的列表或者文件对象传递给参数<code>data</code>。在请求的正文中，根据具体的类型需要，你可以采用不同的数据类型：</p>\n<p>例如，如果你请求的内容类型为<code>application/x-www-form-urlencoded</code>，那么你就可以将字典作为表格数据，传递给参数<code>data</code>。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span><span class=\"token string\">'https://httpbin.org/post'</span><span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'key'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>Response <span class=\"token punctuation\">[</span><span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>你也可以使用以元组为成员的列表：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span><span class=\"token string\">'https://httpbin.org/post'</span><span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">'key'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>Response <span class=\"token punctuation\">[</span><span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>但是，如果你需要发送JSON格式的数据，你可以使用参数<code>json</code>。当你将值传递给参数<code>json</code>后，<code>requests</code>库会序列化你的数据和正确的<code>Content-Type</code>报头。</p>\n<p><a href=\"https://httpbin.org/\">httpbin.org</a>是由<code>requests</code>库的开发者 <a href=\"https://realpython.com/interview-kenneth-reitz/\">Kenneth Reitz</a>创建的一个用于测试的网站。该网站可以用来测试<code>requests</code>发起的各种请求。例如，你可以用它来测试POST请求：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span><span class=\"token string\">'https://httpbin.org/post'</span><span class=\"token punctuation\">,</span> json<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'key'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> json_response <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> json_response<span class=\"token punctuation\">[</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">]</span>\n<span class=\"token string\">'&#123;\"key\": \"value\"&#125;'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> json_response<span class=\"token punctuation\">[</span><span class=\"token string\">'headers'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">]</span>\n<span class=\"token string\">'application/json'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"检查请求\"><a href=\"#检查请求\" class=\"headerlink\" title=\"检查请求\"></a>检查请求</h2><p>在发送请求到服务器之前，<code>requests</code>库会先将请求准备好。请求的准备包括验证报头以及序列化JSON内容。</p>\n<p>你可以通过<code>.request</code>来访问准备请求（<code>PrepareRequest</code>）：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span><span class=\"token string\">'https://httpbin.org/post'</span><span class=\"token punctuation\">,</span> json<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'key'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> response<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">]</span>\n<span class=\"token string\">'application/json'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> response<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>url\n<span class=\"token string\">'https://httpbin.org/post'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> response<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>body\n<span class=\"token string\">b'&#123;\"key\": \"value\"&#125;'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>检查准备请求可以让你访问各种信息，包括payload, URL, headers, authentication等等。</p>\n<h2 id=\"认证\"><a href=\"#认证\" class=\"headerlink\" title=\"认证\"></a>认证</h2><p>认证可以让服务器知道你是谁。通常情况下，你可以通过<code>Authorization</code>报头提供你的身份信息，或者也可以通过自定义的报头来提供身份信息。在<code>requests</code>中，你可以使用参数<code>auth</code>来传递你的身份信息。</p>\n<p>下面以GitHub的<a href=\"https://developer.github.com/v3/users/#get-the-authenticated-user\">Authenticated User</a> API为例。为了访问该API，你需要通过一个元组来传递用户名和密码：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> getpass <span class=\"token keyword\">import</span> getpass\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'https://api.github.com/user'</span><span class=\"token punctuation\">,</span> auth<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">,</span> getpass<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>Response <span class=\"token punctuation\">[</span><span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>如果身份信息正确，request请求就会返回成功过。如果request请求中没有包含身份信息，服务器就会返回<code>401 Unauthorized</code>：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'https://api.github.com/user'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>Response <span class=\"token punctuation\">[</span><span class=\"token number\">401</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>当你通过以上这种方式传递身份信息的时候，实际上<code>requests</code>使用的是HTTP的 <a href=\"https://en.wikipedia.org/wiki/Basic_access_authentication\">Basic access authentication scheme</a>。</p>\n<p>因此，你还可以使用<code>HTTPBasicAuth</code>来传递身份信息：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> requests<span class=\"token punctuation\">.</span>auth <span class=\"token keyword\">import</span> HTTPBasicAuth\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> getpass <span class=\"token keyword\">import</span> getpass\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token string\">'https://api.github.com/user'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     auth<span class=\"token operator\">=</span>HTTPBasicAuth<span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">,</span> getpass<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>Response <span class=\"token punctuation\">[</span><span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>除了Basic认证方式以外，<code>requests</code>还支持其它认证方式，例如<code>HTTPDigestAuth</code>和<code>HTTPProxyAuth</code>。</p>\n<p>你甚至还可以提供自定义的认证方式。但是，你必须首先创建一个继承<code>AuthBase</code>的子类。然后，你需要定义<code>__call__()</code>函数：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">from</span> requests<span class=\"token punctuation\">.</span>auth <span class=\"token keyword\">import</span> AuthBase\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TokenAuth</span><span class=\"token punctuation\">(</span>AuthBase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Implements a custom authentication scheme.\"\"\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>token <span class=\"token operator\">=</span> token\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__call__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"Attach an API token to a custom auth header.\"\"\"</span>\n        r<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">'X-TokenAuth'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span>  <span class=\"token comment\"># Python 3.6+</span>\n        <span class=\"token keyword\">return</span> r\n\n\nrequests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'https://httpbin.org/get'</span><span class=\"token punctuation\">,</span> auth<span class=\"token operator\">=</span>TokenAuth<span class=\"token punctuation\">(</span><span class=\"token string\">'12345abcde-token'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>以上例子中，自定义的类<code>TokenAuth</code>会收到一个Token，然后将收到的token放到<code>x-TokenAuth</code>报头中。</p>\n<p>不健全的认证机制会导致安全隐患，所以除非有特殊需求，否则应该使用成熟的认证机制，比如Basic或者OAuth。</p>\n<h2 id=\"SSL证书验证\"><a href=\"#SSL证书验证\" class=\"headerlink\" title=\"SSL证书验证\"></a>SSL证书验证</h2><p>任何时候，当发送和接收的信息比较机密，安全往往是最重要的。因此，当你访问安全站点的时候，都会通过SSL建立安全连接，这时候对服务器的SSL证书进行验证显得尤为重要。</p>\n<p>默认情况下，<code>requests</code>已经为你执行了SSL证书的验证。但是，在某些情况下，你可能希望改变这种默认的行为。</p>\n<p>如果你想要关闭SSL证书的验证，你可以将参数<code>verify</code>设置为<code>False</code>：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'https://api.github.com'</span><span class=\"token punctuation\">,</span> verify<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\nInsecureRequestWarning<span class=\"token punctuation\">:</span> Unverified HTTPS request <span class=\"token keyword\">is</span> being made<span class=\"token punctuation\">.</span> Adding certificate verification <span class=\"token keyword\">is</span> strongly advised<span class=\"token punctuation\">.</span> See<span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span>urllib3<span class=\"token punctuation\">.</span>readthedocs<span class=\"token punctuation\">.</span>io<span class=\"token operator\">/</span>en<span class=\"token operator\">/</span>latest<span class=\"token operator\">/</span>advanced<span class=\"token operator\">-</span>usage<span class=\"token punctuation\">.</span>html<span class=\"token comment\">#ssl-warnings</span>\n  InsecureRequestWarning<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>Response <span class=\"token punctuation\">[</span><span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>当你正在访问一个不安全的站点时，<code>requests</code>会发出警告信息提醒你。</p>\n<blockquote>\n<p>注意：<code>requests</code>使用<a href=\"http://docs.python-requests.org/en/master/user/advanced/#ca-certificates\"><code>certifi</code></a>来提供SSL证书的颁发机构（ Certificate Authorities）。这可以让<code>requests</code>知道有哪些可以信任的证书颁发机构。因此，你需要定期更新<code>certifi</code>来保证安全性。</p>\n</blockquote>\n<h2 id=\"性能\"><a href=\"#性能\" class=\"headerlink\" title=\"性能\"></a>性能</h2><p>当在生产环境中使用<code>requests</code>的时候，特别需要考虑性能的影响。<code>requests</code>库的一些特性，例如超时控制（timeout control），会话（sessions）和重试限制（retry limits）可以使得应用运行得更流畅。</p>\n<h3 id=\"Timeouts\"><a href=\"#Timeouts\" class=\"headerlink\" title=\"Timeouts\"></a>Timeouts</h3><p>当你向服务发送请求以后，你得应用将会等待服务端的响应，得到响应以后，才会执行下一步操作。如果应用等待的时间太长，请求就会一直处于等待状态，导致用户体验变差，或者后台任务挂起。</p>\n<p>默认情况下，<code>requests</code>将会无限制地等待响应，所以你应该指定一个超时的时间值。你可以通过参数<code>timeout</code>来设置超时的时间值。<code>timeout</code>的值可以是整型或者浮点型，时间的单位是秒。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'https://api.github.com'</span><span class=\"token punctuation\">,</span> timeout<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>Response <span class=\"token punctuation\">[</span><span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'https://api.github.com'</span><span class=\"token punctuation\">,</span> timeout<span class=\"token operator\">=</span><span class=\"token number\">3.05</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>Response <span class=\"token punctuation\">[</span><span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>以上例子中，第一个请求的超时时间是1秒，第二个请求的超时时间是3.05秒。</p>\n<p>你还可以传递一个<a href=\"http://docs.python-requests.org/en/master/user/advanced/#timeouts\">元组</a>给参数<code>timeout</code>，元组中的第一个值是连接的超时时间（客户端和服务器之间建立连接的时长），第二个值是读取的超时时间（建立连接后，等待响应的超时时间）：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'https://api.github.com'</span><span class=\"token punctuation\">,</span> timeout<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>Response <span class=\"token punctuation\">[</span><span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>如果请求建立连接的时间在2秒以内，建立连接后，接收数据的时间在5秒以内，那么就可以正常获取到响应。但是，如果请求超时，那么函数就会抛出一个<code>Timeout</code>的异常。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">from</span> requests<span class=\"token punctuation\">.</span>exceptions <span class=\"token keyword\">import</span> Timeout\n\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'https://api.github.com'</span><span class=\"token punctuation\">,</span> timeout<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> Timeout<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The request timed out'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The request did not time out'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>你的程序可以捕获这个<code>Timeout</code>的异常，并做相应的处理。</p>\n<h3 id=\"The-Session-Object\"><a href=\"#The-Session-Object\" class=\"headerlink\" title=\"The Session Object\"></a>The Session Object</h3><p>到目前为止，你都是使用<code>requests</code>的<code>get()</code>和<code>post()</code>来发送请求。这些函数隐藏了一些细节，例如连接是如何建立以及管理的。</p>\n<p>实际上，这些细节都是由类<code>Session</code>来负责处理。如果你需要微调你的请求，或者改进性能，你需要直接使用<code>Session</code>的实例。</p>\n<p>会话主要是在一些列的请求中，保持持久的参数。例如，如果你想要在多个请求中使用相同的认证信息，你就可以使用会话：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">from</span> getpass <span class=\"token keyword\">import</span> getpass\n\n<span class=\"token comment\"># By using a context manager, you can ensure the resources used by</span>\n<span class=\"token comment\"># the session will be released after use</span>\n<span class=\"token keyword\">with</span> requests<span class=\"token punctuation\">.</span>Session<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> session<span class=\"token punctuation\">:</span>\n    session<span class=\"token punctuation\">.</span>auth <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">,</span> getpass<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># Instead of requests.get(), you'll use session.get()</span>\n    response <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'https://api.github.com/user'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># You can inspect the response just like you did before</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>每次你用session发起请求，一旦该会话在初始化时，设定了认证的身份信息，那么该身份信息就可以在多个requests中重复使用。</p>\n<p>通过session改进性能，主要是通过保持长连接的方式。当你的应用通过Session来发起请求，它就会在连接池中长时间保持该连接。当应用想要再次连接到同一个服务器的时候，就可以重复使用连接池中的连接，而不需要再新建连接。</p>\n<h3 id=\"Max-Retries\"><a href=\"#Max-Retries\" class=\"headerlink\" title=\"Max Retries\"></a>Max Retries</h3><p>当请求失败的时候，你可能希望应用重新发起同样的请求。但是，<code>requests</code>默认并不会帮你重新发送请求。为了实现这个功能，你需要使用<a href=\"http://docs.python-requests.org/en/master/user/advanced/#transport-adapters\">Transport Adapter</a>。</p>\n<p>Transport Adapters可以让你为每一个需要访问的服务定义一组配置信息。例如，你想要所有访问<code>https://api.github.com</code>的请求失败后都重复三次，你可以创建一个Transport Adapter，设置参数<code>max_retries</code>的值为3，并将其挂载到当前的会话上：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">from</span> requests<span class=\"token punctuation\">.</span>adapters <span class=\"token keyword\">import</span> HTTPAdapter\n<span class=\"token keyword\">from</span> requests<span class=\"token punctuation\">.</span>exceptions <span class=\"token keyword\">import</span> ConnectionError\n\ngithub_adapter <span class=\"token operator\">=</span> HTTPAdapter<span class=\"token punctuation\">(</span>max_retries<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\nsession <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>Session<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Use `github_adapter` for all requests to endpoints that start with this URL</span>\nsession<span class=\"token punctuation\">.</span>mount<span class=\"token punctuation\">(</span><span class=\"token string\">'https://api.github.com'</span><span class=\"token punctuation\">,</span> github_adapter<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    session<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'https://api.github.com'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> ConnectionError <span class=\"token keyword\">as</span> ce<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ce<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>当你挂载HTTPAdapter， github_adapter到会话的时候，会话会遵循该配置的设置。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>通过以上内容，你现在可以：</p>\n<ul>\n<li>发送不同的HTTP请求，例如：GET, POST, PUT</li>\n<li>通过修改报头，认证，查询字符串和消息这个问，自定义请求</li>\n<li>检查发送给服务器的数据，以及从服务器接收的数据</li>\n<li>SSL证书验证</li>\n<li>通过max_retries, timeout, Sessions和Transport Adapters，更有效的使用<code>requests</code></li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>注：本文翻译自<a href=\"https://realpython.com/python-requests/\">Python’s Requests Library (Guide)</a>。</p>\n</blockquote>\n<h1 id=\"Requests库使用指南\"><a href=\"#Requests库使用指南\" class=\"headerlink\" title=\"Requests库使用指南\"></a>Requests库使用指南</h1><p>在Python中，<code>requests</code>库是处理HTTP请求的标准。它使得复杂的HTTP请求变得简单、易用，让你可以专注于处理与服务之间的交互，为应用获取所需的数据。</p>\n<p>通过本文，你可以学到许多<code>requests</code>库中的有用功能，并且可以根据实际的需求，定制和优化这些功能。你还会学到如何有效地使用<code>requests</code>库，避免由于访问外部服务而影响应用的响应速度。</p>\n<p>在本指南中，你将学到以下内容：</p>\n<ul>\n<li>通过<code>requests</code>使用HTTP中最常见的方式</li>\n<li>定制<code>requests</code>中的报头和数据，使用询问字符和消息内容</li>\n<li>检查查询和响应中的数据</li>\n<li>发送认证请求</li>\n<li>配置请求，防止应用的响应速度变慢</li>\n</ul>","more":"<h2 id=\"开始使用requests\"><a href=\"#开始使用requests\" class=\"headerlink\" title=\"开始使用requests\"></a>开始使用requests</h2><p>首先，需要安装<code>requests</code>库：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">$ pip <span class=\"token function\">install</span> requests<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>安装完成后，需要先导入<code>requests</code>库：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> requests<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"GET请求\"><a href=\"#GET请求\" class=\"headerlink\" title=\"GET请求\"></a>GET请求</h2><p>HTTP有很多种请求方式，例如GET和POST，不同的请求方式，所执行的操作是不同的。其中，GET是最常用的HTTP请求。GET主要是用来获取Web数据。如果发起一个GET请求，就会调用<code>requests.get()</code>。</p>\n<p>以下例子中，你可以看到通过调用<code>get()</code>发送GET请求给Github的<a href=\"https://developer.github.com/v3/#root-endpoint\">Root REST API</a>。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'https://api.github.com'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>Response <span class=\"token punctuation\">[</span><span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"响应\"><a href=\"#响应\" class=\"headerlink\" title=\"响应\"></a>响应</h2><p>通过发送GET请求以后，我们可以得到一个Response的对象。将该对象存储到一个变量中后，我们可以查看该对象的属性和方法：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'https://api.github.com'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>在以上例子中，我们将响应对象存储到<code>response</code>变量中。</p>\n<h3 id=\"状态码（Status-Codes）\"><a href=\"#状态码（Status-Codes）\" class=\"headerlink\" title=\"状态码（Status Codes）\"></a>状态码（Status Codes）</h3><p>从响应<code>Response</code>中首先可以获取状态码，通过状态码来判断请求是否成功。</p>\n<p>例如，如果状态码是<code>200 OK</code>，那么说明请求是成功的，但是如果状态码是<code>404 NOT FOUND</code>，则说明未找到需要获取的资源。关于状态码的详细说明，请参考文档：<a href=\"https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\">many other possible status codes</a></p>\n<p>通过访问响应<code>response</code>的属性<code>.status_code</code>，可以看到服务器返回的状态码：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> response<span class=\"token punctuation\">.</span>status_code\n<span class=\"token number\">200</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><code>.status_code</code>返回的是<code>200</code>，说明请求时成功的，并且服务器返回了你需要获取的数据。</p>\n<p>有些情况下，你可能想要通过状态码来作为判断条件：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">if</span> response<span class=\"token punctuation\">.</span>status_code <span class=\"token operator\">==</span> <span class=\"token number\">200</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Success!'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">elif</span> response<span class=\"token punctuation\">.</span>status_code <span class=\"token operator\">==</span> <span class=\"token number\">404</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Not Found.'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>以上例子中，如果服务器返回<code>200</code>的状态码，那么程序就会打印<code>Success!</code>。如果服务器返回<code>404</code>的状态码，程序就会打印<code>Not Found.</code>。</p>\n<p><code>requests</code>提供了一种更为简便的方法。如果直接使用<code>Response</code>实例作为判断的条件，假设状态码在<code>200</code>和<code>400</code>之间，那么表达式就会被评估为<code>True</code>，否则就会被评估为<code>False</code>。</p>\n<p>因此，你可以将之前的例子改写如下：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">if</span> response<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Success!'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'An error has occurred.'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>技术细节：This <a href=\"https://docs.python.org/3/library/stdtypes.html#truth-value-testing\">Truth Value Test</a> is made possible because <a href=\"https://realpython.com/operator-function-overloading/#making-your-objects-truthy-or-falsey-using-bool\"><code>__bool__()</code> is an overloaded method</a> on <code>Response</code>.</p>\n<p>This means that the default behavior of <code>Response</code> has been redefined to take the status code into account when determining the truth value of the object.</p>\n</blockquote>\n<p>记住这种方式并不是检验状态码是否等于<code>200</code>，而是检验状态码是否在<code>200</code>到<code>400</code>之间，例如<code>204 NO CONTENT</code>和<code>304 NOT MODIFIED</code>，也被认为是请求成功的。</p>\n<p>例如，<code>204</code>是说明请求是成功的，但是返回的消息正文并没有任何内容。</p>\n<p>因此，如果只是为了知道请求是否成功，可以使用这种简便的方法，否则，建议还是根据具体的状态码来判断。</p>\n<p>有时候，可能你不希望用<code>if</code>语句来检查状态码，而是希望在请求失败的情况下，引发异常。那么你就可以使用<code>.raise_for_status()</code>：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">from</span> requests<span class=\"token punctuation\">.</span>exceptions <span class=\"token keyword\">import</span> HTTPError\n\n<span class=\"token keyword\">for</span> url <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'https://api.github.com'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'https://api.github.com/invalid'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># If the response was successful, no Exception will be raised</span>\n        response<span class=\"token punctuation\">.</span>raise_for_status<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span> HTTPError <span class=\"token keyword\">as</span> http_err<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'HTTP error occurred: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>http_err<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Python 3.6</span>\n    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> err<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Other error occurred: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>err<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Python 3.6</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Success!'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果你调用<code>.raise_for_status()</code>，就会对某些失败的状态码引发<code>HTTPError</code>的异常错误。如果状态码显示请求是成功的，那么程序就不会引发异常。</p>\n<p>通过以上内容，你了解了很多关于如何处理状态码的知识。下面，你将看到如何查看服务器返回的具体数据内容。</p>\n<h3 id=\"内容（Content）\"><a href=\"#内容（Content）\" class=\"headerlink\" title=\"内容（Content）\"></a>内容（Content）</h3><p>GET请求得到的响应经常包含很多有价值的信息，如消息正文中的payload。通过使用<code>Response</code>的属性和方法，你可以用不同的格式来查看payload。</p>\n<p>用bytes的格式查看响应的内容，你可以使用<code>.content</code>：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'https://api.github.com'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> response<span class=\"token punctuation\">.</span>content\n<span class=\"token string\">b'&#123;\"current_user_url\":\"https://api.github.com/user\",\"current_user_authorizations_html_url\":\"https://github.com/settings/connections/applications&#123;/client_id&#125;\",\"authorizations_url\":\"https://api.github.com/authorizations\",\"code_search_url\":\"https://api.github.com/search/code?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;\",\"commit_search_url\":\"https://api.github.com/search/commits?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;\",\"emails_url\":\"https://api.github.com/user/emails\",\"emojis_url\":\"https://api.github.com/emojis\",\"events_url\":\"https://api.github.com/events\",\"feeds_url\":\"https://api.github.com/feeds\",\"followers_url\":\"https://api.github.com/user/followers\",\"following_url\":\"https://api.github.com/user/following&#123;/target&#125;\",\"gists_url\":\"https://api.github.com/gists&#123;/gist_id&#125;\",\"hub_url\":\"https://api.github.com/hub\",\"issue_search_url\":\"https://api.github.com/search/issues?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;\",\"issues_url\":\"https://api.github.com/issues\",\"keys_url\":\"https://api.github.com/user/keys\",\"notifications_url\":\"https://api.github.com/notifications\",\"organization_repositories_url\":\"https://api.github.com/orgs/&#123;org&#125;/repos&#123;?type,page,per_page,sort&#125;\",\"organization_url\":\"https://api.github.com/orgs/&#123;org&#125;\",\"public_gists_url\":\"https://api.github.com/gists/public\",\"rate_limit_url\":\"https://api.github.com/rate_limit\",\"repository_url\":\"https://api.github.com/repos/&#123;owner&#125;/&#123;repo&#125;\",\"repository_search_url\":\"https://api.github.com/search/repositories?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;\",\"current_user_repositories_url\":\"https://api.github.com/user/repos&#123;?type,page,per_page,sort&#125;\",\"starred_url\":\"https://api.github.com/user/starred&#123;/owner&#125;&#123;/repo&#125;\",\"starred_gists_url\":\"https://api.github.com/gists/starred\",\"team_url\":\"https://api.github.com/teams\",\"user_url\":\"https://api.github.com/users/&#123;user&#125;\",\"user_organizations_url\":\"https://api.github.com/user/orgs\",\"user_repositories_url\":\"https://api.github.com/users/&#123;user&#125;/repos&#123;?type,page,per_page,sort&#125;\",\"user_search_url\":\"https://api.github.com/search/users?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;\"&#125;'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>通过<code>.content</code>读取到的是字节格式的payload，如果你想要将其转换成UTF-8编码的字符串，你可以使用<code>.text</code>：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> response<span class=\"token punctuation\">.</span>text\n<span class=\"token string\">'&#123;\"current_user_url\":\"https://api.github.com/user\",\"current_user_authorizations_html_url\":\"https://github.com/settings/connections/applications&#123;/client_id&#125;\",\"authorizations_url\":\"https://api.github.com/authorizations\",\"code_search_url\":\"https://api.github.com/search/code?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;\",\"commit_search_url\":\"https://api.github.com/search/commits?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;\",\"emails_url\":\"https://api.github.com/user/emails\",\"emojis_url\":\"https://api.github.com/emojis\",\"events_url\":\"https://api.github.com/events\",\"feeds_url\":\"https://api.github.com/feeds\",\"followers_url\":\"https://api.github.com/user/followers\",\"following_url\":\"https://api.github.com/user/following&#123;/target&#125;\",\"gists_url\":\"https://api.github.com/gists&#123;/gist_id&#125;\",\"hub_url\":\"https://api.github.com/hub\",\"issue_search_url\":\"https://api.github.com/search/issues?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;\",\"issues_url\":\"https://api.github.com/issues\",\"keys_url\":\"https://api.github.com/user/keys\",\"notifications_url\":\"https://api.github.com/notifications\",\"organization_repositories_url\":\"https://api.github.com/orgs/&#123;org&#125;/repos&#123;?type,page,per_page,sort&#125;\",\"organization_url\":\"https://api.github.com/orgs/&#123;org&#125;\",\"public_gists_url\":\"https://api.github.com/gists/public\",\"rate_limit_url\":\"https://api.github.com/rate_limit\",\"repository_url\":\"https://api.github.com/repos/&#123;owner&#125;/&#123;repo&#125;\",\"repository_search_url\":\"https://api.github.com/search/repositories?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;\",\"current_user_repositories_url\":\"https://api.github.com/user/repos&#123;?type,page,per_page,sort&#125;\",\"starred_url\":\"https://api.github.com/user/starred&#123;/owner&#125;&#123;/repo&#125;\",\"starred_gists_url\":\"https://api.github.com/gists/starred\",\"team_url\":\"https://api.github.com/teams\",\"user_url\":\"https://api.github.com/users/&#123;user&#125;\",\"user_organizations_url\":\"https://api.github.com/user/orgs\",\"user_repositories_url\":\"https://api.github.com/users/&#123;user&#125;/repos&#123;?type,page,per_page,sort&#125;\",\"user_search_url\":\"https://api.github.com/search/users?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;\"&#125;'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>因为将<code>bytes</code>转换成<code>str</code>需要指定编码的方式，<code>requests</code>会根据响应中的<code>hearders</code>内容来猜测编码的方式，或者，你也可以通过设置<code>.encoding</code>指定编码的方式：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> response<span class=\"token punctuation\">.</span>encoding <span class=\"token operator\">=</span> <span class=\"token string\">'utf-8'</span> <span class=\"token comment\"># Optional: requests infers this internally</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> response<span class=\"token punctuation\">.</span>text\n<span class=\"token string\">'&#123;\"current_user_url\":\"https://api.github.com/user\",\"current_user_authorizations_html_url\":\"https://github.com/settings/connections/applications&#123;/client_id&#125;\",\"authorizations_url\":\"https://api.github.com/authorizations\",\"code_search_url\":\"https://api.github.com/search/code?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;\",\"commit_search_url\":\"https://api.github.com/search/commits?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;\",\"emails_url\":\"https://api.github.com/user/emails\",\"emojis_url\":\"https://api.github.com/emojis\",\"events_url\":\"https://api.github.com/events\",\"feeds_url\":\"https://api.github.com/feeds\",\"followers_url\":\"https://api.github.com/user/followers\",\"following_url\":\"https://api.github.com/user/following&#123;/target&#125;\",\"gists_url\":\"https://api.github.com/gists&#123;/gist_id&#125;\",\"hub_url\":\"https://api.github.com/hub\",\"issue_search_url\":\"https://api.github.com/search/issues?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;\",\"issues_url\":\"https://api.github.com/issues\",\"keys_url\":\"https://api.github.com/user/keys\",\"notifications_url\":\"https://api.github.com/notifications\",\"organization_repositories_url\":\"https://api.github.com/orgs/&#123;org&#125;/repos&#123;?type,page,per_page,sort&#125;\",\"organization_url\":\"https://api.github.com/orgs/&#123;org&#125;\",\"public_gists_url\":\"https://api.github.com/gists/public\",\"rate_limit_url\":\"https://api.github.com/rate_limit\",\"repository_url\":\"https://api.github.com/repos/&#123;owner&#125;/&#123;repo&#125;\",\"repository_search_url\":\"https://api.github.com/search/repositories?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;\",\"current_user_repositories_url\":\"https://api.github.com/user/repos&#123;?type,page,per_page,sort&#125;\",\"starred_url\":\"https://api.github.com/user/starred&#123;/owner&#125;&#123;/repo&#125;\",\"starred_gists_url\":\"https://api.github.com/gists/starred\",\"team_url\":\"https://api.github.com/teams\",\"user_url\":\"https://api.github.com/users/&#123;user&#125;\",\"user_organizations_url\":\"https://api.github.com/user/orgs\",\"user_repositories_url\":\"https://api.github.com/users/&#123;user&#125;/repos&#123;?type,page,per_page,sort&#125;\",\"user_search_url\":\"https://api.github.com/search/users?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;\"&#125;'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>如果你仔细看一下响应的内容，你会发现实际上是序列化的<code>JSON</code>内容。因此，你可以通过<code>.text</code>的方式先获取字符串，然后再通过<a href=\"https://realpython.com/python-json/#deserializing-json\"><code>json.loads()</code></a>的方式获取字典。其实，还有一种更为简单的方法，可以i使用<code>.json()</code>：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> response<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span><span class=\"token string\">'current_user_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com/user'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'current_user_authorizations_html_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://github.com/settings/connections/applications&#123;/client_id&#125;'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'authorizations_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com/authorizations'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'code_search_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com/search/code?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'commit_search_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com/search/commits?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'emails_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com/user/emails'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'emojis_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com/emojis'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'events_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com/events'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'feeds_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com/feeds'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'followers_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com/user/followers'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'following_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com/user/following&#123;/target&#125;'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'gists_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com/gists&#123;/gist_id&#125;'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hub_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com/hub'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'issue_search_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com/search/issues?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'issues_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com/issues'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'keys_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com/user/keys'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'notifications_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com/notifications'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'organization_repositories_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com/orgs/&#123;org&#125;/repos&#123;?type,page,per_page,sort&#125;'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'organization_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com/orgs/&#123;org&#125;'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'public_gists_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com/gists/public'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rate_limit_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com/rate_limit'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'repository_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com/repos/&#123;owner&#125;/&#123;repo&#125;'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'repository_search_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com/search/repositories?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'current_user_repositories_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com/user/repos&#123;?type,page,per_page,sort&#125;'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'starred_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com/user/starred&#123;/owner&#125;&#123;/repo&#125;'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'starred_gists_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com/gists/starred'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'team_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com/teams'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'user_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com/users/&#123;user&#125;'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'user_organizations_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com/user/orgs'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'user_repositories_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com/users/&#123;user&#125;/repos&#123;?type,page,per_page,sort&#125;'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'user_search_url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com/search/users?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;'</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><code>.json()</code>返回的结果是一个字典，因此你可以通过键来访问字典中的值。</p>\n<p>除了状态码和消息正文，你还可以查看响应中的Headers。</p>\n<h3 id=\"报头（Headers）\"><a href=\"#报头（Headers）\" class=\"headerlink\" title=\"报头（Headers）\"></a>报头（Headers）</h3><p>响应中的报头通常包含很多有用的信息，例如内容类型，缓存内容的时间限制。</p>\n<p>可以通过<code>.headers</code>来查看报头的内容：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> response<span class=\"token punctuation\">.</span>headers\n<span class=\"token punctuation\">&#123;</span><span class=\"token string\">'Server'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'GitHub.com'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Date'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Mon, 10 Dec 2018 17:49:54 GMT'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'application/json; charset=utf-8'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Transfer-Encoding'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'chunked'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Status'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'200 OK'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'X-RateLimit-Limit'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'60'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'X-RateLimit-Remaining'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'59'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'X-RateLimit-Reset'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'1544467794'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Cache-Control'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'public, max-age=60, s-maxage=60'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Vary'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Accept'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ETag'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'W/\"7dc470913f1fe9bb6c7355b50a0737bc\"'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'X-GitHub-Media-Type'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'github.v3; format=json'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Access-Control-Expose-Headers'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Access-Control-Allow-Origin'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Strict-Transport-Security'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'max-age=31536000; includeSubdomains; preload'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'X-Frame-Options'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'deny'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'X-Content-Type-Options'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'nosniff'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'X-XSS-Protection'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'1; mode=block'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Referrer-Policy'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'origin-when-cross-origin, strict-origin-when-cross-origin'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Content-Security-Policy'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"default-src 'none'\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Content-Encoding'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'gzip'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'X-GitHub-Request-Id'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'E439:4581:CF2351:1CA3E06:5C0EA741'</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><code>.headers</code>返回的是字典类型的<strong>对象</strong>，因此，你可以像访问字典一样来获取值：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> response<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">]</span>\n<span class=\"token string\">'application/json; charset=utf-8'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>headers对象有一个特殊的地方。由于HTTP标准定义headers不区分大小写，所有，我们访问headers的时候，不需要担心大小写：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> response<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">'content-type'</span><span class=\"token punctuation\">]</span>\n<span class=\"token string\">'application/json; charset=utf-8'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>以上例子中，无论使用<code>content-type</code>还是<code>Content-Type</code>，你都能得到相同的结果。</p>\n<h2 id=\"查询字符串参数（Query-String-Parameters）\"><a href=\"#查询字符串参数（Query-String-Parameters）\" class=\"headerlink\" title=\"查询字符串参数（Query String Parameters）\"></a>查询字符串参数（Query String Parameters）</h2><p>通过在URL中传递查询字符串参数，可以定制GET请求。在方法<code>get()</code>中，可以传递参数<code>params</code>。例如，你可以使用GitHub的查询API来查找<code>requests</code>库。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> requests\n\n<span class=\"token comment\"># Search GitHub's repositories for requests</span>\nresponse <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'https://api.github.com/search/repositories'</span><span class=\"token punctuation\">,</span>\n    params<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'q'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'requests+language:python'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Inspect some attributes of the `requests` repository</span>\njson_response <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nrepository <span class=\"token operator\">=</span> json_response<span class=\"token punctuation\">[</span><span class=\"token string\">'items'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Repository name: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>repository<span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Python 3.6+</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Repository description: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>repository<span class=\"token punctuation\">[</span><span class=\"token string\">\"description\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Python 3.6+</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在方法<code>.get()</code>中，通过将字典<code>&#123;&#39;q&#39;: &#39;requests+language:python&#39;&#125;</code>传递给参数<code>params</code>，你可以改变从查询API返回的结果。</p>\n<p>你接可以用字典作为参数<code>params</code>的值，也可以使用以元组为成员的数组作为参数<code>params</code>的值：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token string\">'https://api.github.com/search/repositories'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     params<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">'q'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'requests+language:python'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>Response <span class=\"token punctuation\">[</span><span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>甚至，你还可以传递bytes作为值传递给参数：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token string\">'https://api.github.com/search/repositories'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     params<span class=\"token operator\">=</span><span class=\"token string\">b'q=requests+language:python'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>Response <span class=\"token punctuation\">[</span><span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>查询字符串对于自定义GET请求非常有用。同时，你还可以通过添加或者修改报头来自定义GET请求。</p>\n<h2 id=\"请求报头（Request-Headers）\"><a href=\"#请求报头（Request-Headers）\" class=\"headerlink\" title=\"请求报头（Request Headers）\"></a>请求报头（Request Headers）</h2><p>在方法<code>.get()</code>中，你可以通过将字典作为值传递给参数<code>headers</code>的方式，来自定义报头。例如，在之前的查询例子中，你可以通过在<code>Accept</code>报头中指定<code>text-match</code>类型：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> requests\n\nresponse <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'https://api.github.com/search/repositories'</span><span class=\"token punctuation\">,</span>\n    params<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'q'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'requests+language:python'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    headers<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'Accept'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'application/vnd.github.v3.text-match+json'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># View the new `text-matches` array which provides information</span>\n<span class=\"token comment\"># about your search term within the results</span>\njson_response <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nrepository <span class=\"token operator\">=</span> json_response<span class=\"token punctuation\">[</span><span class=\"token string\">'items'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'Text matches: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>repository<span class=\"token punctuation\">[</span><span class=\"token string\">\"text_matches\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>Accept</code>报头可以告诉服务器，你的应用可以处理的消息正文类型。在本例中，你使用的报头值是<code>application/vnd.github.v3.text-match+json</code>，这是GitHub网站<code>Accept</code>报头的专有属性，正文内容是一种特殊的JSON格式。</p>\n<p>在学习其它自定义请求的方式之前，我们先简单了解一下其它的HTTP方法。</p>\n<h2 id=\"其它的HTTP方法\"><a href=\"#其它的HTTP方法\" class=\"headerlink\" title=\"其它的HTTP方法\"></a>其它的HTTP方法</h2><p>除了GET以前，HTTP还支持<code>POST</code>, <code>PUT</code>, <code>DELETE</code>, <code>HEAD</code>, <code>PATCH</code>和<code>OPTIONS</code>。在<code>requests</code>库中给，这些方法的使用方法和<code>get()</code>相似：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span><span class=\"token string\">'https://httpbin.org/post'</span><span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'key'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> requests<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token string\">'https://httpbin.org/put'</span><span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'key'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> requests<span class=\"token punctuation\">.</span>delete<span class=\"token punctuation\">(</span><span class=\"token string\">'https://httpbin.org/delete'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> requests<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">(</span><span class=\"token string\">'https://httpbin.org/get'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> requests<span class=\"token punctuation\">.</span>patch<span class=\"token punctuation\">(</span><span class=\"token string\">'https://httpbin.org/patch'</span><span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'key'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> requests<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">(</span><span class=\"token string\">'https://httpbin.org/get'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>以下例子中，每一个函数调用都会对httpbin服务发起相应的HTTP方法。每一种方法，你都可以使用和之前相同的方式，查看服务器响应的内容：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">(</span><span class=\"token string\">'https://httpbin.org/get'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> response<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">]</span>\n<span class=\"token string\">'application/json'</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>delete<span class=\"token punctuation\">(</span><span class=\"token string\">'https://httpbin.org/delete'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> json_response <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> json_response<span class=\"token punctuation\">[</span><span class=\"token string\">'args'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>报头、响应正文、状态码和其它信息都会包含在每一种HTTP方法的<code>Response</code>中。接下来，你将更为详细地了解<code>POST</code>，<code>PUT</code>和<code>PATCH</code>方法，以及它们之间的区别。</p>\n<h2 id=\"消息正文\"><a href=\"#消息正文\" class=\"headerlink\" title=\"消息正文\"></a>消息正文</h2><p>根据HTTP的规格说明，<code>POST</code>，<code>PUT</code>和<code>PATCH</code>都是通过将数据传递给消息正文，而不是通过将查询字符串传递给参数的方式。通过使用<code>requests</code>，你可以将<code>payload</code>传递给<code>data</code>参数。</p>\n<p>你可以将字典，元组为成员的列表或者文件对象传递给参数<code>data</code>。在请求的正文中，根据具体的类型需要，你可以采用不同的数据类型：</p>\n<p>例如，如果你请求的内容类型为<code>application/x-www-form-urlencoded</code>，那么你就可以将字典作为表格数据，传递给参数<code>data</code>。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span><span class=\"token string\">'https://httpbin.org/post'</span><span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'key'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>Response <span class=\"token punctuation\">[</span><span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>你也可以使用以元组为成员的列表：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span><span class=\"token string\">'https://httpbin.org/post'</span><span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">'key'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>Response <span class=\"token punctuation\">[</span><span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>但是，如果你需要发送JSON格式的数据，你可以使用参数<code>json</code>。当你将值传递给参数<code>json</code>后，<code>requests</code>库会序列化你的数据和正确的<code>Content-Type</code>报头。</p>\n<p><a href=\"https://httpbin.org/\">httpbin.org</a>是由<code>requests</code>库的开发者 <a href=\"https://realpython.com/interview-kenneth-reitz/\">Kenneth Reitz</a>创建的一个用于测试的网站。该网站可以用来测试<code>requests</code>发起的各种请求。例如，你可以用它来测试POST请求：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span><span class=\"token string\">'https://httpbin.org/post'</span><span class=\"token punctuation\">,</span> json<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'key'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> json_response <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> json_response<span class=\"token punctuation\">[</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">]</span>\n<span class=\"token string\">'&#123;\"key\": \"value\"&#125;'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> json_response<span class=\"token punctuation\">[</span><span class=\"token string\">'headers'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">]</span>\n<span class=\"token string\">'application/json'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"检查请求\"><a href=\"#检查请求\" class=\"headerlink\" title=\"检查请求\"></a>检查请求</h2><p>在发送请求到服务器之前，<code>requests</code>库会先将请求准备好。请求的准备包括验证报头以及序列化JSON内容。</p>\n<p>你可以通过<code>.request</code>来访问准备请求（<code>PrepareRequest</code>）：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span><span class=\"token string\">'https://httpbin.org/post'</span><span class=\"token punctuation\">,</span> json<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'key'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> response<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">]</span>\n<span class=\"token string\">'application/json'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> response<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>url\n<span class=\"token string\">'https://httpbin.org/post'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> response<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>body\n<span class=\"token string\">b'&#123;\"key\": \"value\"&#125;'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>检查准备请求可以让你访问各种信息，包括payload, URL, headers, authentication等等。</p>\n<h2 id=\"认证\"><a href=\"#认证\" class=\"headerlink\" title=\"认证\"></a>认证</h2><p>认证可以让服务器知道你是谁。通常情况下，你可以通过<code>Authorization</code>报头提供你的身份信息，或者也可以通过自定义的报头来提供身份信息。在<code>requests</code>中，你可以使用参数<code>auth</code>来传递你的身份信息。</p>\n<p>下面以GitHub的<a href=\"https://developer.github.com/v3/users/#get-the-authenticated-user\">Authenticated User</a> API为例。为了访问该API，你需要通过一个元组来传递用户名和密码：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> getpass <span class=\"token keyword\">import</span> getpass\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'https://api.github.com/user'</span><span class=\"token punctuation\">,</span> auth<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">,</span> getpass<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>Response <span class=\"token punctuation\">[</span><span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>如果身份信息正确，request请求就会返回成功过。如果request请求中没有包含身份信息，服务器就会返回<code>401 Unauthorized</code>：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'https://api.github.com/user'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>Response <span class=\"token punctuation\">[</span><span class=\"token number\">401</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>当你通过以上这种方式传递身份信息的时候，实际上<code>requests</code>使用的是HTTP的 <a href=\"https://en.wikipedia.org/wiki/Basic_access_authentication\">Basic access authentication scheme</a>。</p>\n<p>因此，你还可以使用<code>HTTPBasicAuth</code>来传递身份信息：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> requests<span class=\"token punctuation\">.</span>auth <span class=\"token keyword\">import</span> HTTPBasicAuth\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> getpass <span class=\"token keyword\">import</span> getpass\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token string\">'https://api.github.com/user'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     auth<span class=\"token operator\">=</span>HTTPBasicAuth<span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">,</span> getpass<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>Response <span class=\"token punctuation\">[</span><span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>除了Basic认证方式以外，<code>requests</code>还支持其它认证方式，例如<code>HTTPDigestAuth</code>和<code>HTTPProxyAuth</code>。</p>\n<p>你甚至还可以提供自定义的认证方式。但是，你必须首先创建一个继承<code>AuthBase</code>的子类。然后，你需要定义<code>__call__()</code>函数：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">from</span> requests<span class=\"token punctuation\">.</span>auth <span class=\"token keyword\">import</span> AuthBase\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TokenAuth</span><span class=\"token punctuation\">(</span>AuthBase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Implements a custom authentication scheme.\"\"\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>token <span class=\"token operator\">=</span> token\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__call__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"Attach an API token to a custom auth header.\"\"\"</span>\n        r<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">'X-TokenAuth'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span>  <span class=\"token comment\"># Python 3.6+</span>\n        <span class=\"token keyword\">return</span> r\n\n\nrequests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'https://httpbin.org/get'</span><span class=\"token punctuation\">,</span> auth<span class=\"token operator\">=</span>TokenAuth<span class=\"token punctuation\">(</span><span class=\"token string\">'12345abcde-token'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>以上例子中，自定义的类<code>TokenAuth</code>会收到一个Token，然后将收到的token放到<code>x-TokenAuth</code>报头中。</p>\n<p>不健全的认证机制会导致安全隐患，所以除非有特殊需求，否则应该使用成熟的认证机制，比如Basic或者OAuth。</p>\n<h2 id=\"SSL证书验证\"><a href=\"#SSL证书验证\" class=\"headerlink\" title=\"SSL证书验证\"></a>SSL证书验证</h2><p>任何时候，当发送和接收的信息比较机密，安全往往是最重要的。因此，当你访问安全站点的时候，都会通过SSL建立安全连接，这时候对服务器的SSL证书进行验证显得尤为重要。</p>\n<p>默认情况下，<code>requests</code>已经为你执行了SSL证书的验证。但是，在某些情况下，你可能希望改变这种默认的行为。</p>\n<p>如果你想要关闭SSL证书的验证，你可以将参数<code>verify</code>设置为<code>False</code>：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'https://api.github.com'</span><span class=\"token punctuation\">,</span> verify<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\nInsecureRequestWarning<span class=\"token punctuation\">:</span> Unverified HTTPS request <span class=\"token keyword\">is</span> being made<span class=\"token punctuation\">.</span> Adding certificate verification <span class=\"token keyword\">is</span> strongly advised<span class=\"token punctuation\">.</span> See<span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span>urllib3<span class=\"token punctuation\">.</span>readthedocs<span class=\"token punctuation\">.</span>io<span class=\"token operator\">/</span>en<span class=\"token operator\">/</span>latest<span class=\"token operator\">/</span>advanced<span class=\"token operator\">-</span>usage<span class=\"token punctuation\">.</span>html<span class=\"token comment\">#ssl-warnings</span>\n  InsecureRequestWarning<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>Response <span class=\"token punctuation\">[</span><span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>当你正在访问一个不安全的站点时，<code>requests</code>会发出警告信息提醒你。</p>\n<blockquote>\n<p>注意：<code>requests</code>使用<a href=\"http://docs.python-requests.org/en/master/user/advanced/#ca-certificates\"><code>certifi</code></a>来提供SSL证书的颁发机构（ Certificate Authorities）。这可以让<code>requests</code>知道有哪些可以信任的证书颁发机构。因此，你需要定期更新<code>certifi</code>来保证安全性。</p>\n</blockquote>\n<h2 id=\"性能\"><a href=\"#性能\" class=\"headerlink\" title=\"性能\"></a>性能</h2><p>当在生产环境中使用<code>requests</code>的时候，特别需要考虑性能的影响。<code>requests</code>库的一些特性，例如超时控制（timeout control），会话（sessions）和重试限制（retry limits）可以使得应用运行得更流畅。</p>\n<h3 id=\"Timeouts\"><a href=\"#Timeouts\" class=\"headerlink\" title=\"Timeouts\"></a>Timeouts</h3><p>当你向服务发送请求以后，你得应用将会等待服务端的响应，得到响应以后，才会执行下一步操作。如果应用等待的时间太长，请求就会一直处于等待状态，导致用户体验变差，或者后台任务挂起。</p>\n<p>默认情况下，<code>requests</code>将会无限制地等待响应，所以你应该指定一个超时的时间值。你可以通过参数<code>timeout</code>来设置超时的时间值。<code>timeout</code>的值可以是整型或者浮点型，时间的单位是秒。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'https://api.github.com'</span><span class=\"token punctuation\">,</span> timeout<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>Response <span class=\"token punctuation\">[</span><span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'https://api.github.com'</span><span class=\"token punctuation\">,</span> timeout<span class=\"token operator\">=</span><span class=\"token number\">3.05</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>Response <span class=\"token punctuation\">[</span><span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>以上例子中，第一个请求的超时时间是1秒，第二个请求的超时时间是3.05秒。</p>\n<p>你还可以传递一个<a href=\"http://docs.python-requests.org/en/master/user/advanced/#timeouts\">元组</a>给参数<code>timeout</code>，元组中的第一个值是连接的超时时间（客户端和服务器之间建立连接的时长），第二个值是读取的超时时间（建立连接后，等待响应的超时时间）：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'https://api.github.com'</span><span class=\"token punctuation\">,</span> timeout<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>Response <span class=\"token punctuation\">[</span><span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>如果请求建立连接的时间在2秒以内，建立连接后，接收数据的时间在5秒以内，那么就可以正常获取到响应。但是，如果请求超时，那么函数就会抛出一个<code>Timeout</code>的异常。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">from</span> requests<span class=\"token punctuation\">.</span>exceptions <span class=\"token keyword\">import</span> Timeout\n\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    response <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'https://api.github.com'</span><span class=\"token punctuation\">,</span> timeout<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> Timeout<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The request timed out'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The request did not time out'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>你的程序可以捕获这个<code>Timeout</code>的异常，并做相应的处理。</p>\n<h3 id=\"The-Session-Object\"><a href=\"#The-Session-Object\" class=\"headerlink\" title=\"The Session Object\"></a>The Session Object</h3><p>到目前为止，你都是使用<code>requests</code>的<code>get()</code>和<code>post()</code>来发送请求。这些函数隐藏了一些细节，例如连接是如何建立以及管理的。</p>\n<p>实际上，这些细节都是由类<code>Session</code>来负责处理。如果你需要微调你的请求，或者改进性能，你需要直接使用<code>Session</code>的实例。</p>\n<p>会话主要是在一些列的请求中，保持持久的参数。例如，如果你想要在多个请求中使用相同的认证信息，你就可以使用会话：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">from</span> getpass <span class=\"token keyword\">import</span> getpass\n\n<span class=\"token comment\"># By using a context manager, you can ensure the resources used by</span>\n<span class=\"token comment\"># the session will be released after use</span>\n<span class=\"token keyword\">with</span> requests<span class=\"token punctuation\">.</span>Session<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> session<span class=\"token punctuation\">:</span>\n    session<span class=\"token punctuation\">.</span>auth <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">,</span> getpass<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># Instead of requests.get(), you'll use session.get()</span>\n    response <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'https://api.github.com/user'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># You can inspect the response just like you did before</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>每次你用session发起请求，一旦该会话在初始化时，设定了认证的身份信息，那么该身份信息就可以在多个requests中重复使用。</p>\n<p>通过session改进性能，主要是通过保持长连接的方式。当你的应用通过Session来发起请求，它就会在连接池中长时间保持该连接。当应用想要再次连接到同一个服务器的时候，就可以重复使用连接池中的连接，而不需要再新建连接。</p>\n<h3 id=\"Max-Retries\"><a href=\"#Max-Retries\" class=\"headerlink\" title=\"Max Retries\"></a>Max Retries</h3><p>当请求失败的时候，你可能希望应用重新发起同样的请求。但是，<code>requests</code>默认并不会帮你重新发送请求。为了实现这个功能，你需要使用<a href=\"http://docs.python-requests.org/en/master/user/advanced/#transport-adapters\">Transport Adapter</a>。</p>\n<p>Transport Adapters可以让你为每一个需要访问的服务定义一组配置信息。例如，你想要所有访问<code>https://api.github.com</code>的请求失败后都重复三次，你可以创建一个Transport Adapter，设置参数<code>max_retries</code>的值为3，并将其挂载到当前的会话上：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">from</span> requests<span class=\"token punctuation\">.</span>adapters <span class=\"token keyword\">import</span> HTTPAdapter\n<span class=\"token keyword\">from</span> requests<span class=\"token punctuation\">.</span>exceptions <span class=\"token keyword\">import</span> ConnectionError\n\ngithub_adapter <span class=\"token operator\">=</span> HTTPAdapter<span class=\"token punctuation\">(</span>max_retries<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\nsession <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>Session<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Use `github_adapter` for all requests to endpoints that start with this URL</span>\nsession<span class=\"token punctuation\">.</span>mount<span class=\"token punctuation\">(</span><span class=\"token string\">'https://api.github.com'</span><span class=\"token punctuation\">,</span> github_adapter<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    session<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'https://api.github.com'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> ConnectionError <span class=\"token keyword\">as</span> ce<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ce<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>当你挂载HTTPAdapter， github_adapter到会话的时候，会话会遵循该配置的设置。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>通过以上内容，你现在可以：</p>\n<ul>\n<li>发送不同的HTTP请求，例如：GET, POST, PUT</li>\n<li>通过修改报头，认证，查询字符串和消息这个问，自定义请求</li>\n<li>检查发送给服务器的数据，以及从服务器接收的数据</li>\n<li>SSL证书验证</li>\n<li>通过max_retries, timeout, Sessions和Transport Adapters，更有效的使用<code>requests</code></li>\n</ul>"},{"title":"Python's f-Strings:改进版格式化字符串语法指南","date":"2022-02-07T03:04:29.000Z","img":"/medias/featureimages/26.jpg","_content":"\n# Python's f-Strings:改进版格式化字符串语法指南\n\n> 注：本文翻译自[Python 3's f-Strings: An Improved String Formatting Syntax (Guide) – Real Python](https://realpython.com/python-f-strings/)。\n\n从Python 3.6开始，f-strings是一种全新的格式化字符串方式。f-strings不仅可读性更强，并且简明、快速，与其它格式化字符串的方式相比，不易出错。\n\n通过阅读本文，你将了解为什么要使用f-strings，以及如何使用它。\n\n但是，首先在介绍f-strings之前，我们先回顾一下以前传统的格式化字符串的方式。\n<!-- more -->\n\n## 传统的格式化字符串方式\n\n在Python 3.6以前，主要有两种格式化字符串的方式：`%`格式化和`str.format()`。我们先简单回顾一下如何使用这两种方式，以及它们有哪些局限性。\n\n### 方法一：%格式化\n\n%格式化是Python最原始的字符串格式化方式。详情可以参考文档：[Python docs](https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting)。根据文档的介绍，并不推荐使用%格式化方式，具体内容如下：\n\n> %格式化字符串的方式会导致程序出现一些错误，例如无法正确显示元组和字典。\n>\n> 建议使用新的格式化字符串方式避免这些错误。新的方法不仅功能更加强大，且可扩展性更强。\n\n **如何使用%格式化**\n\n字符串对象本身具有内置的操作符%，通过该操作符可以用来格式化字符串：\n\n```python\n>>> name = \"Eric\"\n>>> \"Hello, %s.\" % name\n'Hello, Eric.'\n```\n\n为了能够在字符串中插入更多的变量，你必须使用元组来存储这些变量：\n\n```python\n>>> name = \"Eric\"\n>>> age = 74\n>>> \"Hello, %s. You are %s.\" % (name, age)\n'Hello Eric. You are 74.'\n```\n\n**为什么不推荐使用%格式化**\n\n虽然上面的例子看起来很简单，但是，一旦你需要使用许多的参数，并且字符串很长的时候，代码的可读性就会变得很差：\n\n```python\n>>> first_name = \"Eric\"\n>>> last_name = \"Idle\"\n>>> age = 74\n>>> profession = \"comedian\"\n>>> affiliation = \"Monty Python\"\n>>> \"Hello, %s %s. You are %s. You are a %s. You were a member of %s.\" % (first_name, last_name, age, profession, affiliation)\n'Hello, Eric Idle. You are 74. You are a comedian. You were a member of Monty Python.'\n```\n\n以上这种情况，代码就会变得十分冗长，并且非常容易出现错误，例如出现不显示元组和字典的问题。\n\n### 方法二：str.format()\n\n在Python 2.6中，`str.format()`是一种新的格式化字符串的方式。\n\n**如何使用str.format()**\n\n`str.format()`是%格式化的改进版。它使用函数调用的方式将对象格式化成字符串。\n\n使用`str.format()`时，将大括号替换成对应的变量：\n\n```python\n>>> \"Hello, {}. You are {}.\".format(name, age)\n'Hello, Eric. You are 74.'\n```\n\n你还可以在大括号中使用索引值来引用对应的变量，这种方式使得引用变量与顺序无关：\n\n```python\n>>> \"Hello, {1}. You are {0}.\".format(age, name)\n'Hello, Eric. You are 74.'\n```\n\n你可以使用关键字参数的方式，在大括号中插入变量名，然后在format()中为参数赋值：\n\n```python\n>>> person = {'name': 'Eric', 'age': 74}\n>>> \"Hello, {name}. You are {age}.\".format(name=person['name'], age=person['age'])\n'Hello, Eric. You are 74.'\n```\n\n你还可以使用`**`的方式将字典作为参数：\n\n```python\n>>> person = {'name': 'Eric', 'age': 74}\n>>> \"Hello, {name}. You are {age}.\".format(**person)\n'Hello, Eric. You are 74.'\n```\n\n**为什么不推荐使用str.format()**\n\n相比于%格式化，`str.format()`的可读性更强，但是在处理多个参数以及长字符串的情况下，代码仍然显得过于冗长：\n\n```python\n>>> first_name = \"Eric\"\n>>> last_name = \"Idle\"\n>>> age = 74\n>>> profession = \"comedian\"\n>>> affiliation = \"Monty Python\"\n>>> print((\"Hello, {first_name} {last_name}. You are {age}. \" + \n>>>        \"You are a {profession}. You were a member of {affiliation}.\") \\\n>>>        .format(first_name=first_name, last_name=last_name, age=age, \\\n>>>                profession=profession, affiliation=affiliation))\n'Hello, Eric Idle. You are 74. You are a comedian. You were a member of Monty Python.'\n```\n\n虽然你可以使用字典的方式传递参数，例如`.format(**some_dict)`，但是其实有更好的方法。\n\n## f-strings: 一种全新的改进版格式化字符串方式\n\n**f-strings**全称为“formatted string literals”，表达式的开头用字母f表示，大括号中包含的表达式会被替换成对应的值。大括号中的表达式通常在运行时被运算出结果，然后用`__format__`协议将对象格式化成字符串。关于f-strings的详细介绍，请参考文档： [Python docs](https://docs.python.org/3/reference/lexical_analysis.html#f-strings)。\n\n### 简单的语法\n\nf-strings的语法与`str.format()`相似，但是比它更简单。\n\n```python\n>>> name = \"Eric\"\n>>> age = 74\n>>> f\"Hello, {name}. You are {age}.\"\n'Hello, Eric. You are 74.'\n```\n\nf-strings同时支持大写的F和小写的f:\n\n```python\n>>> F\"Hello, {name}. You are {age}.\"\n'Hello, Eric. You are 74.'\n```\n\n### 支持任意的表达式\n\n因为f-strings在运行时会对表达式进行运算，所以你可以在大括号中使用任何有效的表达式。\n\n```python\n>>> f\"{2 * 37}\"\n'74'\n```\n\n你也可以调用函数：\n\n```python\n>>> def to_lowercase(input):\n...     return input.lower()\n\n>>> name = \"Eric Idle\"\n>>> f\"{to_lowercase(name)} is funny.\"\n'eric idle is funny.'\n```\n\n你还可以直接使用方法：\n\n```python\n>>> f\"{name.lower()} is funny.\"\n'eric idle is funny.'\n```\n\n你在类中也可以使用f-strings调用类的属性：\n\n```python\nclass Comedian:\n    def __init__(self, first_name, last_name, age):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.age = age\n\n    def __str__(self):\n        return f\"{self.first_name} {self.last_name} is {self.age}.\"\n\n    def __repr__(self):\n        return f\"{self.first_name} {self.last_name} is {self.age}. Surprise!\"\n```\n\n然后，你可以这样：\n\n```python\n>>> new_comedian = Comedian(\"Eric\", \"Idle\", \"74\")\n>>> f\"{new_comedian}\"\n'Eric Idle is 74.'\n```\n\n`__str__()`和`__repr__()`主要用于将对象表示为字符串，所以你需要确保在类的定义中，至少使用其中一种方法。如果要在两种方法中选择其一，建议你使用`__repr__()`。\n\n`__str__()`返回的是对象的非正式字符串表达式，可读性比较强，主要面向的是最终用户。\n\n`__repr__()`返回的是对象的正式字符串表达式，并且没有任何歧义，主要面向的是开发人员。\n\n对于访问`__str__()`和`__repr__()`，建议使用`str()`和`repr()`。\n\n默认情况下，f-strings使用`__str__()`，但是你也可以使用转换标识符`!r`来使用`__repr__()`。\n\n```python\n>>> f\"{new_comedian}\"\n'Eric Idle is 74.'\n>>> f\"{new_comedian!r}\"\n'Eric Idle is 74. Surprise!'\n```\n\n### 多行f-Strings\n\n你可以使用多行字符串：\n\n```python\n>>> name = \"Eric\"\n>>> profession = \"comedian\"\n>>> affiliation = \"Monty Python\"\n>>> message = (\n...     f\"Hi {name}. \"\n...     f\"You are a {profession}. \"\n...     f\"You were in {affiliation}.\"\n... )\n>>> message\n'Hi Eric. You are a comedian. You were in Monty Python.'\n```\n\n但是，你需要记住在每一行字符串的开始部分加上`f`。\n\n下面是一个错误的示例：\n\n```python\n>>> message = (\n...     f\"Hi {name}. \"\n...     \"You are a {profession}. \"\n...     \"You were in {affiliation}.\"\n... )\n>>> message\n'Hi Eric. You are a {profession}. You were in {affiliation}.'\n```\n\n以上例子中，由于没有在每一行添加`f`，所以，就导致结果出现异常。\n\n如果你想要将字符串分布到多行，你还可以使用`\\`来转义换行符：\n\n```python\n>>> message = f\"Hi {name}. \" \\\n...           f\"You are a {profession}. \" \\\n...           f\"You were in {affiliation}.\"\n...\n>>> message\n'Hi Eric. You are a comedian. You were in Monty Python.'\n```\n\n但是，如果使用`\"\"\"`，情况又会有所不同：\n\n```python\n>>> message = f\"\"\"\n...     Hi {name}. \n...     You are a {profession}. \n...     You were in {affiliation}.\n... \"\"\"\n...\n>>> message\n'\\n    Hi Eric.\\n    You are a comedian.\\n    You were in Monty Python.\\n'\n```\n\n### 速度\n\nf-strings的f也有快速的意思。\n\nf-strings的运行速度比%格式化和`stri.format()`都要快。以下是官方的说明：\n\n> “F-strings provide a way to embed expressions inside string literals, using a minimal syntax. It should be noted that an f-string is really an expression evaluated at run time, not a constant value. In Python source code, an f-string is a literal string, prefixed with `f`, which contains expressions inside braces. The expressions are replaced with their values.” ([Source](https://www.python.org/dev/peps/pep-0498/#abstract))\n\n在运行时，大括号中的表达式在它自己的范围（scope）内完成运算，然后再与其它字符串组合成完整的字符串，并返回结果。\n\n以下是几种格式化字符串方法的速度对比：\n\n```python\n>>> import timeit\n>>> timeit.timeit(\"\"\"name = \"Eric\"\n... age = 74\n... '%s is %s.' % (name, age)\"\"\", number = 10000)\n0.003324444866599663\n```\n\n```python\n>>> timeit.timeit(\"\"\"name = \"Eric\"\n... age = 74\n... '{} is {}.'.format(name, age)\"\"\", number = 10000)\n0.004242089427570761\n```\n\n```python\n>>> timeit.timeit(\"\"\"name = \"Eric\"\n... age = 74\n... f'{name} is {age}.'\"\"\", number = 10000)\n0.0024820892040722242\n```\n\n从对比结果可以看出，f-strings的运行速度最快。\n\n尽管如此，但是也有一些特例。具体详情，请参考以下内容：\n\n- [performance - Why were literal formatted strings (f-strings) so slow in Python 3.6 alpha? (now fixed in 3.6 stable) - Stack Overflow](https://stackoverflow.com/questions/37365311/why-were-literal-formatted-strings-f-strings-so-slow-in-python-3-6-alpha-now)\n\n- [`BUILD_STRING` opcode](https://bugs.python.org/issue27078)\n\n## f-strings的一些细节\n\n关于f-strings的使用，有一些细节还需要我们了解并且记住。\n\n### 引号\n\n你可以在f-strings中使用任何一种引号，但是必须确保与f-strings最外侧的引号不同。\n\n以下代码可以工作：\n\n```python\n>>> f\"{'Eric Idle'}\"\n'Eric Idle'\n```\n\n以下代码也可以工作：\n\n```python\n>>> f'{\"Eric Idle\"}'\n'Eric Idle'\n```\n\n你也可以使用三引号：\n\n```python\n>>> f\"\"\"Eric Idle\"\"\"\n'Eric Idle'\n```\n\n```python\n>>> f'''Eric Idle'''\n'Eric Idle'\n```\n\n如果你想使用与外侧相同的引号，可以使用转义符号`\\`:\n\n```python\n>>> f\"The \\\"comedian\\\" is {name}, aged {age}.\"\n'The \"comedian\" is Eric Idle, aged 74.'\n```\n\n### 字典\n\n当使用字典的时候，我们应该注意。如果你对字典的键使用单引号，那么记住f-strings外侧必须使用双引号。\n\n以下例子可以正常工作：\n\n```python\n>>> comedian = {'name': 'Eric Idle', 'age': 74}\n>>> f\"The comedian is {comedian['name']}, aged {comedian['age']}.\"\nThe comedian is Eric Idle, aged 74.\n```\n\n但是下面的例子就会报错：\n\n```python\n>>> comedian = {'name': 'Eric Idle', 'age': 74}\n>>> f'The comedian is {comedian['name']}, aged {comedian['age']}.'\n  File \"<stdin>\", line 1\n    f'The comedian is {comedian['name']}, aged {comedian['age']}.'\n                                    ^\nSyntaxError: invalid syntax\n```\n\n如果字典的键使用的引号与f-strings外侧的引号相同，那么，字典的第一个键的引号就会被Python解释器识别为是字符串的结尾。\n\n### 括号\n\n为了在结果的字符串中显示括号，你必须使用双括号：\n\n```python\n>>> f\"{{70 + 4}}\"\n'{70 + 4}'\n```\n\n注意虽然使用了三个括号，但是结果仍然只会显示单括号：\n\n```python\n>>> f\"{{{70 + 4}}}\"\n'{74}'\n```\n\n但是，如果使用四个括号，结果就会显示双括号：\n\n```python\n>>> name = \"Eric Idle\"\n>>> f\"{name}\"\n'Eric Idle'\n```\n\n### 内联注释\n\n大括号中不应该包含用#号的注释语句，否则会报错：\n\n```python\n>>> f\"Eric is {2 * 37 #Oh my!}.\"\n  File \"<stdin>\", line 1\n    f\"Eric is {2 * 37 #Oh my!}.\"\n                                ^\nSyntaxError: f-string expression part cannot include '#'\n```\n\n## 最后\n\n你仍然可以使用以前的格式化字符串方式，但是f-strings更加简明，可读性强并且方便。想要了解更多关于字符串的内容，请参考以下文档：\n\n- [PEP 502](https://www.python.org/dev/peps/pep-0502/)\n- [PEP 536 draft](https://www.python.org/dev/peps/pep-0536/)\n- [Python String Formatting Best Practices](https://realpython.com/python-string-formatting/) by Dan Bader\n- [Practical Introduction to Web Scraping in Python](https://realpython.com/python-web-scraping-practical-introduction/) by Colin OKeefe\n","source":"_posts/python/f-Strings-格式化字符串.md","raw":"---\ntitle: 'Python''s f-Strings:改进版格式化字符串语法指南'\ndate: 2022-02-07 11:04:29\ntags:\t\n - python-basic\ncategories: Python\nimg: /medias/featureimages/26.jpg\n---\n\n# Python's f-Strings:改进版格式化字符串语法指南\n\n> 注：本文翻译自[Python 3's f-Strings: An Improved String Formatting Syntax (Guide) – Real Python](https://realpython.com/python-f-strings/)。\n\n从Python 3.6开始，f-strings是一种全新的格式化字符串方式。f-strings不仅可读性更强，并且简明、快速，与其它格式化字符串的方式相比，不易出错。\n\n通过阅读本文，你将了解为什么要使用f-strings，以及如何使用它。\n\n但是，首先在介绍f-strings之前，我们先回顾一下以前传统的格式化字符串的方式。\n<!-- more -->\n\n## 传统的格式化字符串方式\n\n在Python 3.6以前，主要有两种格式化字符串的方式：`%`格式化和`str.format()`。我们先简单回顾一下如何使用这两种方式，以及它们有哪些局限性。\n\n### 方法一：%格式化\n\n%格式化是Python最原始的字符串格式化方式。详情可以参考文档：[Python docs](https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting)。根据文档的介绍，并不推荐使用%格式化方式，具体内容如下：\n\n> %格式化字符串的方式会导致程序出现一些错误，例如无法正确显示元组和字典。\n>\n> 建议使用新的格式化字符串方式避免这些错误。新的方法不仅功能更加强大，且可扩展性更强。\n\n **如何使用%格式化**\n\n字符串对象本身具有内置的操作符%，通过该操作符可以用来格式化字符串：\n\n```python\n>>> name = \"Eric\"\n>>> \"Hello, %s.\" % name\n'Hello, Eric.'\n```\n\n为了能够在字符串中插入更多的变量，你必须使用元组来存储这些变量：\n\n```python\n>>> name = \"Eric\"\n>>> age = 74\n>>> \"Hello, %s. You are %s.\" % (name, age)\n'Hello Eric. You are 74.'\n```\n\n**为什么不推荐使用%格式化**\n\n虽然上面的例子看起来很简单，但是，一旦你需要使用许多的参数，并且字符串很长的时候，代码的可读性就会变得很差：\n\n```python\n>>> first_name = \"Eric\"\n>>> last_name = \"Idle\"\n>>> age = 74\n>>> profession = \"comedian\"\n>>> affiliation = \"Monty Python\"\n>>> \"Hello, %s %s. You are %s. You are a %s. You were a member of %s.\" % (first_name, last_name, age, profession, affiliation)\n'Hello, Eric Idle. You are 74. You are a comedian. You were a member of Monty Python.'\n```\n\n以上这种情况，代码就会变得十分冗长，并且非常容易出现错误，例如出现不显示元组和字典的问题。\n\n### 方法二：str.format()\n\n在Python 2.6中，`str.format()`是一种新的格式化字符串的方式。\n\n**如何使用str.format()**\n\n`str.format()`是%格式化的改进版。它使用函数调用的方式将对象格式化成字符串。\n\n使用`str.format()`时，将大括号替换成对应的变量：\n\n```python\n>>> \"Hello, {}. You are {}.\".format(name, age)\n'Hello, Eric. You are 74.'\n```\n\n你还可以在大括号中使用索引值来引用对应的变量，这种方式使得引用变量与顺序无关：\n\n```python\n>>> \"Hello, {1}. You are {0}.\".format(age, name)\n'Hello, Eric. You are 74.'\n```\n\n你可以使用关键字参数的方式，在大括号中插入变量名，然后在format()中为参数赋值：\n\n```python\n>>> person = {'name': 'Eric', 'age': 74}\n>>> \"Hello, {name}. You are {age}.\".format(name=person['name'], age=person['age'])\n'Hello, Eric. You are 74.'\n```\n\n你还可以使用`**`的方式将字典作为参数：\n\n```python\n>>> person = {'name': 'Eric', 'age': 74}\n>>> \"Hello, {name}. You are {age}.\".format(**person)\n'Hello, Eric. You are 74.'\n```\n\n**为什么不推荐使用str.format()**\n\n相比于%格式化，`str.format()`的可读性更强，但是在处理多个参数以及长字符串的情况下，代码仍然显得过于冗长：\n\n```python\n>>> first_name = \"Eric\"\n>>> last_name = \"Idle\"\n>>> age = 74\n>>> profession = \"comedian\"\n>>> affiliation = \"Monty Python\"\n>>> print((\"Hello, {first_name} {last_name}. You are {age}. \" + \n>>>        \"You are a {profession}. You were a member of {affiliation}.\") \\\n>>>        .format(first_name=first_name, last_name=last_name, age=age, \\\n>>>                profession=profession, affiliation=affiliation))\n'Hello, Eric Idle. You are 74. You are a comedian. You were a member of Monty Python.'\n```\n\n虽然你可以使用字典的方式传递参数，例如`.format(**some_dict)`，但是其实有更好的方法。\n\n## f-strings: 一种全新的改进版格式化字符串方式\n\n**f-strings**全称为“formatted string literals”，表达式的开头用字母f表示，大括号中包含的表达式会被替换成对应的值。大括号中的表达式通常在运行时被运算出结果，然后用`__format__`协议将对象格式化成字符串。关于f-strings的详细介绍，请参考文档： [Python docs](https://docs.python.org/3/reference/lexical_analysis.html#f-strings)。\n\n### 简单的语法\n\nf-strings的语法与`str.format()`相似，但是比它更简单。\n\n```python\n>>> name = \"Eric\"\n>>> age = 74\n>>> f\"Hello, {name}. You are {age}.\"\n'Hello, Eric. You are 74.'\n```\n\nf-strings同时支持大写的F和小写的f:\n\n```python\n>>> F\"Hello, {name}. You are {age}.\"\n'Hello, Eric. You are 74.'\n```\n\n### 支持任意的表达式\n\n因为f-strings在运行时会对表达式进行运算，所以你可以在大括号中使用任何有效的表达式。\n\n```python\n>>> f\"{2 * 37}\"\n'74'\n```\n\n你也可以调用函数：\n\n```python\n>>> def to_lowercase(input):\n...     return input.lower()\n\n>>> name = \"Eric Idle\"\n>>> f\"{to_lowercase(name)} is funny.\"\n'eric idle is funny.'\n```\n\n你还可以直接使用方法：\n\n```python\n>>> f\"{name.lower()} is funny.\"\n'eric idle is funny.'\n```\n\n你在类中也可以使用f-strings调用类的属性：\n\n```python\nclass Comedian:\n    def __init__(self, first_name, last_name, age):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.age = age\n\n    def __str__(self):\n        return f\"{self.first_name} {self.last_name} is {self.age}.\"\n\n    def __repr__(self):\n        return f\"{self.first_name} {self.last_name} is {self.age}. Surprise!\"\n```\n\n然后，你可以这样：\n\n```python\n>>> new_comedian = Comedian(\"Eric\", \"Idle\", \"74\")\n>>> f\"{new_comedian}\"\n'Eric Idle is 74.'\n```\n\n`__str__()`和`__repr__()`主要用于将对象表示为字符串，所以你需要确保在类的定义中，至少使用其中一种方法。如果要在两种方法中选择其一，建议你使用`__repr__()`。\n\n`__str__()`返回的是对象的非正式字符串表达式，可读性比较强，主要面向的是最终用户。\n\n`__repr__()`返回的是对象的正式字符串表达式，并且没有任何歧义，主要面向的是开发人员。\n\n对于访问`__str__()`和`__repr__()`，建议使用`str()`和`repr()`。\n\n默认情况下，f-strings使用`__str__()`，但是你也可以使用转换标识符`!r`来使用`__repr__()`。\n\n```python\n>>> f\"{new_comedian}\"\n'Eric Idle is 74.'\n>>> f\"{new_comedian!r}\"\n'Eric Idle is 74. Surprise!'\n```\n\n### 多行f-Strings\n\n你可以使用多行字符串：\n\n```python\n>>> name = \"Eric\"\n>>> profession = \"comedian\"\n>>> affiliation = \"Monty Python\"\n>>> message = (\n...     f\"Hi {name}. \"\n...     f\"You are a {profession}. \"\n...     f\"You were in {affiliation}.\"\n... )\n>>> message\n'Hi Eric. You are a comedian. You were in Monty Python.'\n```\n\n但是，你需要记住在每一行字符串的开始部分加上`f`。\n\n下面是一个错误的示例：\n\n```python\n>>> message = (\n...     f\"Hi {name}. \"\n...     \"You are a {profession}. \"\n...     \"You were in {affiliation}.\"\n... )\n>>> message\n'Hi Eric. You are a {profession}. You were in {affiliation}.'\n```\n\n以上例子中，由于没有在每一行添加`f`，所以，就导致结果出现异常。\n\n如果你想要将字符串分布到多行，你还可以使用`\\`来转义换行符：\n\n```python\n>>> message = f\"Hi {name}. \" \\\n...           f\"You are a {profession}. \" \\\n...           f\"You were in {affiliation}.\"\n...\n>>> message\n'Hi Eric. You are a comedian. You were in Monty Python.'\n```\n\n但是，如果使用`\"\"\"`，情况又会有所不同：\n\n```python\n>>> message = f\"\"\"\n...     Hi {name}. \n...     You are a {profession}. \n...     You were in {affiliation}.\n... \"\"\"\n...\n>>> message\n'\\n    Hi Eric.\\n    You are a comedian.\\n    You were in Monty Python.\\n'\n```\n\n### 速度\n\nf-strings的f也有快速的意思。\n\nf-strings的运行速度比%格式化和`stri.format()`都要快。以下是官方的说明：\n\n> “F-strings provide a way to embed expressions inside string literals, using a minimal syntax. It should be noted that an f-string is really an expression evaluated at run time, not a constant value. In Python source code, an f-string is a literal string, prefixed with `f`, which contains expressions inside braces. The expressions are replaced with their values.” ([Source](https://www.python.org/dev/peps/pep-0498/#abstract))\n\n在运行时，大括号中的表达式在它自己的范围（scope）内完成运算，然后再与其它字符串组合成完整的字符串，并返回结果。\n\n以下是几种格式化字符串方法的速度对比：\n\n```python\n>>> import timeit\n>>> timeit.timeit(\"\"\"name = \"Eric\"\n... age = 74\n... '%s is %s.' % (name, age)\"\"\", number = 10000)\n0.003324444866599663\n```\n\n```python\n>>> timeit.timeit(\"\"\"name = \"Eric\"\n... age = 74\n... '{} is {}.'.format(name, age)\"\"\", number = 10000)\n0.004242089427570761\n```\n\n```python\n>>> timeit.timeit(\"\"\"name = \"Eric\"\n... age = 74\n... f'{name} is {age}.'\"\"\", number = 10000)\n0.0024820892040722242\n```\n\n从对比结果可以看出，f-strings的运行速度最快。\n\n尽管如此，但是也有一些特例。具体详情，请参考以下内容：\n\n- [performance - Why were literal formatted strings (f-strings) so slow in Python 3.6 alpha? (now fixed in 3.6 stable) - Stack Overflow](https://stackoverflow.com/questions/37365311/why-were-literal-formatted-strings-f-strings-so-slow-in-python-3-6-alpha-now)\n\n- [`BUILD_STRING` opcode](https://bugs.python.org/issue27078)\n\n## f-strings的一些细节\n\n关于f-strings的使用，有一些细节还需要我们了解并且记住。\n\n### 引号\n\n你可以在f-strings中使用任何一种引号，但是必须确保与f-strings最外侧的引号不同。\n\n以下代码可以工作：\n\n```python\n>>> f\"{'Eric Idle'}\"\n'Eric Idle'\n```\n\n以下代码也可以工作：\n\n```python\n>>> f'{\"Eric Idle\"}'\n'Eric Idle'\n```\n\n你也可以使用三引号：\n\n```python\n>>> f\"\"\"Eric Idle\"\"\"\n'Eric Idle'\n```\n\n```python\n>>> f'''Eric Idle'''\n'Eric Idle'\n```\n\n如果你想使用与外侧相同的引号，可以使用转义符号`\\`:\n\n```python\n>>> f\"The \\\"comedian\\\" is {name}, aged {age}.\"\n'The \"comedian\" is Eric Idle, aged 74.'\n```\n\n### 字典\n\n当使用字典的时候，我们应该注意。如果你对字典的键使用单引号，那么记住f-strings外侧必须使用双引号。\n\n以下例子可以正常工作：\n\n```python\n>>> comedian = {'name': 'Eric Idle', 'age': 74}\n>>> f\"The comedian is {comedian['name']}, aged {comedian['age']}.\"\nThe comedian is Eric Idle, aged 74.\n```\n\n但是下面的例子就会报错：\n\n```python\n>>> comedian = {'name': 'Eric Idle', 'age': 74}\n>>> f'The comedian is {comedian['name']}, aged {comedian['age']}.'\n  File \"<stdin>\", line 1\n    f'The comedian is {comedian['name']}, aged {comedian['age']}.'\n                                    ^\nSyntaxError: invalid syntax\n```\n\n如果字典的键使用的引号与f-strings外侧的引号相同，那么，字典的第一个键的引号就会被Python解释器识别为是字符串的结尾。\n\n### 括号\n\n为了在结果的字符串中显示括号，你必须使用双括号：\n\n```python\n>>> f\"{{70 + 4}}\"\n'{70 + 4}'\n```\n\n注意虽然使用了三个括号，但是结果仍然只会显示单括号：\n\n```python\n>>> f\"{{{70 + 4}}}\"\n'{74}'\n```\n\n但是，如果使用四个括号，结果就会显示双括号：\n\n```python\n>>> name = \"Eric Idle\"\n>>> f\"{name}\"\n'Eric Idle'\n```\n\n### 内联注释\n\n大括号中不应该包含用#号的注释语句，否则会报错：\n\n```python\n>>> f\"Eric is {2 * 37 #Oh my!}.\"\n  File \"<stdin>\", line 1\n    f\"Eric is {2 * 37 #Oh my!}.\"\n                                ^\nSyntaxError: f-string expression part cannot include '#'\n```\n\n## 最后\n\n你仍然可以使用以前的格式化字符串方式，但是f-strings更加简明，可读性强并且方便。想要了解更多关于字符串的内容，请参考以下文档：\n\n- [PEP 502](https://www.python.org/dev/peps/pep-0502/)\n- [PEP 536 draft](https://www.python.org/dev/peps/pep-0536/)\n- [Python String Formatting Best Practices](https://realpython.com/python-string-formatting/) by Dan Bader\n- [Practical Introduction to Web Scraping in Python](https://realpython.com/python-web-scraping-practical-introduction/) by Colin OKeefe\n","slug":"python/f-Strings-格式化字符串","published":1,"updated":"2023-03-03T01:33:03.350Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clexvkk9a002c5i73fq048s76","content":"<h1 id=\"Python’s-f-Strings-改进版格式化字符串语法指南\"><a href=\"#Python’s-f-Strings-改进版格式化字符串语法指南\" class=\"headerlink\" title=\"Python’s f-Strings:改进版格式化字符串语法指南\"></a>Python’s f-Strings:改进版格式化字符串语法指南</h1><blockquote>\n<p>注：本文翻译自<a href=\"https://realpython.com/python-f-strings/\">Python 3’s f-Strings: An Improved String Formatting Syntax (Guide) – Real Python</a>。</p>\n</blockquote>\n<p>从Python 3.6开始，f-strings是一种全新的格式化字符串方式。f-strings不仅可读性更强，并且简明、快速，与其它格式化字符串的方式相比，不易出错。</p>\n<p>通过阅读本文，你将了解为什么要使用f-strings，以及如何使用它。</p>\n<p>但是，首先在介绍f-strings之前，我们先回顾一下以前传统的格式化字符串的方式。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"传统的格式化字符串方式\"><a href=\"#传统的格式化字符串方式\" class=\"headerlink\" title=\"传统的格式化字符串方式\"></a>传统的格式化字符串方式</h2><p>在Python 3.6以前，主要有两种格式化字符串的方式：<code>%</code>格式化和<code>str.format()</code>。我们先简单回顾一下如何使用这两种方式，以及它们有哪些局限性。</p>\n<h3 id=\"方法一：-格式化\"><a href=\"#方法一：-格式化\" class=\"headerlink\" title=\"方法一：%格式化\"></a>方法一：%格式化</h3><p>%格式化是Python最原始的字符串格式化方式。详情可以参考文档：<a href=\"https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting\">Python docs</a>。根据文档的介绍，并不推荐使用%格式化方式，具体内容如下：</p>\n<blockquote>\n<p>%格式化字符串的方式会导致程序出现一些错误，例如无法正确显示元组和字典。</p>\n<p>建议使用新的格式化字符串方式避免这些错误。新的方法不仅功能更加强大，且可扩展性更强。</p>\n</blockquote>\n<p> <strong>如何使用%格式化</strong></p>\n<p>字符串对象本身具有内置的操作符%，通过该操作符可以用来格式化字符串：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Eric\"</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string\">\"Hello, %s.\"</span> <span class=\"token operator\">%</span> name\n<span class=\"token string\">'Hello, Eric.'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>为了能够在字符串中插入更多的变量，你必须使用元组来存储这些变量：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Eric\"</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> age <span class=\"token operator\">=</span> <span class=\"token number\">74</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string\">\"Hello, %s. You are %s.\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Hello Eric. You are 74.'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>为什么不推荐使用%格式化</strong></p>\n<p>虽然上面的例子看起来很简单，但是，一旦你需要使用许多的参数，并且字符串很长的时候，代码的可读性就会变得很差：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> first_name <span class=\"token operator\">=</span> <span class=\"token string\">\"Eric\"</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> last_name <span class=\"token operator\">=</span> <span class=\"token string\">\"Idle\"</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> age <span class=\"token operator\">=</span> <span class=\"token number\">74</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> profession <span class=\"token operator\">=</span> <span class=\"token string\">\"comedian\"</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> affiliation <span class=\"token operator\">=</span> <span class=\"token string\">\"Monty Python\"</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string\">\"Hello, %s %s. You are %s. You are a %s. You were a member of %s.\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>first_name<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> profession<span class=\"token punctuation\">,</span> affiliation<span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Hello, Eric Idle. You are 74. You are a comedian. You were a member of Monty Python.'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>以上这种情况，代码就会变得十分冗长，并且非常容易出现错误，例如出现不显示元组和字典的问题。</p>\n<h3 id=\"方法二：str-format\"><a href=\"#方法二：str-format\" class=\"headerlink\" title=\"方法二：str.format()\"></a>方法二：str.format()</h3><p>在Python 2.6中，<code>str.format()</code>是一种新的格式化字符串的方式。</p>\n<p><strong>如何使用str.format()</strong></p>\n<p><code>str.format()</code>是%格式化的改进版。它使用函数调用的方式将对象格式化成字符串。</p>\n<p>使用<code>str.format()</code>时，将大括号替换成对应的变量：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string\">\"Hello, &#123;&#125;. You are &#123;&#125;.\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Hello, Eric. You are 74.'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>你还可以在大括号中使用索引值来引用对应的变量，这种方式使得引用变量与顺序无关：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string\">\"Hello, &#123;1&#125;. You are &#123;0&#125;.\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Hello, Eric. You are 74.'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>你可以使用关键字参数的方式，在大括号中插入变量名，然后在format()中为参数赋值：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Eric'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">74</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string\">\"Hello, &#123;name&#125;. You are &#123;age&#125;.\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span>person<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">=</span>person<span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Hello, Eric. You are 74.'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>你还可以使用<code>**</code>的方式将字典作为参数：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Eric'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">74</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string\">\"Hello, &#123;name&#125;. You are &#123;age&#125;.\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>person<span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Hello, Eric. You are 74.'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>为什么不推荐使用str.format()</strong></p>\n<p>相比于%格式化，<code>str.format()</code>的可读性更强，但是在处理多个参数以及长字符串的情况下，代码仍然显得过于冗长：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> first_name <span class=\"token operator\">=</span> <span class=\"token string\">\"Eric\"</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> last_name <span class=\"token operator\">=</span> <span class=\"token string\">\"Idle\"</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> age <span class=\"token operator\">=</span> <span class=\"token number\">74</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> profession <span class=\"token operator\">=</span> <span class=\"token string\">\"comedian\"</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> affiliation <span class=\"token operator\">=</span> <span class=\"token string\">\"Monty Python\"</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, &#123;first_name&#125; &#123;last_name&#125;. You are &#123;age&#125;. \"</span> <span class=\"token operator\">+</span> \n<span class=\"token operator\">>></span><span class=\"token operator\">></span>        <span class=\"token string\">\"You are a &#123;profession&#125;. You were a member of &#123;affiliation&#125;.\"</span><span class=\"token punctuation\">)</span> \\\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>        <span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>first_name<span class=\"token operator\">=</span>first_name<span class=\"token punctuation\">,</span> last_name<span class=\"token operator\">=</span>last_name<span class=\"token punctuation\">,</span> age<span class=\"token operator\">=</span>age<span class=\"token punctuation\">,</span> \\\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>                profession<span class=\"token operator\">=</span>profession<span class=\"token punctuation\">,</span> affiliation<span class=\"token operator\">=</span>affiliation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Hello, Eric Idle. You are 74. You are a comedian. You were a member of Monty Python.'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>虽然你可以使用字典的方式传递参数，例如<code>.format(**some_dict)</code>，但是其实有更好的方法。</p>\n<h2 id=\"f-strings-一种全新的改进版格式化字符串方式\"><a href=\"#f-strings-一种全新的改进版格式化字符串方式\" class=\"headerlink\" title=\"f-strings: 一种全新的改进版格式化字符串方式\"></a>f-strings: 一种全新的改进版格式化字符串方式</h2><p><strong>f-strings</strong>全称为“formatted string literals”，表达式的开头用字母f表示，大括号中包含的表达式会被替换成对应的值。大括号中的表达式通常在运行时被运算出结果，然后用<code>__format__</code>协议将对象格式化成字符串。关于f-strings的详细介绍，请参考文档： <a href=\"https://docs.python.org/3/reference/lexical_analysis.html#f-strings\">Python docs</a>。</p>\n<h3 id=\"简单的语法\"><a href=\"#简单的语法\" class=\"headerlink\" title=\"简单的语法\"></a>简单的语法</h3><p>f-strings的语法与<code>str.format()</code>相似，但是比它更简单。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Eric\"</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> age <span class=\"token operator\">=</span> <span class=\"token number\">74</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"Hello, </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">. You are </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>age<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">.\"</span></span>\n<span class=\"token string\">'Hello, Eric. You are 74.'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>f-strings同时支持大写的F和小写的f:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string-interpolation\"><span class=\"token string\">F\"Hello, </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">. You are </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>age<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">.\"</span></span>\n<span class=\"token string\">'Hello, Eric. You are 74.'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"支持任意的表达式\"><a href=\"#支持任意的表达式\" class=\"headerlink\" title=\"支持任意的表达式\"></a>支持任意的表达式</h3><p>因为f-strings在运行时会对表达式进行运算，所以你可以在大括号中使用任何有效的表达式。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token number\">37</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span>\n<span class=\"token string\">'74'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>你也可以调用函数：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">to_lowercase</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">return</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Eric Idle\"</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>to_lowercase<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> is funny.\"</span></span>\n<span class=\"token string\">'eric idle is funny.'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>你还可以直接使用方法：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> is funny.\"</span></span>\n<span class=\"token string\">'eric idle is funny.'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>你在类中也可以使用f-strings调用类的属性：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Comedian</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> first_name<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>first_name <span class=\"token operator\">=</span> first_name\n        self<span class=\"token punctuation\">.</span>last_name <span class=\"token operator\">=</span> last_name\n        self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>first_name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>last_name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> is </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">.\"</span></span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__repr__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>first_name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>last_name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> is </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">. Surprise!\"</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然后，你可以这样：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> new_comedian <span class=\"token operator\">=</span> Comedian<span class=\"token punctuation\">(</span><span class=\"token string\">\"Eric\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Idle\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"74\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>new_comedian<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span>\n<span class=\"token string\">'Eric Idle is 74.'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><code>__str__()</code>和<code>__repr__()</code>主要用于将对象表示为字符串，所以你需要确保在类的定义中，至少使用其中一种方法。如果要在两种方法中选择其一，建议你使用<code>__repr__()</code>。</p>\n<p><code>__str__()</code>返回的是对象的非正式字符串表达式，可读性比较强，主要面向的是最终用户。</p>\n<p><code>__repr__()</code>返回的是对象的正式字符串表达式，并且没有任何歧义，主要面向的是开发人员。</p>\n<p>对于访问<code>__str__()</code>和<code>__repr__()</code>，建议使用<code>str()</code>和<code>repr()</code>。</p>\n<p>默认情况下，f-strings使用<code>__str__()</code>，但是你也可以使用转换标识符<code>!r</code>来使用<code>__repr__()</code>。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>new_comedian<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span>\n<span class=\"token string\">'Eric Idle is 74.'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>new_comedian<span class=\"token conversion-option punctuation\">!r</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span>\n<span class=\"token string\">'Eric Idle is 74. Surprise!'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"多行f-Strings\"><a href=\"#多行f-Strings\" class=\"headerlink\" title=\"多行f-Strings\"></a>多行f-Strings</h3><p>你可以使用多行字符串：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Eric\"</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> profession <span class=\"token operator\">=</span> <span class=\"token string\">\"comedian\"</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> affiliation <span class=\"token operator\">=</span> <span class=\"token string\">\"Monty Python\"</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> message <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token string-interpolation\"><span class=\"token string\">f\"Hi </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">. \"</span></span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token string-interpolation\"><span class=\"token string\">f\"You are a </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>profession<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">. \"</span></span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token string-interpolation\"><span class=\"token string\">f\"You were in </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>affiliation<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">.\"</span></span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> message\n<span class=\"token string\">'Hi Eric. You are a comedian. You were in Monty Python.'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>但是，你需要记住在每一行字符串的开始部分加上<code>f</code>。</p>\n<p>下面是一个错误的示例：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> message <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token string-interpolation\"><span class=\"token string\">f\"Hi </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">. \"</span></span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token string\">\"You are a &#123;profession&#125;. \"</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token string\">\"You were in &#123;affiliation&#125;.\"</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> message\n<span class=\"token string\">'Hi Eric. You are a &#123;profession&#125;. You were in &#123;affiliation&#125;.'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>以上例子中，由于没有在每一行添加<code>f</code>，所以，就导致结果出现异常。</p>\n<p>如果你想要将字符串分布到多行，你还可以使用<code>\\</code>来转义换行符：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> message <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"Hi </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">. \"</span></span> \\\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>           <span class=\"token string-interpolation\"><span class=\"token string\">f\"You are a </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>profession<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">. \"</span></span> \\\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>           <span class=\"token string-interpolation\"><span class=\"token string\">f\"You were in </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>affiliation<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">.\"</span></span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> message\n<span class=\"token string\">'Hi Eric. You are a comedian. You were in Monty Python.'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>但是，如果使用<code>&quot;&quot;&quot;</code>，情况又会有所不同：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> message <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"\"\"\n...     Hi </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">. \n...     You are a </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>profession<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">. \n...     You were in </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>affiliation<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">.\n... \"\"\"</span></span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> message\n<span class=\"token string\">'\\n    Hi Eric.\\n    You are a comedian.\\n    You were in Monty Python.\\n'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"速度\"><a href=\"#速度\" class=\"headerlink\" title=\"速度\"></a>速度</h3><p>f-strings的f也有快速的意思。</p>\n<p>f-strings的运行速度比%格式化和<code>stri.format()</code>都要快。以下是官方的说明：</p>\n<blockquote>\n<p>“F-strings provide a way to embed expressions inside string literals, using a minimal syntax. It should be noted that an f-string is really an expression evaluated at run time, not a constant value. In Python source code, an f-string is a literal string, prefixed with <code>f</code>, which contains expressions inside braces. The expressions are replaced with their values.” (<a href=\"https://www.python.org/dev/peps/pep-0498/#abstract\">Source</a>)</p>\n</blockquote>\n<p>在运行时，大括号中的表达式在它自己的范围（scope）内完成运算，然后再与其它字符串组合成完整的字符串，并返回结果。</p>\n<p>以下是几种格式化字符串方法的速度对比：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> timeit\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> timeit<span class=\"token punctuation\">.</span>timeit<span class=\"token punctuation\">(</span><span class=\"token triple-quoted-string string\">\"\"\"name = \"Eric\"\n... age = 74\n... '%s is %s.' % (name, age)\"\"\"</span><span class=\"token punctuation\">,</span> number <span class=\"token operator\">=</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">0.003324444866599663</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> timeit<span class=\"token punctuation\">.</span>timeit<span class=\"token punctuation\">(</span><span class=\"token triple-quoted-string string\">\"\"\"name = \"Eric\"\n... age = 74\n... '&#123;&#125; is &#123;&#125;.'.format(name, age)\"\"\"</span><span class=\"token punctuation\">,</span> number <span class=\"token operator\">=</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">0.004242089427570761</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> timeit<span class=\"token punctuation\">.</span>timeit<span class=\"token punctuation\">(</span><span class=\"token triple-quoted-string string\">\"\"\"name = \"Eric\"\n... age = 74\n... f'&#123;name&#125; is &#123;age&#125;.'\"\"\"</span><span class=\"token punctuation\">,</span> number <span class=\"token operator\">=</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">0.0024820892040722242</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>从对比结果可以看出，f-strings的运行速度最快。</p>\n<p>尽管如此，但是也有一些特例。具体详情，请参考以下内容：</p>\n<ul>\n<li><p><a href=\"https://stackoverflow.com/questions/37365311/why-were-literal-formatted-strings-f-strings-so-slow-in-python-3-6-alpha-now\">performance - Why were literal formatted strings (f-strings) so slow in Python 3.6 alpha? (now fixed in 3.6 stable) - Stack Overflow</a></p>\n</li>\n<li><p><a href=\"https://bugs.python.org/issue27078\"><code>BUILD_STRING</code> opcode</a></p>\n</li>\n</ul>\n<h2 id=\"f-strings的一些细节\"><a href=\"#f-strings的一些细节\" class=\"headerlink\" title=\"f-strings的一些细节\"></a>f-strings的一些细节</h2><p>关于f-strings的使用，有一些细节还需要我们了解并且记住。</p>\n<h3 id=\"引号\"><a href=\"#引号\" class=\"headerlink\" title=\"引号\"></a>引号</h3><p>你可以在f-strings中使用任何一种引号，但是必须确保与f-strings最外侧的引号不同。</p>\n<p>以下代码可以工作：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'Eric Idle'</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span>\n<span class=\"token string\">'Eric Idle'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>以下代码也可以工作：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"Eric Idle\"</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span>\n<span class=\"token string\">'Eric Idle'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>你也可以使用三引号：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"\"\"Eric Idle\"\"\"</span></span>\n<span class=\"token string\">'Eric Idle'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string-interpolation\"><span class=\"token string\">f'''Eric Idle'''</span></span>\n<span class=\"token string\">'Eric Idle'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>如果你想使用与外侧相同的引号，可以使用转义符号<code>\\</code>:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"The \\\"comedian\\\" is </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">, aged </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>age<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">.\"</span></span>\n<span class=\"token string\">'The \"comedian\" is Eric Idle, aged 74.'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"字典\"><a href=\"#字典\" class=\"headerlink\" title=\"字典\"></a>字典</h3><p>当使用字典的时候，我们应该注意。如果你对字典的键使用单引号，那么记住f-strings外侧必须使用双引号。</p>\n<p>以下例子可以正常工作：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> comedian <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Eric Idle'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">74</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"The comedian is </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>comedian<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">, aged </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>comedian<span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">.\"</span></span>\nThe comedian <span class=\"token keyword\">is</span> Eric Idle<span class=\"token punctuation\">,</span> aged <span class=\"token number\">74.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>但是下面的例子就会报错：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> comedian <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Eric Idle'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">74</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string-interpolation\"><span class=\"token string\">f'The comedian is &#123;comedian['</span></span>name<span class=\"token string\">']&#125;, aged &#123;comedian['</span>age<span class=\"token string\">']&#125;.'</span>\n  File <span class=\"token string\">\"&lt;stdin>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1</span>\n    <span class=\"token string-interpolation\"><span class=\"token string\">f'The comedian is &#123;comedian['</span></span>name<span class=\"token string\">']&#125;, aged &#123;comedian['</span>age<span class=\"token string\">']&#125;.'</span>\n                                    <span class=\"token operator\">^</span>\nSyntaxError<span class=\"token punctuation\">:</span> invalid syntax<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果字典的键使用的引号与f-strings外侧的引号相同，那么，字典的第一个键的引号就会被Python解释器识别为是字符串的结尾。</p>\n<h3 id=\"括号\"><a href=\"#括号\" class=\"headerlink\" title=\"括号\"></a>括号</h3><p>为了在结果的字符串中显示括号，你必须使用双括号：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"&#123;&#123;70 + 4&#125;&#125;\"</span></span>\n<span class=\"token string\">'&#123;70 + 4&#125;'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>注意虽然使用了三个括号，但是结果仍然只会显示单括号：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"&#123;&#123;</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token number\">70</span> <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">&#125;&#125;\"</span></span>\n<span class=\"token string\">'&#123;74&#125;'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>但是，如果使用四个括号，结果就会显示双括号：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Eric Idle\"</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span>\n<span class=\"token string\">'Eric Idle'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"内联注释\"><a href=\"#内联注释\" class=\"headerlink\" title=\"内联注释\"></a>内联注释</h3><p>大括号中不应该包含用#号的注释语句，否则会报错：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"Eric is </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token number\">37</span> <span class=\"token comment\">#Oh my!&#125;</span></span><span class=\"token string\">.\"</span></span>\n  File <span class=\"token string\">\"&lt;stdin>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1</span>\n    <span class=\"token string-interpolation\"><span class=\"token string\">f\"Eric is </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token number\">37</span> <span class=\"token comment\">#Oh my!&#125;</span></span><span class=\"token string\">.\"</span></span>\n                                <span class=\"token operator\">^</span>\nSyntaxError<span class=\"token punctuation\">:</span> f<span class=\"token operator\">-</span>string expression part cannot include <span class=\"token string\">'#'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>你仍然可以使用以前的格式化字符串方式，但是f-strings更加简明，可读性强并且方便。想要了解更多关于字符串的内容，请参考以下文档：</p>\n<ul>\n<li><a href=\"https://www.python.org/dev/peps/pep-0502/\">PEP 502</a></li>\n<li><a href=\"https://www.python.org/dev/peps/pep-0536/\">PEP 536 draft</a></li>\n<li><a href=\"https://realpython.com/python-string-formatting/\">Python String Formatting Best Practices</a> by Dan Bader</li>\n<li><a href=\"https://realpython.com/python-web-scraping-practical-introduction/\">Practical Introduction to Web Scraping in Python</a> by Colin OKeefe</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"Python’s-f-Strings-改进版格式化字符串语法指南\"><a href=\"#Python’s-f-Strings-改进版格式化字符串语法指南\" class=\"headerlink\" title=\"Python’s f-Strings:改进版格式化字符串语法指南\"></a>Python’s f-Strings:改进版格式化字符串语法指南</h1><blockquote>\n<p>注：本文翻译自<a href=\"https://realpython.com/python-f-strings/\">Python 3’s f-Strings: An Improved String Formatting Syntax (Guide) – Real Python</a>。</p>\n</blockquote>\n<p>从Python 3.6开始，f-strings是一种全新的格式化字符串方式。f-strings不仅可读性更强，并且简明、快速，与其它格式化字符串的方式相比，不易出错。</p>\n<p>通过阅读本文，你将了解为什么要使用f-strings，以及如何使用它。</p>\n<p>但是，首先在介绍f-strings之前，我们先回顾一下以前传统的格式化字符串的方式。</p>","more":"<h2 id=\"传统的格式化字符串方式\"><a href=\"#传统的格式化字符串方式\" class=\"headerlink\" title=\"传统的格式化字符串方式\"></a>传统的格式化字符串方式</h2><p>在Python 3.6以前，主要有两种格式化字符串的方式：<code>%</code>格式化和<code>str.format()</code>。我们先简单回顾一下如何使用这两种方式，以及它们有哪些局限性。</p>\n<h3 id=\"方法一：-格式化\"><a href=\"#方法一：-格式化\" class=\"headerlink\" title=\"方法一：%格式化\"></a>方法一：%格式化</h3><p>%格式化是Python最原始的字符串格式化方式。详情可以参考文档：<a href=\"https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting\">Python docs</a>。根据文档的介绍，并不推荐使用%格式化方式，具体内容如下：</p>\n<blockquote>\n<p>%格式化字符串的方式会导致程序出现一些错误，例如无法正确显示元组和字典。</p>\n<p>建议使用新的格式化字符串方式避免这些错误。新的方法不仅功能更加强大，且可扩展性更强。</p>\n</blockquote>\n<p> <strong>如何使用%格式化</strong></p>\n<p>字符串对象本身具有内置的操作符%，通过该操作符可以用来格式化字符串：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Eric\"</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string\">\"Hello, %s.\"</span> <span class=\"token operator\">%</span> name\n<span class=\"token string\">'Hello, Eric.'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>为了能够在字符串中插入更多的变量，你必须使用元组来存储这些变量：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Eric\"</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> age <span class=\"token operator\">=</span> <span class=\"token number\">74</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string\">\"Hello, %s. You are %s.\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Hello Eric. You are 74.'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>为什么不推荐使用%格式化</strong></p>\n<p>虽然上面的例子看起来很简单，但是，一旦你需要使用许多的参数，并且字符串很长的时候，代码的可读性就会变得很差：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> first_name <span class=\"token operator\">=</span> <span class=\"token string\">\"Eric\"</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> last_name <span class=\"token operator\">=</span> <span class=\"token string\">\"Idle\"</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> age <span class=\"token operator\">=</span> <span class=\"token number\">74</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> profession <span class=\"token operator\">=</span> <span class=\"token string\">\"comedian\"</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> affiliation <span class=\"token operator\">=</span> <span class=\"token string\">\"Monty Python\"</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string\">\"Hello, %s %s. You are %s. You are a %s. You were a member of %s.\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>first_name<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> profession<span class=\"token punctuation\">,</span> affiliation<span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Hello, Eric Idle. You are 74. You are a comedian. You were a member of Monty Python.'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>以上这种情况，代码就会变得十分冗长，并且非常容易出现错误，例如出现不显示元组和字典的问题。</p>\n<h3 id=\"方法二：str-format\"><a href=\"#方法二：str-format\" class=\"headerlink\" title=\"方法二：str.format()\"></a>方法二：str.format()</h3><p>在Python 2.6中，<code>str.format()</code>是一种新的格式化字符串的方式。</p>\n<p><strong>如何使用str.format()</strong></p>\n<p><code>str.format()</code>是%格式化的改进版。它使用函数调用的方式将对象格式化成字符串。</p>\n<p>使用<code>str.format()</code>时，将大括号替换成对应的变量：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string\">\"Hello, &#123;&#125;. You are &#123;&#125;.\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Hello, Eric. You are 74.'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>你还可以在大括号中使用索引值来引用对应的变量，这种方式使得引用变量与顺序无关：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string\">\"Hello, &#123;1&#125;. You are &#123;0&#125;.\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Hello, Eric. You are 74.'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>你可以使用关键字参数的方式，在大括号中插入变量名，然后在format()中为参数赋值：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Eric'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">74</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string\">\"Hello, &#123;name&#125;. You are &#123;age&#125;.\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span>person<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">=</span>person<span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Hello, Eric. You are 74.'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>你还可以使用<code>**</code>的方式将字典作为参数：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Eric'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">74</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string\">\"Hello, &#123;name&#125;. You are &#123;age&#125;.\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>person<span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Hello, Eric. You are 74.'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>为什么不推荐使用str.format()</strong></p>\n<p>相比于%格式化，<code>str.format()</code>的可读性更强，但是在处理多个参数以及长字符串的情况下，代码仍然显得过于冗长：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> first_name <span class=\"token operator\">=</span> <span class=\"token string\">\"Eric\"</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> last_name <span class=\"token operator\">=</span> <span class=\"token string\">\"Idle\"</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> age <span class=\"token operator\">=</span> <span class=\"token number\">74</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> profession <span class=\"token operator\">=</span> <span class=\"token string\">\"comedian\"</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> affiliation <span class=\"token operator\">=</span> <span class=\"token string\">\"Monty Python\"</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, &#123;first_name&#125; &#123;last_name&#125;. You are &#123;age&#125;. \"</span> <span class=\"token operator\">+</span> \n<span class=\"token operator\">>></span><span class=\"token operator\">></span>        <span class=\"token string\">\"You are a &#123;profession&#125;. You were a member of &#123;affiliation&#125;.\"</span><span class=\"token punctuation\">)</span> \\\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>        <span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>first_name<span class=\"token operator\">=</span>first_name<span class=\"token punctuation\">,</span> last_name<span class=\"token operator\">=</span>last_name<span class=\"token punctuation\">,</span> age<span class=\"token operator\">=</span>age<span class=\"token punctuation\">,</span> \\\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>                profession<span class=\"token operator\">=</span>profession<span class=\"token punctuation\">,</span> affiliation<span class=\"token operator\">=</span>affiliation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Hello, Eric Idle. You are 74. You are a comedian. You were a member of Monty Python.'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>虽然你可以使用字典的方式传递参数，例如<code>.format(**some_dict)</code>，但是其实有更好的方法。</p>\n<h2 id=\"f-strings-一种全新的改进版格式化字符串方式\"><a href=\"#f-strings-一种全新的改进版格式化字符串方式\" class=\"headerlink\" title=\"f-strings: 一种全新的改进版格式化字符串方式\"></a>f-strings: 一种全新的改进版格式化字符串方式</h2><p><strong>f-strings</strong>全称为“formatted string literals”，表达式的开头用字母f表示，大括号中包含的表达式会被替换成对应的值。大括号中的表达式通常在运行时被运算出结果，然后用<code>__format__</code>协议将对象格式化成字符串。关于f-strings的详细介绍，请参考文档： <a href=\"https://docs.python.org/3/reference/lexical_analysis.html#f-strings\">Python docs</a>。</p>\n<h3 id=\"简单的语法\"><a href=\"#简单的语法\" class=\"headerlink\" title=\"简单的语法\"></a>简单的语法</h3><p>f-strings的语法与<code>str.format()</code>相似，但是比它更简单。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Eric\"</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> age <span class=\"token operator\">=</span> <span class=\"token number\">74</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"Hello, </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">. You are </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>age<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">.\"</span></span>\n<span class=\"token string\">'Hello, Eric. You are 74.'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>f-strings同时支持大写的F和小写的f:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string-interpolation\"><span class=\"token string\">F\"Hello, </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">. You are </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>age<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">.\"</span></span>\n<span class=\"token string\">'Hello, Eric. You are 74.'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"支持任意的表达式\"><a href=\"#支持任意的表达式\" class=\"headerlink\" title=\"支持任意的表达式\"></a>支持任意的表达式</h3><p>因为f-strings在运行时会对表达式进行运算，所以你可以在大括号中使用任何有效的表达式。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token number\">37</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span>\n<span class=\"token string\">'74'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>你也可以调用函数：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">to_lowercase</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">return</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Eric Idle\"</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>to_lowercase<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> is funny.\"</span></span>\n<span class=\"token string\">'eric idle is funny.'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>你还可以直接使用方法：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> is funny.\"</span></span>\n<span class=\"token string\">'eric idle is funny.'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>你在类中也可以使用f-strings调用类的属性：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Comedian</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> first_name<span class=\"token punctuation\">,</span> last_name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>first_name <span class=\"token operator\">=</span> first_name\n        self<span class=\"token punctuation\">.</span>last_name <span class=\"token operator\">=</span> last_name\n        self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>first_name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>last_name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> is </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">.\"</span></span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__repr__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>first_name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>last_name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> is </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">. Surprise!\"</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然后，你可以这样：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> new_comedian <span class=\"token operator\">=</span> Comedian<span class=\"token punctuation\">(</span><span class=\"token string\">\"Eric\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Idle\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"74\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>new_comedian<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span>\n<span class=\"token string\">'Eric Idle is 74.'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><code>__str__()</code>和<code>__repr__()</code>主要用于将对象表示为字符串，所以你需要确保在类的定义中，至少使用其中一种方法。如果要在两种方法中选择其一，建议你使用<code>__repr__()</code>。</p>\n<p><code>__str__()</code>返回的是对象的非正式字符串表达式，可读性比较强，主要面向的是最终用户。</p>\n<p><code>__repr__()</code>返回的是对象的正式字符串表达式，并且没有任何歧义，主要面向的是开发人员。</p>\n<p>对于访问<code>__str__()</code>和<code>__repr__()</code>，建议使用<code>str()</code>和<code>repr()</code>。</p>\n<p>默认情况下，f-strings使用<code>__str__()</code>，但是你也可以使用转换标识符<code>!r</code>来使用<code>__repr__()</code>。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>new_comedian<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span>\n<span class=\"token string\">'Eric Idle is 74.'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>new_comedian<span class=\"token conversion-option punctuation\">!r</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span>\n<span class=\"token string\">'Eric Idle is 74. Surprise!'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"多行f-Strings\"><a href=\"#多行f-Strings\" class=\"headerlink\" title=\"多行f-Strings\"></a>多行f-Strings</h3><p>你可以使用多行字符串：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Eric\"</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> profession <span class=\"token operator\">=</span> <span class=\"token string\">\"comedian\"</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> affiliation <span class=\"token operator\">=</span> <span class=\"token string\">\"Monty Python\"</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> message <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token string-interpolation\"><span class=\"token string\">f\"Hi </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">. \"</span></span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token string-interpolation\"><span class=\"token string\">f\"You are a </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>profession<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">. \"</span></span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token string-interpolation\"><span class=\"token string\">f\"You were in </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>affiliation<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">.\"</span></span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> message\n<span class=\"token string\">'Hi Eric. You are a comedian. You were in Monty Python.'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>但是，你需要记住在每一行字符串的开始部分加上<code>f</code>。</p>\n<p>下面是一个错误的示例：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> message <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token string-interpolation\"><span class=\"token string\">f\"Hi </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">. \"</span></span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token string\">\"You are a &#123;profession&#125;. \"</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token string\">\"You were in &#123;affiliation&#125;.\"</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> message\n<span class=\"token string\">'Hi Eric. You are a &#123;profession&#125;. You were in &#123;affiliation&#125;.'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>以上例子中，由于没有在每一行添加<code>f</code>，所以，就导致结果出现异常。</p>\n<p>如果你想要将字符串分布到多行，你还可以使用<code>\\</code>来转义换行符：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> message <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"Hi </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">. \"</span></span> \\\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>           <span class=\"token string-interpolation\"><span class=\"token string\">f\"You are a </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>profession<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">. \"</span></span> \\\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>           <span class=\"token string-interpolation\"><span class=\"token string\">f\"You were in </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>affiliation<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">.\"</span></span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> message\n<span class=\"token string\">'Hi Eric. You are a comedian. You were in Monty Python.'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>但是，如果使用<code>&quot;&quot;&quot;</code>，情况又会有所不同：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> message <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"\"\"\n...     Hi </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">. \n...     You are a </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>profession<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">. \n...     You were in </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>affiliation<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">.\n... \"\"\"</span></span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> message\n<span class=\"token string\">'\\n    Hi Eric.\\n    You are a comedian.\\n    You were in Monty Python.\\n'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"速度\"><a href=\"#速度\" class=\"headerlink\" title=\"速度\"></a>速度</h3><p>f-strings的f也有快速的意思。</p>\n<p>f-strings的运行速度比%格式化和<code>stri.format()</code>都要快。以下是官方的说明：</p>\n<blockquote>\n<p>“F-strings provide a way to embed expressions inside string literals, using a minimal syntax. It should be noted that an f-string is really an expression evaluated at run time, not a constant value. In Python source code, an f-string is a literal string, prefixed with <code>f</code>, which contains expressions inside braces. The expressions are replaced with their values.” (<a href=\"https://www.python.org/dev/peps/pep-0498/#abstract\">Source</a>)</p>\n</blockquote>\n<p>在运行时，大括号中的表达式在它自己的范围（scope）内完成运算，然后再与其它字符串组合成完整的字符串，并返回结果。</p>\n<p>以下是几种格式化字符串方法的速度对比：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> timeit\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> timeit<span class=\"token punctuation\">.</span>timeit<span class=\"token punctuation\">(</span><span class=\"token triple-quoted-string string\">\"\"\"name = \"Eric\"\n... age = 74\n... '%s is %s.' % (name, age)\"\"\"</span><span class=\"token punctuation\">,</span> number <span class=\"token operator\">=</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">0.003324444866599663</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> timeit<span class=\"token punctuation\">.</span>timeit<span class=\"token punctuation\">(</span><span class=\"token triple-quoted-string string\">\"\"\"name = \"Eric\"\n... age = 74\n... '&#123;&#125; is &#123;&#125;.'.format(name, age)\"\"\"</span><span class=\"token punctuation\">,</span> number <span class=\"token operator\">=</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">0.004242089427570761</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> timeit<span class=\"token punctuation\">.</span>timeit<span class=\"token punctuation\">(</span><span class=\"token triple-quoted-string string\">\"\"\"name = \"Eric\"\n... age = 74\n... f'&#123;name&#125; is &#123;age&#125;.'\"\"\"</span><span class=\"token punctuation\">,</span> number <span class=\"token operator\">=</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">0.0024820892040722242</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>从对比结果可以看出，f-strings的运行速度最快。</p>\n<p>尽管如此，但是也有一些特例。具体详情，请参考以下内容：</p>\n<ul>\n<li><p><a href=\"https://stackoverflow.com/questions/37365311/why-were-literal-formatted-strings-f-strings-so-slow-in-python-3-6-alpha-now\">performance - Why were literal formatted strings (f-strings) so slow in Python 3.6 alpha? (now fixed in 3.6 stable) - Stack Overflow</a></p>\n</li>\n<li><p><a href=\"https://bugs.python.org/issue27078\"><code>BUILD_STRING</code> opcode</a></p>\n</li>\n</ul>\n<h2 id=\"f-strings的一些细节\"><a href=\"#f-strings的一些细节\" class=\"headerlink\" title=\"f-strings的一些细节\"></a>f-strings的一些细节</h2><p>关于f-strings的使用，有一些细节还需要我们了解并且记住。</p>\n<h3 id=\"引号\"><a href=\"#引号\" class=\"headerlink\" title=\"引号\"></a>引号</h3><p>你可以在f-strings中使用任何一种引号，但是必须确保与f-strings最外侧的引号不同。</p>\n<p>以下代码可以工作：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'Eric Idle'</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span>\n<span class=\"token string\">'Eric Idle'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>以下代码也可以工作：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"Eric Idle\"</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span>\n<span class=\"token string\">'Eric Idle'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>你也可以使用三引号：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"\"\"Eric Idle\"\"\"</span></span>\n<span class=\"token string\">'Eric Idle'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string-interpolation\"><span class=\"token string\">f'''Eric Idle'''</span></span>\n<span class=\"token string\">'Eric Idle'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>如果你想使用与外侧相同的引号，可以使用转义符号<code>\\</code>:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"The \\\"comedian\\\" is </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">, aged </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>age<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">.\"</span></span>\n<span class=\"token string\">'The \"comedian\" is Eric Idle, aged 74.'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"字典\"><a href=\"#字典\" class=\"headerlink\" title=\"字典\"></a>字典</h3><p>当使用字典的时候，我们应该注意。如果你对字典的键使用单引号，那么记住f-strings外侧必须使用双引号。</p>\n<p>以下例子可以正常工作：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> comedian <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Eric Idle'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">74</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"The comedian is </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>comedian<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">, aged </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>comedian<span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">.\"</span></span>\nThe comedian <span class=\"token keyword\">is</span> Eric Idle<span class=\"token punctuation\">,</span> aged <span class=\"token number\">74.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>但是下面的例子就会报错：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> comedian <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Eric Idle'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">74</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string-interpolation\"><span class=\"token string\">f'The comedian is &#123;comedian['</span></span>name<span class=\"token string\">']&#125;, aged &#123;comedian['</span>age<span class=\"token string\">']&#125;.'</span>\n  File <span class=\"token string\">\"&lt;stdin>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1</span>\n    <span class=\"token string-interpolation\"><span class=\"token string\">f'The comedian is &#123;comedian['</span></span>name<span class=\"token string\">']&#125;, aged &#123;comedian['</span>age<span class=\"token string\">']&#125;.'</span>\n                                    <span class=\"token operator\">^</span>\nSyntaxError<span class=\"token punctuation\">:</span> invalid syntax<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果字典的键使用的引号与f-strings外侧的引号相同，那么，字典的第一个键的引号就会被Python解释器识别为是字符串的结尾。</p>\n<h3 id=\"括号\"><a href=\"#括号\" class=\"headerlink\" title=\"括号\"></a>括号</h3><p>为了在结果的字符串中显示括号，你必须使用双括号：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"&#123;&#123;70 + 4&#125;&#125;\"</span></span>\n<span class=\"token string\">'&#123;70 + 4&#125;'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>注意虽然使用了三个括号，但是结果仍然只会显示单括号：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"&#123;&#123;</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token number\">70</span> <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">&#125;&#125;\"</span></span>\n<span class=\"token string\">'&#123;74&#125;'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>但是，如果使用四个括号，结果就会显示双括号：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Eric Idle\"</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span>\n<span class=\"token string\">'Eric Idle'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"内联注释\"><a href=\"#内联注释\" class=\"headerlink\" title=\"内联注释\"></a>内联注释</h3><p>大括号中不应该包含用#号的注释语句，否则会报错：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"Eric is </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token number\">37</span> <span class=\"token comment\">#Oh my!&#125;</span></span><span class=\"token string\">.\"</span></span>\n  File <span class=\"token string\">\"&lt;stdin>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1</span>\n    <span class=\"token string-interpolation\"><span class=\"token string\">f\"Eric is </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token number\">37</span> <span class=\"token comment\">#Oh my!&#125;</span></span><span class=\"token string\">.\"</span></span>\n                                <span class=\"token operator\">^</span>\nSyntaxError<span class=\"token punctuation\">:</span> f<span class=\"token operator\">-</span>string expression part cannot include <span class=\"token string\">'#'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>你仍然可以使用以前的格式化字符串方式，但是f-strings更加简明，可读性强并且方便。想要了解更多关于字符串的内容，请参考以下文档：</p>\n<ul>\n<li><a href=\"https://www.python.org/dev/peps/pep-0502/\">PEP 502</a></li>\n<li><a href=\"https://www.python.org/dev/peps/pep-0536/\">PEP 536 draft</a></li>\n<li><a href=\"https://realpython.com/python-string-formatting/\">Python String Formatting Best Practices</a> by Dan Bader</li>\n<li><a href=\"https://realpython.com/python-web-scraping-practical-introduction/\">Practical Introduction to Web Scraping in Python</a> by Colin OKeefe</li>\n</ul>"},{"title":"super()函数介绍","date":"2022-02-17T07:00:56.000Z","img":"/medias/featureimages/29.jpg","_content":"\n# super()函数介绍\n\n> 注：本文翻译自[Supercharge Your Classes With Python super()](https://realpython.com/python-super/)。\n\n## 概述\n\n**简单来说，super()函数可以让你在子类中访问父类中的方法。**通过在子类中调用super()函数，可以返回父类的一个对象，从而访问父类中的方法。\n\n什么情况下需要使用super()函数函数呢？\n\n通常情况下，使用super()函数主要是为了在父类的基础上，扩展子类的功能。这样，既避免了在子类中重写父类的代码，也可以减少对父类的代码更改。\n\n<!-- more -->\n\n## 单重继承\n\n如果你对面向对象的编程不是十分了解，那么你可能也不太了解**继承**（ **inheritance**）这个术语。在类中，继承是指一个类可以从另外一个类中派生或者继承其所有的属性和方法，而不用在重新实现。\n\n让我们来举例说明：\n\n```python\nclass Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n\n    def area(self):\n        return self.length * self.width\n\n    def perimeter(self):\n        return 2 * self.length + 2 * self.width\n\nclass Square:\n    def __init__(self, length):\n        self.length = length\n\n    def area(self):\n        return self.length * self.length\n\n    def perimeter(self):\n        return 4 * self.length\n```\n\n上例中，又两个相似的类：`Rectangle`和`Square`。\n\n你可以像下面这样来使用这两个类：\n\n```python\n>>> square = Square(4)\n>>> square.area()\n16\n>>> rectangle = Rectangle(2,4)\n>>> rectangle.area()\n8\n```\n\n在该例中，这两个形状有一种相关性：正方形是一种特殊的长方形。但是，以上代码中并没有体现出这种相关性，因此，代码存在重复的地方。\n\n通过使用继承，根据两种形状的关系，你可以减少代码的编写：\n\n```python\nclass Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n\n    def area(self):\n        return self.length * self.width\n\n    def perimeter(self):\n        return 2 * self.length + 2 * self.width\n\n# Here we declare that the Square class inherits from the Rectangle class\nclass Square(Rectangle):\n    def __init__(self, length):\n        super().__init__(length, length)\n```\n\n这里，你使用`super()`函数来调用`Rectangle`类中的初始化函数`__init__()`，这就使得你不用在`Square`类中编写重复的代码。在下面的使用中，`Square`类的核心功能仍然是与`Rectangle`类相同的：\n\n```python\n>>> square = Square(4)\n>>> square.area()\n16\n```\n\n在上例中，`Rectangle`是超类， `Square`是子类。\n\n由于`Square`和`Rectangle`类的初始化函数`__init__()`非常相似，所以你可以直接通过`super()`函数调用父类的初始化函数`__init__()`。通过用一个参数`length`来设置父类初始化函数的参数`lenght`和`width`，实现了`Square`的构造函数。\n\n> 笔记：当使用`Square`类时，例如定义`Square`类的实例时。如果`Square`类中没有定义析构函数`__init__()`，则使用父类`Rectangle`类中的析构函数。但是，如果`Square`类中定义了析构函数`__init__()`，则使用Square类自身的析构函数。\n\n当你使用`Square`类的时候，虽然没有为该类显示地编写实现属性和方法的代码，但是当访问`.area()`方法的时候，将会使用父类`Rectangle`的方法。因为`Square`类从父类`Rectangle`继承了`.area()`的方法。\n\n> 注意：如果想学习更多关于Python类和继承的内容，请参考文档：[Inheritance and Composition: A Python OOP Guide](https://realpython.com/inheritance-composition-python/) 和 [Object-Oriented Programming (OOP) in Python 3](https://realpython.com/python3-object-oriented-programming/)。\n\n## super()可以做什么\n\n那么，函数`super()`可以为你在单重继承中做什么呢？\n\n与其它面向对象的语言相同，它可以让你在子类中调用父类的方法。但是，主要的用途是在子类中，进一步扩展继承自父类的方法的功能。\n\n在以下例子中，你将创建一个名为`Cube`的类，该类会从`Square`类继承`.area()`方法，并通过扩展`.area()`的功能来计算`Cube`实例的表面积和容量。\n\n```python\nclass Square(Rectangle):\n    def __init__(self, length):\n        super().__init__(length, length)\n\nclass Cube(Square):\n    def surface_area(self):\n        face_area = super().area()\n        return face_area * 6\n\n    def volume(self):\n        face_area = super().area()\n        return face_area * self.length\n```\n\n现在你已经创建好了类，下面让我们来计算一下边长为3的Cube的表面积和容量：\n\n```python\n>>> cube = Cube(3)\n>>> cube.surface_area()\n54\n>>> cube.volume()\n27\n```\n\n>注意：在上面的例子中，函数`super()`本身并不会帮你调用方法：你必须通过proxy object来调用方法。\n\n在`Cube`类中，你实现了两个方法：`.surface_area()`和`.volume()`。这两种计算方法都需要计算Cube的单个面积，因此，你可以通过`super()`函数来扩展面积计算的功能。\n\n同时，请注意到在`Cube`类中，并没有定义构造函数`__init__()`。首先，`Cube`继承了`Square`所有的特性和方法，并且，`Cube`需要定义的构造函数`__init__()`与`Square`的没有什么区别，因此，你不需要再为`Cube`类重复定义构造函数`__init__()`，`Cube`类会自动调用父类`Square`的构造函数`__init__()`。\n\n函数`super()`返回了一个父类的代理对象（delegate object），所以你可以直接调用方法：`super().area()`。\n\n这不仅使得我们不需要重写计算面积的代码，并且还可以在一个位置更改`.area()`的内部逻辑。对于一个父类有多个子类的情况，这特别有用。\n\n## 深入理解super()\n\n\n\n## 多重继承\n\n\n\n### 多重继承简介\n\n### 方法解析顺序（Method Resolution Order）\n\n### 多重继承的其它方法\n\n\n\n## 回顾\n","source":"_posts/python/super函数.md","raw":"---\ntitle: super()函数介绍\ndate: 2022-02-17 15:00:56\ntags: \n - python-intermediate\ncategories: \n - Python\nimg: /medias/featureimages/29.jpg\n---\n\n# super()函数介绍\n\n> 注：本文翻译自[Supercharge Your Classes With Python super()](https://realpython.com/python-super/)。\n\n## 概述\n\n**简单来说，super()函数可以让你在子类中访问父类中的方法。**通过在子类中调用super()函数，可以返回父类的一个对象，从而访问父类中的方法。\n\n什么情况下需要使用super()函数函数呢？\n\n通常情况下，使用super()函数主要是为了在父类的基础上，扩展子类的功能。这样，既避免了在子类中重写父类的代码，也可以减少对父类的代码更改。\n\n<!-- more -->\n\n## 单重继承\n\n如果你对面向对象的编程不是十分了解，那么你可能也不太了解**继承**（ **inheritance**）这个术语。在类中，继承是指一个类可以从另外一个类中派生或者继承其所有的属性和方法，而不用在重新实现。\n\n让我们来举例说明：\n\n```python\nclass Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n\n    def area(self):\n        return self.length * self.width\n\n    def perimeter(self):\n        return 2 * self.length + 2 * self.width\n\nclass Square:\n    def __init__(self, length):\n        self.length = length\n\n    def area(self):\n        return self.length * self.length\n\n    def perimeter(self):\n        return 4 * self.length\n```\n\n上例中，又两个相似的类：`Rectangle`和`Square`。\n\n你可以像下面这样来使用这两个类：\n\n```python\n>>> square = Square(4)\n>>> square.area()\n16\n>>> rectangle = Rectangle(2,4)\n>>> rectangle.area()\n8\n```\n\n在该例中，这两个形状有一种相关性：正方形是一种特殊的长方形。但是，以上代码中并没有体现出这种相关性，因此，代码存在重复的地方。\n\n通过使用继承，根据两种形状的关系，你可以减少代码的编写：\n\n```python\nclass Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n\n    def area(self):\n        return self.length * self.width\n\n    def perimeter(self):\n        return 2 * self.length + 2 * self.width\n\n# Here we declare that the Square class inherits from the Rectangle class\nclass Square(Rectangle):\n    def __init__(self, length):\n        super().__init__(length, length)\n```\n\n这里，你使用`super()`函数来调用`Rectangle`类中的初始化函数`__init__()`，这就使得你不用在`Square`类中编写重复的代码。在下面的使用中，`Square`类的核心功能仍然是与`Rectangle`类相同的：\n\n```python\n>>> square = Square(4)\n>>> square.area()\n16\n```\n\n在上例中，`Rectangle`是超类， `Square`是子类。\n\n由于`Square`和`Rectangle`类的初始化函数`__init__()`非常相似，所以你可以直接通过`super()`函数调用父类的初始化函数`__init__()`。通过用一个参数`length`来设置父类初始化函数的参数`lenght`和`width`，实现了`Square`的构造函数。\n\n> 笔记：当使用`Square`类时，例如定义`Square`类的实例时。如果`Square`类中没有定义析构函数`__init__()`，则使用父类`Rectangle`类中的析构函数。但是，如果`Square`类中定义了析构函数`__init__()`，则使用Square类自身的析构函数。\n\n当你使用`Square`类的时候，虽然没有为该类显示地编写实现属性和方法的代码，但是当访问`.area()`方法的时候，将会使用父类`Rectangle`的方法。因为`Square`类从父类`Rectangle`继承了`.area()`的方法。\n\n> 注意：如果想学习更多关于Python类和继承的内容，请参考文档：[Inheritance and Composition: A Python OOP Guide](https://realpython.com/inheritance-composition-python/) 和 [Object-Oriented Programming (OOP) in Python 3](https://realpython.com/python3-object-oriented-programming/)。\n\n## super()可以做什么\n\n那么，函数`super()`可以为你在单重继承中做什么呢？\n\n与其它面向对象的语言相同，它可以让你在子类中调用父类的方法。但是，主要的用途是在子类中，进一步扩展继承自父类的方法的功能。\n\n在以下例子中，你将创建一个名为`Cube`的类，该类会从`Square`类继承`.area()`方法，并通过扩展`.area()`的功能来计算`Cube`实例的表面积和容量。\n\n```python\nclass Square(Rectangle):\n    def __init__(self, length):\n        super().__init__(length, length)\n\nclass Cube(Square):\n    def surface_area(self):\n        face_area = super().area()\n        return face_area * 6\n\n    def volume(self):\n        face_area = super().area()\n        return face_area * self.length\n```\n\n现在你已经创建好了类，下面让我们来计算一下边长为3的Cube的表面积和容量：\n\n```python\n>>> cube = Cube(3)\n>>> cube.surface_area()\n54\n>>> cube.volume()\n27\n```\n\n>注意：在上面的例子中，函数`super()`本身并不会帮你调用方法：你必须通过proxy object来调用方法。\n\n在`Cube`类中，你实现了两个方法：`.surface_area()`和`.volume()`。这两种计算方法都需要计算Cube的单个面积，因此，你可以通过`super()`函数来扩展面积计算的功能。\n\n同时，请注意到在`Cube`类中，并没有定义构造函数`__init__()`。首先，`Cube`继承了`Square`所有的特性和方法，并且，`Cube`需要定义的构造函数`__init__()`与`Square`的没有什么区别，因此，你不需要再为`Cube`类重复定义构造函数`__init__()`，`Cube`类会自动调用父类`Square`的构造函数`__init__()`。\n\n函数`super()`返回了一个父类的代理对象（delegate object），所以你可以直接调用方法：`super().area()`。\n\n这不仅使得我们不需要重写计算面积的代码，并且还可以在一个位置更改`.area()`的内部逻辑。对于一个父类有多个子类的情况，这特别有用。\n\n## 深入理解super()\n\n\n\n## 多重继承\n\n\n\n### 多重继承简介\n\n### 方法解析顺序（Method Resolution Order）\n\n### 多重继承的其它方法\n\n\n\n## 回顾\n","slug":"python/super函数","published":1,"updated":"2023-03-03T01:33:03.360Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clexvkk9f002f5i730vy7ho5u","content":"<h1 id=\"super-函数介绍\"><a href=\"#super-函数介绍\" class=\"headerlink\" title=\"super()函数介绍\"></a>super()函数介绍</h1><blockquote>\n<p>注：本文翻译自<a href=\"https://realpython.com/python-super/\">Supercharge Your Classes With Python super()</a>。</p>\n</blockquote>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p><strong>简单来说，super()函数可以让你在子类中访问父类中的方法。</strong>通过在子类中调用super()函数，可以返回父类的一个对象，从而访问父类中的方法。</p>\n<p>什么情况下需要使用super()函数函数呢？</p>\n<p>通常情况下，使用super()函数主要是为了在父类的基础上，扩展子类的功能。这样，既避免了在子类中重写父类的代码，也可以减少对父类的代码更改。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"单重继承\"><a href=\"#单重继承\" class=\"headerlink\" title=\"单重继承\"></a>单重继承</h2><p>如果你对面向对象的编程不是十分了解，那么你可能也不太了解<strong>继承</strong>（ <strong>inheritance</strong>）这个术语。在类中，继承是指一个类可以从另外一个类中派生或者继承其所有的属性和方法，而不用在重新实现。</p>\n<p>让我们来举例说明：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> length\n        self<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> width\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">area</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>length <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>width\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">perimeter</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>width\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Square</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> length\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">area</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>length <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>length\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">perimeter</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">4</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>length<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上例中，又两个相似的类：<code>Rectangle</code>和<code>Square</code>。</p>\n<p>你可以像下面这样来使用这两个类：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> square <span class=\"token operator\">=</span> Square<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> square<span class=\"token punctuation\">.</span>area<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">16</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> rectangle <span class=\"token operator\">=</span> Rectangle<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> rectangle<span class=\"token punctuation\">.</span>area<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">8</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在该例中，这两个形状有一种相关性：正方形是一种特殊的长方形。但是，以上代码中并没有体现出这种相关性，因此，代码存在重复的地方。</p>\n<p>通过使用继承，根据两种形状的关系，你可以减少代码的编写：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> length\n        self<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> width\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">area</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>length <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>width\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">perimeter</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>width\n\n<span class=\"token comment\"># Here we declare that the Square class inherits from the Rectangle class</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Square</span><span class=\"token punctuation\">(</span>Rectangle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里，你使用<code>super()</code>函数来调用<code>Rectangle</code>类中的初始化函数<code>__init__()</code>，这就使得你不用在<code>Square</code>类中编写重复的代码。在下面的使用中，<code>Square</code>类的核心功能仍然是与<code>Rectangle</code>类相同的：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> square <span class=\"token operator\">=</span> Square<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> square<span class=\"token punctuation\">.</span>area<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">16</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>在上例中，<code>Rectangle</code>是超类， <code>Square</code>是子类。</p>\n<p>由于<code>Square</code>和<code>Rectangle</code>类的初始化函数<code>__init__()</code>非常相似，所以你可以直接通过<code>super()</code>函数调用父类的初始化函数<code>__init__()</code>。通过用一个参数<code>length</code>来设置父类初始化函数的参数<code>lenght</code>和<code>width</code>，实现了<code>Square</code>的构造函数。</p>\n<blockquote>\n<p>笔记：当使用<code>Square</code>类时，例如定义<code>Square</code>类的实例时。如果<code>Square</code>类中没有定义析构函数<code>__init__()</code>，则使用父类<code>Rectangle</code>类中的析构函数。但是，如果<code>Square</code>类中定义了析构函数<code>__init__()</code>，则使用Square类自身的析构函数。</p>\n</blockquote>\n<p>当你使用<code>Square</code>类的时候，虽然没有为该类显示地编写实现属性和方法的代码，但是当访问<code>.area()</code>方法的时候，将会使用父类<code>Rectangle</code>的方法。因为<code>Square</code>类从父类<code>Rectangle</code>继承了<code>.area()</code>的方法。</p>\n<blockquote>\n<p>注意：如果想学习更多关于Python类和继承的内容，请参考文档：<a href=\"https://realpython.com/inheritance-composition-python/\">Inheritance and Composition: A Python OOP Guide</a> 和 <a href=\"https://realpython.com/python3-object-oriented-programming/\">Object-Oriented Programming (OOP) in Python 3</a>。</p>\n</blockquote>\n<h2 id=\"super-可以做什么\"><a href=\"#super-可以做什么\" class=\"headerlink\" title=\"super()可以做什么\"></a>super()可以做什么</h2><p>那么，函数<code>super()</code>可以为你在单重继承中做什么呢？</p>\n<p>与其它面向对象的语言相同，它可以让你在子类中调用父类的方法。但是，主要的用途是在子类中，进一步扩展继承自父类的方法的功能。</p>\n<p>在以下例子中，你将创建一个名为<code>Cube</code>的类，该类会从<code>Square</code>类继承<code>.area()</code>方法，并通过扩展<code>.area()</code>的功能来计算<code>Cube</code>实例的表面积和容量。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Square</span><span class=\"token punctuation\">(</span>Rectangle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Cube</span><span class=\"token punctuation\">(</span>Square<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">surface_area</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        face_area <span class=\"token operator\">=</span> <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>area<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> face_area <span class=\"token operator\">*</span> <span class=\"token number\">6</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">volume</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        face_area <span class=\"token operator\">=</span> <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>area<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> face_area <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>length<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>现在你已经创建好了类，下面让我们来计算一下边长为3的Cube的表面积和容量：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> cube <span class=\"token operator\">=</span> Cube<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> cube<span class=\"token punctuation\">.</span>surface_area<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">54</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> cube<span class=\"token punctuation\">.</span>volume<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">27</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>注意：在上面的例子中，函数<code>super()</code>本身并不会帮你调用方法：你必须通过proxy object来调用方法。</p>\n</blockquote>\n<p>在<code>Cube</code>类中，你实现了两个方法：<code>.surface_area()</code>和<code>.volume()</code>。这两种计算方法都需要计算Cube的单个面积，因此，你可以通过<code>super()</code>函数来扩展面积计算的功能。</p>\n<p>同时，请注意到在<code>Cube</code>类中，并没有定义构造函数<code>__init__()</code>。首先，<code>Cube</code>继承了<code>Square</code>所有的特性和方法，并且，<code>Cube</code>需要定义的构造函数<code>__init__()</code>与<code>Square</code>的没有什么区别，因此，你不需要再为<code>Cube</code>类重复定义构造函数<code>__init__()</code>，<code>Cube</code>类会自动调用父类<code>Square</code>的构造函数<code>__init__()</code>。</p>\n<p>函数<code>super()</code>返回了一个父类的代理对象（delegate object），所以你可以直接调用方法：<code>super().area()</code>。</p>\n<p>这不仅使得我们不需要重写计算面积的代码，并且还可以在一个位置更改<code>.area()</code>的内部逻辑。对于一个父类有多个子类的情况，这特别有用。</p>\n<h2 id=\"深入理解super\"><a href=\"#深入理解super\" class=\"headerlink\" title=\"深入理解super()\"></a>深入理解super()</h2><h2 id=\"多重继承\"><a href=\"#多重继承\" class=\"headerlink\" title=\"多重继承\"></a>多重继承</h2><h3 id=\"多重继承简介\"><a href=\"#多重继承简介\" class=\"headerlink\" title=\"多重继承简介\"></a>多重继承简介</h3><h3 id=\"方法解析顺序（Method-Resolution-Order）\"><a href=\"#方法解析顺序（Method-Resolution-Order）\" class=\"headerlink\" title=\"方法解析顺序（Method Resolution Order）\"></a>方法解析顺序（Method Resolution Order）</h3><h3 id=\"多重继承的其它方法\"><a href=\"#多重继承的其它方法\" class=\"headerlink\" title=\"多重继承的其它方法\"></a>多重继承的其它方法</h3><h2 id=\"回顾\"><a href=\"#回顾\" class=\"headerlink\" title=\"回顾\"></a>回顾</h2>","site":{"data":{}},"excerpt":"<h1 id=\"super-函数介绍\"><a href=\"#super-函数介绍\" class=\"headerlink\" title=\"super()函数介绍\"></a>super()函数介绍</h1><blockquote>\n<p>注：本文翻译自<a href=\"https://realpython.com/python-super/\">Supercharge Your Classes With Python super()</a>。</p>\n</blockquote>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p><strong>简单来说，super()函数可以让你在子类中访问父类中的方法。</strong>通过在子类中调用super()函数，可以返回父类的一个对象，从而访问父类中的方法。</p>\n<p>什么情况下需要使用super()函数函数呢？</p>\n<p>通常情况下，使用super()函数主要是为了在父类的基础上，扩展子类的功能。这样，既避免了在子类中重写父类的代码，也可以减少对父类的代码更改。</p>","more":"<h2 id=\"单重继承\"><a href=\"#单重继承\" class=\"headerlink\" title=\"单重继承\"></a>单重继承</h2><p>如果你对面向对象的编程不是十分了解，那么你可能也不太了解<strong>继承</strong>（ <strong>inheritance</strong>）这个术语。在类中，继承是指一个类可以从另外一个类中派生或者继承其所有的属性和方法，而不用在重新实现。</p>\n<p>让我们来举例说明：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> length\n        self<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> width\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">area</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>length <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>width\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">perimeter</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>width\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Square</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> length\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">area</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>length <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>length\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">perimeter</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">4</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>length<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上例中，又两个相似的类：<code>Rectangle</code>和<code>Square</code>。</p>\n<p>你可以像下面这样来使用这两个类：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> square <span class=\"token operator\">=</span> Square<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> square<span class=\"token punctuation\">.</span>area<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">16</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> rectangle <span class=\"token operator\">=</span> Rectangle<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> rectangle<span class=\"token punctuation\">.</span>area<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">8</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在该例中，这两个形状有一种相关性：正方形是一种特殊的长方形。但是，以上代码中并没有体现出这种相关性，因此，代码存在重复的地方。</p>\n<p>通过使用继承，根据两种形状的关系，你可以减少代码的编写：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> length\n        self<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> width\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">area</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>length <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>width\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">perimeter</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>width\n\n<span class=\"token comment\"># Here we declare that the Square class inherits from the Rectangle class</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Square</span><span class=\"token punctuation\">(</span>Rectangle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里，你使用<code>super()</code>函数来调用<code>Rectangle</code>类中的初始化函数<code>__init__()</code>，这就使得你不用在<code>Square</code>类中编写重复的代码。在下面的使用中，<code>Square</code>类的核心功能仍然是与<code>Rectangle</code>类相同的：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> square <span class=\"token operator\">=</span> Square<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> square<span class=\"token punctuation\">.</span>area<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">16</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>在上例中，<code>Rectangle</code>是超类， <code>Square</code>是子类。</p>\n<p>由于<code>Square</code>和<code>Rectangle</code>类的初始化函数<code>__init__()</code>非常相似，所以你可以直接通过<code>super()</code>函数调用父类的初始化函数<code>__init__()</code>。通过用一个参数<code>length</code>来设置父类初始化函数的参数<code>lenght</code>和<code>width</code>，实现了<code>Square</code>的构造函数。</p>\n<blockquote>\n<p>笔记：当使用<code>Square</code>类时，例如定义<code>Square</code>类的实例时。如果<code>Square</code>类中没有定义析构函数<code>__init__()</code>，则使用父类<code>Rectangle</code>类中的析构函数。但是，如果<code>Square</code>类中定义了析构函数<code>__init__()</code>，则使用Square类自身的析构函数。</p>\n</blockquote>\n<p>当你使用<code>Square</code>类的时候，虽然没有为该类显示地编写实现属性和方法的代码，但是当访问<code>.area()</code>方法的时候，将会使用父类<code>Rectangle</code>的方法。因为<code>Square</code>类从父类<code>Rectangle</code>继承了<code>.area()</code>的方法。</p>\n<blockquote>\n<p>注意：如果想学习更多关于Python类和继承的内容，请参考文档：<a href=\"https://realpython.com/inheritance-composition-python/\">Inheritance and Composition: A Python OOP Guide</a> 和 <a href=\"https://realpython.com/python3-object-oriented-programming/\">Object-Oriented Programming (OOP) in Python 3</a>。</p>\n</blockquote>\n<h2 id=\"super-可以做什么\"><a href=\"#super-可以做什么\" class=\"headerlink\" title=\"super()可以做什么\"></a>super()可以做什么</h2><p>那么，函数<code>super()</code>可以为你在单重继承中做什么呢？</p>\n<p>与其它面向对象的语言相同，它可以让你在子类中调用父类的方法。但是，主要的用途是在子类中，进一步扩展继承自父类的方法的功能。</p>\n<p>在以下例子中，你将创建一个名为<code>Cube</code>的类，该类会从<code>Square</code>类继承<code>.area()</code>方法，并通过扩展<code>.area()</code>的功能来计算<code>Cube</code>实例的表面积和容量。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Square</span><span class=\"token punctuation\">(</span>Rectangle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Cube</span><span class=\"token punctuation\">(</span>Square<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">surface_area</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        face_area <span class=\"token operator\">=</span> <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>area<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> face_area <span class=\"token operator\">*</span> <span class=\"token number\">6</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">volume</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        face_area <span class=\"token operator\">=</span> <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>area<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> face_area <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>length<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>现在你已经创建好了类，下面让我们来计算一下边长为3的Cube的表面积和容量：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> cube <span class=\"token operator\">=</span> Cube<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> cube<span class=\"token punctuation\">.</span>surface_area<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">54</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> cube<span class=\"token punctuation\">.</span>volume<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">27</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>注意：在上面的例子中，函数<code>super()</code>本身并不会帮你调用方法：你必须通过proxy object来调用方法。</p>\n</blockquote>\n<p>在<code>Cube</code>类中，你实现了两个方法：<code>.surface_area()</code>和<code>.volume()</code>。这两种计算方法都需要计算Cube的单个面积，因此，你可以通过<code>super()</code>函数来扩展面积计算的功能。</p>\n<p>同时，请注意到在<code>Cube</code>类中，并没有定义构造函数<code>__init__()</code>。首先，<code>Cube</code>继承了<code>Square</code>所有的特性和方法，并且，<code>Cube</code>需要定义的构造函数<code>__init__()</code>与<code>Square</code>的没有什么区别，因此，你不需要再为<code>Cube</code>类重复定义构造函数<code>__init__()</code>，<code>Cube</code>类会自动调用父类<code>Square</code>的构造函数<code>__init__()</code>。</p>\n<p>函数<code>super()</code>返回了一个父类的代理对象（delegate object），所以你可以直接调用方法：<code>super().area()</code>。</p>\n<p>这不仅使得我们不需要重写计算面积的代码，并且还可以在一个位置更改<code>.area()</code>的内部逻辑。对于一个父类有多个子类的情况，这特别有用。</p>\n<h2 id=\"深入理解super\"><a href=\"#深入理解super\" class=\"headerlink\" title=\"深入理解super()\"></a>深入理解super()</h2><h2 id=\"多重继承\"><a href=\"#多重继承\" class=\"headerlink\" title=\"多重继承\"></a>多重继承</h2><h3 id=\"多重继承简介\"><a href=\"#多重继承简介\" class=\"headerlink\" title=\"多重继承简介\"></a>多重继承简介</h3><h3 id=\"方法解析顺序（Method-Resolution-Order）\"><a href=\"#方法解析顺序（Method-Resolution-Order）\" class=\"headerlink\" title=\"方法解析顺序（Method Resolution Order）\"></a>方法解析顺序（Method Resolution Order）</h3><h3 id=\"多重继承的其它方法\"><a href=\"#多重继承的其它方法\" class=\"headerlink\" title=\"多重继承的其它方法\"></a>多重继承的其它方法</h3><h2 id=\"回顾\"><a href=\"#回顾\" class=\"headerlink\" title=\"回顾\"></a>回顾</h2>"},{"title":"面向对象的编程","date":"2022-02-20T07:49:45.000Z","img":"/medias/featureimages/30.jpg","_content":"\n# 面向对象的编程\n\n> 注：本文翻译自[Object-Oriented Programming (OOP) in Python 3 – Real Python](https://realpython.com/python3-object-oriented-programming/)。\n\n**面向对象的编程**（**Object-oriented programming** ）是一种构建程序的方式，这种方式将相关的属性和行为绑定到个别的对象上。通过本文，你将了解到关于面向对象编程的基础知识。\n\n理论上来说，对象就好像是一个系统的组件。如果将一个程序想象成一家工厂的各种装配线。在装配线上的每一个环境，系统的部件都会对原材料进行加工处理，最后，原材料被加工成一个产品。\n\n一个对象包含数据（就像是装配线上需要处理的原材料）和行为（装配线上的组件执行的操作）。\n\n<!-- more -->\n\n## 什么是面向对象的编程\n\n**面向对象的编程**（**Object-oriented programming** ）是一种编程的范式。它提供了一种构建程序的方式，这种方式将相关的属性和行为绑定到个别的对象上。\n\n例如，一个对象可以代表一个人，这个人拥有属性，如姓名，年龄和地址，以及拥有行为（方法），例如行走，讲话，呼吸和奔跑。或者一个对象也可以代表一封邮寄，这封邮件拥有属性，如收件人列表，主题和正文，以及拥有行为，例如添加附件和发送。\n\n换一种说法，面向对象的编程用一种建模的方法来描述现实世界的事物，例如汽车，以及相关的事务，如工厂和工人，学生和老师等等。面向对象的编程通过建模的方式，将现实世界的个体描述为软件的对象，这些对象拥有相关的数据和哈数。\n\n另外一种常见的编程方式是面向过程的编程。这种方式就像是一本菜谱，提供了一系列的步骤，以函数和代码块的方式，按顺序完成任务。\n\n关键点是，对象是面向对象编程的核心，对象不仅代表数据，同时也代表了程序的整体结构。\n\n## 定义一个类\n\n基础的数据结构，如数字、字符串和列表，主要分别用来表示简单的信息，例如苹果的加个，诗的名称或者你喜欢的颜色。但是，如果你想要表示更为复杂的信息该怎么办呢？\n\n例如，假设你想要记录组织的员工信息。你需要存储每一个员工的基本信息，例如他们的名字、年龄、职位和工作年限。\n\n一种方式是通过列表来表示每一个员工的信息：\n\n```python\nkirk = [\"James Kirk\", 34, \"Captain\", 2265]\nspock = [\"Spock\", 35, \"Science Officer\", 2254]\nmccoy = [\"Leonard McCoy\", \"Chief Medical Officer\", 2266]\n```\n\n如果使用以上这种方式，会存在一些问题。\n\n首先，它使得代码文件难以管理。如果你定义了`kirk`列表以后，隔了很多行才引用`kirk[0]`，你还会记得索引值为0的列表元素对应的是员工的名字吗？\n\n其次，如果每一个员工在列表中的信息数量并不相同，就会导致代码运行出错。以上例子中，`mccoy`列表缺少年龄的信息，因此`mccoy[1]`返回的是\"Chief Medical Officer\"，而不是Dr. McCoy的年龄。\n\n一种比较好的解决方式是使用类。\n\n### 类和实例\n\n类用于创建用户自己定义的数据结构。类定义的函数成为**方法**（**methods**）。方法定义了对象可以对数据所作的操作。\n\n本文中，你将创建一个名为`Dog`的类，该类将用来存储狗的信息以及行为。\n\n一个类本身并不包含任何数据，而是一种蓝图，用来定义事物。`Dog`类定义了狗的名字和年龄，但是并没有包含某一条狗的具体名字和年龄。\n\n既然类是一种蓝图，那么实例就是根据蓝图创建的对象，包含实际的数据。一个`Dog`类的实例不再是一种蓝图，它是一只实际的狗，有名字，例如Miles，年龄是4岁。\n\n换一种说法，一个类就像是一张空白的表格或者问卷表。一个实例就是一张已经填写了信息的表格。就像许多人都可以根据自己的信息来填写表格，根据同一个类，也可以创建许多实例。\n\n### 如何定义一个类\n\n首先定义一个类，需要以关键字`class`开头，然后后面是类的名称和冒号。换行后，下面缩进的内容都属于类的正文。\n\n下面以`Dog`类为例：\n\n```python\nclass Dog:\n    pass\n```\n\n`Dog`类的正文只有一个声明：关键字`pass`。 `pass`不执行任何操作，只是一个占位符。在没有为类写任何代码的情况下，使用`pass`可以避免程序在运行时出错。\n\n>注意：类的名称通常是首字母大写。例如，定义某一种狗的类，如 Jack Russell Terrier，那么类的名称就可以写为`JackRussellTerrier`。\n\n目前，`Dog`类并没有任何属性，我们可以为它定义一些属性，例如名字、年龄、衣服颜色和品种。为了简单起见，我们只使用名字和年龄。\n\n类的属性通常都是通过方法`.__init__()`来定义。每次创建一个`Dog`对象的时候，`.__init__()`就会通过为对象的属性赋值，来设置对象的初始状态。因此，`.__init__()`为类的每一个实例完成了初始化。\n\n你可以为`.__init__()`设置任意数量的参数，但是第一个参数都是`self`。当一个类的实例被创建的时候，改实例自动被传递给`.__init__()`中的`self`参数，这样才能为对象定义新的属性。\n\n让我们更改一下`Dog`类的`.__init__()`方法，创建`.name`和`.age`属性(attributes)。\n\n```python\nclass Dog:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n```\n\n注意到`.__init__()`方法缩进了4个空格，而方法的正文缩进了8个空格。空格缩进十分重要，通过空格缩进，Python才能知道`.__init__()`方法属于`Dog`类。\n\n在`.__init__()`的正文中，有2个声明使用了`self`变量：\n\n1. `self.name = name`创建了一个名为`name`的属性，并用参数`name`为它赋值。\n2. `self.age = age`创建了一个名为`age`的属性，并用参数`age`为它赋值。\n\n在`.__init__()`中创建的属性称为**实例属性**（**Instance attributes**）。实例属性的值只属于类的某一个实例。所有`Dog`对象都有名字和年龄，但是每一个实例的名字和年龄值是不相同的。\n\n另一方面，**类的属性**（**class attributes**）在所有的类的实例中，都拥有相同的属性值。你可以在`.__init__()`以外的位置定义一个变量并为其赋值，该变量就是类的属性。\n\n例如，下面的`Dog`类中有一个类的属性`species`，值为\"Canis familiaris\"：\n\n```python\nclass Dog:\n    # Class attribute\n    species = \"Canis familiaris\"\n\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n```\n\n类的属性直接定义在类的名称下方第一行，并缩进4格。它们必须设置一个初始值。当创建类的实例的时候，类的属性被自动创建，并分配初始值。\n\n当需要为每一个类的实例赋予相同属性值的时候，可以使用**类的属性**，当需要为每一个类的实例赋予不同属性值的时候，可以使用**实例属性**。\n\n## 实例化一个对象\n\n打开IDLE的交互窗口，输入以下内容：\n\n```python\n>>> class Dog:\n...     pass\n```\n\n这样就创建了一个`Dog`类，但是这个类既没有属性也没有方法。\n\n从一个类创建一个新的对象，成为**实例化**(**instantiating**)一个对象。通过输入类的名称并加上双括号，你可以实例化一个新的`Dog`对象：\n\n```python\n>>> Dog()\n<__main__.Dog object at 0x106702d30>\n```\n\n现在，你在`0x106702d30`有一个新的`Dog`对象。`0x106702d30`代表的是内存地址。在不同的电脑上，该内存地址的值是不同的。\n\n现在，实例化第二个对象：\n\n```python\n>>> Dog()\n<__main__.Dog object at 0x0004ccc90>\n```\n\n这个新的`Dog`实例存储在完全不同的内存地址。因为这是一个全新的实例，与之前创建的第一个实例完全不同。\n\n我们可以通过以下方式来判断两个实例是否相同：\n\n```python\n>>> a = Dog()\n>>> b = Dog()\n>>> a == b\nFalse\n```\n\n通过以上代码，我们可以看到，虽然a和b都是通过`Dog`类创建的实例，但是他们代表了完全不同的对象。\n\n### 类和实例属性\n\n现在，创建一个`Dog`类，该类包含一个类的属性`.species`以及两个实例属性`.name`和`.age`。\n\n```python\n>>> class Dog:\n...     species = \"Canis familiaris\"\n...     def __init__(self, name, age):\n...         self.name = name\n...         self.age = age\n```\n\n为了实例化这个类，你需要为name和age提供参数值。否则，Python会抛出一个`TypeError`异常：\n\n```python\n>>> Dog()\nTraceback (most recent call last):\n  File \"<pyshell#6>\", line 1, in <module>\n    Dog()\nTypeError: __init__() missing 2 required positional arguments: 'name' and 'age'\n```\n\n通过在类名后面的括号中填入值，可以将参数传递给name和age。\n\n```python\n>>> buddy = Dog(\"Buddy\", 9)\n>>> miles = Dog(\"Miles\", 4)\n```\n\n以上创建了两个`Dog`实例，一个是名叫Buddy的9岁小狗，另一个是名叫Miles的4岁小狗。\n\n`Dog`类的`.__init__()`方法有三个参数，为什么在上面的例子中只使用了2个参数呢？\n\n当你实例化一个`Dog`对象的时候，Python会创建一个新的实例，并将它传递给`.__init__()`的第一个参数。这样就移除了`self`参数，所以你只需要担心`name`和`age`参数。\n\n当你创建了`Dog`实例后，你就可以使用**dot notation**访问实例的属性了。\n\n```python\n>>> buddy.name\n'Buddy'\n>>> buddy.age\n9\n\n>>> miles.name\n'Miles'\n>>> miles.age\n4\n```\n\n你还可以用相同的访问访问类的属性：\n\n```python\n>>> buddy.species\n'Canis familiaris'\n```\n\n使用类来组织数据的好处之一，就是可以确保实例拥有预期的属性。所有的`Dog`实例都有`.species`, `.name`和`.age`属性，所有你确定当访问这些属性的时候，总是能获取到相应的值。\n\n虽然类能确保这些属性总是存在，但是相应的值却可以动态改变：\n\n```python\n>>> buddy.age = 10\n>>> buddy.age\n10\n\n>>> miles.species = \"Felis silvestris\"\n>>> miles.species\n'Felis silvestris'\n```\n\n在上面的例子中，你将`buddy`对象的属性`.age`更改为10，然后你将`miles`对象的属性`.species`更改为猫的品种\"Felis silvestris\"。虽然这样使得Miles看起来像是一只奇怪的狗，但是这对Python而言是有效的。\n\n这里的关键点是，默认情况下，自定义对象是可变的(mutable)的。如果一个对象可以被动态更改，那么它就是可变的(mutable)。例如，列表和字典都是可变的，但是字符串和元组是不可变的(immutable)。\n\n### 实例方法\n\n**实例方法**(**Instance methods**)是在类中定义的一种函数，这种函数只能被类的实例调用。跟`.__init__()`相同，实例方法的第一个参数都是`self`。\n\n在IDLE打开一个新的文本编辑器，然后输入以下`Dog`类：\n\n```python\nclass Dog:\n    species = \"Canis familiaris\"\n\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    # Instance method\n    def description(self):\n        return f\"{self.name} is {self.age} years old\"\n\n    # Another instance method\n    def speak(self, sound):\n        return f\"{self.name} says {sound}\"\n```\n\n该`Dog`类有两个实例方法：\n\n1. **`.description()`**返回一个字符串，用于显示狗的名字和年龄。\n2. **`.speak()`**有一个`sound`参数，返回一个字符串，用于显示狗的名字和吼叫声。\n\n将以上代码保存到文件`dog.py`，然后按F5运行程序。\n\n然后打开交互式窗口，输入以下实例方法：\n\n```python\n>>> miles = Dog(\"Miles\", 4)\n\n>>> miles.description()\n'Miles is 4 years old'\n\n>>> miles.speak(\"Woof Woof\")\n'Miles says Woof Woof'\n\n>>> miles.speak(\"Bow Wow\")\n'Miles says Bow Wow'\n```\n\n在以上`Dog`类中，`.description()`返回了关于实例miles的信息。当你写类的时候，最好能有一个方法可以用来返回关于类的实例的说明信息。虽然`.description()`返回了实例的描述信息，但着并不是最佳的Python方式。\n\n当你创建一个列表对象的时候，你可以用`print()`来显示以下内容：\n\n```python\n>>> names = [\"Fletcher\", \"David\", \"Dan\"]\n>>> print(names)\n['Fletcher', 'David', 'Dan']\n```\n\n如果我们用`print()`来打印miles对象，会发生什么呢：\n\n```python\n>>> print(miles)\n<__main__.Dog object at 0x00aeff70>\n```\n\n当你`print(miles)`的时候，你看到的是一串很奇怪的字符串，miles是一个`Dog`的对象，内存地址为0x00aeff70。这些信息并不是很有用。你可以通过定义一个特殊的实例方法`.__str__()`来打印出更有用的信息。\n\n下面，将`.description()`方法的名字更改为`.__str__()`:\n\n```python\nclass Dog:\n    # Leave other parts of Dog class as-is\n\n    # Replace .description() with __str__()\n    def __str__(self):\n        return f\"{self.name} is {self.age} years old\"\n```\n\n保存文件然后按F5。现在，当你`print(miles)`的时候，你会得到更友好的输出内容：\n\n```python\n>>> miles = Dog(\"Miles\", 4)\n>>> print(miles)\n'Miles is 4 years old'\n```\n\n像`.__init__()`和`.__str__()`这样的方法被称为**dunder methods**，因为他们的名字都是以双下划线开始，并以双下划线结尾。在Python中，有许多**dunder methods**可以用来定制类。虽然对于初学者来说，这些内容有点深奥，但是在Python中，**dunder methods**对于掌握面向对象的编程很重要。\n\n## 类的继承\n\n类的继承是指一个类可以继承另一个类的所有特性和方法。新创建的类成为子类，被继承的类成为父类。\n\n子类可以重写或者扩展父类的特性和方法。也就是说，子类既可以继承父类的所有特性和方法，也可以定义自己独有的特性性和方法。\n\n虽然这个比喻不是十分恰当，类的继承有点类似于人类的遗传。\n\n你可能继承了你母亲头发的颜色，这是你出生时的特性。但是，你决定将头发染成紫色，由于你母亲的头发不是紫色，所有可以说你重新定义(**overridden** )了头发的特性。\n\n### 遛狗公园的例子\n\n假设你正在一个公园中遛狗。在这个公园里，有许多不同品种的狗，正在从事于各种不同的行为。\n\n假设你想用Python类来为遛狗的公园建立一个模型。之前的`Dog`类可以通过狗的姓名和年龄来区分不同的狗，但是无法通过狗的品种来区分。\n\n你可以在`Dog`类中添加`.breed`的特性：\n\n```python\nclass Dog:\n    species = \"Canis familiaris\"\n\n    def __init__(self, name, age, breed):\n        self.name = name\n        self.age = age\n        self.breed = breed\n```\n\n在以上类中，之所以省略了方法的定义，是因为与本章需要讨论的内容无关。\n\n通过点击F5保存并运行文件，你可以在交互式窗口中，创建各种不同狗的实例：\n\n```python\n>>> miles = Dog(\"Miles\", 4, \"Jack Russell Terrier\")\n>>> buddy = Dog(\"Buddy\", 9, \"Dachshund\")\n>>> jack = Dog(\"Jack\", 3, \"Bulldog\")\n>>> jim = Dog(\"Jim\", 5, \"Bulldog\")\n```\n\n不同品种的狗通常有不同的行为。例如，牛头犬的叫声比较低，声音类似于`woof`，但是腊肠犬的叫声比较高，声音类似于`yap`。\n\n使用`Dog`类的时候，你必须为`.speak()`方法提供一个声音的参数`sound`，每次调用`Dog`实例的时候如下：\n\n```python\n>>> buddy.speak(\"Yap\")\n'Buddy says Yap'\n\n>>> jim.speak(\"Woof\")\n'Jim says Woof'\n\n>>> jack.speak(\"Woof\")\n'Jack says Woof'\n```\n\n每次调用`.speak()`方法的时候，都要传递一个参数，这样既显得重复，又不太方便。此外，每次传递参数的时候，还需要根据狗的品种`.breed`来决定对应的声音参数。\n\n你可以通过为每一种狗创建一个子类的方法，来简化以上问题。这使得你可以扩展子类从父类继承的方法，例如为`.speak()`指定默认的参数。\n\n### 父类和子类\n\n接下来我们为三种不同品种的狗各自创建一个子类：Jack Russell Terrier, Dachshund, and Bulldog:\n\n```python\nclass Dog:\n    species = \"Canis familiaris\"\n\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def __str__(self):\n        return f\"{self.name} is {self.age} years old\"\n\n    def speak(self, sound):\n        return f\"{self.name} says {sound}\"\n```\n\n创建子类的时候，你需要为子类定义一个自己的名称，然后在括号中填写父类的名称：\n\n```python\nclass JackRussellTerrier(Dog):\n    pass\n\nclass Dachshund(Dog):\n    pass\n\nclass Bulldog(Dog):\n    pass\n```\n\n现在你可以在交互式窗口中通过以下方式创建各种实例：\n\n```python\n>>> miles = JackRussellTerrier(\"Miles\", 4)\n>>> buddy = Dachshund(\"Buddy\", 9)\n>>> jack = Bulldog(\"Jack\", 3)\n>>> jim = Bulldog(\"Jim\", 5)\n```\n\n子类的实例继承了父类所有的特性和方法：\n\n```python\n>>> miles.species\n'Canis familiaris'\n\n>>> buddy.name\n'Buddy'\n\n>>> print(jack)\nJack is 3 years old\n\n>>> jim.speak(\"Woof\")\n'Jim says Woof'\n```\n\n如果要判断某一个对象属于哪一个类，你可以使用内建函数`type()`:\n\n```python\n>>> type(miles)\n<class '__main__.JackRussellTerrier'>\n```\n\n如果你还想判断`miles`是否是`Dog`类的实例，可以i使用内建函数`isinstance()`:\n\n```python\n>>> isinstance(miles, Dog)\nTrue\n```\n\n注意到`isinstance`需要两个参数，一个对象和一个类。以上例子中，`isinstance()`检查 `miles`是否是`Dog`类的使用，返回值为`True`。\n\n对象`miles`，`buddy`，`jack`和`jim`都是`Dog`类的实例，但是`miles`不是`Bulldog`的实例，`jack`不是`Dachshund`的实例。\n\n```python\n>>> isinstance(miles, Bulldog)\nFalse\n\n>>> isinstance(jack, Dachshund)\nFalse\n```\n\n概而言之，所有子类的对象，同时也是父类的对象，但是它们并不一定是其它子类的对象。\n\n### 扩展父类的功能\n\n由于不同品种的狗有不同的叫声，如果你想要为每一种狗各自的`.speak()`方法指定一个默认的`sound`参数值，你可以在各自的子类中重新定义`.speak()`方法。\n\n为了覆盖父类中的某一个方法，你需要在子类中定义相同名字的方法。下面以`JackRussellTerrier`子类为例：\n\n```python\nclass JackRussellTerrier(Dog):\n    def speak(self, sound=\"Arf\"):\n        return f\"{self.name} says {sound}\"\n```\n\n通过在子类`JackRussellTerrier`中重新定义方法`.speak()`后，现在JackRussellTerrier品种的狗有了一种默认的叫声“Arf”。\n\n现在，如果你可以通过`JackRussellTerrier`的实例调用`.speak()`方法，并且不传递任何参数：\n\n```python\n>>> miles = JackRussellTerrier(\"Miles\", 4)\n>>> miles.speak()\n'Miles says Arf'\n```\n\n有时候，有些狗在愤怒的时候会发出不同的叫声，这是你仍然可以调用`.speak()`方法，并传递相应的参数值：\n\n```python\n>>> miles.speak(\"Grrr\")\n'Miles says Grrr'\n```\n\n请记住，如果对父类做了更改，会自动传递给子类。但是，如果子类已经重新定义了父类的特性或者方法，那么父类的更改并不会传递给子类。\n\n例如，在`Dog`类中，更改`.speak()`中的返回字符串内容，将`says`更改为`barks`:\n\n```python\nclass Dog:\n    # Leave other attributes and methods as they are\n\n    # Change the string returned by .speak()\n    def speak(self, sound):\n        return f\"{self.name} barks: {sound}\"\n```\n\n现在，你创建一个新的`Bulldog`实例，名称为`jim`，`jim.speak()`会返回新的字符串：\n\n```python\n>>> jim = Bulldog(\"Jim\", 5)\n>>> jim.speak(\"Woof\")\n'Jim barks: Woof'\n```\n\n但是，如果调用`JackRussellTerrier`实例的`.speak()`方法，会发现并不会返回新的字符串：\n\n```python\n>>> miles = JackRussellTerrier(\"Miles\", 4)\n>>> miles.speak()\n'Miles says Arf'\n```\n\n有时候，可能需要完全覆盖父类的方法，但是在这个例子中，我们想让子类`JackRussellTerrier`继续使用父类中`.speak()`方法返回的字符串格式。\n\n为了实现这个目的，你仍然需要在子类`JackRussellTerrier`中定义`.speak()`方法。但是，你在子类的`.speak()`方法中需要调用父类的`.speak()`方法，并且将相应的参数传递给父类的`.speak()`方法。\n\n在子类中的某一个方法中，可以使用`super()`来访问父类：\n\n```python\nclass JackRussellTerrier(Dog):\n    def speak(self, sound=\"Arf\"):\n        return super().speak(sound)\n```\n\n当你在子类`JackRussellTerrier`中调用`super().speak(sound)`的时候，Python会在父类`Dog`中查找`.speak()`方法，然后调用并传递参数`sound`。\n\n下面，我们可以测试一下新定义的子类`JackRussellTerrier`：\n\n```python\n>>> miles = JackRussellTerrier(\"Miles\", 4)\n>>> miles.speak()\n'Miles barks: Arf'\n```\n\n现在，当你调用`miles.speak()`的时候，你可以看到返回的结果是`Dog`类中定义的格式。\n\n> 注意：在上面的例子中，类的继承结构非常简单。`JackRussellTerrier`子类有一个父类`Dog`。在实际的应用场景中，类的结构十分复杂。\n>\n> `super()`不仅只是在父类中查找某个方法或者特性，它还可以在整个类的结构中查找匹配的类和特性。如果你使用`super()`的时候不太小心，容易导致意外的结果。\n\n\n\n## 总结\n\n通过本指南，你学到了Python中面向对象编程的知识。大多数编程语言，如Java, C#和C++等都是基于面向对象编程的原理，所以本指南的知识同样适用于以上语言。\n\n在本指南中，你学到了以下内容：\n\n- 定义一个类\n- 从一个类实例化一个对象\n- 使用特性和方法来定义对象的属性和行为\n- 通过继承，从父类创建一个子类\n- 使用`super()`访问父类的某一个方法\n- 使用`isinstance()`判断一个对象是否继承于另外一个类\n","source":"_posts/python/面向对象的编程.md","raw":"---\ntitle: 面向对象的编程\ndate: 2022-02-20 15:49:45\ntags: \n - python-intermediate\ncategories: \n - Python\nimg: /medias/featureimages/30.jpg\n---\n\n# 面向对象的编程\n\n> 注：本文翻译自[Object-Oriented Programming (OOP) in Python 3 – Real Python](https://realpython.com/python3-object-oriented-programming/)。\n\n**面向对象的编程**（**Object-oriented programming** ）是一种构建程序的方式，这种方式将相关的属性和行为绑定到个别的对象上。通过本文，你将了解到关于面向对象编程的基础知识。\n\n理论上来说，对象就好像是一个系统的组件。如果将一个程序想象成一家工厂的各种装配线。在装配线上的每一个环境，系统的部件都会对原材料进行加工处理，最后，原材料被加工成一个产品。\n\n一个对象包含数据（就像是装配线上需要处理的原材料）和行为（装配线上的组件执行的操作）。\n\n<!-- more -->\n\n## 什么是面向对象的编程\n\n**面向对象的编程**（**Object-oriented programming** ）是一种编程的范式。它提供了一种构建程序的方式，这种方式将相关的属性和行为绑定到个别的对象上。\n\n例如，一个对象可以代表一个人，这个人拥有属性，如姓名，年龄和地址，以及拥有行为（方法），例如行走，讲话，呼吸和奔跑。或者一个对象也可以代表一封邮寄，这封邮件拥有属性，如收件人列表，主题和正文，以及拥有行为，例如添加附件和发送。\n\n换一种说法，面向对象的编程用一种建模的方法来描述现实世界的事物，例如汽车，以及相关的事务，如工厂和工人，学生和老师等等。面向对象的编程通过建模的方式，将现实世界的个体描述为软件的对象，这些对象拥有相关的数据和哈数。\n\n另外一种常见的编程方式是面向过程的编程。这种方式就像是一本菜谱，提供了一系列的步骤，以函数和代码块的方式，按顺序完成任务。\n\n关键点是，对象是面向对象编程的核心，对象不仅代表数据，同时也代表了程序的整体结构。\n\n## 定义一个类\n\n基础的数据结构，如数字、字符串和列表，主要分别用来表示简单的信息，例如苹果的加个，诗的名称或者你喜欢的颜色。但是，如果你想要表示更为复杂的信息该怎么办呢？\n\n例如，假设你想要记录组织的员工信息。你需要存储每一个员工的基本信息，例如他们的名字、年龄、职位和工作年限。\n\n一种方式是通过列表来表示每一个员工的信息：\n\n```python\nkirk = [\"James Kirk\", 34, \"Captain\", 2265]\nspock = [\"Spock\", 35, \"Science Officer\", 2254]\nmccoy = [\"Leonard McCoy\", \"Chief Medical Officer\", 2266]\n```\n\n如果使用以上这种方式，会存在一些问题。\n\n首先，它使得代码文件难以管理。如果你定义了`kirk`列表以后，隔了很多行才引用`kirk[0]`，你还会记得索引值为0的列表元素对应的是员工的名字吗？\n\n其次，如果每一个员工在列表中的信息数量并不相同，就会导致代码运行出错。以上例子中，`mccoy`列表缺少年龄的信息，因此`mccoy[1]`返回的是\"Chief Medical Officer\"，而不是Dr. McCoy的年龄。\n\n一种比较好的解决方式是使用类。\n\n### 类和实例\n\n类用于创建用户自己定义的数据结构。类定义的函数成为**方法**（**methods**）。方法定义了对象可以对数据所作的操作。\n\n本文中，你将创建一个名为`Dog`的类，该类将用来存储狗的信息以及行为。\n\n一个类本身并不包含任何数据，而是一种蓝图，用来定义事物。`Dog`类定义了狗的名字和年龄，但是并没有包含某一条狗的具体名字和年龄。\n\n既然类是一种蓝图，那么实例就是根据蓝图创建的对象，包含实际的数据。一个`Dog`类的实例不再是一种蓝图，它是一只实际的狗，有名字，例如Miles，年龄是4岁。\n\n换一种说法，一个类就像是一张空白的表格或者问卷表。一个实例就是一张已经填写了信息的表格。就像许多人都可以根据自己的信息来填写表格，根据同一个类，也可以创建许多实例。\n\n### 如何定义一个类\n\n首先定义一个类，需要以关键字`class`开头，然后后面是类的名称和冒号。换行后，下面缩进的内容都属于类的正文。\n\n下面以`Dog`类为例：\n\n```python\nclass Dog:\n    pass\n```\n\n`Dog`类的正文只有一个声明：关键字`pass`。 `pass`不执行任何操作，只是一个占位符。在没有为类写任何代码的情况下，使用`pass`可以避免程序在运行时出错。\n\n>注意：类的名称通常是首字母大写。例如，定义某一种狗的类，如 Jack Russell Terrier，那么类的名称就可以写为`JackRussellTerrier`。\n\n目前，`Dog`类并没有任何属性，我们可以为它定义一些属性，例如名字、年龄、衣服颜色和品种。为了简单起见，我们只使用名字和年龄。\n\n类的属性通常都是通过方法`.__init__()`来定义。每次创建一个`Dog`对象的时候，`.__init__()`就会通过为对象的属性赋值，来设置对象的初始状态。因此，`.__init__()`为类的每一个实例完成了初始化。\n\n你可以为`.__init__()`设置任意数量的参数，但是第一个参数都是`self`。当一个类的实例被创建的时候，改实例自动被传递给`.__init__()`中的`self`参数，这样才能为对象定义新的属性。\n\n让我们更改一下`Dog`类的`.__init__()`方法，创建`.name`和`.age`属性(attributes)。\n\n```python\nclass Dog:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n```\n\n注意到`.__init__()`方法缩进了4个空格，而方法的正文缩进了8个空格。空格缩进十分重要，通过空格缩进，Python才能知道`.__init__()`方法属于`Dog`类。\n\n在`.__init__()`的正文中，有2个声明使用了`self`变量：\n\n1. `self.name = name`创建了一个名为`name`的属性，并用参数`name`为它赋值。\n2. `self.age = age`创建了一个名为`age`的属性，并用参数`age`为它赋值。\n\n在`.__init__()`中创建的属性称为**实例属性**（**Instance attributes**）。实例属性的值只属于类的某一个实例。所有`Dog`对象都有名字和年龄，但是每一个实例的名字和年龄值是不相同的。\n\n另一方面，**类的属性**（**class attributes**）在所有的类的实例中，都拥有相同的属性值。你可以在`.__init__()`以外的位置定义一个变量并为其赋值，该变量就是类的属性。\n\n例如，下面的`Dog`类中有一个类的属性`species`，值为\"Canis familiaris\"：\n\n```python\nclass Dog:\n    # Class attribute\n    species = \"Canis familiaris\"\n\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n```\n\n类的属性直接定义在类的名称下方第一行，并缩进4格。它们必须设置一个初始值。当创建类的实例的时候，类的属性被自动创建，并分配初始值。\n\n当需要为每一个类的实例赋予相同属性值的时候，可以使用**类的属性**，当需要为每一个类的实例赋予不同属性值的时候，可以使用**实例属性**。\n\n## 实例化一个对象\n\n打开IDLE的交互窗口，输入以下内容：\n\n```python\n>>> class Dog:\n...     pass\n```\n\n这样就创建了一个`Dog`类，但是这个类既没有属性也没有方法。\n\n从一个类创建一个新的对象，成为**实例化**(**instantiating**)一个对象。通过输入类的名称并加上双括号，你可以实例化一个新的`Dog`对象：\n\n```python\n>>> Dog()\n<__main__.Dog object at 0x106702d30>\n```\n\n现在，你在`0x106702d30`有一个新的`Dog`对象。`0x106702d30`代表的是内存地址。在不同的电脑上，该内存地址的值是不同的。\n\n现在，实例化第二个对象：\n\n```python\n>>> Dog()\n<__main__.Dog object at 0x0004ccc90>\n```\n\n这个新的`Dog`实例存储在完全不同的内存地址。因为这是一个全新的实例，与之前创建的第一个实例完全不同。\n\n我们可以通过以下方式来判断两个实例是否相同：\n\n```python\n>>> a = Dog()\n>>> b = Dog()\n>>> a == b\nFalse\n```\n\n通过以上代码，我们可以看到，虽然a和b都是通过`Dog`类创建的实例，但是他们代表了完全不同的对象。\n\n### 类和实例属性\n\n现在，创建一个`Dog`类，该类包含一个类的属性`.species`以及两个实例属性`.name`和`.age`。\n\n```python\n>>> class Dog:\n...     species = \"Canis familiaris\"\n...     def __init__(self, name, age):\n...         self.name = name\n...         self.age = age\n```\n\n为了实例化这个类，你需要为name和age提供参数值。否则，Python会抛出一个`TypeError`异常：\n\n```python\n>>> Dog()\nTraceback (most recent call last):\n  File \"<pyshell#6>\", line 1, in <module>\n    Dog()\nTypeError: __init__() missing 2 required positional arguments: 'name' and 'age'\n```\n\n通过在类名后面的括号中填入值，可以将参数传递给name和age。\n\n```python\n>>> buddy = Dog(\"Buddy\", 9)\n>>> miles = Dog(\"Miles\", 4)\n```\n\n以上创建了两个`Dog`实例，一个是名叫Buddy的9岁小狗，另一个是名叫Miles的4岁小狗。\n\n`Dog`类的`.__init__()`方法有三个参数，为什么在上面的例子中只使用了2个参数呢？\n\n当你实例化一个`Dog`对象的时候，Python会创建一个新的实例，并将它传递给`.__init__()`的第一个参数。这样就移除了`self`参数，所以你只需要担心`name`和`age`参数。\n\n当你创建了`Dog`实例后，你就可以使用**dot notation**访问实例的属性了。\n\n```python\n>>> buddy.name\n'Buddy'\n>>> buddy.age\n9\n\n>>> miles.name\n'Miles'\n>>> miles.age\n4\n```\n\n你还可以用相同的访问访问类的属性：\n\n```python\n>>> buddy.species\n'Canis familiaris'\n```\n\n使用类来组织数据的好处之一，就是可以确保实例拥有预期的属性。所有的`Dog`实例都有`.species`, `.name`和`.age`属性，所有你确定当访问这些属性的时候，总是能获取到相应的值。\n\n虽然类能确保这些属性总是存在，但是相应的值却可以动态改变：\n\n```python\n>>> buddy.age = 10\n>>> buddy.age\n10\n\n>>> miles.species = \"Felis silvestris\"\n>>> miles.species\n'Felis silvestris'\n```\n\n在上面的例子中，你将`buddy`对象的属性`.age`更改为10，然后你将`miles`对象的属性`.species`更改为猫的品种\"Felis silvestris\"。虽然这样使得Miles看起来像是一只奇怪的狗，但是这对Python而言是有效的。\n\n这里的关键点是，默认情况下，自定义对象是可变的(mutable)的。如果一个对象可以被动态更改，那么它就是可变的(mutable)。例如，列表和字典都是可变的，但是字符串和元组是不可变的(immutable)。\n\n### 实例方法\n\n**实例方法**(**Instance methods**)是在类中定义的一种函数，这种函数只能被类的实例调用。跟`.__init__()`相同，实例方法的第一个参数都是`self`。\n\n在IDLE打开一个新的文本编辑器，然后输入以下`Dog`类：\n\n```python\nclass Dog:\n    species = \"Canis familiaris\"\n\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    # Instance method\n    def description(self):\n        return f\"{self.name} is {self.age} years old\"\n\n    # Another instance method\n    def speak(self, sound):\n        return f\"{self.name} says {sound}\"\n```\n\n该`Dog`类有两个实例方法：\n\n1. **`.description()`**返回一个字符串，用于显示狗的名字和年龄。\n2. **`.speak()`**有一个`sound`参数，返回一个字符串，用于显示狗的名字和吼叫声。\n\n将以上代码保存到文件`dog.py`，然后按F5运行程序。\n\n然后打开交互式窗口，输入以下实例方法：\n\n```python\n>>> miles = Dog(\"Miles\", 4)\n\n>>> miles.description()\n'Miles is 4 years old'\n\n>>> miles.speak(\"Woof Woof\")\n'Miles says Woof Woof'\n\n>>> miles.speak(\"Bow Wow\")\n'Miles says Bow Wow'\n```\n\n在以上`Dog`类中，`.description()`返回了关于实例miles的信息。当你写类的时候，最好能有一个方法可以用来返回关于类的实例的说明信息。虽然`.description()`返回了实例的描述信息，但着并不是最佳的Python方式。\n\n当你创建一个列表对象的时候，你可以用`print()`来显示以下内容：\n\n```python\n>>> names = [\"Fletcher\", \"David\", \"Dan\"]\n>>> print(names)\n['Fletcher', 'David', 'Dan']\n```\n\n如果我们用`print()`来打印miles对象，会发生什么呢：\n\n```python\n>>> print(miles)\n<__main__.Dog object at 0x00aeff70>\n```\n\n当你`print(miles)`的时候，你看到的是一串很奇怪的字符串，miles是一个`Dog`的对象，内存地址为0x00aeff70。这些信息并不是很有用。你可以通过定义一个特殊的实例方法`.__str__()`来打印出更有用的信息。\n\n下面，将`.description()`方法的名字更改为`.__str__()`:\n\n```python\nclass Dog:\n    # Leave other parts of Dog class as-is\n\n    # Replace .description() with __str__()\n    def __str__(self):\n        return f\"{self.name} is {self.age} years old\"\n```\n\n保存文件然后按F5。现在，当你`print(miles)`的时候，你会得到更友好的输出内容：\n\n```python\n>>> miles = Dog(\"Miles\", 4)\n>>> print(miles)\n'Miles is 4 years old'\n```\n\n像`.__init__()`和`.__str__()`这样的方法被称为**dunder methods**，因为他们的名字都是以双下划线开始，并以双下划线结尾。在Python中，有许多**dunder methods**可以用来定制类。虽然对于初学者来说，这些内容有点深奥，但是在Python中，**dunder methods**对于掌握面向对象的编程很重要。\n\n## 类的继承\n\n类的继承是指一个类可以继承另一个类的所有特性和方法。新创建的类成为子类，被继承的类成为父类。\n\n子类可以重写或者扩展父类的特性和方法。也就是说，子类既可以继承父类的所有特性和方法，也可以定义自己独有的特性性和方法。\n\n虽然这个比喻不是十分恰当，类的继承有点类似于人类的遗传。\n\n你可能继承了你母亲头发的颜色，这是你出生时的特性。但是，你决定将头发染成紫色，由于你母亲的头发不是紫色，所有可以说你重新定义(**overridden** )了头发的特性。\n\n### 遛狗公园的例子\n\n假设你正在一个公园中遛狗。在这个公园里，有许多不同品种的狗，正在从事于各种不同的行为。\n\n假设你想用Python类来为遛狗的公园建立一个模型。之前的`Dog`类可以通过狗的姓名和年龄来区分不同的狗，但是无法通过狗的品种来区分。\n\n你可以在`Dog`类中添加`.breed`的特性：\n\n```python\nclass Dog:\n    species = \"Canis familiaris\"\n\n    def __init__(self, name, age, breed):\n        self.name = name\n        self.age = age\n        self.breed = breed\n```\n\n在以上类中，之所以省略了方法的定义，是因为与本章需要讨论的内容无关。\n\n通过点击F5保存并运行文件，你可以在交互式窗口中，创建各种不同狗的实例：\n\n```python\n>>> miles = Dog(\"Miles\", 4, \"Jack Russell Terrier\")\n>>> buddy = Dog(\"Buddy\", 9, \"Dachshund\")\n>>> jack = Dog(\"Jack\", 3, \"Bulldog\")\n>>> jim = Dog(\"Jim\", 5, \"Bulldog\")\n```\n\n不同品种的狗通常有不同的行为。例如，牛头犬的叫声比较低，声音类似于`woof`，但是腊肠犬的叫声比较高，声音类似于`yap`。\n\n使用`Dog`类的时候，你必须为`.speak()`方法提供一个声音的参数`sound`，每次调用`Dog`实例的时候如下：\n\n```python\n>>> buddy.speak(\"Yap\")\n'Buddy says Yap'\n\n>>> jim.speak(\"Woof\")\n'Jim says Woof'\n\n>>> jack.speak(\"Woof\")\n'Jack says Woof'\n```\n\n每次调用`.speak()`方法的时候，都要传递一个参数，这样既显得重复，又不太方便。此外，每次传递参数的时候，还需要根据狗的品种`.breed`来决定对应的声音参数。\n\n你可以通过为每一种狗创建一个子类的方法，来简化以上问题。这使得你可以扩展子类从父类继承的方法，例如为`.speak()`指定默认的参数。\n\n### 父类和子类\n\n接下来我们为三种不同品种的狗各自创建一个子类：Jack Russell Terrier, Dachshund, and Bulldog:\n\n```python\nclass Dog:\n    species = \"Canis familiaris\"\n\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def __str__(self):\n        return f\"{self.name} is {self.age} years old\"\n\n    def speak(self, sound):\n        return f\"{self.name} says {sound}\"\n```\n\n创建子类的时候，你需要为子类定义一个自己的名称，然后在括号中填写父类的名称：\n\n```python\nclass JackRussellTerrier(Dog):\n    pass\n\nclass Dachshund(Dog):\n    pass\n\nclass Bulldog(Dog):\n    pass\n```\n\n现在你可以在交互式窗口中通过以下方式创建各种实例：\n\n```python\n>>> miles = JackRussellTerrier(\"Miles\", 4)\n>>> buddy = Dachshund(\"Buddy\", 9)\n>>> jack = Bulldog(\"Jack\", 3)\n>>> jim = Bulldog(\"Jim\", 5)\n```\n\n子类的实例继承了父类所有的特性和方法：\n\n```python\n>>> miles.species\n'Canis familiaris'\n\n>>> buddy.name\n'Buddy'\n\n>>> print(jack)\nJack is 3 years old\n\n>>> jim.speak(\"Woof\")\n'Jim says Woof'\n```\n\n如果要判断某一个对象属于哪一个类，你可以使用内建函数`type()`:\n\n```python\n>>> type(miles)\n<class '__main__.JackRussellTerrier'>\n```\n\n如果你还想判断`miles`是否是`Dog`类的实例，可以i使用内建函数`isinstance()`:\n\n```python\n>>> isinstance(miles, Dog)\nTrue\n```\n\n注意到`isinstance`需要两个参数，一个对象和一个类。以上例子中，`isinstance()`检查 `miles`是否是`Dog`类的使用，返回值为`True`。\n\n对象`miles`，`buddy`，`jack`和`jim`都是`Dog`类的实例，但是`miles`不是`Bulldog`的实例，`jack`不是`Dachshund`的实例。\n\n```python\n>>> isinstance(miles, Bulldog)\nFalse\n\n>>> isinstance(jack, Dachshund)\nFalse\n```\n\n概而言之，所有子类的对象，同时也是父类的对象，但是它们并不一定是其它子类的对象。\n\n### 扩展父类的功能\n\n由于不同品种的狗有不同的叫声，如果你想要为每一种狗各自的`.speak()`方法指定一个默认的`sound`参数值，你可以在各自的子类中重新定义`.speak()`方法。\n\n为了覆盖父类中的某一个方法，你需要在子类中定义相同名字的方法。下面以`JackRussellTerrier`子类为例：\n\n```python\nclass JackRussellTerrier(Dog):\n    def speak(self, sound=\"Arf\"):\n        return f\"{self.name} says {sound}\"\n```\n\n通过在子类`JackRussellTerrier`中重新定义方法`.speak()`后，现在JackRussellTerrier品种的狗有了一种默认的叫声“Arf”。\n\n现在，如果你可以通过`JackRussellTerrier`的实例调用`.speak()`方法，并且不传递任何参数：\n\n```python\n>>> miles = JackRussellTerrier(\"Miles\", 4)\n>>> miles.speak()\n'Miles says Arf'\n```\n\n有时候，有些狗在愤怒的时候会发出不同的叫声，这是你仍然可以调用`.speak()`方法，并传递相应的参数值：\n\n```python\n>>> miles.speak(\"Grrr\")\n'Miles says Grrr'\n```\n\n请记住，如果对父类做了更改，会自动传递给子类。但是，如果子类已经重新定义了父类的特性或者方法，那么父类的更改并不会传递给子类。\n\n例如，在`Dog`类中，更改`.speak()`中的返回字符串内容，将`says`更改为`barks`:\n\n```python\nclass Dog:\n    # Leave other attributes and methods as they are\n\n    # Change the string returned by .speak()\n    def speak(self, sound):\n        return f\"{self.name} barks: {sound}\"\n```\n\n现在，你创建一个新的`Bulldog`实例，名称为`jim`，`jim.speak()`会返回新的字符串：\n\n```python\n>>> jim = Bulldog(\"Jim\", 5)\n>>> jim.speak(\"Woof\")\n'Jim barks: Woof'\n```\n\n但是，如果调用`JackRussellTerrier`实例的`.speak()`方法，会发现并不会返回新的字符串：\n\n```python\n>>> miles = JackRussellTerrier(\"Miles\", 4)\n>>> miles.speak()\n'Miles says Arf'\n```\n\n有时候，可能需要完全覆盖父类的方法，但是在这个例子中，我们想让子类`JackRussellTerrier`继续使用父类中`.speak()`方法返回的字符串格式。\n\n为了实现这个目的，你仍然需要在子类`JackRussellTerrier`中定义`.speak()`方法。但是，你在子类的`.speak()`方法中需要调用父类的`.speak()`方法，并且将相应的参数传递给父类的`.speak()`方法。\n\n在子类中的某一个方法中，可以使用`super()`来访问父类：\n\n```python\nclass JackRussellTerrier(Dog):\n    def speak(self, sound=\"Arf\"):\n        return super().speak(sound)\n```\n\n当你在子类`JackRussellTerrier`中调用`super().speak(sound)`的时候，Python会在父类`Dog`中查找`.speak()`方法，然后调用并传递参数`sound`。\n\n下面，我们可以测试一下新定义的子类`JackRussellTerrier`：\n\n```python\n>>> miles = JackRussellTerrier(\"Miles\", 4)\n>>> miles.speak()\n'Miles barks: Arf'\n```\n\n现在，当你调用`miles.speak()`的时候，你可以看到返回的结果是`Dog`类中定义的格式。\n\n> 注意：在上面的例子中，类的继承结构非常简单。`JackRussellTerrier`子类有一个父类`Dog`。在实际的应用场景中，类的结构十分复杂。\n>\n> `super()`不仅只是在父类中查找某个方法或者特性，它还可以在整个类的结构中查找匹配的类和特性。如果你使用`super()`的时候不太小心，容易导致意外的结果。\n\n\n\n## 总结\n\n通过本指南，你学到了Python中面向对象编程的知识。大多数编程语言，如Java, C#和C++等都是基于面向对象编程的原理，所以本指南的知识同样适用于以上语言。\n\n在本指南中，你学到了以下内容：\n\n- 定义一个类\n- 从一个类实例化一个对象\n- 使用特性和方法来定义对象的属性和行为\n- 通过继承，从父类创建一个子类\n- 使用`super()`访问父类的某一个方法\n- 使用`isinstance()`判断一个对象是否继承于另外一个类\n","slug":"python/面向对象的编程","published":1,"updated":"2023-03-03T01:33:03.360Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clexvkk9k002j5i7319u24qje","content":"<h1 id=\"面向对象的编程\"><a href=\"#面向对象的编程\" class=\"headerlink\" title=\"面向对象的编程\"></a>面向对象的编程</h1><blockquote>\n<p>注：本文翻译自<a href=\"https://realpython.com/python3-object-oriented-programming/\">Object-Oriented Programming (OOP) in Python 3 – Real Python</a>。</p>\n</blockquote>\n<p><strong>面向对象的编程</strong>（<strong>Object-oriented programming</strong> ）是一种构建程序的方式，这种方式将相关的属性和行为绑定到个别的对象上。通过本文，你将了解到关于面向对象编程的基础知识。</p>\n<p>理论上来说，对象就好像是一个系统的组件。如果将一个程序想象成一家工厂的各种装配线。在装配线上的每一个环境，系统的部件都会对原材料进行加工处理，最后，原材料被加工成一个产品。</p>\n<p>一个对象包含数据（就像是装配线上需要处理的原材料）和行为（装配线上的组件执行的操作）。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"什么是面向对象的编程\"><a href=\"#什么是面向对象的编程\" class=\"headerlink\" title=\"什么是面向对象的编程\"></a>什么是面向对象的编程</h2><p><strong>面向对象的编程</strong>（<strong>Object-oriented programming</strong> ）是一种编程的范式。它提供了一种构建程序的方式，这种方式将相关的属性和行为绑定到个别的对象上。</p>\n<p>例如，一个对象可以代表一个人，这个人拥有属性，如姓名，年龄和地址，以及拥有行为（方法），例如行走，讲话，呼吸和奔跑。或者一个对象也可以代表一封邮寄，这封邮件拥有属性，如收件人列表，主题和正文，以及拥有行为，例如添加附件和发送。</p>\n<p>换一种说法，面向对象的编程用一种建模的方法来描述现实世界的事物，例如汽车，以及相关的事务，如工厂和工人，学生和老师等等。面向对象的编程通过建模的方式，将现实世界的个体描述为软件的对象，这些对象拥有相关的数据和哈数。</p>\n<p>另外一种常见的编程方式是面向过程的编程。这种方式就像是一本菜谱，提供了一系列的步骤，以函数和代码块的方式，按顺序完成任务。</p>\n<p>关键点是，对象是面向对象编程的核心，对象不仅代表数据，同时也代表了程序的整体结构。</p>\n<h2 id=\"定义一个类\"><a href=\"#定义一个类\" class=\"headerlink\" title=\"定义一个类\"></a>定义一个类</h2><p>基础的数据结构，如数字、字符串和列表，主要分别用来表示简单的信息，例如苹果的加个，诗的名称或者你喜欢的颜色。但是，如果你想要表示更为复杂的信息该怎么办呢？</p>\n<p>例如，假设你想要记录组织的员工信息。你需要存储每一个员工的基本信息，例如他们的名字、年龄、职位和工作年限。</p>\n<p>一种方式是通过列表来表示每一个员工的信息：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">kirk <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"James Kirk\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Captain\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2265</span><span class=\"token punctuation\">]</span>\nspock <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Spock\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">35</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Science Officer\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2254</span><span class=\"token punctuation\">]</span>\nmccoy <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Leonard McCoy\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Chief Medical Officer\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2266</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>如果使用以上这种方式，会存在一些问题。</p>\n<p>首先，它使得代码文件难以管理。如果你定义了<code>kirk</code>列表以后，隔了很多行才引用<code>kirk[0]</code>，你还会记得索引值为0的列表元素对应的是员工的名字吗？</p>\n<p>其次，如果每一个员工在列表中的信息数量并不相同，就会导致代码运行出错。以上例子中，<code>mccoy</code>列表缺少年龄的信息，因此<code>mccoy[1]</code>返回的是”Chief Medical Officer”，而不是Dr. McCoy的年龄。</p>\n<p>一种比较好的解决方式是使用类。</p>\n<h3 id=\"类和实例\"><a href=\"#类和实例\" class=\"headerlink\" title=\"类和实例\"></a>类和实例</h3><p>类用于创建用户自己定义的数据结构。类定义的函数成为<strong>方法</strong>（<strong>methods</strong>）。方法定义了对象可以对数据所作的操作。</p>\n<p>本文中，你将创建一个名为<code>Dog</code>的类，该类将用来存储狗的信息以及行为。</p>\n<p>一个类本身并不包含任何数据，而是一种蓝图，用来定义事物。<code>Dog</code>类定义了狗的名字和年龄，但是并没有包含某一条狗的具体名字和年龄。</p>\n<p>既然类是一种蓝图，那么实例就是根据蓝图创建的对象，包含实际的数据。一个<code>Dog</code>类的实例不再是一种蓝图，它是一只实际的狗，有名字，例如Miles，年龄是4岁。</p>\n<p>换一种说法，一个类就像是一张空白的表格或者问卷表。一个实例就是一张已经填写了信息的表格。就像许多人都可以根据自己的信息来填写表格，根据同一个类，也可以创建许多实例。</p>\n<h3 id=\"如何定义一个类\"><a href=\"#如何定义一个类\" class=\"headerlink\" title=\"如何定义一个类\"></a>如何定义一个类</h3><p>首先定义一个类，需要以关键字<code>class</code>开头，然后后面是类的名称和冒号。换行后，下面缩进的内容都属于类的正文。</p>\n<p>下面以<code>Dog</code>类为例：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><code>Dog</code>类的正文只有一个声明：关键字<code>pass</code>。 <code>pass</code>不执行任何操作，只是一个占位符。在没有为类写任何代码的情况下，使用<code>pass</code>可以避免程序在运行时出错。</p>\n<blockquote>\n<p>注意：类的名称通常是首字母大写。例如，定义某一种狗的类，如 Jack Russell Terrier，那么类的名称就可以写为<code>JackRussellTerrier</code>。</p>\n</blockquote>\n<p>目前，<code>Dog</code>类并没有任何属性，我们可以为它定义一些属性，例如名字、年龄、衣服颜色和品种。为了简单起见，我们只使用名字和年龄。</p>\n<p>类的属性通常都是通过方法<code>.__init__()</code>来定义。每次创建一个<code>Dog</code>对象的时候，<code>.__init__()</code>就会通过为对象的属性赋值，来设置对象的初始状态。因此，<code>.__init__()</code>为类的每一个实例完成了初始化。</p>\n<p>你可以为<code>.__init__()</code>设置任意数量的参数，但是第一个参数都是<code>self</code>。当一个类的实例被创建的时候，改实例自动被传递给<code>.__init__()</code>中的<code>self</code>参数，这样才能为对象定义新的属性。</p>\n<p>让我们更改一下<code>Dog</code>类的<code>.__init__()</code>方法，创建<code>.name</code>和<code>.age</code>属性(attributes)。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意到<code>.__init__()</code>方法缩进了4个空格，而方法的正文缩进了8个空格。空格缩进十分重要，通过空格缩进，Python才能知道<code>.__init__()</code>方法属于<code>Dog</code>类。</p>\n<p>在<code>.__init__()</code>的正文中，有2个声明使用了<code>self</code>变量：</p>\n<ol>\n<li><code>self.name = name</code>创建了一个名为<code>name</code>的属性，并用参数<code>name</code>为它赋值。</li>\n<li><code>self.age = age</code>创建了一个名为<code>age</code>的属性，并用参数<code>age</code>为它赋值。</li>\n</ol>\n<p>在<code>.__init__()</code>中创建的属性称为<strong>实例属性</strong>（<strong>Instance attributes</strong>）。实例属性的值只属于类的某一个实例。所有<code>Dog</code>对象都有名字和年龄，但是每一个实例的名字和年龄值是不相同的。</p>\n<p>另一方面，<strong>类的属性</strong>（<strong>class attributes</strong>）在所有的类的实例中，都拥有相同的属性值。你可以在<code>.__init__()</code>以外的位置定义一个变量并为其赋值，该变量就是类的属性。</p>\n<p>例如，下面的<code>Dog</code>类中有一个类的属性<code>species</code>，值为”Canis familiaris”：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># Class attribute</span>\n    species <span class=\"token operator\">=</span> <span class=\"token string\">\"Canis familiaris\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>类的属性直接定义在类的名称下方第一行，并缩进4格。它们必须设置一个初始值。当创建类的实例的时候，类的属性被自动创建，并分配初始值。</p>\n<p>当需要为每一个类的实例赋予相同属性值的时候，可以使用<strong>类的属性</strong>，当需要为每一个类的实例赋予不同属性值的时候，可以使用<strong>实例属性</strong>。</p>\n<h2 id=\"实例化一个对象\"><a href=\"#实例化一个对象\" class=\"headerlink\" title=\"实例化一个对象\"></a>实例化一个对象</h2><p>打开IDLE的交互窗口，输入以下内容：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">pass</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>这样就创建了一个<code>Dog</code>类，但是这个类既没有属性也没有方法。</p>\n<p>从一个类创建一个新的对象，成为<strong>实例化</strong>(<strong>instantiating</strong>)一个对象。通过输入类的名称并加上双括号，你可以实例化一个新的<code>Dog</code>对象：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> Dog<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>__main__<span class=\"token punctuation\">.</span>Dog <span class=\"token builtin\">object</span> at <span class=\"token number\">0x106702d30</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>现在，你在<code>0x106702d30</code>有一个新的<code>Dog</code>对象。<code>0x106702d30</code>代表的是内存地址。在不同的电脑上，该内存地址的值是不同的。</p>\n<p>现在，实例化第二个对象：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> Dog<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>__main__<span class=\"token punctuation\">.</span>Dog <span class=\"token builtin\">object</span> at <span class=\"token number\">0x0004ccc90</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>这个新的<code>Dog</code>实例存储在完全不同的内存地址。因为这是一个全新的实例，与之前创建的第一个实例完全不同。</p>\n<p>我们可以通过以下方式来判断两个实例是否相同：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> a <span class=\"token operator\">=</span> Dog<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> b <span class=\"token operator\">=</span> Dog<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> a <span class=\"token operator\">==</span> b\n<span class=\"token boolean\">False</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>通过以上代码，我们可以看到，虽然a和b都是通过<code>Dog</code>类创建的实例，但是他们代表了完全不同的对象。</p>\n<h3 id=\"类和实例属性\"><a href=\"#类和实例属性\" class=\"headerlink\" title=\"类和实例属性\"></a>类和实例属性</h3><p>现在，创建一个<code>Dog</code>类，该类包含一个类的属性<code>.species</code>以及两个实例属性<code>.name</code>和<code>.age</code>。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     species <span class=\"token operator\">=</span> <span class=\"token string\">\"Canis familiaris\"</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>为了实例化这个类，你需要为name和age提供参数值。否则，Python会抛出一个<code>TypeError</code>异常：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> Dog<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nTraceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  File <span class=\"token string\">\"&lt;pyshell#6>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span>\n    Dog<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nTypeError<span class=\"token punctuation\">:</span> __init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> missing <span class=\"token number\">2</span> required positional arguments<span class=\"token punctuation\">:</span> <span class=\"token string\">'name'</span> <span class=\"token keyword\">and</span> <span class=\"token string\">'age'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>通过在类名后面的括号中填入值，可以将参数传递给name和age。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> buddy <span class=\"token operator\">=</span> Dog<span class=\"token punctuation\">(</span><span class=\"token string\">\"Buddy\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> miles <span class=\"token operator\">=</span> Dog<span class=\"token punctuation\">(</span><span class=\"token string\">\"Miles\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>以上创建了两个<code>Dog</code>实例，一个是名叫Buddy的9岁小狗，另一个是名叫Miles的4岁小狗。</p>\n<p><code>Dog</code>类的<code>.__init__()</code>方法有三个参数，为什么在上面的例子中只使用了2个参数呢？</p>\n<p>当你实例化一个<code>Dog</code>对象的时候，Python会创建一个新的实例，并将它传递给<code>.__init__()</code>的第一个参数。这样就移除了<code>self</code>参数，所以你只需要担心<code>name</code>和<code>age</code>参数。</p>\n<p>当你创建了<code>Dog</code>实例后，你就可以使用<strong>dot notation</strong>访问实例的属性了。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> buddy<span class=\"token punctuation\">.</span>name\n<span class=\"token string\">'Buddy'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> buddy<span class=\"token punctuation\">.</span>age\n<span class=\"token number\">9</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> miles<span class=\"token punctuation\">.</span>name\n<span class=\"token string\">'Miles'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> miles<span class=\"token punctuation\">.</span>age\n<span class=\"token number\">4</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>你还可以用相同的访问访问类的属性：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> buddy<span class=\"token punctuation\">.</span>species\n<span class=\"token string\">'Canis familiaris'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>使用类来组织数据的好处之一，就是可以确保实例拥有预期的属性。所有的<code>Dog</code>实例都有<code>.species</code>, <code>.name</code>和<code>.age</code>属性，所有你确定当访问这些属性的时候，总是能获取到相应的值。</p>\n<p>虽然类能确保这些属性总是存在，但是相应的值却可以动态改变：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> buddy<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> buddy<span class=\"token punctuation\">.</span>age\n<span class=\"token number\">10</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> miles<span class=\"token punctuation\">.</span>species <span class=\"token operator\">=</span> <span class=\"token string\">\"Felis silvestris\"</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> miles<span class=\"token punctuation\">.</span>species\n<span class=\"token string\">'Felis silvestris'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在上面的例子中，你将<code>buddy</code>对象的属性<code>.age</code>更改为10，然后你将<code>miles</code>对象的属性<code>.species</code>更改为猫的品种”Felis silvestris”。虽然这样使得Miles看起来像是一只奇怪的狗，但是这对Python而言是有效的。</p>\n<p>这里的关键点是，默认情况下，自定义对象是可变的(mutable)的。如果一个对象可以被动态更改，那么它就是可变的(mutable)。例如，列表和字典都是可变的，但是字符串和元组是不可变的(immutable)。</p>\n<h3 id=\"实例方法\"><a href=\"#实例方法\" class=\"headerlink\" title=\"实例方法\"></a>实例方法</h3><p><strong>实例方法</strong>(<strong>Instance methods</strong>)是在类中定义的一种函数，这种函数只能被类的实例调用。跟<code>.__init__()</code>相同，实例方法的第一个参数都是<code>self</code>。</p>\n<p>在IDLE打开一个新的文本编辑器，然后输入以下<code>Dog</code>类：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">:</span>\n    species <span class=\"token operator\">=</span> <span class=\"token string\">\"Canis familiaris\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n\n    <span class=\"token comment\"># Instance method</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">description</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> is </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> years old\"</span></span>\n\n    <span class=\"token comment\"># Another instance method</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> sound<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> says </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>sound<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>该<code>Dog</code>类有两个实例方法：</p>\n<ol>\n<li>**<code>.description()</code>**返回一个字符串，用于显示狗的名字和年龄。</li>\n<li>**<code>.speak()</code>**有一个<code>sound</code>参数，返回一个字符串，用于显示狗的名字和吼叫声。</li>\n</ol>\n<p>将以上代码保存到文件<code>dog.py</code>，然后按F5运行程序。</p>\n<p>然后打开交互式窗口，输入以下实例方法：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> miles <span class=\"token operator\">=</span> Dog<span class=\"token punctuation\">(</span><span class=\"token string\">\"Miles\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> miles<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Miles is 4 years old'</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> miles<span class=\"token punctuation\">.</span>speak<span class=\"token punctuation\">(</span><span class=\"token string\">\"Woof Woof\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Miles says Woof Woof'</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> miles<span class=\"token punctuation\">.</span>speak<span class=\"token punctuation\">(</span><span class=\"token string\">\"Bow Wow\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Miles says Bow Wow'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在以上<code>Dog</code>类中，<code>.description()</code>返回了关于实例miles的信息。当你写类的时候，最好能有一个方法可以用来返回关于类的实例的说明信息。虽然<code>.description()</code>返回了实例的描述信息，但着并不是最佳的Python方式。</p>\n<p>当你创建一个列表对象的时候，你可以用<code>print()</code>来显示以下内容：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Fletcher\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"David\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Dan\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'Fletcher'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'David'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Dan'</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>如果我们用<code>print()</code>来打印miles对象，会发生什么呢：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>miles<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>__main__<span class=\"token punctuation\">.</span>Dog <span class=\"token builtin\">object</span> at <span class=\"token number\">0x00aeff70</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>当你<code>print(miles)</code>的时候，你看到的是一串很奇怪的字符串，miles是一个<code>Dog</code>的对象，内存地址为0x00aeff70。这些信息并不是很有用。你可以通过定义一个特殊的实例方法<code>.__str__()</code>来打印出更有用的信息。</p>\n<p>下面，将<code>.description()</code>方法的名字更改为<code>.__str__()</code>:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># Leave other parts of Dog class as-is</span>\n\n    <span class=\"token comment\"># Replace .description() with __str__()</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> is </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> years old\"</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>保存文件然后按F5。现在，当你<code>print(miles)</code>的时候，你会得到更友好的输出内容：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> miles <span class=\"token operator\">=</span> Dog<span class=\"token punctuation\">(</span><span class=\"token string\">\"Miles\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>miles<span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Miles is 4 years old'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>像<code>.__init__()</code>和<code>.__str__()</code>这样的方法被称为<strong>dunder methods</strong>，因为他们的名字都是以双下划线开始，并以双下划线结尾。在Python中，有许多<strong>dunder methods</strong>可以用来定制类。虽然对于初学者来说，这些内容有点深奥，但是在Python中，<strong>dunder methods</strong>对于掌握面向对象的编程很重要。</p>\n<h2 id=\"类的继承\"><a href=\"#类的继承\" class=\"headerlink\" title=\"类的继承\"></a>类的继承</h2><p>类的继承是指一个类可以继承另一个类的所有特性和方法。新创建的类成为子类，被继承的类成为父类。</p>\n<p>子类可以重写或者扩展父类的特性和方法。也就是说，子类既可以继承父类的所有特性和方法，也可以定义自己独有的特性性和方法。</p>\n<p>虽然这个比喻不是十分恰当，类的继承有点类似于人类的遗传。</p>\n<p>你可能继承了你母亲头发的颜色，这是你出生时的特性。但是，你决定将头发染成紫色，由于你母亲的头发不是紫色，所有可以说你重新定义(<strong>overridden</strong> )了头发的特性。</p>\n<h3 id=\"遛狗公园的例子\"><a href=\"#遛狗公园的例子\" class=\"headerlink\" title=\"遛狗公园的例子\"></a>遛狗公园的例子</h3><p>假设你正在一个公园中遛狗。在这个公园里，有许多不同品种的狗，正在从事于各种不同的行为。</p>\n<p>假设你想用Python类来为遛狗的公园建立一个模型。之前的<code>Dog</code>类可以通过狗的姓名和年龄来区分不同的狗，但是无法通过狗的品种来区分。</p>\n<p>你可以在<code>Dog</code>类中添加<code>.breed</code>的特性：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">:</span>\n    species <span class=\"token operator\">=</span> <span class=\"token string\">\"Canis familiaris\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> breed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n        self<span class=\"token punctuation\">.</span>breed <span class=\"token operator\">=</span> breed<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在以上类中，之所以省略了方法的定义，是因为与本章需要讨论的内容无关。</p>\n<p>通过点击F5保存并运行文件，你可以在交互式窗口中，创建各种不同狗的实例：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> miles <span class=\"token operator\">=</span> Dog<span class=\"token punctuation\">(</span><span class=\"token string\">\"Miles\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Jack Russell Terrier\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> buddy <span class=\"token operator\">=</span> Dog<span class=\"token punctuation\">(</span><span class=\"token string\">\"Buddy\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Dachshund\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> jack <span class=\"token operator\">=</span> Dog<span class=\"token punctuation\">(</span><span class=\"token string\">\"Jack\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bulldog\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> jim <span class=\"token operator\">=</span> Dog<span class=\"token punctuation\">(</span><span class=\"token string\">\"Jim\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bulldog\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>不同品种的狗通常有不同的行为。例如，牛头犬的叫声比较低，声音类似于<code>woof</code>，但是腊肠犬的叫声比较高，声音类似于<code>yap</code>。</p>\n<p>使用<code>Dog</code>类的时候，你必须为<code>.speak()</code>方法提供一个声音的参数<code>sound</code>，每次调用<code>Dog</code>实例的时候如下：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> buddy<span class=\"token punctuation\">.</span>speak<span class=\"token punctuation\">(</span><span class=\"token string\">\"Yap\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Buddy says Yap'</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> jim<span class=\"token punctuation\">.</span>speak<span class=\"token punctuation\">(</span><span class=\"token string\">\"Woof\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Jim says Woof'</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> jack<span class=\"token punctuation\">.</span>speak<span class=\"token punctuation\">(</span><span class=\"token string\">\"Woof\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Jack says Woof'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>每次调用<code>.speak()</code>方法的时候，都要传递一个参数，这样既显得重复，又不太方便。此外，每次传递参数的时候，还需要根据狗的品种<code>.breed</code>来决定对应的声音参数。</p>\n<p>你可以通过为每一种狗创建一个子类的方法，来简化以上问题。这使得你可以扩展子类从父类继承的方法，例如为<code>.speak()</code>指定默认的参数。</p>\n<h3 id=\"父类和子类\"><a href=\"#父类和子类\" class=\"headerlink\" title=\"父类和子类\"></a>父类和子类</h3><p>接下来我们为三种不同品种的狗各自创建一个子类：Jack Russell Terrier, Dachshund, and Bulldog:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">:</span>\n    species <span class=\"token operator\">=</span> <span class=\"token string\">\"Canis familiaris\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> is </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> years old\"</span></span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> sound<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> says </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>sound<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>创建子类的时候，你需要为子类定义一个自己的名称，然后在括号中填写父类的名称：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">JackRussellTerrier</span><span class=\"token punctuation\">(</span>Dog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Dachshund</span><span class=\"token punctuation\">(</span>Dog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Bulldog</span><span class=\"token punctuation\">(</span>Dog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>现在你可以在交互式窗口中通过以下方式创建各种实例：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> miles <span class=\"token operator\">=</span> JackRussellTerrier<span class=\"token punctuation\">(</span><span class=\"token string\">\"Miles\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> buddy <span class=\"token operator\">=</span> Dachshund<span class=\"token punctuation\">(</span><span class=\"token string\">\"Buddy\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> jack <span class=\"token operator\">=</span> Bulldog<span class=\"token punctuation\">(</span><span class=\"token string\">\"Jack\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> jim <span class=\"token operator\">=</span> Bulldog<span class=\"token punctuation\">(</span><span class=\"token string\">\"Jim\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>子类的实例继承了父类所有的特性和方法：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> miles<span class=\"token punctuation\">.</span>species\n<span class=\"token string\">'Canis familiaris'</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> buddy<span class=\"token punctuation\">.</span>name\n<span class=\"token string\">'Buddy'</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>jack<span class=\"token punctuation\">)</span>\nJack <span class=\"token keyword\">is</span> <span class=\"token number\">3</span> years old\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> jim<span class=\"token punctuation\">.</span>speak<span class=\"token punctuation\">(</span><span class=\"token string\">\"Woof\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Jim says Woof'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果要判断某一个对象属于哪一个类，你可以使用内建函数<code>type()</code>:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>miles<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token string\">'__main__.JackRussellTerrier'</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>如果你还想判断<code>miles</code>是否是<code>Dog</code>类的实例，可以i使用内建函数<code>isinstance()</code>:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>miles<span class=\"token punctuation\">,</span> Dog<span class=\"token punctuation\">)</span>\n<span class=\"token boolean\">True</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>注意到<code>isinstance</code>需要两个参数，一个对象和一个类。以上例子中，<code>isinstance()</code>检查 <code>miles</code>是否是<code>Dog</code>类的使用，返回值为<code>True</code>。</p>\n<p>对象<code>miles</code>，<code>buddy</code>，<code>jack</code>和<code>jim</code>都是<code>Dog</code>类的实例，但是<code>miles</code>不是<code>Bulldog</code>的实例，<code>jack</code>不是<code>Dachshund</code>的实例。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>miles<span class=\"token punctuation\">,</span> Bulldog<span class=\"token punctuation\">)</span>\n<span class=\"token boolean\">False</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>jack<span class=\"token punctuation\">,</span> Dachshund<span class=\"token punctuation\">)</span>\n<span class=\"token boolean\">False</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>概而言之，所有子类的对象，同时也是父类的对象，但是它们并不一定是其它子类的对象。</p>\n<h3 id=\"扩展父类的功能\"><a href=\"#扩展父类的功能\" class=\"headerlink\" title=\"扩展父类的功能\"></a>扩展父类的功能</h3><p>由于不同品种的狗有不同的叫声，如果你想要为每一种狗各自的<code>.speak()</code>方法指定一个默认的<code>sound</code>参数值，你可以在各自的子类中重新定义<code>.speak()</code>方法。</p>\n<p>为了覆盖父类中的某一个方法，你需要在子类中定义相同名字的方法。下面以<code>JackRussellTerrier</code>子类为例：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">JackRussellTerrier</span><span class=\"token punctuation\">(</span>Dog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> sound<span class=\"token operator\">=</span><span class=\"token string\">\"Arf\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> says </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>sound<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>通过在子类<code>JackRussellTerrier</code>中重新定义方法<code>.speak()</code>后，现在JackRussellTerrier品种的狗有了一种默认的叫声“Arf”。</p>\n<p>现在，如果你可以通过<code>JackRussellTerrier</code>的实例调用<code>.speak()</code>方法，并且不传递任何参数：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> miles <span class=\"token operator\">=</span> JackRussellTerrier<span class=\"token punctuation\">(</span><span class=\"token string\">\"Miles\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> miles<span class=\"token punctuation\">.</span>speak<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Miles says Arf'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>有时候，有些狗在愤怒的时候会发出不同的叫声，这是你仍然可以调用<code>.speak()</code>方法，并传递相应的参数值：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> miles<span class=\"token punctuation\">.</span>speak<span class=\"token punctuation\">(</span><span class=\"token string\">\"Grrr\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Miles says Grrr'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>请记住，如果对父类做了更改，会自动传递给子类。但是，如果子类已经重新定义了父类的特性或者方法，那么父类的更改并不会传递给子类。</p>\n<p>例如，在<code>Dog</code>类中，更改<code>.speak()</code>中的返回字符串内容，将<code>says</code>更改为<code>barks</code>:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># Leave other attributes and methods as they are</span>\n\n    <span class=\"token comment\"># Change the string returned by .speak()</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> sound<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> barks: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>sound<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>现在，你创建一个新的<code>Bulldog</code>实例，名称为<code>jim</code>，<code>jim.speak()</code>会返回新的字符串：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> jim <span class=\"token operator\">=</span> Bulldog<span class=\"token punctuation\">(</span><span class=\"token string\">\"Jim\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> jim<span class=\"token punctuation\">.</span>speak<span class=\"token punctuation\">(</span><span class=\"token string\">\"Woof\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Jim barks: Woof'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>但是，如果调用<code>JackRussellTerrier</code>实例的<code>.speak()</code>方法，会发现并不会返回新的字符串：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> miles <span class=\"token operator\">=</span> JackRussellTerrier<span class=\"token punctuation\">(</span><span class=\"token string\">\"Miles\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> miles<span class=\"token punctuation\">.</span>speak<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Miles says Arf'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>有时候，可能需要完全覆盖父类的方法，但是在这个例子中，我们想让子类<code>JackRussellTerrier</code>继续使用父类中<code>.speak()</code>方法返回的字符串格式。</p>\n<p>为了实现这个目的，你仍然需要在子类<code>JackRussellTerrier</code>中定义<code>.speak()</code>方法。但是，你在子类的<code>.speak()</code>方法中需要调用父类的<code>.speak()</code>方法，并且将相应的参数传递给父类的<code>.speak()</code>方法。</p>\n<p>在子类中的某一个方法中，可以使用<code>super()</code>来访问父类：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">JackRussellTerrier</span><span class=\"token punctuation\">(</span>Dog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> sound<span class=\"token operator\">=</span><span class=\"token string\">\"Arf\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>speak<span class=\"token punctuation\">(</span>sound<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>当你在子类<code>JackRussellTerrier</code>中调用<code>super().speak(sound)</code>的时候，Python会在父类<code>Dog</code>中查找<code>.speak()</code>方法，然后调用并传递参数<code>sound</code>。</p>\n<p>下面，我们可以测试一下新定义的子类<code>JackRussellTerrier</code>：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> miles <span class=\"token operator\">=</span> JackRussellTerrier<span class=\"token punctuation\">(</span><span class=\"token string\">\"Miles\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> miles<span class=\"token punctuation\">.</span>speak<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Miles barks: Arf'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>现在，当你调用<code>miles.speak()</code>的时候，你可以看到返回的结果是<code>Dog</code>类中定义的格式。</p>\n<blockquote>\n<p>注意：在上面的例子中，类的继承结构非常简单。<code>JackRussellTerrier</code>子类有一个父类<code>Dog</code>。在实际的应用场景中，类的结构十分复杂。</p>\n<p><code>super()</code>不仅只是在父类中查找某个方法或者特性，它还可以在整个类的结构中查找匹配的类和特性。如果你使用<code>super()</code>的时候不太小心，容易导致意外的结果。</p>\n</blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>通过本指南，你学到了Python中面向对象编程的知识。大多数编程语言，如Java, C#和C++等都是基于面向对象编程的原理，所以本指南的知识同样适用于以上语言。</p>\n<p>在本指南中，你学到了以下内容：</p>\n<ul>\n<li>定义一个类</li>\n<li>从一个类实例化一个对象</li>\n<li>使用特性和方法来定义对象的属性和行为</li>\n<li>通过继承，从父类创建一个子类</li>\n<li>使用<code>super()</code>访问父类的某一个方法</li>\n<li>使用<code>isinstance()</code>判断一个对象是否继承于另外一个类</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"面向对象的编程\"><a href=\"#面向对象的编程\" class=\"headerlink\" title=\"面向对象的编程\"></a>面向对象的编程</h1><blockquote>\n<p>注：本文翻译自<a href=\"https://realpython.com/python3-object-oriented-programming/\">Object-Oriented Programming (OOP) in Python 3 – Real Python</a>。</p>\n</blockquote>\n<p><strong>面向对象的编程</strong>（<strong>Object-oriented programming</strong> ）是一种构建程序的方式，这种方式将相关的属性和行为绑定到个别的对象上。通过本文，你将了解到关于面向对象编程的基础知识。</p>\n<p>理论上来说，对象就好像是一个系统的组件。如果将一个程序想象成一家工厂的各种装配线。在装配线上的每一个环境，系统的部件都会对原材料进行加工处理，最后，原材料被加工成一个产品。</p>\n<p>一个对象包含数据（就像是装配线上需要处理的原材料）和行为（装配线上的组件执行的操作）。</p>","more":"<h2 id=\"什么是面向对象的编程\"><a href=\"#什么是面向对象的编程\" class=\"headerlink\" title=\"什么是面向对象的编程\"></a>什么是面向对象的编程</h2><p><strong>面向对象的编程</strong>（<strong>Object-oriented programming</strong> ）是一种编程的范式。它提供了一种构建程序的方式，这种方式将相关的属性和行为绑定到个别的对象上。</p>\n<p>例如，一个对象可以代表一个人，这个人拥有属性，如姓名，年龄和地址，以及拥有行为（方法），例如行走，讲话，呼吸和奔跑。或者一个对象也可以代表一封邮寄，这封邮件拥有属性，如收件人列表，主题和正文，以及拥有行为，例如添加附件和发送。</p>\n<p>换一种说法，面向对象的编程用一种建模的方法来描述现实世界的事物，例如汽车，以及相关的事务，如工厂和工人，学生和老师等等。面向对象的编程通过建模的方式，将现实世界的个体描述为软件的对象，这些对象拥有相关的数据和哈数。</p>\n<p>另外一种常见的编程方式是面向过程的编程。这种方式就像是一本菜谱，提供了一系列的步骤，以函数和代码块的方式，按顺序完成任务。</p>\n<p>关键点是，对象是面向对象编程的核心，对象不仅代表数据，同时也代表了程序的整体结构。</p>\n<h2 id=\"定义一个类\"><a href=\"#定义一个类\" class=\"headerlink\" title=\"定义一个类\"></a>定义一个类</h2><p>基础的数据结构，如数字、字符串和列表，主要分别用来表示简单的信息，例如苹果的加个，诗的名称或者你喜欢的颜色。但是，如果你想要表示更为复杂的信息该怎么办呢？</p>\n<p>例如，假设你想要记录组织的员工信息。你需要存储每一个员工的基本信息，例如他们的名字、年龄、职位和工作年限。</p>\n<p>一种方式是通过列表来表示每一个员工的信息：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">kirk <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"James Kirk\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Captain\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2265</span><span class=\"token punctuation\">]</span>\nspock <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Spock\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">35</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Science Officer\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2254</span><span class=\"token punctuation\">]</span>\nmccoy <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Leonard McCoy\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Chief Medical Officer\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2266</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>如果使用以上这种方式，会存在一些问题。</p>\n<p>首先，它使得代码文件难以管理。如果你定义了<code>kirk</code>列表以后，隔了很多行才引用<code>kirk[0]</code>，你还会记得索引值为0的列表元素对应的是员工的名字吗？</p>\n<p>其次，如果每一个员工在列表中的信息数量并不相同，就会导致代码运行出错。以上例子中，<code>mccoy</code>列表缺少年龄的信息，因此<code>mccoy[1]</code>返回的是”Chief Medical Officer”，而不是Dr. McCoy的年龄。</p>\n<p>一种比较好的解决方式是使用类。</p>\n<h3 id=\"类和实例\"><a href=\"#类和实例\" class=\"headerlink\" title=\"类和实例\"></a>类和实例</h3><p>类用于创建用户自己定义的数据结构。类定义的函数成为<strong>方法</strong>（<strong>methods</strong>）。方法定义了对象可以对数据所作的操作。</p>\n<p>本文中，你将创建一个名为<code>Dog</code>的类，该类将用来存储狗的信息以及行为。</p>\n<p>一个类本身并不包含任何数据，而是一种蓝图，用来定义事物。<code>Dog</code>类定义了狗的名字和年龄，但是并没有包含某一条狗的具体名字和年龄。</p>\n<p>既然类是一种蓝图，那么实例就是根据蓝图创建的对象，包含实际的数据。一个<code>Dog</code>类的实例不再是一种蓝图，它是一只实际的狗，有名字，例如Miles，年龄是4岁。</p>\n<p>换一种说法，一个类就像是一张空白的表格或者问卷表。一个实例就是一张已经填写了信息的表格。就像许多人都可以根据自己的信息来填写表格，根据同一个类，也可以创建许多实例。</p>\n<h3 id=\"如何定义一个类\"><a href=\"#如何定义一个类\" class=\"headerlink\" title=\"如何定义一个类\"></a>如何定义一个类</h3><p>首先定义一个类，需要以关键字<code>class</code>开头，然后后面是类的名称和冒号。换行后，下面缩进的内容都属于类的正文。</p>\n<p>下面以<code>Dog</code>类为例：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><code>Dog</code>类的正文只有一个声明：关键字<code>pass</code>。 <code>pass</code>不执行任何操作，只是一个占位符。在没有为类写任何代码的情况下，使用<code>pass</code>可以避免程序在运行时出错。</p>\n<blockquote>\n<p>注意：类的名称通常是首字母大写。例如，定义某一种狗的类，如 Jack Russell Terrier，那么类的名称就可以写为<code>JackRussellTerrier</code>。</p>\n</blockquote>\n<p>目前，<code>Dog</code>类并没有任何属性，我们可以为它定义一些属性，例如名字、年龄、衣服颜色和品种。为了简单起见，我们只使用名字和年龄。</p>\n<p>类的属性通常都是通过方法<code>.__init__()</code>来定义。每次创建一个<code>Dog</code>对象的时候，<code>.__init__()</code>就会通过为对象的属性赋值，来设置对象的初始状态。因此，<code>.__init__()</code>为类的每一个实例完成了初始化。</p>\n<p>你可以为<code>.__init__()</code>设置任意数量的参数，但是第一个参数都是<code>self</code>。当一个类的实例被创建的时候，改实例自动被传递给<code>.__init__()</code>中的<code>self</code>参数，这样才能为对象定义新的属性。</p>\n<p>让我们更改一下<code>Dog</code>类的<code>.__init__()</code>方法，创建<code>.name</code>和<code>.age</code>属性(attributes)。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意到<code>.__init__()</code>方法缩进了4个空格，而方法的正文缩进了8个空格。空格缩进十分重要，通过空格缩进，Python才能知道<code>.__init__()</code>方法属于<code>Dog</code>类。</p>\n<p>在<code>.__init__()</code>的正文中，有2个声明使用了<code>self</code>变量：</p>\n<ol>\n<li><code>self.name = name</code>创建了一个名为<code>name</code>的属性，并用参数<code>name</code>为它赋值。</li>\n<li><code>self.age = age</code>创建了一个名为<code>age</code>的属性，并用参数<code>age</code>为它赋值。</li>\n</ol>\n<p>在<code>.__init__()</code>中创建的属性称为<strong>实例属性</strong>（<strong>Instance attributes</strong>）。实例属性的值只属于类的某一个实例。所有<code>Dog</code>对象都有名字和年龄，但是每一个实例的名字和年龄值是不相同的。</p>\n<p>另一方面，<strong>类的属性</strong>（<strong>class attributes</strong>）在所有的类的实例中，都拥有相同的属性值。你可以在<code>.__init__()</code>以外的位置定义一个变量并为其赋值，该变量就是类的属性。</p>\n<p>例如，下面的<code>Dog</code>类中有一个类的属性<code>species</code>，值为”Canis familiaris”：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># Class attribute</span>\n    species <span class=\"token operator\">=</span> <span class=\"token string\">\"Canis familiaris\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>类的属性直接定义在类的名称下方第一行，并缩进4格。它们必须设置一个初始值。当创建类的实例的时候，类的属性被自动创建，并分配初始值。</p>\n<p>当需要为每一个类的实例赋予相同属性值的时候，可以使用<strong>类的属性</strong>，当需要为每一个类的实例赋予不同属性值的时候，可以使用<strong>实例属性</strong>。</p>\n<h2 id=\"实例化一个对象\"><a href=\"#实例化一个对象\" class=\"headerlink\" title=\"实例化一个对象\"></a>实例化一个对象</h2><p>打开IDLE的交互窗口，输入以下内容：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">pass</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>这样就创建了一个<code>Dog</code>类，但是这个类既没有属性也没有方法。</p>\n<p>从一个类创建一个新的对象，成为<strong>实例化</strong>(<strong>instantiating</strong>)一个对象。通过输入类的名称并加上双括号，你可以实例化一个新的<code>Dog</code>对象：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> Dog<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>__main__<span class=\"token punctuation\">.</span>Dog <span class=\"token builtin\">object</span> at <span class=\"token number\">0x106702d30</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>现在，你在<code>0x106702d30</code>有一个新的<code>Dog</code>对象。<code>0x106702d30</code>代表的是内存地址。在不同的电脑上，该内存地址的值是不同的。</p>\n<p>现在，实例化第二个对象：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> Dog<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>__main__<span class=\"token punctuation\">.</span>Dog <span class=\"token builtin\">object</span> at <span class=\"token number\">0x0004ccc90</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>这个新的<code>Dog</code>实例存储在完全不同的内存地址。因为这是一个全新的实例，与之前创建的第一个实例完全不同。</p>\n<p>我们可以通过以下方式来判断两个实例是否相同：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> a <span class=\"token operator\">=</span> Dog<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> b <span class=\"token operator\">=</span> Dog<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> a <span class=\"token operator\">==</span> b\n<span class=\"token boolean\">False</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>通过以上代码，我们可以看到，虽然a和b都是通过<code>Dog</code>类创建的实例，但是他们代表了完全不同的对象。</p>\n<h3 id=\"类和实例属性\"><a href=\"#类和实例属性\" class=\"headerlink\" title=\"类和实例属性\"></a>类和实例属性</h3><p>现在，创建一个<code>Dog</code>类，该类包含一个类的属性<code>.species</code>以及两个实例属性<code>.name</code>和<code>.age</code>。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     species <span class=\"token operator\">=</span> <span class=\"token string\">\"Canis familiaris\"</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>为了实例化这个类，你需要为name和age提供参数值。否则，Python会抛出一个<code>TypeError</code>异常：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> Dog<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nTraceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  File <span class=\"token string\">\"&lt;pyshell#6>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span>\n    Dog<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nTypeError<span class=\"token punctuation\">:</span> __init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> missing <span class=\"token number\">2</span> required positional arguments<span class=\"token punctuation\">:</span> <span class=\"token string\">'name'</span> <span class=\"token keyword\">and</span> <span class=\"token string\">'age'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>通过在类名后面的括号中填入值，可以将参数传递给name和age。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> buddy <span class=\"token operator\">=</span> Dog<span class=\"token punctuation\">(</span><span class=\"token string\">\"Buddy\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> miles <span class=\"token operator\">=</span> Dog<span class=\"token punctuation\">(</span><span class=\"token string\">\"Miles\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>以上创建了两个<code>Dog</code>实例，一个是名叫Buddy的9岁小狗，另一个是名叫Miles的4岁小狗。</p>\n<p><code>Dog</code>类的<code>.__init__()</code>方法有三个参数，为什么在上面的例子中只使用了2个参数呢？</p>\n<p>当你实例化一个<code>Dog</code>对象的时候，Python会创建一个新的实例，并将它传递给<code>.__init__()</code>的第一个参数。这样就移除了<code>self</code>参数，所以你只需要担心<code>name</code>和<code>age</code>参数。</p>\n<p>当你创建了<code>Dog</code>实例后，你就可以使用<strong>dot notation</strong>访问实例的属性了。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> buddy<span class=\"token punctuation\">.</span>name\n<span class=\"token string\">'Buddy'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> buddy<span class=\"token punctuation\">.</span>age\n<span class=\"token number\">9</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> miles<span class=\"token punctuation\">.</span>name\n<span class=\"token string\">'Miles'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> miles<span class=\"token punctuation\">.</span>age\n<span class=\"token number\">4</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>你还可以用相同的访问访问类的属性：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> buddy<span class=\"token punctuation\">.</span>species\n<span class=\"token string\">'Canis familiaris'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>使用类来组织数据的好处之一，就是可以确保实例拥有预期的属性。所有的<code>Dog</code>实例都有<code>.species</code>, <code>.name</code>和<code>.age</code>属性，所有你确定当访问这些属性的时候，总是能获取到相应的值。</p>\n<p>虽然类能确保这些属性总是存在，但是相应的值却可以动态改变：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> buddy<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> buddy<span class=\"token punctuation\">.</span>age\n<span class=\"token number\">10</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> miles<span class=\"token punctuation\">.</span>species <span class=\"token operator\">=</span> <span class=\"token string\">\"Felis silvestris\"</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> miles<span class=\"token punctuation\">.</span>species\n<span class=\"token string\">'Felis silvestris'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在上面的例子中，你将<code>buddy</code>对象的属性<code>.age</code>更改为10，然后你将<code>miles</code>对象的属性<code>.species</code>更改为猫的品种”Felis silvestris”。虽然这样使得Miles看起来像是一只奇怪的狗，但是这对Python而言是有效的。</p>\n<p>这里的关键点是，默认情况下，自定义对象是可变的(mutable)的。如果一个对象可以被动态更改，那么它就是可变的(mutable)。例如，列表和字典都是可变的，但是字符串和元组是不可变的(immutable)。</p>\n<h3 id=\"实例方法\"><a href=\"#实例方法\" class=\"headerlink\" title=\"实例方法\"></a>实例方法</h3><p><strong>实例方法</strong>(<strong>Instance methods</strong>)是在类中定义的一种函数，这种函数只能被类的实例调用。跟<code>.__init__()</code>相同，实例方法的第一个参数都是<code>self</code>。</p>\n<p>在IDLE打开一个新的文本编辑器，然后输入以下<code>Dog</code>类：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">:</span>\n    species <span class=\"token operator\">=</span> <span class=\"token string\">\"Canis familiaris\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n\n    <span class=\"token comment\"># Instance method</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">description</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> is </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> years old\"</span></span>\n\n    <span class=\"token comment\"># Another instance method</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> sound<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> says </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>sound<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>该<code>Dog</code>类有两个实例方法：</p>\n<ol>\n<li>**<code>.description()</code>**返回一个字符串，用于显示狗的名字和年龄。</li>\n<li>**<code>.speak()</code>**有一个<code>sound</code>参数，返回一个字符串，用于显示狗的名字和吼叫声。</li>\n</ol>\n<p>将以上代码保存到文件<code>dog.py</code>，然后按F5运行程序。</p>\n<p>然后打开交互式窗口，输入以下实例方法：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> miles <span class=\"token operator\">=</span> Dog<span class=\"token punctuation\">(</span><span class=\"token string\">\"Miles\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> miles<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Miles is 4 years old'</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> miles<span class=\"token punctuation\">.</span>speak<span class=\"token punctuation\">(</span><span class=\"token string\">\"Woof Woof\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Miles says Woof Woof'</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> miles<span class=\"token punctuation\">.</span>speak<span class=\"token punctuation\">(</span><span class=\"token string\">\"Bow Wow\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Miles says Bow Wow'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在以上<code>Dog</code>类中，<code>.description()</code>返回了关于实例miles的信息。当你写类的时候，最好能有一个方法可以用来返回关于类的实例的说明信息。虽然<code>.description()</code>返回了实例的描述信息，但着并不是最佳的Python方式。</p>\n<p>当你创建一个列表对象的时候，你可以用<code>print()</code>来显示以下内容：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Fletcher\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"David\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Dan\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'Fletcher'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'David'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Dan'</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>如果我们用<code>print()</code>来打印miles对象，会发生什么呢：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>miles<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>__main__<span class=\"token punctuation\">.</span>Dog <span class=\"token builtin\">object</span> at <span class=\"token number\">0x00aeff70</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>当你<code>print(miles)</code>的时候，你看到的是一串很奇怪的字符串，miles是一个<code>Dog</code>的对象，内存地址为0x00aeff70。这些信息并不是很有用。你可以通过定义一个特殊的实例方法<code>.__str__()</code>来打印出更有用的信息。</p>\n<p>下面，将<code>.description()</code>方法的名字更改为<code>.__str__()</code>:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># Leave other parts of Dog class as-is</span>\n\n    <span class=\"token comment\"># Replace .description() with __str__()</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> is </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> years old\"</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>保存文件然后按F5。现在，当你<code>print(miles)</code>的时候，你会得到更友好的输出内容：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> miles <span class=\"token operator\">=</span> Dog<span class=\"token punctuation\">(</span><span class=\"token string\">\"Miles\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>miles<span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Miles is 4 years old'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>像<code>.__init__()</code>和<code>.__str__()</code>这样的方法被称为<strong>dunder methods</strong>，因为他们的名字都是以双下划线开始，并以双下划线结尾。在Python中，有许多<strong>dunder methods</strong>可以用来定制类。虽然对于初学者来说，这些内容有点深奥，但是在Python中，<strong>dunder methods</strong>对于掌握面向对象的编程很重要。</p>\n<h2 id=\"类的继承\"><a href=\"#类的继承\" class=\"headerlink\" title=\"类的继承\"></a>类的继承</h2><p>类的继承是指一个类可以继承另一个类的所有特性和方法。新创建的类成为子类，被继承的类成为父类。</p>\n<p>子类可以重写或者扩展父类的特性和方法。也就是说，子类既可以继承父类的所有特性和方法，也可以定义自己独有的特性性和方法。</p>\n<p>虽然这个比喻不是十分恰当，类的继承有点类似于人类的遗传。</p>\n<p>你可能继承了你母亲头发的颜色，这是你出生时的特性。但是，你决定将头发染成紫色，由于你母亲的头发不是紫色，所有可以说你重新定义(<strong>overridden</strong> )了头发的特性。</p>\n<h3 id=\"遛狗公园的例子\"><a href=\"#遛狗公园的例子\" class=\"headerlink\" title=\"遛狗公园的例子\"></a>遛狗公园的例子</h3><p>假设你正在一个公园中遛狗。在这个公园里，有许多不同品种的狗，正在从事于各种不同的行为。</p>\n<p>假设你想用Python类来为遛狗的公园建立一个模型。之前的<code>Dog</code>类可以通过狗的姓名和年龄来区分不同的狗，但是无法通过狗的品种来区分。</p>\n<p>你可以在<code>Dog</code>类中添加<code>.breed</code>的特性：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">:</span>\n    species <span class=\"token operator\">=</span> <span class=\"token string\">\"Canis familiaris\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> breed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n        self<span class=\"token punctuation\">.</span>breed <span class=\"token operator\">=</span> breed<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在以上类中，之所以省略了方法的定义，是因为与本章需要讨论的内容无关。</p>\n<p>通过点击F5保存并运行文件，你可以在交互式窗口中，创建各种不同狗的实例：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> miles <span class=\"token operator\">=</span> Dog<span class=\"token punctuation\">(</span><span class=\"token string\">\"Miles\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Jack Russell Terrier\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> buddy <span class=\"token operator\">=</span> Dog<span class=\"token punctuation\">(</span><span class=\"token string\">\"Buddy\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Dachshund\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> jack <span class=\"token operator\">=</span> Dog<span class=\"token punctuation\">(</span><span class=\"token string\">\"Jack\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bulldog\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> jim <span class=\"token operator\">=</span> Dog<span class=\"token punctuation\">(</span><span class=\"token string\">\"Jim\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bulldog\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>不同品种的狗通常有不同的行为。例如，牛头犬的叫声比较低，声音类似于<code>woof</code>，但是腊肠犬的叫声比较高，声音类似于<code>yap</code>。</p>\n<p>使用<code>Dog</code>类的时候，你必须为<code>.speak()</code>方法提供一个声音的参数<code>sound</code>，每次调用<code>Dog</code>实例的时候如下：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> buddy<span class=\"token punctuation\">.</span>speak<span class=\"token punctuation\">(</span><span class=\"token string\">\"Yap\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Buddy says Yap'</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> jim<span class=\"token punctuation\">.</span>speak<span class=\"token punctuation\">(</span><span class=\"token string\">\"Woof\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Jim says Woof'</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> jack<span class=\"token punctuation\">.</span>speak<span class=\"token punctuation\">(</span><span class=\"token string\">\"Woof\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Jack says Woof'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>每次调用<code>.speak()</code>方法的时候，都要传递一个参数，这样既显得重复，又不太方便。此外，每次传递参数的时候，还需要根据狗的品种<code>.breed</code>来决定对应的声音参数。</p>\n<p>你可以通过为每一种狗创建一个子类的方法，来简化以上问题。这使得你可以扩展子类从父类继承的方法，例如为<code>.speak()</code>指定默认的参数。</p>\n<h3 id=\"父类和子类\"><a href=\"#父类和子类\" class=\"headerlink\" title=\"父类和子类\"></a>父类和子类</h3><p>接下来我们为三种不同品种的狗各自创建一个子类：Jack Russell Terrier, Dachshund, and Bulldog:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">:</span>\n    species <span class=\"token operator\">=</span> <span class=\"token string\">\"Canis familiaris\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> is </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> years old\"</span></span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> sound<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> says </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>sound<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>创建子类的时候，你需要为子类定义一个自己的名称，然后在括号中填写父类的名称：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">JackRussellTerrier</span><span class=\"token punctuation\">(</span>Dog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Dachshund</span><span class=\"token punctuation\">(</span>Dog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Bulldog</span><span class=\"token punctuation\">(</span>Dog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>现在你可以在交互式窗口中通过以下方式创建各种实例：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> miles <span class=\"token operator\">=</span> JackRussellTerrier<span class=\"token punctuation\">(</span><span class=\"token string\">\"Miles\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> buddy <span class=\"token operator\">=</span> Dachshund<span class=\"token punctuation\">(</span><span class=\"token string\">\"Buddy\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> jack <span class=\"token operator\">=</span> Bulldog<span class=\"token punctuation\">(</span><span class=\"token string\">\"Jack\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> jim <span class=\"token operator\">=</span> Bulldog<span class=\"token punctuation\">(</span><span class=\"token string\">\"Jim\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>子类的实例继承了父类所有的特性和方法：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> miles<span class=\"token punctuation\">.</span>species\n<span class=\"token string\">'Canis familiaris'</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> buddy<span class=\"token punctuation\">.</span>name\n<span class=\"token string\">'Buddy'</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>jack<span class=\"token punctuation\">)</span>\nJack <span class=\"token keyword\">is</span> <span class=\"token number\">3</span> years old\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> jim<span class=\"token punctuation\">.</span>speak<span class=\"token punctuation\">(</span><span class=\"token string\">\"Woof\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Jim says Woof'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果要判断某一个对象属于哪一个类，你可以使用内建函数<code>type()</code>:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>miles<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token string\">'__main__.JackRussellTerrier'</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>如果你还想判断<code>miles</code>是否是<code>Dog</code>类的实例，可以i使用内建函数<code>isinstance()</code>:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>miles<span class=\"token punctuation\">,</span> Dog<span class=\"token punctuation\">)</span>\n<span class=\"token boolean\">True</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>注意到<code>isinstance</code>需要两个参数，一个对象和一个类。以上例子中，<code>isinstance()</code>检查 <code>miles</code>是否是<code>Dog</code>类的使用，返回值为<code>True</code>。</p>\n<p>对象<code>miles</code>，<code>buddy</code>，<code>jack</code>和<code>jim</code>都是<code>Dog</code>类的实例，但是<code>miles</code>不是<code>Bulldog</code>的实例，<code>jack</code>不是<code>Dachshund</code>的实例。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>miles<span class=\"token punctuation\">,</span> Bulldog<span class=\"token punctuation\">)</span>\n<span class=\"token boolean\">False</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>jack<span class=\"token punctuation\">,</span> Dachshund<span class=\"token punctuation\">)</span>\n<span class=\"token boolean\">False</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>概而言之，所有子类的对象，同时也是父类的对象，但是它们并不一定是其它子类的对象。</p>\n<h3 id=\"扩展父类的功能\"><a href=\"#扩展父类的功能\" class=\"headerlink\" title=\"扩展父类的功能\"></a>扩展父类的功能</h3><p>由于不同品种的狗有不同的叫声，如果你想要为每一种狗各自的<code>.speak()</code>方法指定一个默认的<code>sound</code>参数值，你可以在各自的子类中重新定义<code>.speak()</code>方法。</p>\n<p>为了覆盖父类中的某一个方法，你需要在子类中定义相同名字的方法。下面以<code>JackRussellTerrier</code>子类为例：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">JackRussellTerrier</span><span class=\"token punctuation\">(</span>Dog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> sound<span class=\"token operator\">=</span><span class=\"token string\">\"Arf\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> says </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>sound<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>通过在子类<code>JackRussellTerrier</code>中重新定义方法<code>.speak()</code>后，现在JackRussellTerrier品种的狗有了一种默认的叫声“Arf”。</p>\n<p>现在，如果你可以通过<code>JackRussellTerrier</code>的实例调用<code>.speak()</code>方法，并且不传递任何参数：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> miles <span class=\"token operator\">=</span> JackRussellTerrier<span class=\"token punctuation\">(</span><span class=\"token string\">\"Miles\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> miles<span class=\"token punctuation\">.</span>speak<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Miles says Arf'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>有时候，有些狗在愤怒的时候会发出不同的叫声，这是你仍然可以调用<code>.speak()</code>方法，并传递相应的参数值：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> miles<span class=\"token punctuation\">.</span>speak<span class=\"token punctuation\">(</span><span class=\"token string\">\"Grrr\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Miles says Grrr'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>请记住，如果对父类做了更改，会自动传递给子类。但是，如果子类已经重新定义了父类的特性或者方法，那么父类的更改并不会传递给子类。</p>\n<p>例如，在<code>Dog</code>类中，更改<code>.speak()</code>中的返回字符串内容，将<code>says</code>更改为<code>barks</code>:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># Leave other attributes and methods as they are</span>\n\n    <span class=\"token comment\"># Change the string returned by .speak()</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> sound<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> barks: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>sound<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>现在，你创建一个新的<code>Bulldog</code>实例，名称为<code>jim</code>，<code>jim.speak()</code>会返回新的字符串：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> jim <span class=\"token operator\">=</span> Bulldog<span class=\"token punctuation\">(</span><span class=\"token string\">\"Jim\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> jim<span class=\"token punctuation\">.</span>speak<span class=\"token punctuation\">(</span><span class=\"token string\">\"Woof\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Jim barks: Woof'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>但是，如果调用<code>JackRussellTerrier</code>实例的<code>.speak()</code>方法，会发现并不会返回新的字符串：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> miles <span class=\"token operator\">=</span> JackRussellTerrier<span class=\"token punctuation\">(</span><span class=\"token string\">\"Miles\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> miles<span class=\"token punctuation\">.</span>speak<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Miles says Arf'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>有时候，可能需要完全覆盖父类的方法，但是在这个例子中，我们想让子类<code>JackRussellTerrier</code>继续使用父类中<code>.speak()</code>方法返回的字符串格式。</p>\n<p>为了实现这个目的，你仍然需要在子类<code>JackRussellTerrier</code>中定义<code>.speak()</code>方法。但是，你在子类的<code>.speak()</code>方法中需要调用父类的<code>.speak()</code>方法，并且将相应的参数传递给父类的<code>.speak()</code>方法。</p>\n<p>在子类中的某一个方法中，可以使用<code>super()</code>来访问父类：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">JackRussellTerrier</span><span class=\"token punctuation\">(</span>Dog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> sound<span class=\"token operator\">=</span><span class=\"token string\">\"Arf\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>speak<span class=\"token punctuation\">(</span>sound<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>当你在子类<code>JackRussellTerrier</code>中调用<code>super().speak(sound)</code>的时候，Python会在父类<code>Dog</code>中查找<code>.speak()</code>方法，然后调用并传递参数<code>sound</code>。</p>\n<p>下面，我们可以测试一下新定义的子类<code>JackRussellTerrier</code>：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> miles <span class=\"token operator\">=</span> JackRussellTerrier<span class=\"token punctuation\">(</span><span class=\"token string\">\"Miles\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> miles<span class=\"token punctuation\">.</span>speak<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Miles barks: Arf'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>现在，当你调用<code>miles.speak()</code>的时候，你可以看到返回的结果是<code>Dog</code>类中定义的格式。</p>\n<blockquote>\n<p>注意：在上面的例子中，类的继承结构非常简单。<code>JackRussellTerrier</code>子类有一个父类<code>Dog</code>。在实际的应用场景中，类的结构十分复杂。</p>\n<p><code>super()</code>不仅只是在父类中查找某个方法或者特性，它还可以在整个类的结构中查找匹配的类和特性。如果你使用<code>super()</code>的时候不太小心，容易导致意外的结果。</p>\n</blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>通过本指南，你学到了Python中面向对象编程的知识。大多数编程语言，如Java, C#和C++等都是基于面向对象编程的原理，所以本指南的知识同样适用于以上语言。</p>\n<p>在本指南中，你学到了以下内容：</p>\n<ul>\n<li>定义一个类</li>\n<li>从一个类实例化一个对象</li>\n<li>使用特性和方法来定义对象的属性和行为</li>\n<li>通过继承，从父类创建一个子类</li>\n<li>使用<code>super()</code>访问父类的某一个方法</li>\n<li>使用<code>isinstance()</code>判断一个对象是否继承于另外一个类</li>\n</ul>"},{"title":"Windows Terminal中如何在Vim编辑器中复制文本内容","date":"2021-09-25T01:25:00.000Z","updated":"2021-09-25T01:25:00.000Z","_content":"\n在**Windows Terminal**中，通过SSH远程访问Linux系统，用Vim编辑器编辑文本内容时，如果需要将文本内容复制到其它应用，例如，记事本，则需要按照以下方式复制内容：\n\n1. 按住**SHIFT**键\n2. 按住鼠标**左键**，选择需要复制的内容\n3. 点击鼠标**右键**，完成复制\n4. 将复制的内容粘贴到其它应用中\n\n{% asset_img Pastedimage20230227152428.png 600 %}\n\n**注意：如果是其它Linux命令执行后的输出结果，例如cat命令，则不需要按住SHIFT键，只需要用鼠标左键选择需要复制的内容，然后点击右键完成复制。**","source":"_posts/杂七杂八/Windows-Terminal如何从Vim中复制内容.md","raw":"---\ntitle: Windows Terminal中如何在Vim编辑器中复制文本内容\ndate: 2021-09-25 09:25:00\nupdated: 2021-09-25 09:25:00\ntags: \n - windows\ncategories: \n - 杂七杂八\n---\n\n在**Windows Terminal**中，通过SSH远程访问Linux系统，用Vim编辑器编辑文本内容时，如果需要将文本内容复制到其它应用，例如，记事本，则需要按照以下方式复制内容：\n\n1. 按住**SHIFT**键\n2. 按住鼠标**左键**，选择需要复制的内容\n3. 点击鼠标**右键**，完成复制\n4. 将复制的内容粘贴到其它应用中\n\n{% asset_img Pastedimage20230227152428.png 600 %}\n\n**注意：如果是其它Linux命令执行后的输出结果，例如cat命令，则不需要按住SHIFT键，只需要用鼠标左键选择需要复制的内容，然后点击右键完成复制。**","slug":"杂七杂八/Windows-Terminal如何从Vim中复制内容","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clexvkk9o002m5i731r6s7gt1","content":"<p>在<strong>Windows Terminal</strong>中，通过SSH远程访问Linux系统，用Vim编辑器编辑文本内容时，如果需要将文本内容复制到其它应用，例如，记事本，则需要按照以下方式复制内容：</p>\n<ol>\n<li>按住<strong>SHIFT</strong>键</li>\n<li>按住鼠标<strong>左键</strong>，选择需要复制的内容</li>\n<li>点击鼠标<strong>右键</strong>，完成复制</li>\n<li>将复制的内容粘贴到其它应用中</li>\n</ol>\n<img src=\"/2021/09/25/za-qi-za-ba/windows-terminal-ru-he-cong-vim-zhong-fu-zhi-nei-rong/Pastedimage20230227152428.png\" class=\"\" width=\"600\">\n\n<p><strong>注意：如果是其它Linux命令执行后的输出结果，例如cat命令，则不需要按住SHIFT键，只需要用鼠标左键选择需要复制的内容，然后点击右键完成复制。</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在<strong>Windows Terminal</strong>中，通过SSH远程访问Linux系统，用Vim编辑器编辑文本内容时，如果需要将文本内容复制到其它应用，例如，记事本，则需要按照以下方式复制内容：</p>\n<ol>\n<li>按住<strong>SHIFT</strong>键</li>\n<li>按住鼠标<strong>左键</strong>，选择需要复制的内容</li>\n<li>点击鼠标<strong>右键</strong>，完成复制</li>\n<li>将复制的内容粘贴到其它应用中</li>\n</ol>\n<img src=\"/2021/09/25/za-qi-za-ba/windows-terminal-ru-he-cong-vim-zhong-fu-zhi-nei-rong/Pastedimage20230227152428.png\" class=\"\" width=\"600\">\n\n<p><strong>注意：如果是其它Linux命令执行后的输出结果，例如cat命令，则不需要按住SHIFT键，只需要用鼠标左键选择需要复制的内容，然后点击右键完成复制。</strong></p>\n"},{"title":"浅谈广域网加速技术","date":"2016-03-19T14:01:00.000Z","updated":"2016-03-19T14:01:00.000Z","_content":"\n## 概述\n\n对于企业而言，广域网的重要性是不言而喻的，通俗来讲，广域网是企业自己投资组建的一张专用网络，主要采用ATM, Fram Relay, MPLS等技术，与互联网不同的是，企业广域网一般只用于承载该企业自己的内网数据，并完全与互联网隔离，其特点在于”专网专用“，而互联网是共享型网络，由多家运营商组建和维护，全球的用户都在利用互联网分享和交流信息。\n\n因此，企业之所以组建广域网，主要根据以下几个方面考虑：\n\n安全    - 广域网可以保证数据的机密性，并且不会受到黑客攻击\n\n稳定    - 广域网的传输非常稳定，可以保证数据、语音和视频的传输速度和质量\n\n管理    - 广域网只承载企业内部应用的数据，便于管理和统计，且易于排查故障\n\n<!-- more -->\n\n虽然广域网为企业解决了很多的重要问题，例如安全性、稳定性、可管理性等，但还是存在一些其它不足之处：\n\n**带宽低**    - 与宽带动辄百兆相比，广域网接入通常只有2M, 4M, 10M等带宽，大数据传输时，速度比较慢，带宽低的最主要的原因，还是因为专线的费用太高。\n\n**延时高**    - 很多跨国企业通常会在全球建设许多分支机构或者办事处，由于物理距离的关系，数据传输的时延通常很高，因此，这会影响一些应用的用户体验，例如语音、视频、Web等等。\n\n**通讯协议效率低下**    - “协议”指的是网络传输协议，例如，TCP/UDP, HTTP, CIFS, FTP等等，由于网络传输协议设计之初，并没有太多考虑到带宽、延时、丢包等情况，因此，导致传输效率低下。\n\n## 广域网加速技术\n\n广域网加速是一个相对比较小众的市场，该领域的厂商包括Riverbed, SilverPeak, Cisco, BlueCoat等等，到目前为止，广域网加速技术已经趋于成熟，且受到企业的广泛认可和接受。对企业而言，广域网加速技术可以为企业带来以下两大益处：\n\n- 加速应用，提高效率\n\n- 节省带宽，降低成本\n\n从技术角度，广域网加速技术主要包含以下技术特性：\n\n### 数据消重\n\n数据消重是广域网加速的基础核心功能，其功效主要是减少重复数据传输，即相同的数据可以用指针或者索引值代替，由于指针数据远远小于原始数据，因此可以有效节省带宽。\n\n需要注意的是，数据消重和缓存（代理服务）的概念稍微有些差异，数据消重包含缓存的功能，但数据是以二进制的形式存在本地硬盘，并且相同的数据需要通过指针的形式传送给对端设备。\n\n而代理服务的缓存技术，通常是将图片、文件、音频等对象直接缓存在本地磁盘，并且重复数据不会以指针形式发送。\n\n数据消重技术作为广域网加速的核心功能，不仅可以节省专线带宽，还可以提高数据传输速度。\n\n### 传输协议优化\n\n传输协议，即TCP协议的传输效率本身比较低，每次建立连接，都需要进行三次握手，并且，需要通过确认和重传机制保证传输的可靠性。因此，当遇到网络丢包率比较高，或者延时比较大的时候，TCP的传输速率相对就很低。\n\n广域网加速技术通过HS-TCP, Selective Acknowledgment等技术，可以解决在带宽大、延时高、丢包率高的情况下，TCP协议效率低的问题，提高数据的传输速度。\n\n### 应用协议优化\n\n对企业而言，比较常用的应用有HTTP，CIFS, FTP，邮件等，许多应用协议开发之初，都是基于局域网的环境设计，并没有考虑高延时，低带宽的广域网环境，因此，当这些应用在广域网上传输时，应用的效率非常低，用户体验很差。\n\n广域网加速技术通过对特定应用协议的优化，大大提高了应用的传输速度，但是，应用协议本身也在不断演化和更新，因此，这对加速技术提出了比较高的要求，即加速技术需要不断适应和兼容各种应用协议及其更新的版本。\n\n当然，广域网加速技术在不断地发展，除了以上几种加速手段以外，还有UDP优化，存储协议优化，视频优化等，随着产品的不断成熟，广域网加速产品已成为许多企业组建网络的必选解决方案，不仅为企业节省了大量的专线投入成本，并且提高了应用的传输速度，提高了员工的办公效率，具有极高的投资回报率。","source":"_posts/杂七杂八/浅谈广域网加速技术.md","raw":"---\ntitle: 浅谈广域网加速技术\ndate: 2016-03-19 22:01:00\nupdated: 2016-03-19 22:01:00\ntags: \n - 广域网\ncategories: \n - 杂七杂八\n---\n\n## 概述\n\n对于企业而言，广域网的重要性是不言而喻的，通俗来讲，广域网是企业自己投资组建的一张专用网络，主要采用ATM, Fram Relay, MPLS等技术，与互联网不同的是，企业广域网一般只用于承载该企业自己的内网数据，并完全与互联网隔离，其特点在于”专网专用“，而互联网是共享型网络，由多家运营商组建和维护，全球的用户都在利用互联网分享和交流信息。\n\n因此，企业之所以组建广域网，主要根据以下几个方面考虑：\n\n安全    - 广域网可以保证数据的机密性，并且不会受到黑客攻击\n\n稳定    - 广域网的传输非常稳定，可以保证数据、语音和视频的传输速度和质量\n\n管理    - 广域网只承载企业内部应用的数据，便于管理和统计，且易于排查故障\n\n<!-- more -->\n\n虽然广域网为企业解决了很多的重要问题，例如安全性、稳定性、可管理性等，但还是存在一些其它不足之处：\n\n**带宽低**    - 与宽带动辄百兆相比，广域网接入通常只有2M, 4M, 10M等带宽，大数据传输时，速度比较慢，带宽低的最主要的原因，还是因为专线的费用太高。\n\n**延时高**    - 很多跨国企业通常会在全球建设许多分支机构或者办事处，由于物理距离的关系，数据传输的时延通常很高，因此，这会影响一些应用的用户体验，例如语音、视频、Web等等。\n\n**通讯协议效率低下**    - “协议”指的是网络传输协议，例如，TCP/UDP, HTTP, CIFS, FTP等等，由于网络传输协议设计之初，并没有太多考虑到带宽、延时、丢包等情况，因此，导致传输效率低下。\n\n## 广域网加速技术\n\n广域网加速是一个相对比较小众的市场，该领域的厂商包括Riverbed, SilverPeak, Cisco, BlueCoat等等，到目前为止，广域网加速技术已经趋于成熟，且受到企业的广泛认可和接受。对企业而言，广域网加速技术可以为企业带来以下两大益处：\n\n- 加速应用，提高效率\n\n- 节省带宽，降低成本\n\n从技术角度，广域网加速技术主要包含以下技术特性：\n\n### 数据消重\n\n数据消重是广域网加速的基础核心功能，其功效主要是减少重复数据传输，即相同的数据可以用指针或者索引值代替，由于指针数据远远小于原始数据，因此可以有效节省带宽。\n\n需要注意的是，数据消重和缓存（代理服务）的概念稍微有些差异，数据消重包含缓存的功能，但数据是以二进制的形式存在本地硬盘，并且相同的数据需要通过指针的形式传送给对端设备。\n\n而代理服务的缓存技术，通常是将图片、文件、音频等对象直接缓存在本地磁盘，并且重复数据不会以指针形式发送。\n\n数据消重技术作为广域网加速的核心功能，不仅可以节省专线带宽，还可以提高数据传输速度。\n\n### 传输协议优化\n\n传输协议，即TCP协议的传输效率本身比较低，每次建立连接，都需要进行三次握手，并且，需要通过确认和重传机制保证传输的可靠性。因此，当遇到网络丢包率比较高，或者延时比较大的时候，TCP的传输速率相对就很低。\n\n广域网加速技术通过HS-TCP, Selective Acknowledgment等技术，可以解决在带宽大、延时高、丢包率高的情况下，TCP协议效率低的问题，提高数据的传输速度。\n\n### 应用协议优化\n\n对企业而言，比较常用的应用有HTTP，CIFS, FTP，邮件等，许多应用协议开发之初，都是基于局域网的环境设计，并没有考虑高延时，低带宽的广域网环境，因此，当这些应用在广域网上传输时，应用的效率非常低，用户体验很差。\n\n广域网加速技术通过对特定应用协议的优化，大大提高了应用的传输速度，但是，应用协议本身也在不断演化和更新，因此，这对加速技术提出了比较高的要求，即加速技术需要不断适应和兼容各种应用协议及其更新的版本。\n\n当然，广域网加速技术在不断地发展，除了以上几种加速手段以外，还有UDP优化，存储协议优化，视频优化等，随着产品的不断成熟，广域网加速产品已成为许多企业组建网络的必选解决方案，不仅为企业节省了大量的专线投入成本，并且提高了应用的传输速度，提高了员工的办公效率，具有极高的投资回报率。","slug":"杂七杂八/浅谈广域网加速技术","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clexvkk9t002q5i73ftsyec0n","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>对于企业而言，广域网的重要性是不言而喻的，通俗来讲，广域网是企业自己投资组建的一张专用网络，主要采用ATM, Fram Relay, MPLS等技术，与互联网不同的是，企业广域网一般只用于承载该企业自己的内网数据，并完全与互联网隔离，其特点在于”专网专用“，而互联网是共享型网络，由多家运营商组建和维护，全球的用户都在利用互联网分享和交流信息。</p>\n<p>因此，企业之所以组建广域网，主要根据以下几个方面考虑：</p>\n<p>安全    - 广域网可以保证数据的机密性，并且不会受到黑客攻击</p>\n<p>稳定    - 广域网的传输非常稳定，可以保证数据、语音和视频的传输速度和质量</p>\n<p>管理    - 广域网只承载企业内部应用的数据，便于管理和统计，且易于排查故障</p>\n<span id=\"more\"></span>\n\n<p>虽然广域网为企业解决了很多的重要问题，例如安全性、稳定性、可管理性等，但还是存在一些其它不足之处：</p>\n<p><strong>带宽低</strong>    - 与宽带动辄百兆相比，广域网接入通常只有2M, 4M, 10M等带宽，大数据传输时，速度比较慢，带宽低的最主要的原因，还是因为专线的费用太高。</p>\n<p><strong>延时高</strong>    - 很多跨国企业通常会在全球建设许多分支机构或者办事处，由于物理距离的关系，数据传输的时延通常很高，因此，这会影响一些应用的用户体验，例如语音、视频、Web等等。</p>\n<p><strong>通讯协议效率低下</strong>    - “协议”指的是网络传输协议，例如，TCP&#x2F;UDP, HTTP, CIFS, FTP等等，由于网络传输协议设计之初，并没有太多考虑到带宽、延时、丢包等情况，因此，导致传输效率低下。</p>\n<h2 id=\"广域网加速技术\"><a href=\"#广域网加速技术\" class=\"headerlink\" title=\"广域网加速技术\"></a>广域网加速技术</h2><p>广域网加速是一个相对比较小众的市场，该领域的厂商包括Riverbed, SilverPeak, Cisco, BlueCoat等等，到目前为止，广域网加速技术已经趋于成熟，且受到企业的广泛认可和接受。对企业而言，广域网加速技术可以为企业带来以下两大益处：</p>\n<ul>\n<li><p>加速应用，提高效率</p>\n</li>\n<li><p>节省带宽，降低成本</p>\n</li>\n</ul>\n<p>从技术角度，广域网加速技术主要包含以下技术特性：</p>\n<h3 id=\"数据消重\"><a href=\"#数据消重\" class=\"headerlink\" title=\"数据消重\"></a>数据消重</h3><p>数据消重是广域网加速的基础核心功能，其功效主要是减少重复数据传输，即相同的数据可以用指针或者索引值代替，由于指针数据远远小于原始数据，因此可以有效节省带宽。</p>\n<p>需要注意的是，数据消重和缓存（代理服务）的概念稍微有些差异，数据消重包含缓存的功能，但数据是以二进制的形式存在本地硬盘，并且相同的数据需要通过指针的形式传送给对端设备。</p>\n<p>而代理服务的缓存技术，通常是将图片、文件、音频等对象直接缓存在本地磁盘，并且重复数据不会以指针形式发送。</p>\n<p>数据消重技术作为广域网加速的核心功能，不仅可以节省专线带宽，还可以提高数据传输速度。</p>\n<h3 id=\"传输协议优化\"><a href=\"#传输协议优化\" class=\"headerlink\" title=\"传输协议优化\"></a>传输协议优化</h3><p>传输协议，即TCP协议的传输效率本身比较低，每次建立连接，都需要进行三次握手，并且，需要通过确认和重传机制保证传输的可靠性。因此，当遇到网络丢包率比较高，或者延时比较大的时候，TCP的传输速率相对就很低。</p>\n<p>广域网加速技术通过HS-TCP, Selective Acknowledgment等技术，可以解决在带宽大、延时高、丢包率高的情况下，TCP协议效率低的问题，提高数据的传输速度。</p>\n<h3 id=\"应用协议优化\"><a href=\"#应用协议优化\" class=\"headerlink\" title=\"应用协议优化\"></a>应用协议优化</h3><p>对企业而言，比较常用的应用有HTTP，CIFS, FTP，邮件等，许多应用协议开发之初，都是基于局域网的环境设计，并没有考虑高延时，低带宽的广域网环境，因此，当这些应用在广域网上传输时，应用的效率非常低，用户体验很差。</p>\n<p>广域网加速技术通过对特定应用协议的优化，大大提高了应用的传输速度，但是，应用协议本身也在不断演化和更新，因此，这对加速技术提出了比较高的要求，即加速技术需要不断适应和兼容各种应用协议及其更新的版本。</p>\n<p>当然，广域网加速技术在不断地发展，除了以上几种加速手段以外，还有UDP优化，存储协议优化，视频优化等，随着产品的不断成熟，广域网加速产品已成为许多企业组建网络的必选解决方案，不仅为企业节省了大量的专线投入成本，并且提高了应用的传输速度，提高了员工的办公效率，具有极高的投资回报率。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>对于企业而言，广域网的重要性是不言而喻的，通俗来讲，广域网是企业自己投资组建的一张专用网络，主要采用ATM, Fram Relay, MPLS等技术，与互联网不同的是，企业广域网一般只用于承载该企业自己的内网数据，并完全与互联网隔离，其特点在于”专网专用“，而互联网是共享型网络，由多家运营商组建和维护，全球的用户都在利用互联网分享和交流信息。</p>\n<p>因此，企业之所以组建广域网，主要根据以下几个方面考虑：</p>\n<p>安全    - 广域网可以保证数据的机密性，并且不会受到黑客攻击</p>\n<p>稳定    - 广域网的传输非常稳定，可以保证数据、语音和视频的传输速度和质量</p>\n<p>管理    - 广域网只承载企业内部应用的数据，便于管理和统计，且易于排查故障</p>","more":"<p>虽然广域网为企业解决了很多的重要问题，例如安全性、稳定性、可管理性等，但还是存在一些其它不足之处：</p>\n<p><strong>带宽低</strong>    - 与宽带动辄百兆相比，广域网接入通常只有2M, 4M, 10M等带宽，大数据传输时，速度比较慢，带宽低的最主要的原因，还是因为专线的费用太高。</p>\n<p><strong>延时高</strong>    - 很多跨国企业通常会在全球建设许多分支机构或者办事处，由于物理距离的关系，数据传输的时延通常很高，因此，这会影响一些应用的用户体验，例如语音、视频、Web等等。</p>\n<p><strong>通讯协议效率低下</strong>    - “协议”指的是网络传输协议，例如，TCP&#x2F;UDP, HTTP, CIFS, FTP等等，由于网络传输协议设计之初，并没有太多考虑到带宽、延时、丢包等情况，因此，导致传输效率低下。</p>\n<h2 id=\"广域网加速技术\"><a href=\"#广域网加速技术\" class=\"headerlink\" title=\"广域网加速技术\"></a>广域网加速技术</h2><p>广域网加速是一个相对比较小众的市场，该领域的厂商包括Riverbed, SilverPeak, Cisco, BlueCoat等等，到目前为止，广域网加速技术已经趋于成熟，且受到企业的广泛认可和接受。对企业而言，广域网加速技术可以为企业带来以下两大益处：</p>\n<ul>\n<li><p>加速应用，提高效率</p>\n</li>\n<li><p>节省带宽，降低成本</p>\n</li>\n</ul>\n<p>从技术角度，广域网加速技术主要包含以下技术特性：</p>\n<h3 id=\"数据消重\"><a href=\"#数据消重\" class=\"headerlink\" title=\"数据消重\"></a>数据消重</h3><p>数据消重是广域网加速的基础核心功能，其功效主要是减少重复数据传输，即相同的数据可以用指针或者索引值代替，由于指针数据远远小于原始数据，因此可以有效节省带宽。</p>\n<p>需要注意的是，数据消重和缓存（代理服务）的概念稍微有些差异，数据消重包含缓存的功能，但数据是以二进制的形式存在本地硬盘，并且相同的数据需要通过指针的形式传送给对端设备。</p>\n<p>而代理服务的缓存技术，通常是将图片、文件、音频等对象直接缓存在本地磁盘，并且重复数据不会以指针形式发送。</p>\n<p>数据消重技术作为广域网加速的核心功能，不仅可以节省专线带宽，还可以提高数据传输速度。</p>\n<h3 id=\"传输协议优化\"><a href=\"#传输协议优化\" class=\"headerlink\" title=\"传输协议优化\"></a>传输协议优化</h3><p>传输协议，即TCP协议的传输效率本身比较低，每次建立连接，都需要进行三次握手，并且，需要通过确认和重传机制保证传输的可靠性。因此，当遇到网络丢包率比较高，或者延时比较大的时候，TCP的传输速率相对就很低。</p>\n<p>广域网加速技术通过HS-TCP, Selective Acknowledgment等技术，可以解决在带宽大、延时高、丢包率高的情况下，TCP协议效率低的问题，提高数据的传输速度。</p>\n<h3 id=\"应用协议优化\"><a href=\"#应用协议优化\" class=\"headerlink\" title=\"应用协议优化\"></a>应用协议优化</h3><p>对企业而言，比较常用的应用有HTTP，CIFS, FTP，邮件等，许多应用协议开发之初，都是基于局域网的环境设计，并没有考虑高延时，低带宽的广域网环境，因此，当这些应用在广域网上传输时，应用的效率非常低，用户体验很差。</p>\n<p>广域网加速技术通过对特定应用协议的优化，大大提高了应用的传输速度，但是，应用协议本身也在不断演化和更新，因此，这对加速技术提出了比较高的要求，即加速技术需要不断适应和兼容各种应用协议及其更新的版本。</p>\n<p>当然，广域网加速技术在不断地发展，除了以上几种加速手段以外，还有UDP优化，存储协议优化，视频优化等，随着产品的不断成熟，广域网加速产品已成为许多企业组建网络的必选解决方案，不仅为企业节省了大量的专线投入成本，并且提高了应用的传输速度，提高了员工的办公效率，具有极高的投资回报率。</p>"},{"title":"尝试用二至丸治疗白发","date":"2023-02-22T11:10:00.000Z","_content":"最近几年，可能是因为工作压力太大的缘故，加上经常熬夜，不断透支自己的精力，头上的白发越来越多。总想着能通过什么方法减少白发的生成，但是又不知道从何入手。\n\n{% asset_img image202302221900211.png 500 %}\n\n<!-- more -->\n\n最近，在阅读罗大伦写的[《中医祖传的那点儿东西1》](https://book.douban.com/subject/30257558/)时，正好看到书中提到了一个治疗白发的方子：**二至丸**。该方由**女贞子**和**墨旱莲**两种药材组成。据作者介绍，他年轻的时候由于学习压力比较大，导致白发很多。因此，他给自己开了二至丸的方子，服用一年后，白发少了很多。\n\n{% blockquote 罗大伦, 《中医祖传的那点儿东西1》 %}\n\n等到毕业了，终于有了时间，就在家里给自己开方子，用的是二至丸，女贞子30克、墨旱莲30克，每天熬水当茶喝（三碗水熬剩两碗），这个二至丸中的女贞子是冬至日采，墨旱莲是夏至日采，传统认为这个时候药物的药性是最好的，所以叫二至丸，有滋阴的作用。我则进一步分析这个药有交通阴阳的作用，很平和，只要是因虚损导致的白发都可以服用，不必计较阴虚阳虚。我大约服用了一年，结果头发变黑了很多，理发师再也不劝我了，而且还向我咨询怎么弄的，他也想试试。  \n\n{% endblockquote %}\n\n​          \n\n**墨旱莲**\n\n又被称为旱莲草，味甘、酸，性寒，归肝、肾经。主要功效为滋阴益肾，凉血止血。脾胃虚寒，大便泄泻者不宜服用。\n\n{% asset_img 8ED26B4B-76B8-446F-8CF4-D6DF1F55DF4F_1_201_a.jpeg 500 %}\n\n**女贞子**\n\n一种果实，味甘、苦，性凉，归肝、肾经。主要功效为补益肝肾，清热明目。脾胃虚寒及阳虚者忌服。\n\n{% asset_img 91C9F6E9-784C-4640-86D5-491AA2F66858_1_201_a.jpeg 500 %}\n\n于是，我决定买来试试，在网上搜索后，发现二至丸的中成药价格差别很大，几十元到上百元不等。价格贵的吃不起，便宜的又担心药效不行。最后，决定自己买药来熬汤喝。网上找了一家店，花了25元，购买了250克女贞子和250克的墨旱莲。估计这些药大约能喝10天，计划坚持喝一个月，看看效果如何。\n\n**熬药方法**\n\n三汤勺女贞子，手抓3-5小把墨旱莲，冷水浸泡30分钟后，放入锅中，倒入三碗冷水，然后开火烧至水沸腾后，开小火煎30分钟。最后熬出两碗汤药，上午和下午各喝一碗。\n\n{% asset_img E03DCBDD-6B51-46B6-B7DD-18C6C3FD86C1_1_201_a.jpeg 500 %}","source":"_posts/中医/尝试用二至丸治疗白发.md","raw":"---\ntitle: 尝试用二至丸治疗白发\ndate: 2023-02-22 19:10:00\ntags: \n - 医案\ncategories: \n - 中医\n---\n最近几年，可能是因为工作压力太大的缘故，加上经常熬夜，不断透支自己的精力，头上的白发越来越多。总想着能通过什么方法减少白发的生成，但是又不知道从何入手。\n\n{% asset_img image202302221900211.png 500 %}\n\n<!-- more -->\n\n最近，在阅读罗大伦写的[《中医祖传的那点儿东西1》](https://book.douban.com/subject/30257558/)时，正好看到书中提到了一个治疗白发的方子：**二至丸**。该方由**女贞子**和**墨旱莲**两种药材组成。据作者介绍，他年轻的时候由于学习压力比较大，导致白发很多。因此，他给自己开了二至丸的方子，服用一年后，白发少了很多。\n\n{% blockquote 罗大伦, 《中医祖传的那点儿东西1》 %}\n\n等到毕业了，终于有了时间，就在家里给自己开方子，用的是二至丸，女贞子30克、墨旱莲30克，每天熬水当茶喝（三碗水熬剩两碗），这个二至丸中的女贞子是冬至日采，墨旱莲是夏至日采，传统认为这个时候药物的药性是最好的，所以叫二至丸，有滋阴的作用。我则进一步分析这个药有交通阴阳的作用，很平和，只要是因虚损导致的白发都可以服用，不必计较阴虚阳虚。我大约服用了一年，结果头发变黑了很多，理发师再也不劝我了，而且还向我咨询怎么弄的，他也想试试。  \n\n{% endblockquote %}\n\n​          \n\n**墨旱莲**\n\n又被称为旱莲草，味甘、酸，性寒，归肝、肾经。主要功效为滋阴益肾，凉血止血。脾胃虚寒，大便泄泻者不宜服用。\n\n{% asset_img 8ED26B4B-76B8-446F-8CF4-D6DF1F55DF4F_1_201_a.jpeg 500 %}\n\n**女贞子**\n\n一种果实，味甘、苦，性凉，归肝、肾经。主要功效为补益肝肾，清热明目。脾胃虚寒及阳虚者忌服。\n\n{% asset_img 91C9F6E9-784C-4640-86D5-491AA2F66858_1_201_a.jpeg 500 %}\n\n于是，我决定买来试试，在网上搜索后，发现二至丸的中成药价格差别很大，几十元到上百元不等。价格贵的吃不起，便宜的又担心药效不行。最后，决定自己买药来熬汤喝。网上找了一家店，花了25元，购买了250克女贞子和250克的墨旱莲。估计这些药大约能喝10天，计划坚持喝一个月，看看效果如何。\n\n**熬药方法**\n\n三汤勺女贞子，手抓3-5小把墨旱莲，冷水浸泡30分钟后，放入锅中，倒入三碗冷水，然后开火烧至水沸腾后，开小火煎30分钟。最后熬出两碗汤药，上午和下午各喝一碗。\n\n{% asset_img E03DCBDD-6B51-46B6-B7DD-18C6C3FD86C1_1_201_a.jpeg 500 %}","slug":"中医/尝试用二至丸治疗白发","published":1,"updated":"2023-03-03T01:33:03.610Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clexvkk9x002t5i735lnmcw4t","content":"<p>最近几年，可能是因为工作压力太大的缘故，加上经常熬夜，不断透支自己的精力，头上的白发越来越多。总想着能通过什么方法减少白发的生成，但是又不知道从何入手。</p>\n<img src=\"/2023/02/22/zhong-yi/chang-shi-yong-er-zhi-wan-zhi-liao-bai-fa/image202302221900211.png\" class=\"\" width=\"500\">\n\n<span id=\"more\"></span>\n\n<p>最近，在阅读罗大伦写的<a href=\"https://book.douban.com/subject/30257558/\">《中医祖传的那点儿东西1》</a>时，正好看到书中提到了一个治疗白发的方子：<strong>二至丸</strong>。该方由<strong>女贞子</strong>和<strong>墨旱莲</strong>两种药材组成。据作者介绍，他年轻的时候由于学习压力比较大，导致白发很多。因此，他给自己开了二至丸的方子，服用一年后，白发少了很多。</p>\n<blockquote><p>等到毕业了，终于有了时间，就在家里给自己开方子，用的是二至丸，女贞子30克、墨旱莲30克，每天熬水当茶喝（三碗水熬剩两碗），这个二至丸中的女贞子是冬至日采，墨旱莲是夏至日采，传统认为这个时候药物的药性是最好的，所以叫二至丸，有滋阴的作用。我则进一步分析这个药有交通阴阳的作用，很平和，只要是因虚损导致的白发都可以服用，不必计较阴虚阳虚。我大约服用了一年，结果头发变黑了很多，理发师再也不劝我了，而且还向我咨询怎么弄的，他也想试试。  </p>\n<footer><strong>罗大伦</strong><cite>《中医祖传的那点儿东西1》</cite></footer></blockquote>\n\n<p>​          </p>\n<p><strong>墨旱莲</strong></p>\n<p>又被称为旱莲草，味甘、酸，性寒，归肝、肾经。主要功效为滋阴益肾，凉血止血。脾胃虚寒，大便泄泻者不宜服用。</p>\n<img src=\"/2023/02/22/zhong-yi/chang-shi-yong-er-zhi-wan-zhi-liao-bai-fa/8ED26B4B-76B8-446F-8CF4-D6DF1F55DF4F_1_201_a.jpeg\" class=\"\" width=\"500\">\n\n<p><strong>女贞子</strong></p>\n<p>一种果实，味甘、苦，性凉，归肝、肾经。主要功效为补益肝肾，清热明目。脾胃虚寒及阳虚者忌服。</p>\n<img src=\"/2023/02/22/zhong-yi/chang-shi-yong-er-zhi-wan-zhi-liao-bai-fa/91C9F6E9-784C-4640-86D5-491AA2F66858_1_201_a.jpeg\" class=\"\" width=\"500\">\n\n<p>于是，我决定买来试试，在网上搜索后，发现二至丸的中成药价格差别很大，几十元到上百元不等。价格贵的吃不起，便宜的又担心药效不行。最后，决定自己买药来熬汤喝。网上找了一家店，花了25元，购买了250克女贞子和250克的墨旱莲。估计这些药大约能喝10天，计划坚持喝一个月，看看效果如何。</p>\n<p><strong>熬药方法</strong></p>\n<p>三汤勺女贞子，手抓3-5小把墨旱莲，冷水浸泡30分钟后，放入锅中，倒入三碗冷水，然后开火烧至水沸腾后，开小火煎30分钟。最后熬出两碗汤药，上午和下午各喝一碗。</p>\n<img src=\"/2023/02/22/zhong-yi/chang-shi-yong-er-zhi-wan-zhi-liao-bai-fa/E03DCBDD-6B51-46B6-B7DD-18C6C3FD86C1_1_201_a.jpeg\" class=\"\" width=\"500\">","site":{"data":{}},"excerpt":"<p>最近几年，可能是因为工作压力太大的缘故，加上经常熬夜，不断透支自己的精力，头上的白发越来越多。总想着能通过什么方法减少白发的生成，但是又不知道从何入手。</p>\n<img src=\"/2023/02/22/zhong-yi/chang-shi-yong-er-zhi-wan-zhi-liao-bai-fa/image202302221900211.png\" class=\"\" width=\"500\">","more":"<p>最近，在阅读罗大伦写的<a href=\"https://book.douban.com/subject/30257558/\">《中医祖传的那点儿东西1》</a>时，正好看到书中提到了一个治疗白发的方子：<strong>二至丸</strong>。该方由<strong>女贞子</strong>和<strong>墨旱莲</strong>两种药材组成。据作者介绍，他年轻的时候由于学习压力比较大，导致白发很多。因此，他给自己开了二至丸的方子，服用一年后，白发少了很多。</p>\n<blockquote><p>等到毕业了，终于有了时间，就在家里给自己开方子，用的是二至丸，女贞子30克、墨旱莲30克，每天熬水当茶喝（三碗水熬剩两碗），这个二至丸中的女贞子是冬至日采，墨旱莲是夏至日采，传统认为这个时候药物的药性是最好的，所以叫二至丸，有滋阴的作用。我则进一步分析这个药有交通阴阳的作用，很平和，只要是因虚损导致的白发都可以服用，不必计较阴虚阳虚。我大约服用了一年，结果头发变黑了很多，理发师再也不劝我了，而且还向我咨询怎么弄的，他也想试试。  </p>\n<footer><strong>罗大伦</strong><cite>《中医祖传的那点儿东西1》</cite></footer></blockquote>\n\n<p>​          </p>\n<p><strong>墨旱莲</strong></p>\n<p>又被称为旱莲草，味甘、酸，性寒，归肝、肾经。主要功效为滋阴益肾，凉血止血。脾胃虚寒，大便泄泻者不宜服用。</p>\n<img src=\"/2023/02/22/zhong-yi/chang-shi-yong-er-zhi-wan-zhi-liao-bai-fa/8ED26B4B-76B8-446F-8CF4-D6DF1F55DF4F_1_201_a.jpeg\" class=\"\" width=\"500\">\n\n<p><strong>女贞子</strong></p>\n<p>一种果实，味甘、苦，性凉，归肝、肾经。主要功效为补益肝肾，清热明目。脾胃虚寒及阳虚者忌服。</p>\n<img src=\"/2023/02/22/zhong-yi/chang-shi-yong-er-zhi-wan-zhi-liao-bai-fa/91C9F6E9-784C-4640-86D5-491AA2F66858_1_201_a.jpeg\" class=\"\" width=\"500\">\n\n<p>于是，我决定买来试试，在网上搜索后，发现二至丸的中成药价格差别很大，几十元到上百元不等。价格贵的吃不起，便宜的又担心药效不行。最后，决定自己买药来熬汤喝。网上找了一家店，花了25元，购买了250克女贞子和250克的墨旱莲。估计这些药大约能喝10天，计划坚持喝一个月，看看效果如何。</p>\n<p><strong>熬药方法</strong></p>\n<p>三汤勺女贞子，手抓3-5小把墨旱莲，冷水浸泡30分钟后，放入锅中，倒入三碗冷水，然后开火烧至水沸腾后，开小火煎30分钟。最后熬出两碗汤药，上午和下午各喝一碗。</p>\n<img src=\"/2023/02/22/zhong-yi/chang-shi-yong-er-zhi-wan-zhi-liao-bai-fa/E03DCBDD-6B51-46B6-B7DD-18C6C3FD86C1_1_201_a.jpeg\" class=\"\" width=\"500\">"},{"title":"IFTTT | 一种云端的自动化平台","date":"2021-10-25T02:39:00.000Z","_content":"\n## IFTTT是什么\n\nIFTTT的全称是**If this then that**，是一个云端的自动化平台，支持各种SaaS服务的集成。通俗地说，每个SaaS服务相当于是一座“孤岛”，而IFTTT是一座“桥梁”，将这些孤岛连通起来。\n\nIFTTT集成了上千种SaaS平台，包括Google, Microsoft, Apple等等，图中是其中一部分。\n\n![](2021-10-25122357.png)\n\n**IFTTT的工作方式**\n\nIFTTT的工作方式是：If **Trigger（触发器）**then **Action（动作）**。首先，需要预先定义触发器和动作，通常触发器是某一个SaaS平台提供的服务，而动作是另外一个SaaS平台提供的服务，当触发器被触发后，就会导致动作被执行。\n\n<!-- more -->\n\n## IFTTT能干什么\n\nIFTTT的应用场景非常广泛，以下介绍几个比较简单的使用场景：\n\n- 如果用户平时使用Google日历来安排工作和行程，同时使用Outlook来收发邮件，假设用户需要在10月30日发送一封邮件给客户，那么就可以通过IFTTT提前设置好，到10月30日自动发送邮件给客户。\n- 根据日落和日出的变化，可以通过IFTTT自动开/关照明灯。\n- 根据天气预报，提前发送关于雨雪等极端天气的预警。\n- 根据一些服务器的状态变化，自动执行一些运维操作，例如重启服务器等。\n- 到家连上蓝牙后，自动播放音乐。\n\n## IFTTT配置\n\n下面以天气预报为例，如果明天要下雨，就提前发送通知到手机上。\n\n首先，在IFTTT平台上，需要创建一个Applet，主要包含两部分：**触发器（Trigger）**和**动作（Action）**。一般是先配置If thtis，也就是触发器，然后再配置Then That，也就是动作。\n\n![](2021-10-25120949.png)\n\n点击If This旁边的**Add**按钮，就可以开始配置触发器了。在选择服务的搜索框中，输入关键字weather，可以找到好几种提供天气预报服务的SaaS平台。我们选择**Weather Underground**。\n\n![](2021-10-25121115.png)\nWeather Underground提供了很多种触发器，我们选择**Tomorrow's forecast calls for**。\n\n![](2021-10-25121340.png)\n\n\n下面开始配置触发器的具体设置，完成后点击**Create trigger**。\n\nConditiona: Rain\n\nLocation: 此处需要定义所在的国家和城市\n\n![](2021-10-25121610.png)\n\n完成**If This**的配置以后，下一步配置**Then That**，点击**Add**。\n\n![](2021-10-25121641.png)\n\n我们可以选择**Notifications**，该服务可以为手机端发送通知。\n\n![](2021-10-25121709.png)\n\n可以选择通知的内容是普通文本还是富文本，此处我们可以选择富文本。\n\n![](2021-10-25121731.png)\n\n下面定义通知的内容，包括标题，正文等。\n\n![](2021-10-25121856.png)\n\n完成配置以后，手机端还需要安装IFTTT的客户端程序，并且登录IFTTT的账号。这样，才会接收到通知。\n\n以上只是一个最简单的应用场景，其实IFTTT比较强大的功能是可以让我们自己DIY的一些智能家居产品通过Webhook(Web API)的方式，接入IFTTT平台。这样，就可以实现智能家居的自动化操作了。\n\n![](2021-10-25123945.png)","source":"_posts/智能家居/什么是IFTTT.md","raw":"---\ntitle: IFTTT | 一种云端的自动化平台\ndate: 2021-10-25 10:39\ntags: \n - raspberrypi\n - ifttt\ncategories: \n - 智能家居\n---\n\n## IFTTT是什么\n\nIFTTT的全称是**If this then that**，是一个云端的自动化平台，支持各种SaaS服务的集成。通俗地说，每个SaaS服务相当于是一座“孤岛”，而IFTTT是一座“桥梁”，将这些孤岛连通起来。\n\nIFTTT集成了上千种SaaS平台，包括Google, Microsoft, Apple等等，图中是其中一部分。\n\n![](2021-10-25122357.png)\n\n**IFTTT的工作方式**\n\nIFTTT的工作方式是：If **Trigger（触发器）**then **Action（动作）**。首先，需要预先定义触发器和动作，通常触发器是某一个SaaS平台提供的服务，而动作是另外一个SaaS平台提供的服务，当触发器被触发后，就会导致动作被执行。\n\n<!-- more -->\n\n## IFTTT能干什么\n\nIFTTT的应用场景非常广泛，以下介绍几个比较简单的使用场景：\n\n- 如果用户平时使用Google日历来安排工作和行程，同时使用Outlook来收发邮件，假设用户需要在10月30日发送一封邮件给客户，那么就可以通过IFTTT提前设置好，到10月30日自动发送邮件给客户。\n- 根据日落和日出的变化，可以通过IFTTT自动开/关照明灯。\n- 根据天气预报，提前发送关于雨雪等极端天气的预警。\n- 根据一些服务器的状态变化，自动执行一些运维操作，例如重启服务器等。\n- 到家连上蓝牙后，自动播放音乐。\n\n## IFTTT配置\n\n下面以天气预报为例，如果明天要下雨，就提前发送通知到手机上。\n\n首先，在IFTTT平台上，需要创建一个Applet，主要包含两部分：**触发器（Trigger）**和**动作（Action）**。一般是先配置If thtis，也就是触发器，然后再配置Then That，也就是动作。\n\n![](2021-10-25120949.png)\n\n点击If This旁边的**Add**按钮，就可以开始配置触发器了。在选择服务的搜索框中，输入关键字weather，可以找到好几种提供天气预报服务的SaaS平台。我们选择**Weather Underground**。\n\n![](2021-10-25121115.png)\nWeather Underground提供了很多种触发器，我们选择**Tomorrow's forecast calls for**。\n\n![](2021-10-25121340.png)\n\n\n下面开始配置触发器的具体设置，完成后点击**Create trigger**。\n\nConditiona: Rain\n\nLocation: 此处需要定义所在的国家和城市\n\n![](2021-10-25121610.png)\n\n完成**If This**的配置以后，下一步配置**Then That**，点击**Add**。\n\n![](2021-10-25121641.png)\n\n我们可以选择**Notifications**，该服务可以为手机端发送通知。\n\n![](2021-10-25121709.png)\n\n可以选择通知的内容是普通文本还是富文本，此处我们可以选择富文本。\n\n![](2021-10-25121731.png)\n\n下面定义通知的内容，包括标题，正文等。\n\n![](2021-10-25121856.png)\n\n完成配置以后，手机端还需要安装IFTTT的客户端程序，并且登录IFTTT的账号。这样，才会接收到通知。\n\n以上只是一个最简单的应用场景，其实IFTTT比较强大的功能是可以让我们自己DIY的一些智能家居产品通过Webhook(Web API)的方式，接入IFTTT平台。这样，就可以实现智能家居的自动化操作了。\n\n![](2021-10-25123945.png)","slug":"智能家居/什么是IFTTT","published":1,"updated":"2023-03-07T07:20:07.209Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clexxb8oz0000v6739wcj1s11","content":"<h2 id=\"IFTTT是什么\"><a href=\"#IFTTT是什么\" class=\"headerlink\" title=\"IFTTT是什么\"></a>IFTTT是什么</h2><p>IFTTT的全称是<strong>If this then that</strong>，是一个云端的自动化平台，支持各种SaaS服务的集成。通俗地说，每个SaaS服务相当于是一座“孤岛”，而IFTTT是一座“桥梁”，将这些孤岛连通起来。</p>\n<p>IFTTT集成了上千种SaaS平台，包括Google, Microsoft, Apple等等，图中是其中一部分。</p>\n<p><img src=\"/2021/10/25/zhi-neng-jia-ju/shi-me-shi-ifttt/2021-10-25122357.png\"></p>\n<p><strong>IFTTT的工作方式</strong></p>\n<p>IFTTT的工作方式是：If <strong>Trigger（触发器）</strong>then <strong>Action（动作）</strong>。首先，需要预先定义触发器和动作，通常触发器是某一个SaaS平台提供的服务，而动作是另外一个SaaS平台提供的服务，当触发器被触发后，就会导致动作被执行。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"IFTTT能干什么\"><a href=\"#IFTTT能干什么\" class=\"headerlink\" title=\"IFTTT能干什么\"></a>IFTTT能干什么</h2><p>IFTTT的应用场景非常广泛，以下介绍几个比较简单的使用场景：</p>\n<ul>\n<li>如果用户平时使用Google日历来安排工作和行程，同时使用Outlook来收发邮件，假设用户需要在10月30日发送一封邮件给客户，那么就可以通过IFTTT提前设置好，到10月30日自动发送邮件给客户。</li>\n<li>根据日落和日出的变化，可以通过IFTTT自动开&#x2F;关照明灯。</li>\n<li>根据天气预报，提前发送关于雨雪等极端天气的预警。</li>\n<li>根据一些服务器的状态变化，自动执行一些运维操作，例如重启服务器等。</li>\n<li>到家连上蓝牙后，自动播放音乐。</li>\n</ul>\n<h2 id=\"IFTTT配置\"><a href=\"#IFTTT配置\" class=\"headerlink\" title=\"IFTTT配置\"></a>IFTTT配置</h2><p>下面以天气预报为例，如果明天要下雨，就提前发送通知到手机上。</p>\n<p>首先，在IFTTT平台上，需要创建一个Applet，主要包含两部分：<strong>触发器（Trigger）</strong>和<strong>动作（Action）</strong>。一般是先配置If thtis，也就是触发器，然后再配置Then That，也就是动作。</p>\n<p><img src=\"/2021/10/25/zhi-neng-jia-ju/shi-me-shi-ifttt/2021-10-25120949.png\"></p>\n<p>点击If This旁边的<strong>Add</strong>按钮，就可以开始配置触发器了。在选择服务的搜索框中，输入关键字weather，可以找到好几种提供天气预报服务的SaaS平台。我们选择<strong>Weather Underground</strong>。</p>\n<p><img src=\"/2021/10/25/zhi-neng-jia-ju/shi-me-shi-ifttt/2021-10-25121115.png\"><br>Weather Underground提供了很多种触发器，我们选择<strong>Tomorrow’s forecast calls for</strong>。</p>\n<p><img src=\"/2021/10/25/zhi-neng-jia-ju/shi-me-shi-ifttt/2021-10-25121340.png\"></p>\n<p>下面开始配置触发器的具体设置，完成后点击<strong>Create trigger</strong>。</p>\n<p>Conditiona: Rain</p>\n<p>Location: 此处需要定义所在的国家和城市</p>\n<p><img src=\"/2021/10/25/zhi-neng-jia-ju/shi-me-shi-ifttt/2021-10-25121610.png\"></p>\n<p>完成<strong>If This</strong>的配置以后，下一步配置<strong>Then That</strong>，点击<strong>Add</strong>。</p>\n<p><img src=\"/2021/10/25/zhi-neng-jia-ju/shi-me-shi-ifttt/2021-10-25121641.png\"></p>\n<p>我们可以选择<strong>Notifications</strong>，该服务可以为手机端发送通知。</p>\n<p><img src=\"/2021/10/25/zhi-neng-jia-ju/shi-me-shi-ifttt/2021-10-25121709.png\"></p>\n<p>可以选择通知的内容是普通文本还是富文本，此处我们可以选择富文本。</p>\n<p><img src=\"/2021/10/25/zhi-neng-jia-ju/shi-me-shi-ifttt/2021-10-25121731.png\"></p>\n<p>下面定义通知的内容，包括标题，正文等。</p>\n<p><img src=\"/2021/10/25/zhi-neng-jia-ju/shi-me-shi-ifttt/2021-10-25121856.png\"></p>\n<p>完成配置以后，手机端还需要安装IFTTT的客户端程序，并且登录IFTTT的账号。这样，才会接收到通知。</p>\n<p>以上只是一个最简单的应用场景，其实IFTTT比较强大的功能是可以让我们自己DIY的一些智能家居产品通过Webhook(Web API)的方式，接入IFTTT平台。这样，就可以实现智能家居的自动化操作了。</p>\n<p><img src=\"/2021/10/25/zhi-neng-jia-ju/shi-me-shi-ifttt/2021-10-25123945.png\"></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"IFTTT是什么\"><a href=\"#IFTTT是什么\" class=\"headerlink\" title=\"IFTTT是什么\"></a>IFTTT是什么</h2><p>IFTTT的全称是<strong>If this then that</strong>，是一个云端的自动化平台，支持各种SaaS服务的集成。通俗地说，每个SaaS服务相当于是一座“孤岛”，而IFTTT是一座“桥梁”，将这些孤岛连通起来。</p>\n<p>IFTTT集成了上千种SaaS平台，包括Google, Microsoft, Apple等等，图中是其中一部分。</p>\n<p><img src=\"/2021/10/25/zhi-neng-jia-ju/shi-me-shi-ifttt/2021-10-25122357.png\"></p>\n<p><strong>IFTTT的工作方式</strong></p>\n<p>IFTTT的工作方式是：If <strong>Trigger（触发器）</strong>then <strong>Action（动作）</strong>。首先，需要预先定义触发器和动作，通常触发器是某一个SaaS平台提供的服务，而动作是另外一个SaaS平台提供的服务，当触发器被触发后，就会导致动作被执行。</p>","more":"<h2 id=\"IFTTT能干什么\"><a href=\"#IFTTT能干什么\" class=\"headerlink\" title=\"IFTTT能干什么\"></a>IFTTT能干什么</h2><p>IFTTT的应用场景非常广泛，以下介绍几个比较简单的使用场景：</p>\n<ul>\n<li>如果用户平时使用Google日历来安排工作和行程，同时使用Outlook来收发邮件，假设用户需要在10月30日发送一封邮件给客户，那么就可以通过IFTTT提前设置好，到10月30日自动发送邮件给客户。</li>\n<li>根据日落和日出的变化，可以通过IFTTT自动开&#x2F;关照明灯。</li>\n<li>根据天气预报，提前发送关于雨雪等极端天气的预警。</li>\n<li>根据一些服务器的状态变化，自动执行一些运维操作，例如重启服务器等。</li>\n<li>到家连上蓝牙后，自动播放音乐。</li>\n</ul>\n<h2 id=\"IFTTT配置\"><a href=\"#IFTTT配置\" class=\"headerlink\" title=\"IFTTT配置\"></a>IFTTT配置</h2><p>下面以天气预报为例，如果明天要下雨，就提前发送通知到手机上。</p>\n<p>首先，在IFTTT平台上，需要创建一个Applet，主要包含两部分：<strong>触发器（Trigger）</strong>和<strong>动作（Action）</strong>。一般是先配置If thtis，也就是触发器，然后再配置Then That，也就是动作。</p>\n<p><img src=\"/2021/10/25/zhi-neng-jia-ju/shi-me-shi-ifttt/2021-10-25120949.png\"></p>\n<p>点击If This旁边的<strong>Add</strong>按钮，就可以开始配置触发器了。在选择服务的搜索框中，输入关键字weather，可以找到好几种提供天气预报服务的SaaS平台。我们选择<strong>Weather Underground</strong>。</p>\n<p><img src=\"/2021/10/25/zhi-neng-jia-ju/shi-me-shi-ifttt/2021-10-25121115.png\"><br>Weather Underground提供了很多种触发器，我们选择<strong>Tomorrow’s forecast calls for</strong>。</p>\n<p><img src=\"/2021/10/25/zhi-neng-jia-ju/shi-me-shi-ifttt/2021-10-25121340.png\"></p>\n<p>下面开始配置触发器的具体设置，完成后点击<strong>Create trigger</strong>。</p>\n<p>Conditiona: Rain</p>\n<p>Location: 此处需要定义所在的国家和城市</p>\n<p><img src=\"/2021/10/25/zhi-neng-jia-ju/shi-me-shi-ifttt/2021-10-25121610.png\"></p>\n<p>完成<strong>If This</strong>的配置以后，下一步配置<strong>Then That</strong>，点击<strong>Add</strong>。</p>\n<p><img src=\"/2021/10/25/zhi-neng-jia-ju/shi-me-shi-ifttt/2021-10-25121641.png\"></p>\n<p>我们可以选择<strong>Notifications</strong>，该服务可以为手机端发送通知。</p>\n<p><img src=\"/2021/10/25/zhi-neng-jia-ju/shi-me-shi-ifttt/2021-10-25121709.png\"></p>\n<p>可以选择通知的内容是普通文本还是富文本，此处我们可以选择富文本。</p>\n<p><img src=\"/2021/10/25/zhi-neng-jia-ju/shi-me-shi-ifttt/2021-10-25121731.png\"></p>\n<p>下面定义通知的内容，包括标题，正文等。</p>\n<p><img src=\"/2021/10/25/zhi-neng-jia-ju/shi-me-shi-ifttt/2021-10-25121856.png\"></p>\n<p>完成配置以后，手机端还需要安装IFTTT的客户端程序，并且登录IFTTT的账号。这样，才会接收到通知。</p>\n<p>以上只是一个最简单的应用场景，其实IFTTT比较强大的功能是可以让我们自己DIY的一些智能家居产品通过Webhook(Web API)的方式，接入IFTTT平台。这样，就可以实现智能家居的自动化操作了。</p>\n<p><img src=\"/2021/10/25/zhi-neng-jia-ju/shi-me-shi-ifttt/2021-10-25123945.png\"></p>"},{"title":"华硕路由器VPN功能","date":"2021-10-02T01:01:00.000Z","_content":"\n平时，家中的路由器很少会受到关注，除非无法上网或者网速变慢，才会想到去检查路由器。因此，可以说，家用路由器的存在感是比较弱的。但是，最近帮朋友解决了一个家中的网络问题后，改变了我对路由器的看法。\n\n朋友是一个比较注重个人隐私和数据安全的人，因此，总是把一些重要文件、照片等存放在家中的电脑上面。但是，如果他不在家中，就无法访问家里的电脑了。因此，朋友向我咨询是否有什么办法，可以让他即使在外面，也可以访问家中电脑上的数据。于是，我建议他使用网盘同步文件，但是朋友比较担心文件的安全性，不想使用网盘。\n\n我想了想，那只能使用**虚拟私人专用网络(VPN)** 了，但是，这项功能一般只会在企业级的设备上使用，家用路由器通常不支持这项功能。跟朋友解释了以后，朋友说他买的路由器功能比较多，也许支持这项功能。\n\n<!-- more -->\n\n## VPN服务器\n\n于是，抱着试试的心态，我在朋友家中打开了路由器的管理界面，在左侧菜单果然看到了**VPN**的选项。并且， 支持三种类型的VPN: PPTP, OpenVPN和IPSec VPN，我决定采用IPSec VPN。开启IPSec VPN的功能以后，以下配置信息需要记录下来，因为配置VPN客户端的时候会用到：\n\n- **服务器IP地址：vpn.asuscomm.com**\n- **预共享密钥：123456**\n- **用户名称与密码：test/123456**\n\n![](2021-10-02094926.jpg)\n\n## iOS客户端\n\n路由器上的配置完成以后，接下来需要在手机端配置VPN功能，下面以苹果手机为例。\n\n在手机上打开**设置 - 通用 - VPN与设备管理 - VPN**，然后点击**添加VPN配置...**。\n\n![](IMG_3185.png)\n\n以下是具体配置信息：\n\n- **类型：IPSec**\n- **描述：MyVPN**\n- **服务器：vpn.asuscomm.com**\n- **账户：test**\n- **密码：123456**\n- **密钥：123456**\n\n![](IMG_3187.png)\n\n配置完成后，点击连接VPN，如果显示为**已连接**，说明配置成功。\n\n![](IMG_3186.png)\n\n最后，除了iOS客户端以外，还支持**Windows，Android**和**MacOS**。如果想要了解更多关于VPN配置的信息，可以点击关注我。\n\n## 树莓派客户端\n\n1  安装**Network Manager**网络管理工具。\n\n```bash\nsudo apt install network-manager network-manager-gnome\n```\n\n安装完成后，可以在桌面右上角看到该工具的图标。点击该图标，可以看到配置VPN连接的选项。\n\n![](IMG_3188.png)\n\n2  安装**Network Manager**的插件**network-manager-strongswan**。\n\n```bash\nsudo apt-get install network-manager-strongswan\n```\n\n安装成功后，添加VPN类型中，会出现**IPSec/IKEv2(strongswan)** 的选项。\n\n![](IMG_3189.png)\n\n3  安装**Strongswan**的插件**libstrongswan-eap-mschapv2.so**, 由于之前没有安装该插件，导致一直无法连接成功。\n\n```bash\nsudo apt-get install libcharon-extra-plugins\n```\n\n安装成功后，可以在`/usr/lib/ipsec/plugins`目录下，查看**libstrongswan-eap-mschapv2.so**文件。\n\n![](IMG_3190.png)\n\n4 在VPN的选项下，配置详细的信息：\n\n   **Address: ivpn.asuscomm.com**\n\n   **Certificate: 华硕路由器导出的根证书，可以在Windows系统上先转换成Base64编码的.cer文件**\n\n   **Authentication: EAP**\n\n   **Username: rpi**\n\n   **Password: 123456**\n\n   **打开选项Request an inner IP address**\n\n![](IMG_3191.png)\n\n5 VPN连接成功后，图标上会出现一个小锁，用命令`ip addr`查看IP地址信息，发现并没有出现虚拟网卡，但是物理网卡上绑定了一个新的IP地址。\n\n![](IMG_3192.png)\n\n![](IMG_3193.png)\n\n另外，**Network Manager**除了IPSec VPN以外，还支持OpenVPN, Cisco IPSec VPN, L2TP/IPSec VPN，只需要安装相应的插件即可。其中，安装L2TP/IPSec VPN插件时，需要使用树莓派默认的软件仓库，国内软件仓库安装过程中会出现缺少dnsmasq包的404报错。\n\n**OpenVPN**\n\n```bash\nsudo apt-get install network-manager-openvpn network-manager-openvpn-gnome\n```\n\n\n\n**Cisco IPsec VPN**\n\n```bash\nsudo apt-get install network-manager-vpnc vpnc network-manager-vpnc-gnome\n```\n\n\n\n**L2TP/IPSec VPN**\n\n```bash\nsudo apt-get install network-manager-l2tp network-manager-l2tp-gnome\n```\n\n","source":"_posts/智能家居/华硕路由器VPN功能.md","raw":"---\ntitle: 华硕路由器VPN功能\ndate: 2021-10-02 09:01:00\ntags: \n - raspberrypi\n - vpn\ncategories: \n - 智能家居\n---\n\n平时，家中的路由器很少会受到关注，除非无法上网或者网速变慢，才会想到去检查路由器。因此，可以说，家用路由器的存在感是比较弱的。但是，最近帮朋友解决了一个家中的网络问题后，改变了我对路由器的看法。\n\n朋友是一个比较注重个人隐私和数据安全的人，因此，总是把一些重要文件、照片等存放在家中的电脑上面。但是，如果他不在家中，就无法访问家里的电脑了。因此，朋友向我咨询是否有什么办法，可以让他即使在外面，也可以访问家中电脑上的数据。于是，我建议他使用网盘同步文件，但是朋友比较担心文件的安全性，不想使用网盘。\n\n我想了想，那只能使用**虚拟私人专用网络(VPN)** 了，但是，这项功能一般只会在企业级的设备上使用，家用路由器通常不支持这项功能。跟朋友解释了以后，朋友说他买的路由器功能比较多，也许支持这项功能。\n\n<!-- more -->\n\n## VPN服务器\n\n于是，抱着试试的心态，我在朋友家中打开了路由器的管理界面，在左侧菜单果然看到了**VPN**的选项。并且， 支持三种类型的VPN: PPTP, OpenVPN和IPSec VPN，我决定采用IPSec VPN。开启IPSec VPN的功能以后，以下配置信息需要记录下来，因为配置VPN客户端的时候会用到：\n\n- **服务器IP地址：vpn.asuscomm.com**\n- **预共享密钥：123456**\n- **用户名称与密码：test/123456**\n\n![](2021-10-02094926.jpg)\n\n## iOS客户端\n\n路由器上的配置完成以后，接下来需要在手机端配置VPN功能，下面以苹果手机为例。\n\n在手机上打开**设置 - 通用 - VPN与设备管理 - VPN**，然后点击**添加VPN配置...**。\n\n![](IMG_3185.png)\n\n以下是具体配置信息：\n\n- **类型：IPSec**\n- **描述：MyVPN**\n- **服务器：vpn.asuscomm.com**\n- **账户：test**\n- **密码：123456**\n- **密钥：123456**\n\n![](IMG_3187.png)\n\n配置完成后，点击连接VPN，如果显示为**已连接**，说明配置成功。\n\n![](IMG_3186.png)\n\n最后，除了iOS客户端以外，还支持**Windows，Android**和**MacOS**。如果想要了解更多关于VPN配置的信息，可以点击关注我。\n\n## 树莓派客户端\n\n1  安装**Network Manager**网络管理工具。\n\n```bash\nsudo apt install network-manager network-manager-gnome\n```\n\n安装完成后，可以在桌面右上角看到该工具的图标。点击该图标，可以看到配置VPN连接的选项。\n\n![](IMG_3188.png)\n\n2  安装**Network Manager**的插件**network-manager-strongswan**。\n\n```bash\nsudo apt-get install network-manager-strongswan\n```\n\n安装成功后，添加VPN类型中，会出现**IPSec/IKEv2(strongswan)** 的选项。\n\n![](IMG_3189.png)\n\n3  安装**Strongswan**的插件**libstrongswan-eap-mschapv2.so**, 由于之前没有安装该插件，导致一直无法连接成功。\n\n```bash\nsudo apt-get install libcharon-extra-plugins\n```\n\n安装成功后，可以在`/usr/lib/ipsec/plugins`目录下，查看**libstrongswan-eap-mschapv2.so**文件。\n\n![](IMG_3190.png)\n\n4 在VPN的选项下，配置详细的信息：\n\n   **Address: ivpn.asuscomm.com**\n\n   **Certificate: 华硕路由器导出的根证书，可以在Windows系统上先转换成Base64编码的.cer文件**\n\n   **Authentication: EAP**\n\n   **Username: rpi**\n\n   **Password: 123456**\n\n   **打开选项Request an inner IP address**\n\n![](IMG_3191.png)\n\n5 VPN连接成功后，图标上会出现一个小锁，用命令`ip addr`查看IP地址信息，发现并没有出现虚拟网卡，但是物理网卡上绑定了一个新的IP地址。\n\n![](IMG_3192.png)\n\n![](IMG_3193.png)\n\n另外，**Network Manager**除了IPSec VPN以外，还支持OpenVPN, Cisco IPSec VPN, L2TP/IPSec VPN，只需要安装相应的插件即可。其中，安装L2TP/IPSec VPN插件时，需要使用树莓派默认的软件仓库，国内软件仓库安装过程中会出现缺少dnsmasq包的404报错。\n\n**OpenVPN**\n\n```bash\nsudo apt-get install network-manager-openvpn network-manager-openvpn-gnome\n```\n\n\n\n**Cisco IPsec VPN**\n\n```bash\nsudo apt-get install network-manager-vpnc vpnc network-manager-vpnc-gnome\n```\n\n\n\n**L2TP/IPSec VPN**\n\n```bash\nsudo apt-get install network-manager-l2tp network-manager-l2tp-gnome\n```\n\n","slug":"智能家居/华硕路由器VPN功能","published":1,"updated":"2023-03-07T07:26:19.197Z","_id":"clexxb8p60001v6737ud83zjq","comments":1,"layout":"post","photos":[],"link":"","content":"<p>平时，家中的路由器很少会受到关注，除非无法上网或者网速变慢，才会想到去检查路由器。因此，可以说，家用路由器的存在感是比较弱的。但是，最近帮朋友解决了一个家中的网络问题后，改变了我对路由器的看法。</p>\n<p>朋友是一个比较注重个人隐私和数据安全的人，因此，总是把一些重要文件、照片等存放在家中的电脑上面。但是，如果他不在家中，就无法访问家里的电脑了。因此，朋友向我咨询是否有什么办法，可以让他即使在外面，也可以访问家中电脑上的数据。于是，我建议他使用网盘同步文件，但是朋友比较担心文件的安全性，不想使用网盘。</p>\n<p>我想了想，那只能使用<strong>虚拟私人专用网络(VPN)</strong> 了，但是，这项功能一般只会在企业级的设备上使用，家用路由器通常不支持这项功能。跟朋友解释了以后，朋友说他买的路由器功能比较多，也许支持这项功能。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"VPN服务器\"><a href=\"#VPN服务器\" class=\"headerlink\" title=\"VPN服务器\"></a>VPN服务器</h2><p>于是，抱着试试的心态，我在朋友家中打开了路由器的管理界面，在左侧菜单果然看到了<strong>VPN</strong>的选项。并且， 支持三种类型的VPN: PPTP, OpenVPN和IPSec VPN，我决定采用IPSec VPN。开启IPSec VPN的功能以后，以下配置信息需要记录下来，因为配置VPN客户端的时候会用到：</p>\n<ul>\n<li><strong>服务器IP地址：vpn.asuscomm.com</strong></li>\n<li><strong>预共享密钥：123456</strong></li>\n<li><strong>用户名称与密码：test&#x2F;123456</strong></li>\n</ul>\n<p><img src=\"/2021/10/02/zhi-neng-jia-ju/hua-shuo-lu-you-qi-vpn-gong-neng/2021-10-02094926.jpg\"></p>\n<h2 id=\"iOS客户端\"><a href=\"#iOS客户端\" class=\"headerlink\" title=\"iOS客户端\"></a>iOS客户端</h2><p>路由器上的配置完成以后，接下来需要在手机端配置VPN功能，下面以苹果手机为例。</p>\n<p>在手机上打开<strong>设置 - 通用 - VPN与设备管理 - VPN</strong>，然后点击**添加VPN配置…**。</p>\n<p><img src=\"/2021/10/02/zhi-neng-jia-ju/hua-shuo-lu-you-qi-vpn-gong-neng/IMG_3185.png\"></p>\n<p>以下是具体配置信息：</p>\n<ul>\n<li><strong>类型：IPSec</strong></li>\n<li><strong>描述：MyVPN</strong></li>\n<li><strong>服务器：vpn.asuscomm.com</strong></li>\n<li><strong>账户：test</strong></li>\n<li><strong>密码：123456</strong></li>\n<li><strong>密钥：123456</strong></li>\n</ul>\n<p><img src=\"/2021/10/02/zhi-neng-jia-ju/hua-shuo-lu-you-qi-vpn-gong-neng/IMG_3187.png\"></p>\n<p>配置完成后，点击连接VPN，如果显示为<strong>已连接</strong>，说明配置成功。</p>\n<p><img src=\"/2021/10/02/zhi-neng-jia-ju/hua-shuo-lu-you-qi-vpn-gong-neng/IMG_3186.png\"></p>\n<p>最后，除了iOS客户端以外，还支持<strong>Windows，Android</strong>和<strong>MacOS</strong>。如果想要了解更多关于VPN配置的信息，可以点击关注我。</p>\n<h2 id=\"树莓派客户端\"><a href=\"#树莓派客户端\" class=\"headerlink\" title=\"树莓派客户端\"></a>树莓派客户端</h2><p>1  安装<strong>Network Manager</strong>网络管理工具。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> network-manager network-manager-gnome<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>安装完成后，可以在桌面右上角看到该工具的图标。点击该图标，可以看到配置VPN连接的选项。</p>\n<p><img src=\"/2021/10/02/zhi-neng-jia-ju/hua-shuo-lu-you-qi-vpn-gong-neng/IMG_3188.png\"></p>\n<p>2  安装<strong>Network Manager</strong>的插件<strong>network-manager-strongswan</strong>。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> network-manager-strongswan<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>安装成功后，添加VPN类型中，会出现<strong>IPSec&#x2F;IKEv2(strongswan)</strong> 的选项。</p>\n<p><img src=\"/2021/10/02/zhi-neng-jia-ju/hua-shuo-lu-you-qi-vpn-gong-neng/IMG_3189.png\"></p>\n<p>3  安装<strong>Strongswan</strong>的插件<strong>libstrongswan-eap-mschapv2.so</strong>, 由于之前没有安装该插件，导致一直无法连接成功。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> libcharon-extra-plugins<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>安装成功后，可以在<code>/usr/lib/ipsec/plugins</code>目录下，查看<strong>libstrongswan-eap-mschapv2.so</strong>文件。</p>\n<p><img src=\"/2021/10/02/zhi-neng-jia-ju/hua-shuo-lu-you-qi-vpn-gong-neng/IMG_3190.png\"></p>\n<p>4 在VPN的选项下，配置详细的信息：</p>\n<p>   <strong>Address: ivpn.asuscomm.com</strong></p>\n<p>   <strong>Certificate: 华硕路由器导出的根证书，可以在Windows系统上先转换成Base64编码的.cer文件</strong></p>\n<p>   <strong>Authentication: EAP</strong></p>\n<p>   <strong>Username: rpi</strong></p>\n<p>   <strong>Password: 123456</strong></p>\n<p>   <strong>打开选项Request an inner IP address</strong></p>\n<p><img src=\"/2021/10/02/zhi-neng-jia-ju/hua-shuo-lu-you-qi-vpn-gong-neng/IMG_3191.png\"></p>\n<p>5 VPN连接成功后，图标上会出现一个小锁，用命令<code>ip addr</code>查看IP地址信息，发现并没有出现虚拟网卡，但是物理网卡上绑定了一个新的IP地址。</p>\n<p><img src=\"/2021/10/02/zhi-neng-jia-ju/hua-shuo-lu-you-qi-vpn-gong-neng/IMG_3192.png\"></p>\n<p><img src=\"/2021/10/02/zhi-neng-jia-ju/hua-shuo-lu-you-qi-vpn-gong-neng/IMG_3193.png\"></p>\n<p>另外，<strong>Network Manager</strong>除了IPSec VPN以外，还支持OpenVPN, Cisco IPSec VPN, L2TP&#x2F;IPSec VPN，只需要安装相应的插件即可。其中，安装L2TP&#x2F;IPSec VPN插件时，需要使用树莓派默认的软件仓库，国内软件仓库安装过程中会出现缺少dnsmasq包的404报错。</p>\n<p><strong>OpenVPN</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> network-manager-openvpn network-manager-openvpn-gnome<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<p><strong>Cisco IPsec VPN</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> network-manager-vpnc vpnc network-manager-vpnc-gnome<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<p><strong>L2TP&#x2F;IPSec VPN</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> network-manager-l2tp network-manager-l2tp-gnome<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n","site":{"data":{}},"excerpt":"<p>平时，家中的路由器很少会受到关注，除非无法上网或者网速变慢，才会想到去检查路由器。因此，可以说，家用路由器的存在感是比较弱的。但是，最近帮朋友解决了一个家中的网络问题后，改变了我对路由器的看法。</p>\n<p>朋友是一个比较注重个人隐私和数据安全的人，因此，总是把一些重要文件、照片等存放在家中的电脑上面。但是，如果他不在家中，就无法访问家里的电脑了。因此，朋友向我咨询是否有什么办法，可以让他即使在外面，也可以访问家中电脑上的数据。于是，我建议他使用网盘同步文件，但是朋友比较担心文件的安全性，不想使用网盘。</p>\n<p>我想了想，那只能使用<strong>虚拟私人专用网络(VPN)</strong> 了，但是，这项功能一般只会在企业级的设备上使用，家用路由器通常不支持这项功能。跟朋友解释了以后，朋友说他买的路由器功能比较多，也许支持这项功能。</p>","more":"<h2 id=\"VPN服务器\"><a href=\"#VPN服务器\" class=\"headerlink\" title=\"VPN服务器\"></a>VPN服务器</h2><p>于是，抱着试试的心态，我在朋友家中打开了路由器的管理界面，在左侧菜单果然看到了<strong>VPN</strong>的选项。并且， 支持三种类型的VPN: PPTP, OpenVPN和IPSec VPN，我决定采用IPSec VPN。开启IPSec VPN的功能以后，以下配置信息需要记录下来，因为配置VPN客户端的时候会用到：</p>\n<ul>\n<li><strong>服务器IP地址：vpn.asuscomm.com</strong></li>\n<li><strong>预共享密钥：123456</strong></li>\n<li><strong>用户名称与密码：test&#x2F;123456</strong></li>\n</ul>\n<p><img src=\"/2021/10/02/zhi-neng-jia-ju/hua-shuo-lu-you-qi-vpn-gong-neng/2021-10-02094926.jpg\"></p>\n<h2 id=\"iOS客户端\"><a href=\"#iOS客户端\" class=\"headerlink\" title=\"iOS客户端\"></a>iOS客户端</h2><p>路由器上的配置完成以后，接下来需要在手机端配置VPN功能，下面以苹果手机为例。</p>\n<p>在手机上打开<strong>设置 - 通用 - VPN与设备管理 - VPN</strong>，然后点击**添加VPN配置…**。</p>\n<p><img src=\"/2021/10/02/zhi-neng-jia-ju/hua-shuo-lu-you-qi-vpn-gong-neng/IMG_3185.png\"></p>\n<p>以下是具体配置信息：</p>\n<ul>\n<li><strong>类型：IPSec</strong></li>\n<li><strong>描述：MyVPN</strong></li>\n<li><strong>服务器：vpn.asuscomm.com</strong></li>\n<li><strong>账户：test</strong></li>\n<li><strong>密码：123456</strong></li>\n<li><strong>密钥：123456</strong></li>\n</ul>\n<p><img src=\"/2021/10/02/zhi-neng-jia-ju/hua-shuo-lu-you-qi-vpn-gong-neng/IMG_3187.png\"></p>\n<p>配置完成后，点击连接VPN，如果显示为<strong>已连接</strong>，说明配置成功。</p>\n<p><img src=\"/2021/10/02/zhi-neng-jia-ju/hua-shuo-lu-you-qi-vpn-gong-neng/IMG_3186.png\"></p>\n<p>最后，除了iOS客户端以外，还支持<strong>Windows，Android</strong>和<strong>MacOS</strong>。如果想要了解更多关于VPN配置的信息，可以点击关注我。</p>\n<h2 id=\"树莓派客户端\"><a href=\"#树莓派客户端\" class=\"headerlink\" title=\"树莓派客户端\"></a>树莓派客户端</h2><p>1  安装<strong>Network Manager</strong>网络管理工具。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> network-manager network-manager-gnome<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>安装完成后，可以在桌面右上角看到该工具的图标。点击该图标，可以看到配置VPN连接的选项。</p>\n<p><img src=\"/2021/10/02/zhi-neng-jia-ju/hua-shuo-lu-you-qi-vpn-gong-neng/IMG_3188.png\"></p>\n<p>2  安装<strong>Network Manager</strong>的插件<strong>network-manager-strongswan</strong>。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> network-manager-strongswan<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>安装成功后，添加VPN类型中，会出现<strong>IPSec&#x2F;IKEv2(strongswan)</strong> 的选项。</p>\n<p><img src=\"/2021/10/02/zhi-neng-jia-ju/hua-shuo-lu-you-qi-vpn-gong-neng/IMG_3189.png\"></p>\n<p>3  安装<strong>Strongswan</strong>的插件<strong>libstrongswan-eap-mschapv2.so</strong>, 由于之前没有安装该插件，导致一直无法连接成功。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> libcharon-extra-plugins<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>安装成功后，可以在<code>/usr/lib/ipsec/plugins</code>目录下，查看<strong>libstrongswan-eap-mschapv2.so</strong>文件。</p>\n<p><img src=\"/2021/10/02/zhi-neng-jia-ju/hua-shuo-lu-you-qi-vpn-gong-neng/IMG_3190.png\"></p>\n<p>4 在VPN的选项下，配置详细的信息：</p>\n<p>   <strong>Address: ivpn.asuscomm.com</strong></p>\n<p>   <strong>Certificate: 华硕路由器导出的根证书，可以在Windows系统上先转换成Base64编码的.cer文件</strong></p>\n<p>   <strong>Authentication: EAP</strong></p>\n<p>   <strong>Username: rpi</strong></p>\n<p>   <strong>Password: 123456</strong></p>\n<p>   <strong>打开选项Request an inner IP address</strong></p>\n<p><img src=\"/2021/10/02/zhi-neng-jia-ju/hua-shuo-lu-you-qi-vpn-gong-neng/IMG_3191.png\"></p>\n<p>5 VPN连接成功后，图标上会出现一个小锁，用命令<code>ip addr</code>查看IP地址信息，发现并没有出现虚拟网卡，但是物理网卡上绑定了一个新的IP地址。</p>\n<p><img src=\"/2021/10/02/zhi-neng-jia-ju/hua-shuo-lu-you-qi-vpn-gong-neng/IMG_3192.png\"></p>\n<p><img src=\"/2021/10/02/zhi-neng-jia-ju/hua-shuo-lu-you-qi-vpn-gong-neng/IMG_3193.png\"></p>\n<p>另外，<strong>Network Manager</strong>除了IPSec VPN以外，还支持OpenVPN, Cisco IPSec VPN, L2TP&#x2F;IPSec VPN，只需要安装相应的插件即可。其中，安装L2TP&#x2F;IPSec VPN插件时，需要使用树莓派默认的软件仓库，国内软件仓库安装过程中会出现缺少dnsmasq包的404报错。</p>\n<p><strong>OpenVPN</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> network-manager-openvpn network-manager-openvpn-gnome<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<p><strong>Cisco IPsec VPN</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> network-manager-vpnc vpnc network-manager-vpnc-gnome<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<p><strong>L2TP&#x2F;IPSec VPN</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> network-manager-l2tp network-manager-l2tp-gnome<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>"}],"PostAsset":[{"_id":"source/_posts/blog/个人博客-GitHub-Pages篇/09.png","slug":"09.png","post":"clexvkk4w00035i73h2ko8vw8","modified":0,"renderable":0},{"_id":"source/_posts/blog/个人博客-GitHub-Pages篇/10.png","slug":"10.png","post":"clexvkk4w00035i73h2ko8vw8","modified":0,"renderable":0},{"_id":"source/_posts/blog/个人博客-Hexo多终端同步篇/21.png","slug":"21.png","post":"clexvkk5900065i73dzus23la","modified":0,"renderable":0},{"_id":"source/_posts/blog/个人博客-Hexo多终端同步篇/22.png","slug":"22.png","post":"clexvkk5900065i73dzus23la","modified":0,"renderable":0},{"_id":"source/_posts/blog/个人博客-Hexo安装篇/01.png","slug":"01.png","post":"clexvkk5e00075i73e3e1bde3","modified":0,"renderable":0},{"_id":"source/_posts/blog/个人博客-Hexo安装篇/08.png","slug":"08.png","post":"clexvkk5e00075i73e3e1bde3","modified":0,"renderable":0},{"_id":"source/_posts/blog/博客主题/20210915_064223000_iOS.jpg","slug":"20210915_064223000_iOS.jpg","post":"clexvkk5r000c5i73ekby70kb","modified":0,"renderable":0},{"_id":"source/_posts/blog/博客主题/blog_pc.JPG","slug":"blog_pc.JPG","post":"clexvkk5r000c5i73ekby70kb","modified":0,"renderable":0},{"_id":"source/_posts/blog/发布博客时调整图片的大小/3C1EC821-5DCC-4853-849C-ADB69AE6B0D4_1_105_c.jpeg","slug":"3C1EC821-5DCC-4853-849C-ADB69AE6B0D4_1_105_c.jpeg","post":"clexvkk5w000d5i73ezh2fjz5","modified":0,"renderable":0},{"_id":"source/_posts/blog/如何整理博客中的图片资源/Pastedimage20230224145541.png","slug":"Pastedimage20230224145541.png","post":"clexvkk63000i5i737voq7dx6","modified":0,"renderable":0},{"_id":"source/_posts/blog/如何整理博客中的图片资源/Pastedimage20230224145706.png","slug":"Pastedimage20230224145706.png","post":"clexvkk63000i5i737voq7dx6","modified":0,"renderable":0},{"_id":"source/_posts/手机/Windows和iOS备忘录/mainaccount01.png","slug":"mainaccount01.png","post":"clexvkk6l000s5i73g7dm4e5o","modified":0,"renderable":0},{"_id":"source/_posts/手机/Windows和iOS备忘录/mainaccount02.png","slug":"mainaccount02.png","post":"clexvkk6l000s5i73g7dm4e5o","modified":0,"renderable":0},{"_id":"source/_posts/手机/Windows和iOS备忘录/mainaccount03.png","slug":"mainaccount03.png","post":"clexvkk6l000s5i73g7dm4e5o","modified":0,"renderable":0},{"_id":"source/_posts/手机/Windows和iOS备忘录/mainaccount04.png","slug":"mainaccount04.png","post":"clexvkk6l000s5i73g7dm4e5o","modified":0,"renderable":0},{"_id":"source/_posts/手机/Windows和iOS备忘录/windowsnotes.png","slug":"windowsnotes.png","post":"clexvkk6l000s5i73g7dm4e5o","modified":0,"renderable":0},{"_id":"source/_posts/手机/Windows和iOS密码管理器/2021-10-03092026.png","slug":"2021-10-03092026.png","post":"clexvkk6s000w5i73bk53hil9","modified":0,"renderable":0},{"_id":"source/_posts/手机/Windows和iOS密码管理器/2021-10-03092027.png","slug":"2021-10-03092027.png","post":"clexvkk6s000w5i73bk53hil9","modified":0,"renderable":0},{"_id":"source/_posts/手机/Windows和iOS密码管理器/2021-10-03092028.png","slug":"2021-10-03092028.png","post":"clexvkk6s000w5i73bk53hil9","modified":0,"renderable":0},{"_id":"source/_posts/手机/Windows和iOS密码管理器/2021-10-03092029.png","slug":"2021-10-03092029.png","post":"clexvkk6s000w5i73bk53hil9","modified":0,"renderable":0},{"_id":"source/_posts/手机/Windows和iOS密码管理器/2021-10-03092030.png","slug":"2021-10-03092030.png","post":"clexvkk6s000w5i73bk53hil9","modified":0,"renderable":0},{"_id":"source/_posts/手机/Windows和iOS密码管理器/2021-10-03092031.png","slug":"2021-10-03092031.png","post":"clexvkk6s000w5i73bk53hil9","modified":0,"renderable":0},{"_id":"source/_posts/手机/Windows和iOS密码管理器/2021-10-03092032.png","slug":"2021-10-03092032.png","post":"clexvkk6s000w5i73bk53hil9","modified":0,"renderable":0},{"_id":"source/_posts/手机/Windows和iOS文件共享/fileshare01.jpg","slug":"fileshare01.jpg","post":"clexvkk6y00105i73fasgalzv","modified":0,"renderable":0},{"_id":"source/_posts/手机/Windows和iOS文件共享/icloud-connect-server.jpg","slug":"icloud-connect-server.jpg","post":"clexvkk6y00105i73fasgalzv","modified":0,"renderable":0},{"_id":"source/_posts/手机/Windows和iOS文件共享/icloud-onedrive.jpg","slug":"icloud-onedrive.jpg","post":"clexvkk6y00105i73fasgalzv","modified":0,"renderable":0},{"_id":"source/_posts/手机/Windows和iOS文件共享/icloud-server-share.jpg","slug":"icloud-server-share.jpg","post":"clexvkk6y00105i73fasgalzv","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/ESP32写入MicroPython固件/2021-10-23112359.png","slug":"2021-10-23112359.png","post":"clexvkk7300145i73bze6132o","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/ESP32写入MicroPython固件/2021-10-23113915.png","slug":"2021-10-23113915.png","post":"clexvkk7300145i73bze6132o","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/ESP32写入MicroPython固件/2021-10-23114015.png","slug":"2021-10-23114015.png","post":"clexvkk7300145i73bze6132o","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/ESP32写入MicroPython固件/2021-10-23114050.png","slug":"2021-10-23114050.png","post":"clexvkk7300145i73bze6132o","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/ESP32写入MicroPython固件/2021-10-23114253.png","slug":"2021-10-23114253.png","post":"clexvkk7300145i73bze6132o","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/ESP32写入MicroPython固件/2021-10-23114710.png","slug":"2021-10-23114710.png","post":"clexvkk7300145i73bze6132o","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/ESP32写入MicroPython固件/2021-10-23114815.png","slug":"2021-10-23114815.png","post":"clexvkk7300145i73bze6132o","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/ESP32写入MicroPython固件/2021-10-23121931.png","slug":"2021-10-23121931.png","post":"clexvkk7300145i73bze6132o","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/ESP32写入MicroPython固件/20211023_013244373_iOS.jpg","slug":"20211023_013244373_iOS.jpg","post":"clexvkk7300145i73bze6132o","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/ESP32点亮TFT屏幕/20211024_091435141_iOS.jpg","slug":"20211024_091435141_iOS.jpg","post":"clexvkk7600175i73aij303y2","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/ESP32点亮TFT屏幕/20211026_072012179_iOS.jpg","slug":"20211026_072012179_iOS.jpg","post":"clexvkk7600175i73aij303y2","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/Home_Assistant_HTTPS/20211019_001515000_iOS.png","slug":"20211019_001515000_iOS.png","post":"clexvkk7c001c5i7338ho66lm","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/Home_Assistant_HTTPS/20211019_001547000_iOS.png","slug":"20211019_001547000_iOS.png","post":"clexvkk7c001c5i7338ho66lm","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/Home_Assistant_HTTPS/20211019_001714000_iOS.png","slug":"20211019_001714000_iOS.png","post":"clexvkk7c001c5i7338ho66lm","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/Home_Assistant_客户端配置/2021-10-20094439.png","slug":"2021-10-20094439.png","post":"clexvkk7g001f5i73eodohrtr","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/Home_Assistant_客户端配置/2021-10-20094537.png","slug":"2021-10-20094537.png","post":"clexvkk7g001f5i73eodohrtr","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/Home_Assistant_客户端配置/2021-10-20094623.png","slug":"2021-10-20094623.png","post":"clexvkk7g001f5i73eodohrtr","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/Home_Assistant_客户端配置/2021-10-20094645.png","slug":"2021-10-20094645.png","post":"clexvkk7g001f5i73eodohrtr","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/Home_Assistant_客户端配置/2021-10-20094710.png","slug":"2021-10-20094710.png","post":"clexvkk7g001f5i73eodohrtr","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/Home_Assistant_客户端配置/2021-10-20094728.png","slug":"2021-10-20094728.png","post":"clexvkk7g001f5i73eodohrtr","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/Home_Assistant_客户端配置/2021-10-20095144.png","slug":"2021-10-20095144.png","post":"clexvkk7g001f5i73eodohrtr","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/Home_Assistant_客户端配置/20211019_001515000_iOS1.png","slug":"20211019_001515000_iOS1.png","post":"clexvkk7g001f5i73eodohrtr","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/Home_Assistant_客户端配置/20211019_001547000_iOS2.png","slug":"20211019_001547000_iOS2.png","post":"clexvkk7g001f5i73eodohrtr","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/Home_Assistant_客户端配置/20211019_001714000_iOS3.png","slug":"20211019_001714000_iOS3.png","post":"clexvkk7g001f5i73eodohrtr","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/Home_Assistant_客户端配置/20211020_023853000_iOS.png","slug":"20211020_023853000_iOS.png","post":"clexvkk7g001f5i73eodohrtr","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/Home_Assistant_客户端配置/20211020_024210000_iOS.png","slug":"20211020_024210000_iOS.png","post":"clexvkk7g001f5i73eodohrtr","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/Home_Assistant_客户端配置/20211020_024219000_iOS.png","slug":"20211020_024219000_iOS.png","post":"clexvkk7g001f5i73eodohrtr","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/Home_Assistant_客户端配置/20211020_024258000_iOS.png","slug":"20211020_024258000_iOS.png","post":"clexvkk7g001f5i73eodohrtr","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/Home_Assistant_客户端配置/20211020_024338000_iOS.png","slug":"20211020_024338000_iOS.png","post":"clexvkk7g001f5i73eodohrtr","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/Home_Assistant_客户端配置/20211020_024501000_iOS.png","slug":"20211020_024501000_iOS.png","post":"clexvkk7g001f5i73eodohrtr","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/Home_Assistant_客户端配置/20211023_013244373_iOS.png","slug":"20211023_013244373_iOS.png","post":"clexvkk7g001f5i73eodohrtr","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/Home_Assistant的定位功能/2021-10-25151814.png","slug":"2021-10-25151814.png","post":"clexvkk7q001l5i733gct843g","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/Home_Assistant的定位功能/2021-10-25154637.png","slug":"2021-10-25154637.png","post":"clexvkk7q001l5i733gct843g","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/Home_Assistant的定位功能/2021-10-25154947.png","slug":"2021-10-25154947.png","post":"clexvkk7q001l5i733gct843g","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/Home_Assistant的定位功能/2021-10-25155436.png","slug":"2021-10-25155436.png","post":"clexvkk7q001l5i733gct843g","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/Home_Assistant的定位功能/2021-10-25160029.png","slug":"2021-10-25160029.png","post":"clexvkk7q001l5i733gct843g","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/Home_Assistant的定位功能/2021-10-25160611.png","slug":"2021-10-25160611.png","post":"clexvkk7q001l5i733gct843g","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/Home_Assistant的定位功能/20211023_234305000_iOS.png","slug":"20211023_234305000_iOS.png","post":"clexvkk7q001l5i733gct843g","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/Home_Assistant的定位功能/20211025173103.jpg","slug":"20211025173103.jpg","post":"clexvkk7q001l5i733gct843g","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/Home_Assistant的定位功能/20211025173127.jpg","slug":"20211025173127.jpg","post":"clexvkk7q001l5i733gct843g","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/Home_Assistant的定位功能/20211025173136.jpg","slug":"20211025173136.jpg","post":"clexvkk7q001l5i733gct843g","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/Home_Assistant的定位功能/20211025_071159000_iOS.png","slug":"20211025_071159000_iOS.png","post":"clexvkk7q001l5i733gct843g","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/Home_Assistant监控Web服务器/2021-10-23191544.png","slug":"2021-10-23191544.png","post":"clexvkk7w001p5i73641fgpup","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/Home_Assistant监控Web服务器/2021-10-23191643.png","slug":"2021-10-23191643.png","post":"clexvkk7w001p5i73641fgpup","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/Home_Assistant监控Web服务器/20211023_092850000_iOS.png","slug":"20211023_092850000_iOS.png","post":"clexvkk7w001p5i73641fgpup","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/Home_Assistant监控Web服务器/20211023_105828000_iOS.png","slug":"20211023_105828000_iOS.png","post":"clexvkk7w001p5i73641fgpup","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/Home_Assistant监控Web服务器/20211023_105936000_iOS.png","slug":"20211023_105936000_iOS.png","post":"clexvkk7w001p5i73641fgpup","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/Home_Assistant监控Web服务器/20211023_110011000_iOS.png","slug":"20211023_110011000_iOS.png","post":"clexvkk7w001p5i73641fgpup","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/SSH远程连接/2021-10-26190304.png","slug":"2021-10-26190304.png","post":"clexvkk8b001r5i73atphgsgm","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/SSH远程连接/20230307142016.png","slug":"20230307142016.png","post":"clexvkk8b001r5i73atphgsgm","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/iRobot扫地机器人使用体验/DDAD7481-A2AC-4BAB-8F1B-FA12B3E4D0B0_1_201_a.jpeg","slug":"DDAD7481-A2AC-4BAB-8F1B-FA12B3E4D0B0_1_201_a.jpeg","post":"clexvkk8i001v5i735cup4cm1","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/物联网智能小电视/20211030_014042417_iOS.jpg","slug":"20211030_014042417_iOS.jpg","post":"clexvkk8n001x5i734lfx32nl","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/物联网智能小电视/20211101_102902238_iOS.jpg","slug":"20211101_102902238_iOS.jpg","post":"clexvkk8n001x5i734lfx32nl","modified":0,"renderable":0},{"_id":"source/_posts/python/Python模块和包-介绍/pkg1.9af1c7aea48f.png","slug":"pkg1.9af1c7aea48f.png","post":"clexvkk9000245i734q09biam","modified":0,"renderable":0},{"_id":"source/_posts/python/Python模块和包-介绍/pkg1_133918.png","slug":"pkg1_133918.png","post":"clexvkk9000245i734q09biam","modified":0,"renderable":0},{"_id":"source/_posts/python/Python模块和包-介绍/pkg3.d2160908ae77.png","slug":"pkg3.d2160908ae77.png","post":"clexvkk9000245i734q09biam","modified":0,"renderable":0},{"_id":"source/_posts/python/Python模块和包-介绍/pkg4_100818.png","slug":"pkg4_100818.png","post":"clexvkk9000245i734q09biam","modified":0,"renderable":0},{"_id":"source/_posts/杂七杂八/Windows-Terminal如何从Vim中复制内容/Pastedimage20230227152428.png","slug":"Pastedimage20230227152428.png","post":"clexvkk9o002m5i731r6s7gt1","modified":0,"renderable":0},{"_id":"source/_posts/中医/尝试用二至丸治疗白发/8ED26B4B-76B8-446F-8CF4-D6DF1F55DF4F_1_201_a.jpeg","slug":"8ED26B4B-76B8-446F-8CF4-D6DF1F55DF4F_1_201_a.jpeg","post":"clexvkk9x002t5i735lnmcw4t","modified":0,"renderable":0},{"_id":"source/_posts/中医/尝试用二至丸治疗白发/91C9F6E9-784C-4640-86D5-491AA2F66858_1_201_a.jpeg","slug":"91C9F6E9-784C-4640-86D5-491AA2F66858_1_201_a.jpeg","post":"clexvkk9x002t5i735lnmcw4t","modified":0,"renderable":0},{"_id":"source/_posts/中医/尝试用二至丸治疗白发/E03DCBDD-6B51-46B6-B7DD-18C6C3FD86C1_1_201_a.jpeg","slug":"E03DCBDD-6B51-46B6-B7DD-18C6C3FD86C1_1_201_a.jpeg","post":"clexvkk9x002t5i735lnmcw4t","modified":0,"renderable":0},{"_id":"source/_posts/中医/尝试用二至丸治疗白发/image202302221900211.png","slug":"image202302221900211.png","post":"clexvkk9x002t5i735lnmcw4t","modified":0,"renderable":0},{"_id":"source/_posts/blog/我的博客/20230307150931.png","slug":"20230307150931.png","post":"clexvkk6e000p5i739pi4ehv3","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/什么是IFTTT/2021-10-25120949.png","slug":"2021-10-25120949.png","post":"clexxb8oz0000v6739wcj1s11","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/什么是IFTTT/2021-10-25121115.png","slug":"2021-10-25121115.png","post":"clexxb8oz0000v6739wcj1s11","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/什么是IFTTT/2021-10-25121340.png","slug":"2021-10-25121340.png","post":"clexxb8oz0000v6739wcj1s11","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/什么是IFTTT/2021-10-25121610.png","slug":"2021-10-25121610.png","post":"clexxb8oz0000v6739wcj1s11","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/什么是IFTTT/2021-10-25121641.png","slug":"2021-10-25121641.png","post":"clexxb8oz0000v6739wcj1s11","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/什么是IFTTT/2021-10-25121709.png","slug":"2021-10-25121709.png","post":"clexxb8oz0000v6739wcj1s11","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/什么是IFTTT/2021-10-25121731.png","slug":"2021-10-25121731.png","post":"clexxb8oz0000v6739wcj1s11","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/什么是IFTTT/2021-10-25121856.png","slug":"2021-10-25121856.png","post":"clexxb8oz0000v6739wcj1s11","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/什么是IFTTT/2021-10-25122357.png","slug":"2021-10-25122357.png","post":"clexxb8oz0000v6739wcj1s11","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/什么是IFTTT/2021-10-25123945.png","slug":"2021-10-25123945.png","post":"clexxb8oz0000v6739wcj1s11","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/华硕路由器VPN功能/2021-10-02094926.jpg","slug":"2021-10-02094926.jpg","post":"clexxb8p60001v6737ud83zjq","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/华硕路由器VPN功能/IMG_3185.png","slug":"IMG_3185.png","post":"clexxb8p60001v6737ud83zjq","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/华硕路由器VPN功能/IMG_3186.png","slug":"IMG_3186.png","post":"clexxb8p60001v6737ud83zjq","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/华硕路由器VPN功能/IMG_3187.png","slug":"IMG_3187.png","post":"clexxb8p60001v6737ud83zjq","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/华硕路由器VPN功能/IMG_3188.png","slug":"IMG_3188.png","post":"clexxb8p60001v6737ud83zjq","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/华硕路由器VPN功能/IMG_3189.png","slug":"IMG_3189.png","post":"clexxb8p60001v6737ud83zjq","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/华硕路由器VPN功能/IMG_3190.png","slug":"IMG_3190.png","post":"clexxb8p60001v6737ud83zjq","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/华硕路由器VPN功能/IMG_3191.png","slug":"IMG_3191.png","post":"clexxb8p60001v6737ud83zjq","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/华硕路由器VPN功能/IMG_3192.png","slug":"IMG_3192.png","post":"clexxb8p60001v6737ud83zjq","modified":0,"renderable":0},{"_id":"source/_posts/智能家居/华硕路由器VPN功能/IMG_3193.png","slug":"IMG_3193.png","post":"clexxb8p60001v6737ud83zjq","modified":0,"renderable":0}],"PostCategory":[{"post_id":"clexvkk5e00075i73e3e1bde3","category_id":"clexvkk5200045i73aq27btd7","_id":"clexvkk5z000e5i737gto2dwg"},{"post_id":"clexvkk4h00015i7300k30q5i","category_id":"clexvkk5200045i73aq27btd7","_id":"clexvkk66000j5i73cork0bwl"},{"post_id":"clexvkk5h00085i73d9ruc3jk","category_id":"clexvkk5200045i73aq27btd7","_id":"clexvkk6b000m5i73fq2d03x0"},{"post_id":"clexvkk5r000c5i73ekby70kb","category_id":"clexvkk5200045i73aq27btd7","_id":"clexvkk6k000q5i731wb98se2"},{"post_id":"clexvkk4w00035i73h2ko8vw8","category_id":"clexvkk5200045i73aq27btd7","_id":"clexvkk6p000t5i73dcgohdh5"},{"post_id":"clexvkk5w000d5i73ezh2fjz5","category_id":"clexvkk5200045i73aq27btd7","_id":"clexvkk6v000x5i73gcssguyn"},{"post_id":"clexvkk63000i5i737voq7dx6","category_id":"clexvkk5200045i73aq27btd7","_id":"clexvkk7100115i738t62d7u2"},{"post_id":"clexvkk5900065i73dzus23la","category_id":"clexvkk5200045i73aq27btd7","_id":"clexvkk7500155i734p1dgmvd"},{"post_id":"clexvkk68000l5i73070u29gf","category_id":"clexvkk5200045i73aq27btd7","_id":"clexvkk7900195i73bvs0ar8j"},{"post_id":"clexvkk6e000p5i739pi4ehv3","category_id":"clexvkk5200045i73aq27btd7","_id":"clexvkk7f001d5i7310gvcscd"},{"post_id":"clexvkk6l000s5i73g7dm4e5o","category_id":"clexvkk6w000y5i735arl9znt","_id":"clexvkk7j001h5i73badpcfmq"},{"post_id":"clexvkk6s000w5i73bk53hil9","category_id":"clexvkk6w000y5i735arl9znt","_id":"clexvkk7t001n5i73hbjt827l"},{"post_id":"clexvkk6y00105i73fasgalzv","category_id":"clexvkk6w000y5i735arl9znt","_id":"clexvkk8f001s5i73ffwe8wvl"},{"post_id":"clexvkk7w001p5i73641fgpup","category_id":"clexvkk7s001m5i73b0v4a4xw","_id":"clexvkk8p001y5i7374mphnqe"},{"post_id":"clexvkk7300145i73bze6132o","category_id":"clexvkk7s001m5i73b0v4a4xw","_id":"clexvkk8y00225i739r666vu9"},{"post_id":"clexvkk8b001r5i73atphgsgm","category_id":"clexvkk7s001m5i73b0v4a4xw","_id":"clexvkk9300255i738ypk4k4g"},{"post_id":"clexvkk8i001v5i735cup4cm1","category_id":"clexvkk7s001m5i73b0v4a4xw","_id":"clexvkk9800295i73hwcy2c8p"},{"post_id":"clexvkk7600175i73aij303y2","category_id":"clexvkk7s001m5i73b0v4a4xw","_id":"clexvkk9d002d5i73csnp388g"},{"post_id":"clexvkk8n001x5i734lfx32nl","category_id":"clexvkk7s001m5i73b0v4a4xw","_id":"clexvkk9h002g5i7316xreqp3"},{"post_id":"clexvkk7c001c5i7338ho66lm","category_id":"clexvkk7s001m5i73b0v4a4xw","_id":"clexvkk9m002k5i73e21540p1"},{"post_id":"clexvkk7g001f5i73eodohrtr","category_id":"clexvkk7s001m5i73b0v4a4xw","_id":"clexvkk9q002n5i73hnan45x7"},{"post_id":"clexvkk7m001j5i733nx7fsgs","category_id":"clexvkk7s001m5i73b0v4a4xw","_id":"clexvkk9w002s5i73fovm3p0z"},{"post_id":"clexvkk7q001l5i733gct843g","category_id":"clexvkk7s001m5i73b0v4a4xw","_id":"clexvkka1002w5i733yfc9pf1"},{"post_id":"clexvkk8v00215i73gltuatho","category_id":"clexvkk9v002r5i733hx3ddei","_id":"clexvkka500315i7337gk2n0y"},{"post_id":"clexvkk9000245i734q09biam","category_id":"clexvkk9v002r5i733hx3ddei","_id":"clexvkka800355i7302qy3vu2"},{"post_id":"clexvkk9600285i739ycgbwwa","category_id":"clexvkk9v002r5i733hx3ddei","_id":"clexvkkaa00395i731xh535xr"},{"post_id":"clexvkk9a002c5i73fq048s76","category_id":"clexvkk9v002r5i733hx3ddei","_id":"clexvkkad003c5i731l3j1e3s"},{"post_id":"clexvkk9f002f5i730vy7ho5u","category_id":"clexvkk9v002r5i733hx3ddei","_id":"clexvkkag003g5i73hwjo6ijn"},{"post_id":"clexvkk9k002j5i7319u24qje","category_id":"clexvkk9v002r5i733hx3ddei","_id":"clexvkkai003j5i734i9i6cdb"},{"post_id":"clexvkk9o002m5i731r6s7gt1","category_id":"clexvkkaf003f5i730mio0u6h","_id":"clexvkkam003o5i73hzspbu6k"},{"post_id":"clexvkk9t002q5i73ftsyec0n","category_id":"clexvkkaf003f5i730mio0u6h","_id":"clexvkkao003r5i7330g1gwwl"},{"post_id":"clexvkk9x002t5i735lnmcw4t","category_id":"clexvkkal003n5i73hwguby8e","_id":"clexvkkap003u5i73666z9ijs"},{"post_id":"clexxb8oz0000v6739wcj1s11","category_id":"clexvkk7s001m5i73b0v4a4xw","_id":"clexxb8q30003v673d5lv8fmu"},{"post_id":"clexxb8p60001v6737ud83zjq","category_id":"clexvkk7s001m5i73b0v4a4xw","_id":"clexxb8q30004v673fdukdwa8"}],"PostTag":[{"post_id":"clexvkk4h00015i7300k30q5i","tag_id":"clexvkk5700055i73d22102d1","_id":"clexvkk5r000b5i73dzqpfg21"},{"post_id":"clexvkk5r000c5i73ekby70kb","tag_id":"clexvkk5700055i73d22102d1","_id":"clexvkk63000h5i735y6r5gf8"},{"post_id":"clexvkk4w00035i73h2ko8vw8","tag_id":"clexvkk5m000a5i73bpjl055k","_id":"clexvkk67000k5i73exes831l"},{"post_id":"clexvkk5w000d5i73ezh2fjz5","tag_id":"clexvkk5m000a5i73bpjl055k","_id":"clexvkk6d000o5i732n3f9ejz"},{"post_id":"clexvkk63000i5i737voq7dx6","tag_id":"clexvkk5m000a5i73bpjl055k","_id":"clexvkk6l000r5i736p6s09x4"},{"post_id":"clexvkk5900065i73dzus23la","tag_id":"clexvkk5m000a5i73bpjl055k","_id":"clexvkk6r000v5i733bwr658k"},{"post_id":"clexvkk68000l5i73070u29gf","tag_id":"clexvkk5700055i73d22102d1","_id":"clexvkk6x000z5i7364p25k3p"},{"post_id":"clexvkk6e000p5i739pi4ehv3","tag_id":"clexvkk5700055i73d22102d1","_id":"clexvkk7200135i737eyy7cui"},{"post_id":"clexvkk5e00075i73e3e1bde3","tag_id":"clexvkk5m000a5i73bpjl055k","_id":"clexvkk7600165i73h14h0hgk"},{"post_id":"clexvkk5h00085i73d9ruc3jk","tag_id":"clexvkk5m000a5i73bpjl055k","_id":"clexvkk7b001b5i732wlj8kta"},{"post_id":"clexvkk6l000s5i73g7dm4e5o","tag_id":"clexvkk7100125i73233o2v38","_id":"clexvkk7g001e5i7383mnfacg"},{"post_id":"clexvkk6s000w5i73bk53hil9","tag_id":"clexvkk7100125i73233o2v38","_id":"clexvkk7p001k5i731f7agwa6"},{"post_id":"clexvkk6y00105i73fasgalzv","tag_id":"clexvkk7100125i73233o2v38","_id":"clexvkk8a001q5i73czc0guds"},{"post_id":"clexvkk7300145i73bze6132o","tag_id":"clexvkk7u001o5i736k0q76kf","_id":"clexvkk8m001w5i73fe9de19c"},{"post_id":"clexvkk7600175i73aij303y2","tag_id":"clexvkk7u001o5i736k0q76kf","_id":"clexvkk8z00235i734c1y4pnu"},{"post_id":"clexvkk8n001x5i734lfx32nl","tag_id":"clexvkk7u001o5i736k0q76kf","_id":"clexvkk9500275i73eehv9vmc"},{"post_id":"clexvkk7c001c5i7338ho66lm","tag_id":"clexvkk8s00205i735ub0g6ld","_id":"clexvkk9a002b5i73b6t355bd"},{"post_id":"clexvkk7g001f5i73eodohrtr","tag_id":"clexvkk8s00205i735ub0g6ld","_id":"clexvkk9j002i5i731w4v8zwp"},{"post_id":"clexvkk7m001j5i733nx7fsgs","tag_id":"clexvkk8s00205i735ub0g6ld","_id":"clexvkk9s002p5i734fa88ct2"},{"post_id":"clexvkk7q001l5i733gct843g","tag_id":"clexvkk8s00205i735ub0g6ld","_id":"clexvkka1002v5i73bu5j5y06"},{"post_id":"clexvkk7w001p5i73641fgpup","tag_id":"clexvkk8s00205i735ub0g6ld","_id":"clexvkka4002z5i73dj0b9pm5"},{"post_id":"clexvkk8b001r5i73atphgsgm","tag_id":"clexvkka3002y5i731m4jhu9y","_id":"clexvkka700335i7302zvg755"},{"post_id":"clexvkk8i001v5i735cup4cm1","tag_id":"clexvkka600325i73f0bv0qyc","_id":"clexvkkaa00375i73fihjgze1"},{"post_id":"clexvkk8v00215i73gltuatho","tag_id":"clexvkka900365i73e86yh5jh","_id":"clexvkkad003d5i733ffmdxwn"},{"post_id":"clexvkk9000245i734q09biam","tag_id":"clexvkka900365i73e86yh5jh","_id":"clexvkkag003h5i73fgpd3e6r"},{"post_id":"clexvkk9600285i739ycgbwwa","tag_id":"clexvkkae003e5i730rv029hn","_id":"clexvkkaj003l5i7374fwev7h"},{"post_id":"clexvkk9a002c5i73fq048s76","tag_id":"clexvkka900365i73e86yh5jh","_id":"clexvkkam003p5i73cvnf33r3"},{"post_id":"clexvkk9f002f5i730vy7ho5u","tag_id":"clexvkkak003m5i735twogr2k","_id":"clexvkkao003s5i736f792dh6"},{"post_id":"clexvkk9k002j5i7319u24qje","tag_id":"clexvkkak003m5i735twogr2k","_id":"clexvkkaq003v5i73b3zq91h7"},{"post_id":"clexvkk9o002m5i731r6s7gt1","tag_id":"clexvkkao003t5i734n6i5pol","_id":"clexvkkar003x5i73crpi21n0"},{"post_id":"clexvkk9t002q5i73ftsyec0n","tag_id":"clexvkkaq003w5i73hrxj8ehv","_id":"clexvkkas003z5i738cdbc9jl"},{"post_id":"clexvkk9x002t5i735lnmcw4t","tag_id":"clexvkkar003y5i734m9f4ed7","_id":"clexvkkat00405i731g5dd7rp"},{"post_id":"clexxb8oz0000v6739wcj1s11","tag_id":"clexvkka3002y5i731m4jhu9y","_id":"clexxb8q60006v6734hlhezo1"},{"post_id":"clexxb8oz0000v6739wcj1s11","tag_id":"clexxb8pa0002v673dxqj42a1","_id":"clexxb8q70007v6734bpodhyh"},{"post_id":"clexxb8p60001v6737ud83zjq","tag_id":"clexvkka3002y5i731m4jhu9y","_id":"clexxb8q70008v673cqjn7jeu"},{"post_id":"clexxb8p60001v6737ud83zjq","tag_id":"clexxb8q40005v67372yj3wtd","_id":"clexxb8q80009v673bwt0dy6m"}],"Tag":[{"name":"pelican","_id":"clexvkk5700055i73d22102d1"},{"name":"hexo","_id":"clexvkk5m000a5i73bpjl055k"},{"name":"ios","_id":"clexvkk7100125i73233o2v38"},{"name":"ESP32","_id":"clexvkk7u001o5i736k0q76kf"},{"name":"home_assistant","_id":"clexvkk8s00205i735ub0g6ld"},{"name":"raspberrypi","_id":"clexvkka3002y5i731m4jhu9y"},{"name":"扫地机器人","_id":"clexvkka600325i73f0bv0qyc"},{"name":"python-basic","_id":"clexvkka900365i73e86yh5jh"},{"name":"python-web","_id":"clexvkkae003e5i730rv029hn"},{"name":"python-intermediate","_id":"clexvkkak003m5i735twogr2k"},{"name":"windows","_id":"clexvkkao003t5i734n6i5pol"},{"name":"广域网","_id":"clexvkkaq003w5i73hrxj8ehv"},{"name":"医案","_id":"clexvkkar003y5i734m9f4ed7"},{"name":"ifttt","_id":"clexxb8pa0002v673dxqj42a1"},{"name":"vpn","_id":"clexxb8q40005v67372yj3wtd"}]}}