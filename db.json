{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/css/noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/matomo.js","path":"js/third-party/analytics/matomo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/gitter.js","path":"js/third-party/chat/gitter.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar2.png","path":"images/avatar2.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"918f5df2f3d9e1c07fd563eec1de943d3e55d680","modified":1703581783040},{"_id":"source/._.DS_Store","hash":"e20f0c8e51509a894c63ec58900bb1fb7f0581db","modified":1677807183650},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1702362592425},{"_id":"source/_posts/._.DS_Store","hash":"296dec85c5939dbce3b634386fafccef8d0048bb","modified":1677807183420},{"_id":"source/_posts/._python","hash":"195598cb8f26c82678a8f6793da59a6687004bf7","modified":1677807183370},{"_id":"source/_posts/._手机","hash":"f53b536855f22c0fe7344ab01305203049a7564a","modified":1677807183420},{"_id":"source/_posts/._hexo","hash":"ca6745fa33218507c3152847859979ca2aa53e9f","modified":1677807183340},{"_id":"source/categories/index.md","hash":"d00af02337375208f30a3e005b91f081644121f3","modified":1677807183650},{"_id":"source/tags/index.md","hash":"ac99ad1b12bf2090983807e8f12c225215504ad2","modified":1677807183640},{"_id":"source/_posts/blog/.DS_Store","hash":"5599d26eeded78c445484863ecd679b574047781","modified":1678173662126},{"_id":"source/_posts/blog/._.DS_Store","hash":"4e77d416c4dc2d3041b49a362df0f3a11503738b","modified":1677807183280},{"_id":"source/_posts/blog/._Pelican小贴士.md","hash":"7054b975e62cd3bf41b91f683ae5b1eab2239292","modified":1677807183320},{"_id":"source/_posts/blog/._个人博客-GitHub-Pages篇.md","hash":"4d40b2f02facdad3977c950751399c433e484f49","modified":1677807183280},{"_id":"source/_posts/blog/._个人博客-Hexo多终端同步篇.md","hash":"d894b47c8fc2120aee9e5b965ded9b03810319d5","modified":1677807183340},{"_id":"source/_posts/blog/._个人博客-Hexo安装篇.md","hash":"a19f1518cd191ac77fb54838b810430bf3b60ef1","modified":1677807183340},{"_id":"source/_posts/blog/._个人博客-—-Hexo标签和分类篇.md","hash":"af17fbf7369b97a5d8dd84d0939655192c2e46ea","modified":1677807183340},{"_id":"source/_posts/blog/._博客主题","hash":"4e0184728ea8fe13cd2484d250fcdf57859ed4b9","modified":1677807183310},{"_id":"source/_posts/blog/._博客主题.md","hash":"c1e6eafee47fd4bf6791aab7a6a42c3b1244b8f7","modified":1677807183310},{"_id":"source/_posts/blog/._发布博客时调整图片的大小.md","hash":"38b6677350bdd99a4e6c9f9c4c5e2ee5d52082e6","modified":1677807183340},{"_id":"source/_posts/blog/._如何整理博客中的图片资源.md","hash":"6c11b76f81a4ca33c7c2f3de278992666be54cd9","modified":1677807183330},{"_id":"source/_posts/blog/._定期备份博客.md","hash":"66d179c8959cc60f10540175972cb81d36581264","modified":1677807183330},{"_id":"source/_posts/blog/._我的博客 2.md","hash":"a2ec17b08d038dfc12c11c0ad7cd04d2843118f3","modified":1677807183320},{"_id":"source/_posts/blog/Pelican小贴士.md","hash":"2440c6fac6e454fb866ba5ce3f990f5574018a01","modified":1677807183320},{"_id":"source/_posts/blog/个人博客-GitHub-Pages篇.md","hash":"41e682618b25ee58b88c35fe6968b5f3af5ff06c","modified":1677807183340},{"_id":"source/_posts/blog/个人博客-Hexo多终端同步篇.md","hash":"f9c022565d67cf3949cfb4a16f2bc2a0f9000ceb","modified":1677807183340},{"_id":"source/_posts/blog/个人博客-Hexo安装篇.md","hash":"928983fca2c2ff7cc96c7298c19e65f7d8d6cdd8","modified":1677807183340},{"_id":"source/_posts/blog/个人博客-—-Hexo标签和分类篇.md","hash":"42138aa9173569b6b4138b8ce4137e0a8c00134c","modified":1677807183340},{"_id":"source/_posts/blog/博客主题.md","hash":"1a349bf82b64fadde52b5365f1ee76eb73000073","modified":1677807183310},{"_id":"source/_posts/blog/发布博客时调整图片的大小.md","hash":"0fd2339f0ed5601cb92a2719e12d5bbb6768a413","modified":1677807183340},{"_id":"source/_posts/手机/._Windows和iOS备忘录","hash":"6d8963dc5c8e1293c9e34da27eeb1bc43533c983","modified":1678170742922},{"_id":"source/_posts/手机/._Windows和iOS密码管理器","hash":"67627c38906418e45f22b00e386f55550c25bd2a","modified":1678170743406},{"_id":"source/_posts/手机/._Windows和iOS文件共享","hash":"887560fcc46200b985b957106f56f81e799d2058","modified":1677807183420},{"_id":"source/_posts/手机/._Windows和iOS文件共享.md","hash":"0225449a50a57895c6517fe88e867e65aa3a3e4b","modified":1678171000684},{"_id":"source/_posts/手机/Windows和iOS备忘录.md","hash":"d9ceef76148b60247e814d0e4708ad34bb6e7f39","modified":1678170937828},{"_id":"source/_posts/手机/Windows和iOS密码管理器.md","hash":"a7d045b469ce43f8f4e725c60cf55c60ac556980","modified":1678170986488},{"_id":"source/_posts/手机/Windows和iOS文件共享.md","hash":"560923f0d6324f8eb29f98b393920e1cd391ee6c","modified":1677807183420},{"_id":"source/_posts/智能家居/.DS_Store","hash":"f32d79073ac26f33df93f9c0706ef645fdd267a4","modified":1678098859517},{"_id":"source/_posts/blog/定期备份博客.md","hash":"225c55beacb34213d2122891b2853410cd5c6fb1","modified":1677807183330},{"_id":"source/_posts/blog/如何整理博客中的图片资源.md","hash":"251aa5f115a3982b563958f62e4b49ce50f05233","modified":1677807183330},{"_id":"source/_posts/智能家居/._.DS_Store","hash":"8994289ad297ccfbac421cd3f30778b431e64f91","modified":1678098861023},{"_id":"source/_posts/blog/我的博客.md","hash":"dac72cf4d9058d9b7649596dfd6f7b8b6028b513","modified":1678173706141},{"_id":"source/_posts/智能家居/._ESP32写入MicroPython固件","hash":"beb28075e27cf8df4f9446b3e5024e53c342c0c7","modified":1678098858246},{"_id":"source/_posts/智能家居/._ESP32写入MicroPython固件.md","hash":"9edceb57481e1b0c856b2fff71e15597bad196ac","modified":1678098856426},{"_id":"source/_posts/智能家居/._ESP32点亮TFT屏幕","hash":"8617069889717600599dc3568a5b3f0caee4cfc1","modified":1678098858929},{"_id":"source/_posts/智能家居/._ESP32点亮TFT屏幕.md","hash":"9101914fd75079c93b72d869bcc0124ce47fab6e","modified":1678098856802},{"_id":"source/_posts/智能家居/._Home_Assistant_HTTPS","hash":"1d459cc15bda6f24b41cc31bff3a852c1a72c5a9","modified":1678098857388},{"_id":"source/_posts/智能家居/._Home_Assistant_HTTPS.md","hash":"cfae01ade36fe471c3b49a8a10e77a516c3ec17d","modified":1678098856664},{"_id":"source/_posts/智能家居/._Home_Assistant_客户端配置","hash":"0599767cb53c4c529c9529feec087f6c731aacae","modified":1678098855705},{"_id":"source/_posts/智能家居/._Home_Assistant_客户端配置.md","hash":"a97ea57cf9a007a04cdd7a13e3fe4dbfb181e1c1","modified":1678098855941},{"_id":"source/_posts/智能家居/._Home_Assistant安装.md","hash":"12af32db8e9ace9eaca956980abce60cc7e28e29","modified":1678098856194},{"_id":"source/_posts/智能家居/._Home_Assistant的定位功能","hash":"d41b930741c309633095caffb95689343516a672","modified":1678098846610},{"_id":"source/_posts/智能家居/._Home_Assistant的定位功能.md","hash":"6ff6f13977622cfd0a94d8be3f336603c687154e","modified":1678098847019},{"_id":"source/_posts/智能家居/._Home_Assistant监控Web服务器","hash":"941d45a5fc29fb46bfe443e59ba3bb08295197a7","modified":1678098848065},{"_id":"source/_posts/智能家居/._Home_Assistant监控Web服务器.md","hash":"a119d9f8fdd60d1ede1e53b8119635971b57eda8","modified":1678098847167},{"_id":"source/_posts/智能家居/._SSH远程连接","hash":"e50d53407bdcf1f352938d5177c188fd0b6eade6","modified":1678170772581},{"_id":"source/_posts/智能家居/._iRobot扫地机器人使用体验","hash":"4489368095826424f30e2b1e4274def6e193cbac","modified":1677807183640},{"_id":"source/_posts/智能家居/._iRobot扫地机器人使用体验.md","hash":"757528205b610f27712e8edd940c906d5917be95","modified":1677807183640},{"_id":"source/_posts/智能家居/._物联网智能小电视","hash":"c98c18e707dbe6e886cc02dd86227271485f91ac","modified":1678098859814},{"_id":"source/_posts/智能家居/._物联网智能小电视.md","hash":"65c48ab2e997c396ef60da647774609b6f649922","modified":1678098857024},{"_id":"source/_posts/智能家居/ESP32写入MicroPython固件.md","hash":"b4a7b7f22859262b1be56e24c8670f0e903039a2","modified":1678092680000},{"_id":"source/_posts/智能家居/ESP32点亮TFT屏幕.md","hash":"05b17657b27e79fe3c0679775e75d8e843abcc6b","modified":1678091967000},{"_id":"source/_posts/智能家居/Home_Assistant_HTTPS.md","hash":"70848e86bc3df8aa76632213db60c303be4cc837","modified":1678092011000},{"_id":"source/_posts/智能家居/Home_Assistant_客户端配置.md","hash":"44a709c724fd28926a866f049d18e9728ef5c0a8","modified":1678097920000},{"_id":"source/_posts/智能家居/Home_Assistant安装.md","hash":"0263ece32820790a3267b5972905e7502f2376b1","modified":1678093168000},{"_id":"source/_posts/智能家居/Home_Assistant的定位功能.md","hash":"84268bd73becacd910cb5576ec3d006e434a798c","modified":1678098539000},{"_id":"source/_posts/智能家居/Home_Assistant监控Web服务器.md","hash":"13414e4d6670c36902b2c6c83d0165e50818b609","modified":1678098464000},{"_id":"source/_posts/智能家居/SSH远程连接.md","hash":"d79dc2cc7e5501c517509a8eeb077c4225d2b43b","modified":1678170861949},{"_id":"source/_posts/智能家居/iRobot扫地机器人使用体验.md","hash":"14100d37fa9b9548aa12ad47c53a28afb4617498","modified":1677807183640},{"_id":"source/_posts/智能家居/物联网智能小电视.md","hash":"ec7034437de5fbd7882b8390210d324325652f36","modified":1678091300000},{"_id":"source/_posts/python/.DS_Store","hash":"ca2b70bb80b680cb07af3b560c859d9aa2d837d6","modified":1677807183340},{"_id":"source/_posts/python/._.DS_Store","hash":"afde804d7faf3d56d64b3fda61da8b0610238672","modified":1677807183340},{"_id":"source/_posts/python/._Python介绍.md","hash":"990cea93fea05b3f591a67436bbe5c1fbce2b252","modified":1677807183360},{"_id":"source/_posts/python/._Python模块和包-介绍.md","hash":"c981ea5512e329d713522084c89b20b495669a2b","modified":1677807183370},{"_id":"source/_posts/python/._Requests库使用指南.md","hash":"f1fc121c1b07fc70dd03dfce1f6139eead5b8c0c","modified":1677807183360},{"_id":"source/_posts/python/._f-Strings-格式化字符串.md","hash":"ed2d81222f68981684dc5dcce216d028808317b7","modified":1677807183350},{"_id":"source/_posts/python/._super函数.md","hash":"4d605014e4d08326a8dac255423c68893c975dad","modified":1677807183360},{"_id":"source/_posts/python/._面向对象的编程.md","hash":"b7fdd91ac37bb0036dd66c3fbf7428c74075f2a9","modified":1677807183360},{"_id":"source/_posts/python/Python介绍.md","hash":"58df511b7df00b2ecf460c715bb083394544596e","modified":1677807183360},{"_id":"source/_posts/python/Python模块和包-介绍.md","hash":"8606f41d1cbb525b23f030439a2bf458e7dbe3dc","modified":1677807183370},{"_id":"source/_posts/python/Requests库使用指南.md","hash":"e68273145ef67018628c8b8f9e5946e968e16bf5","modified":1677807183360},{"_id":"source/_posts/杂七杂八/.DS_Store","hash":"0a8867b0b3ba429426bc20a52cf5893c90dd0ade","modified":1678170210750},{"_id":"source/_posts/杂七杂八/._.DS_Store","hash":"a2758fa10efad42383eead4a175c413e56c11a0a","modified":1677807183380},{"_id":"source/_posts/杂七杂八/._Windows-Terminal如何从Vim中复制内容","hash":"7c8bebe71e3c962d6d816e210d0a84253b7f3743","modified":1677807183380},{"_id":"source/_posts/杂七杂八/._Windows-Terminal如何从Vim中复制内容.md","hash":"935ae8a232260b26a9fa2d495e3a6d983052a400","modified":1677807183390},{"_id":"source/_posts/杂七杂八/._浅谈广域网加速技术.md","hash":"e9cf62a327699a74e86fe08a348cb7d577988eb5","modified":1677807183380},{"_id":"source/_posts/杂七杂八/Windows-Terminal如何从Vim中复制内容.md","hash":"c6f5a537b294a8ca998ff39f9088b1b9ea9d4234","modified":1677807183380},{"_id":"source/_posts/杂七杂八/浅谈广域网加速技术.md","hash":"b3db29c18907441afe155caa38a3dfd9422ac29b","modified":1677807183380},{"_id":"source/_posts/python/f-Strings-格式化字符串.md","hash":"895814bd1a50bddb41d9d602388cc4663e71dcc2","modified":1677807183350},{"_id":"source/_posts/python/super函数.md","hash":"fd80d2d8f97623729ee3aa04c18ff0137e5d2cdf","modified":1677807183360},{"_id":"source/_posts/python/面向对象的编程.md","hash":"3502b3fc040f52bfc9c3bb88cec75bc2089f655a","modified":1677807183360},{"_id":"source/_posts/中医/.DS_Store","hash":"c3a780e54600dada0053b15df2b63ac4f8546ffa","modified":1677807183610},{"_id":"source/_posts/中医/._.DS_Store","hash":"87ccd98e42f9307f6f0fa004b0660d5176b9cf62","modified":1677807183610},{"_id":"source/_posts/中医/._尝试用二至丸治疗白发.md","hash":"0b49ed8d11e4ca0e00e380b962d8cc383a02d647","modified":1677807183610},{"_id":"source/_posts/中医/.smbdeleteAAAa2bd0","hash":"050bc310982618c4d5131aeb148581fc41643d63","modified":1677807183610},{"_id":"source/_posts/中医/尝试用二至丸治疗白发.md","hash":"b42c06f4529be7ea7e9fed18f16c738d94c74a9b","modified":1677807183610},{"_id":"source/_posts/blog/个人博客-Hexo多终端同步篇/21.png","hash":"bb66f8eb3e24e1a4a2651d0cd4f1492aca1306c4","modified":1677807183290},{"_id":"source/_posts/blog/个人博客-Hexo多终端同步篇/22.png","hash":"5b88e8daf0da8288127a768a264cc341d70aeee8","modified":1677807183290},{"_id":"source/_posts/手机/Windows和iOS备忘录/windowsnotes.png","hash":"483290b8c296be3428c33d8647e364f2006cbb38","modified":1678170323000},{"_id":"source/_posts/blog/个人博客-Hexo安装篇/01.png","hash":"831216a4cff661c4d9cd6a5fe455f188e4419ce2","modified":1677807183280},{"_id":"source/_posts/手机/Windows和iOS密码管理器/2021-10-03092032.png","hash":"a82efbbbd3f00a73a2ebc23e953f58fc4895e3c9","modified":1678170557000},{"_id":"source/_posts/blog/个人博客-Hexo安装篇/08.png","hash":"66d5a2c063e3e992b16946f72460d4bdba2c1337","modified":1677807183280},{"_id":"source/_posts/blog/如何整理博客中的图片资源/Pastedimage20230224145541.png","hash":"81a0b81287b9d1d5f272b8748c3dbdeced7e58ba","modified":1677807183320},{"_id":"source/_posts/blog/如何整理博客中的图片资源/Pastedimage20230224145706.png","hash":"74bc47120f0663756eac714e5bf70d0d6882b214","modified":1677807183320},{"_id":"source/_posts/智能家居/ESP32写入MicroPython固件/2021-10-23114015.png","hash":"c7955a821d96cc59f2e603c3724f76488a072560","modified":1678088903000},{"_id":"source/_posts/智能家居/ESP32写入MicroPython固件/2021-10-23114050.png","hash":"8b2c6edc9cf436994ed6e3c69f5fdac2858b8c03","modified":1678088903000},{"_id":"source/_posts/智能家居/ESP32写入MicroPython固件/2021-10-23114710.png","hash":"6df0f68e8165d5b3766dcd19be5494d59093de03","modified":1678088903000},{"_id":"source/_posts/智能家居/ESP32写入MicroPython固件/2021-10-23114253.png","hash":"d1bde76d1777e091dd3abe1de5593de976895f24","modified":1678088903000},{"_id":"source/_posts/智能家居/ESP32写入MicroPython固件/2021-10-23114815.png","hash":"07dc7f43cfe9fb03ce87aa31edad8c09e6e9e84e","modified":1678088903000},{"_id":"source/_posts/智能家居/ESP32写入MicroPython固件/2021-10-23121931.png","hash":"e8a3006462066c7df096830a16085a92a00ac992","modified":1678088903000},{"_id":"source/_posts/智能家居/SSH远程连接/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1678170183000},{"_id":"source/_posts/智能家居/SSH远程连接/._.DS_Store","hash":"d3c6032ba0531d30cf95bae91c3239cd865cfa4d","modified":1678170772393},{"_id":"source/_posts/智能家居/SSH远程连接/2021-10-26190304.png","hash":"e55ee659332bb7c5dff120e6741effc912991fb8","modified":1678169674000},{"_id":"source/_posts/智能家居/SSH远程连接/20230307142016.png","hash":"972cc0b4dd00d82fbc11e6d38959d599a613c160","modified":1678170016000},{"_id":"source/_posts/智能家居/Home_Assistant_HTTPS/20211019_001515000_iOS.png","hash":"bf96eb64a35defdcb2f798d579edfde38bc0408b","modified":1678090132000},{"_id":"source/_posts/智能家居/Home_Assistant_HTTPS/20211019_001714000_iOS.png","hash":"c3936d989fc26af49e645695ec25705938af0522","modified":1678090132000},{"_id":"source/_posts/智能家居/Home_Assistant_HTTPS/20211019_001547000_iOS.png","hash":"abeddc4591f0543f82770f0fd79818f75bc1fdb1","modified":1678090132000},{"_id":"source/_posts/智能家居/Home_Assistant_客户端配置/.DS_Store","hash":"608fd93f880ee4b59b4330eac4460e7a5fabbf66","modified":1678098314000},{"_id":"source/_posts/智能家居/Home_Assistant_客户端配置/._.DS_Store","hash":"78254d621f8306c4666de630e8955a596511aba1","modified":1678098893870},{"_id":"source/_posts/智能家居/Home_Assistant_客户端配置/2021-10-20094537.png","hash":"aff6fe1be8e9a6580eab7fc4b75aa2d158bde813","modified":1678090245000},{"_id":"source/_posts/智能家居/Home_Assistant_客户端配置/2021-10-20094645.png","hash":"663a5abb6bd328b175f0ae2fa207b3464239acc4","modified":1678090245000},{"_id":"source/_posts/智能家居/Home_Assistant_客户端配置/2021-10-20094710.png","hash":"816857019b9a9bdf2c36cd7c38046d6c63d27c58","modified":1678090245000},{"_id":"source/_posts/智能家居/Home_Assistant_客户端配置/2021-10-20094728.png","hash":"60bcd0d9ed11111a2ed3f5de71da2dff314945fe","modified":1678090245000},{"_id":"source/_posts/智能家居/Home_Assistant_客户端配置/2021-10-20095144.png","hash":"e1fc62eecf446e252364f7212957d6c828cc258a","modified":1678090245000},{"_id":"source/_posts/智能家居/Home_Assistant_客户端配置/20211019_001515000_iOS1.png","hash":"bf96eb64a35defdcb2f798d579edfde38bc0408b","modified":1678090132000},{"_id":"source/_posts/智能家居/Home_Assistant_客户端配置/20211019_001547000_iOS2.png","hash":"abeddc4591f0543f82770f0fd79818f75bc1fdb1","modified":1678090132000},{"_id":"source/_posts/智能家居/Home_Assistant_客户端配置/20211019_001714000_iOS3.png","hash":"c3936d989fc26af49e645695ec25705938af0522","modified":1678090132000},{"_id":"source/_posts/智能家居/Home_Assistant_客户端配置/20211020_024210000_iOS.png","hash":"3d38467f554624cd0578720ac1699987577fcea8","modified":1678090245000},{"_id":"source/_posts/智能家居/Home_Assistant_客户端配置/20211020_024219000_iOS.png","hash":"4c401fd3091459f276549bbc31396d26bae4e40c","modified":1678090245000},{"_id":"source/_posts/智能家居/Home_Assistant_客户端配置/20211020_024258000_iOS.png","hash":"16f37272bc4fd21f0c157a971fedfb24f2a7203b","modified":1678090245000},{"_id":"source/_posts/智能家居/Home_Assistant_客户端配置/20211020_024338000_iOS.png","hash":"c1c9859bc771e2467840f3ebd7a0b13c6db0ed1d","modified":1678090245000},{"_id":"source/_posts/智能家居/Home_Assistant的定位功能/2021-10-25154637.png","hash":"af1185fd31995d85126b0fb9059477c4f48f5bbf","modified":1678090857000},{"_id":"source/_posts/智能家居/Home_Assistant的定位功能/2021-10-25154947.png","hash":"e8319f8ce4c6a0fbfd42285cd5f0907c4200b983","modified":1678090857000},{"_id":"source/_posts/智能家居/Home_Assistant的定位功能/2021-10-25155436.png","hash":"8ff1cbbf5c3f67b84b58524e0174646cfd1b1d50","modified":1678090857000},{"_id":"source/_posts/智能家居/Home_Assistant的定位功能/2021-10-25160611.png","hash":"a026b150b82c85e0ce59e0ad9a904ab7b8d60ba8","modified":1678090857000},{"_id":"source/_posts/智能家居/Home_Assistant的定位功能/20211025173127.jpg","hash":"a640dc0ff4a03f9e16ad512302bfa9879dcc08e5","modified":1678090857000},{"_id":"source/_posts/智能家居/Home_Assistant的定位功能/20211025173103.jpg","hash":"9974b257bc30f3815ea62ba3b959e02cce964b13","modified":1678090857000},{"_id":"source/_posts/智能家居/Home_Assistant的定位功能/20211025173136.jpg","hash":"d408f639a6a6dee3be30cdc17133183190bad2a2","modified":1678090857000},{"_id":"source/_posts/智能家居/Home_Assistant的定位功能/20211025_071159000_iOS.png","hash":"a1ec8737786ea86fe07e7c64cf91b94131d43477","modified":1678090857000},{"_id":"source/_posts/智能家居/Home_Assistant监控Web服务器/2021-10-23191544.png","hash":"134619da30206eb8c9659cc740c5a11592334e2e","modified":1678090736000},{"_id":"source/_posts/智能家居/Home_Assistant监控Web服务器/20211023_105828000_iOS.png","hash":"11cff86c2bc656166ddd1a236532fba5240622ac","modified":1678090736000},{"_id":"source/_posts/智能家居/Home_Assistant监控Web服务器/20211023_105936000_iOS.png","hash":"ee5f0da760b9b08095dd039569a6316bf4b8ff85","modified":1678090736000},{"_id":"source/_posts/智能家居/Home_Assistant监控Web服务器/20211023_110011000_iOS.png","hash":"e22c856d4b82d3a3f43ac560b3f4454b7793a94b","modified":1678090736000},{"_id":"source/_posts/python/Python模块和包-介绍/pkg1.9af1c7aea48f.png","hash":"8355e8e33801607f4e2fbe3905608622258f970c","modified":1677807183350},{"_id":"source/_posts/python/Python模块和包-介绍/pkg1_133918.png","hash":"fd7ab3538e0325917c8c1cb33ff038fc3a87392c","modified":1677807183350},{"_id":"source/_posts/python/Python模块和包-介绍/pkg3.d2160908ae77.png","hash":"2b1005bcc65cf0ad5dcc9d4e9a14f91aaff036fa","modified":1677807183350},{"_id":"source/_posts/python/Python模块和包-介绍/pkg4_100818.png","hash":"46ab34db6823114a0aa59507ff9cc31f94ba391e","modified":1677807183350},{"_id":"source/_posts/中医/尝试用二至丸治疗白发/.DS_Store","hash":"0d07740546efa3f5db6539b777a1313776a835d9","modified":1677807183420},{"_id":"source/_posts/中医/尝试用二至丸治疗白发/._.DS_Store","hash":"00ea45d120cb12994f431196152cefb0f8ce5185","modified":1677807183500},{"_id":"source/_posts/blog/个人博客-GitHub-Pages篇/09.png","hash":"bd8171d85ca74d2cf55df39d9ea506052ad376ff","modified":1677807183280},{"_id":"source/_posts/blog/个人博客-GitHub-Pages篇/10.png","hash":"92a22b3835d2f29d51a6d5e669160b25deb96769","modified":1677807183270},{"_id":"source/_posts/手机/Windows和iOS备忘录/mainaccount03.png","hash":"d94c00057344341ba98b2d068f4022d5b4576ec8","modified":1678170323000},{"_id":"source/_posts/手机/Windows和iOS备忘录/mainaccount04.png","hash":"96e920310cdca0c682daa8281ef2d7903b4e6c09","modified":1678170323000},{"_id":"source/_posts/智能家居/Home_Assistant_客户端配置/2021-10-20094623.png","hash":"ce9e0ce63aaaa8be736470d46414fd677370b521","modified":1678090245000},{"_id":"source/_posts/智能家居/Home_Assistant_客户端配置/20211020_024501000_iOS.png","hash":"36cdd2c949e6fddf3a4bf0e0bfe970122ab52f2a","modified":1678090245000},{"_id":"source/_posts/智能家居/Home_Assistant的定位功能/2021-10-25151814.png","hash":"697829bb71858472fbc5b67bd9eba93b396b0374","modified":1678090857000},{"_id":"source/_posts/智能家居/Home_Assistant监控Web服务器/2021-10-23191643.png","hash":"6dd85eb143ff14052358804358db078f0a7c97b7","modified":1678090736000},{"_id":"source/_posts/手机/Windows和iOS备忘录/mainaccount02.png","hash":"1fc0c9297c6b56f4382d9fb16b3996665217b5d8","modified":1678170323000},{"_id":"source/_posts/手机/Windows和iOS密码管理器/2021-10-03092029.png","hash":"f851a2300719141942d8c41857f5065afa24d1cd","modified":1678170557000},{"_id":"source/_posts/手机/Windows和iOS密码管理器/2021-10-03092030.png","hash":"7385e68a1c32051c0584f2c74789a29e504304b2","modified":1678170557000},{"_id":"source/_posts/blog/博客主题/blog_pc.JPG","hash":"488b301508f207414fa2bc77587c3c821916b8cc","modified":1677807183300},{"_id":"source/_posts/手机/Windows和iOS文件共享/fileshare01.jpg","hash":"25250e5d5a84b9b430e338ec5b602f469daf37d3","modified":1677807183400},{"_id":"source/_posts/手机/Windows和iOS文件共享/icloud-connect-server.jpg","hash":"5b9848700057c79ef06620556997cce9cf4c6493","modified":1677807183410},{"_id":"source/_posts/智能家居/ESP32写入MicroPython固件/2021-10-23112359.png","hash":"d0ce1913d1891c86155b2b7721d4516782665db4","modified":1678088903000},{"_id":"source/_posts/智能家居/ESP32写入MicroPython固件/2021-10-23113915.png","hash":"9e82f9d97e0fcd68a78ee3ece928904d156460a4","modified":1678088903000},{"_id":"source/_posts/智能家居/Home_Assistant的定位功能/20211023_234305000_iOS.png","hash":"8327686347dc0d14f92b1c6ff6dfd9e684c79c46","modified":1678090857000},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1677807183660},{"_id":"themes/next/.DS_Store","hash":"a474ecd56673428fc1ff789c081c81054362a951","modified":1677807183650},{"_id":"themes/next/._.DS_Store","hash":"febccea2d44ac6f929847532a586892c50273620","modified":1677807183660},{"_id":"themes/next/.__config.yml","hash":"96f028b03ba653e5fe4702055636f928c8af6551","modified":1677807183660},{"_id":"themes/next/.eslintrc.json","hash":"9c0762486f24a8c5e60f8b6c875e4c4728942649","modified":1677807183660},{"_id":"themes/next/README.md","hash":"36c4b25587ca494102323dab5a38de5490451a64","modified":1677807183660},{"_id":"themes/next/_vendors.yml","hash":"48ae2854826d6ad46cca5a5fdfcc13f09870c8b2","modified":1677807183660},{"_id":"themes/next/.stylelintrc","hash":"dedb8dd4d454cb1bb6aba594ef2cbd05ec2427d8","modified":1677807183660},{"_id":"themes/next/package.json","hash":"3b8084a2e1cb83ca6bbb1066599ead017c4202f3","modified":1677807183680},{"_id":"themes/next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1677807183660},{"_id":"themes/next/_config.yml","hash":"cd7ffd54f9e0e3d45f60bb2f4acfa516b7737669","modified":1677807183660},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1677807183660},{"_id":"themes/next/renovate.json","hash":"cb29cc16e61b0b8a6dac34657d76822ae29ad5aa","modified":1677807183680},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1677807183670},{"_id":"themes/next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1677807183670},{"_id":"themes/next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1677807183670},{"_id":"themes/next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1677807183680},{"_id":"themes/next/languages/ar.yml","hash":"46026e98fe279a9db5d68bf91afa5d8e41f9ccfb","modified":1677807183680},{"_id":"themes/next/languages/bn.yml","hash":"74133a827c104d1d84509177f283947fe9327a80","modified":1677807183680},{"_id":"themes/next/languages/de.yml","hash":"c4fc18c338309271d1afe737e6c404a6fa313bbc","modified":1677807183680},{"_id":"themes/next/languages/default.yml","hash":"4bbdb4284afe495437cf7817b97b45f60e12d1e4","modified":1677807183680},{"_id":"themes/next/languages/en.yml","hash":"4bbdb4284afe495437cf7817b97b45f60e12d1e4","modified":1677807183680},{"_id":"themes/next/languages/es.yml","hash":"8b6d4a8a056df4362d20ae1f6ac7a590dd7246e5","modified":1677807183680},{"_id":"themes/next/languages/fa.yml","hash":"1e256c8df039ddeba66526c5eb2d6c79177a7fc6","modified":1677807183680},{"_id":"themes/next/languages/fr.yml","hash":"2436942610e38b73b175cb0f8ed1f8f23d42a7ce","modified":1677807183680},{"_id":"themes/next/languages/it.yml","hash":"4d6efcdaea89dfe751b7707d91858bf33d3538b7","modified":1677807183680},{"_id":"themes/next/languages/id.yml","hash":"c4bad93b23c7eefa730fd7fec5b05ace3ce9ca4d","modified":1677807183680},{"_id":"themes/next/languages/ja.yml","hash":"a0906702d3c87d0e1661e300ad0bdf7e679a3d91","modified":1677807183690},{"_id":"themes/next/languages/ko.yml","hash":"25ee0d5b9a0464a91af7d2efb33293c09ad5abdf","modified":1677807183690},{"_id":"themes/next/languages/pt-BR.yml","hash":"10d80915c41328f31a4f2d8ac736bba020f373d8","modified":1677807183690},{"_id":"themes/next/languages/nl.yml","hash":"8a4da307b4a19e3c96b90a07a2da8dc5d50e5d9e","modified":1677807183690},{"_id":"themes/next/languages/pt.yml","hash":"fa7c43ec872aee2739b25dd7260e0764ea9e26fd","modified":1677807183690},{"_id":"themes/next/languages/ru.yml","hash":"16b96783ba363255b4c8156c3e1efebdb37676f8","modified":1677807183690},{"_id":"themes/next/languages/si.yml","hash":"034c5a0df49144e8f16ae2300dba9fde58b9329e","modified":1677807183690},{"_id":"themes/next/languages/th.yml","hash":"4fac74a39d3906c4a727476be4750530a505933a","modified":1677807183690},{"_id":"themes/next/languages/tk.yml","hash":"37d9af426b040004841273d163059cd49cd67d65","modified":1677807183690},{"_id":"themes/next/languages/tr.yml","hash":"890f87f6a33ad8452b771607d4c3ff14810b35fa","modified":1677807183690},{"_id":"themes/next/languages/uk.yml","hash":"fbaed3039ed8605b81422003a4ecb2a6514e339d","modified":1677807183690},{"_id":"themes/next/languages/vi.yml","hash":"a6ba04c743a5b494ac56612ce6b858d9ae3ae1bd","modified":1677807183690},{"_id":"themes/next/languages/zh-CN.yml","hash":"5cebea74f3198a4a20cacf23069c3b91e4f03d85","modified":1677807183690},{"_id":"themes/next/languages/zh-HK.yml","hash":"8ab7219563dab13885840207a86055000d173465","modified":1677807183690},{"_id":"themes/next/languages/zh-TW.yml","hash":"9fdce9d316e205fc132b2181254ef3b04007a97d","modified":1677807183690},{"_id":"themes/next/layout/_layout.njk","hash":"fc0a45112f2dcfc2642404e8934ea32a793c3bd7","modified":1677807183700},{"_id":"themes/next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1677807184280},{"_id":"themes/next/layout/category.njk","hash":"c68b7343d0f8145010f93351908cc36ef6212ec1","modified":1677807184280},{"_id":"themes/next/layout/index.njk","hash":"dd63e488ae8cc144335a5958acedf6a16edd7a92","modified":1677807184290},{"_id":"themes/next/layout/page.njk","hash":"b0660b2af0ac7d3fda14ca4d9f2c9e79ef06c6f9","modified":1677807184290},{"_id":"themes/next/source/._.DS_Store","hash":"d08c3f72a9f45dda861431a39d6f5b0636f5e18d","modified":1677807184330},{"_id":"themes/next/test/index.js","hash":"6bf0289846538be3e9a63809af98f00e1fbdd90b","modified":1677807184430},{"_id":"themes/next/docs/ru/README.md","hash":"ac3c4a7616ea80f0d32d68d6e53233952ba756dc","modified":1677807183670},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7a06d443f374bd1e84294067a0ac796afd9fbe60","modified":1677807183670},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":1677807183670},{"_id":"themes/next/docs/zh-CN/README.md","hash":"9bbdbb0656505acceef9b9895a576164175fe888","modified":1677807183680},{"_id":"themes/next/layout/_macro/post-collapse.njk","hash":"1a30d751871dabfa80940042ddb1f77d07d830b9","modified":1677807183700},{"_id":"themes/next/layout/_macro/sidebar.njk","hash":"547c62ab14d9e05d2d9116db9048a677fbe1fb6d","modified":1677807183700},{"_id":"themes/next/layout/_macro/post.njk","hash":"7e8268fd5cbd552322b276f52459fd187c2453d2","modified":1677807183700},{"_id":"themes/next/layout/_partials/comments.njk","hash":"d0c470b0f6690aa217e9ada848c5e2e73fb27c6f","modified":1677807183700},{"_id":"themes/next/layout/_partials/footer.njk","hash":"c40760b559c516677c8b11a00ba50c011f2079fd","modified":1677807183700},{"_id":"themes/next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1677807184230},{"_id":"themes/next/layout/_partials/pagination.njk","hash":"bc719473ed5948ab6859449d60b8d36cfc1542b4","modified":1677807184240},{"_id":"themes/next/layout/_scripts/index.njk","hash":"6668878a0f9a1166c6a879755f54a08d942da870","modified":1677807184250},{"_id":"themes/next/layout/_partials/widgets.njk","hash":"e7f988ecddb2159313699a00827a45eca5622bd4","modified":1677807184250},{"_id":"themes/next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":1677807184250},{"_id":"themes/next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":1677807184270},{"_id":"themes/next/scripts/events/index.js","hash":"bd9ea82376cd87df611ea3ae077875c7c595a3df","modified":1677807184290},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1677807184300},{"_id":"themes/next/scripts/filters/locals.js","hash":"9eb5310664759931287dd28ea39165dfb67f12ed","modified":1677807184310},{"_id":"themes/next/scripts/filters/minify.js","hash":"ce8477e7fb226525bae5872cd68a1c2c23ad50c8","modified":1677807184310},{"_id":"themes/next/scripts/filters/post.js","hash":"fdc8a0af90035e89c3fcb754a0eb189b8951a2bc","modified":1677807184310},{"_id":"themes/next/scripts/helpers/engine.js","hash":"d292b78485e8e8055712b0ed6de7cf559c5fbdcd","modified":1677807184310},{"_id":"themes/next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":1677807184310},{"_id":"themes/next/scripts/helpers/navigation.js","hash":"78107021101553c3d23e89290f7530b60cf4aa86","modified":1677807184310},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"226fccbe9c93265e65a300e3cb4bf6f9065cfdd7","modified":1677807184310},{"_id":"themes/next/scripts/helpers/next-paginator.js","hash":"e86c764b546e4fbb87970cabc4135a56f9ef9fe1","modified":1677807184310},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"fd24abfaba4d91923ddb6aecf0268b216678c8bd","modified":1677807184310},{"_id":"themes/next/scripts/helpers/next-vendors.js","hash":"afdd6a188a74c188f0dd154fac70efd4080ca262","modified":1677807184310},{"_id":"themes/next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1677807184310},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1677807184320},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1677807184320},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"9ed799c329abf830f623689d7e136991256a24ca","modified":1677807184320},{"_id":"themes/next/scripts/tags/index.js","hash":"17f9451ce1f10f78437f52218757d38d4e1591b0","modified":1677807184320},{"_id":"themes/next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1677807184320},{"_id":"themes/next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1677807184320},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":1677807184320},{"_id":"themes/next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1677807184320},{"_id":"themes/next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1677807184320},{"_id":"themes/next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1677807184320},{"_id":"themes/next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1677807184320},{"_id":"themes/next/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":1677807184270},{"_id":"themes/next/layout/_third-party/index.njk","hash":"aa37f8e98208177b63e3328d6e53b022c6edf3b2","modified":1677807184270},{"_id":"themes/next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1677807184270},{"_id":"themes/next/source/css/_colors.styl","hash":"3c6798c10cc220d83481cb3f3782e78558cee789","modified":1677807184330},{"_id":"themes/next/source/css/_mixins.styl","hash":"04a07a4dbeb00683d783eff26c44492c35b924e0","modified":1677807184380},{"_id":"themes/next/source/css/main.styl","hash":"921a58577f411cf4eb5cfd66db0a241f8f88578c","modified":1677807184390},{"_id":"themes/next/source/css/noscript.styl","hash":"dadc81256afb127b77eac6763d5ee0ec9c77f0a3","modified":1677807184390},{"_id":"themes/next/source/images/._.DS_Store","hash":"a876b910f6c1f5a6cef5b19eb6414b19ddb092a4","modified":1677807184390},{"_id":"themes/next/source/images/.DS_Store","hash":"7dc38171c7f1e1c9030734dea1b175444d1360b2","modified":1677807184390},{"_id":"themes/next/source/images/._avatar.png","hash":"1534dccb274ac2ace2be84513898229c471f77b2","modified":1677807184400},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1677807184400},{"_id":"themes/next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1677807184400},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1677807184400},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1677807184400},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1677807184400},{"_id":"themes/next/source/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1677807184400},{"_id":"themes/next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1677807184410},{"_id":"themes/next/source/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1677807184400},{"_id":"themes/next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1677807184410},{"_id":"themes/next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1677807184410},{"_id":"themes/next/source/js/motion.js","hash":"770d63c26f22705311028a36b52e999cc8a2da82","modified":1677807184410},{"_id":"themes/next/source/js/next-boot.js","hash":"da0f07f9eaaa83de70128b0feaea3fdadb90457a","modified":1677807184410},{"_id":"themes/next/source/js/pjax.js","hash":"90fb7f346f777434ea68ab4e4be1d7b999ad63ac","modified":1677807184410},{"_id":"themes/next/source/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1677807184410},{"_id":"themes/next/source/js/utils.js","hash":"af59257e46d25dda62967c35a65e2efcbd90d3bc","modified":1677807184430},{"_id":"themes/next/test/helpers/index.js","hash":"63ba28afed697f7b3574436b1133b8ecc9c0c357","modified":1677807184430},{"_id":"themes/next/test/helpers/font.js","hash":"342ef3c6fd2dcca2a8802a516ed6d7f389fd2ca2","modified":1677807184430},{"_id":"themes/next/test/helpers/next-url.js","hash":"a91d880cb75e0a8e65a7be4c7362b2c8ebfb7c4f","modified":1677807184430},{"_id":"themes/next/test/tags/button.js","hash":"48f2aa4c513e9e24bd6a811410520b74cd7ea88b","modified":1677807184430},{"_id":"themes/next/test/tags/group-pictures.js","hash":"5c68ae0184f9da6e00ba199f2554d503d8e6da71","modified":1677807184430},{"_id":"themes/next/test/tags/caniuse.js","hash":"aa5e728445caeaf7c2ccd0f3fcb2cad0c93ca6d1","modified":1677807184430},{"_id":"themes/next/test/tags/label.js","hash":"4ebf3698c258ca978b997acbdd0dece44069c09d","modified":1677807184430},{"_id":"themes/next/test/tags/index.js","hash":"e8779e54f0979b221858f8bb74dd081bb503b910","modified":1677807184430},{"_id":"themes/next/test/tags/link-grid.js","hash":"43d298fafb7c45a874b766d443843bd26346e689","modified":1677807184430},{"_id":"themes/next/test/tags/center-quote.js","hash":"7667342fd1a1417eaf6a254012b84ae40e8d13dd","modified":1677807184430},{"_id":"themes/next/test/tags/mermaid.js","hash":"ab77be5f3c6d9a57c7b9dda6decf1906a736fef9","modified":1677807184430},{"_id":"themes/next/test/tags/note.js","hash":"3dcfcd65bf9f326972ea7571fdb1444200f5d07e","modified":1677807184430},{"_id":"themes/next/test/tags/pdf.js","hash":"fd6ea5123560a90f7e7c1eface23dbe1455db25f","modified":1677807184440},{"_id":"themes/next/test/tags/tabs.js","hash":"d63722919f9da2e44d6b952801e10a2915ea9c12","modified":1677807184440},{"_id":"themes/next/test/tags/video.js","hash":"b796fc4dceb20a30e730c322bb5474c0162464cc","modified":1677807184440},{"_id":"themes/next/test/validate/index.js","hash":"5a95ccc8598667535bd022e988055c0e019f3670","modified":1677807184440},{"_id":"themes/next/layout/_partials/head/head-unique.njk","hash":"8da52a144060db1a0a088ccb2e6cc8376d1fce70","modified":1677807183700},{"_id":"themes/next/layout/_partials/head/head.njk","hash":"5388b157bba4a40b9312f4a45c6678974ccf0837","modified":1677807183700},{"_id":"themes/next/layout/_partials/header/brand.njk","hash":"dd9c4c03e99dfde0dfb8edefcb2c933f2f560efc","modified":1677807183700},{"_id":"themes/next/layout/_partials/header/index.njk","hash":"650de421a8ce4cf685428ffbe0087ff84cbd1356","modified":1677807183710},{"_id":"themes/next/layout/_partials/header/menu-item.njk","hash":"41a8b0cc16f60fa085cb719d07216d86b6bc4bf8","modified":1677807184230},{"_id":"themes/next/layout/_partials/header/menu.njk","hash":"ee6fc2f111572d3eeab0a2fecbb2d6b3e37ab26b","modified":1677807184230},{"_id":"themes/next/layout/_partials/header/sub-menu.njk","hash":"06480d8ec5f0b87eafd47f082f07968d7282dd5c","modified":1677807184230},{"_id":"themes/next/layout/_partials/page/breadcrumb.njk","hash":"89825e75cc45e9709fa6ba89883669eedaff6f46","modified":1677807184230},{"_id":"themes/next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1677807184230},{"_id":"themes/next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1677807184230},{"_id":"themes/next/layout/_partials/page/schedule.njk","hash":"0f4bc8e257da60f77c0c1738607b2bde55810684","modified":1677807184230},{"_id":"themes/next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1677807184240},{"_id":"themes/next/layout/_partials/post/post-copyright.njk","hash":"133942922e34abae9e4de7ea5591d77c0caa4b37","modified":1677807184240},{"_id":"themes/next/layout/_partials/post/post-followme.njk","hash":"c1e33b4889f75acc490af3c8bde0ec56c518ff41","modified":1677807184240},{"_id":"themes/next/layout/_partials/post/post-meta.njk","hash":"9fa47e4fb342811da590ee4adc91cf81118c0a39","modified":1677807184240},{"_id":"themes/next/layout/_partials/post/post-related.njk","hash":"e0986db00a0201dd3c60570f964829c84ba5bc68","modified":1677807184240},{"_id":"themes/next/layout/_partials/post/post-reward.njk","hash":"e8b8a7c41e9ec612d0c0c73419529d55d1c16256","modified":1677807184240},{"_id":"themes/next/layout/_partials/post/post-share.njk","hash":"3f28cc4411c0ffc0e41b7970d5ab329c7e46f497","modified":1677807184240},{"_id":"themes/next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":1677807184240},{"_id":"themes/next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":1677807184250},{"_id":"themes/next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":1677807184250},{"_id":"themes/next/layout/_partials/sidebar/site-overview.njk","hash":"70342218473a6e6aa9148de06bfffe121afb8548","modified":1677807184250},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1677807184250},{"_id":"themes/next/layout/_third-party/analytics/cloudflare.njk","hash":"a5b8297c2c383124dd6a56e256ecc0c0dcf489be","modified":1677807184250},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1677807184250},{"_id":"themes/next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1677807184260},{"_id":"themes/next/layout/_third-party/analytics/index.njk","hash":"f900306497b133e8b098bd9f4b96b93d1d96c185","modified":1677807184260},{"_id":"themes/next/layout/_third-party/analytics/matomo.njk","hash":"4e89648a8ec8194c5823064cbca39c938a799006","modified":1677807184260},{"_id":"themes/next/layout/post.njk","hash":"0bfce9f133f501a9a4837257e3b862b3bbca15be","modified":1677807184290},{"_id":"themes/next/layout/_third-party/analytics/plausible.njk","hash":"ef9f2bb7110507f1c4336800af9157d5fa9765bd","modified":1677807184260},{"_id":"themes/next/layout/_third-party/analytics/umami.njk","hash":"181f69b6718c7a8642a88652260cc0a26084a3ee","modified":1677807184260},{"_id":"themes/next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1677807184260},{"_id":"themes/next/layout/_third-party/chat/gitter.njk","hash":"f8cc14b7aa949999a1faaeb7855e2f20b59a386d","modified":1677807184260},{"_id":"themes/next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1677807184260},{"_id":"themes/next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1677807184260},{"_id":"themes/next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1677807184260},{"_id":"themes/next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1677807184270},{"_id":"themes/next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1677807184270},{"_id":"themes/next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1677807184270},{"_id":"themes/next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1677807184270},{"_id":"themes/next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1677807184270},{"_id":"themes/next/layout/_third-party/math/katex.njk","hash":"1ebf658690468ea197bdd0416eb7cfa4bd0b083a","modified":1677807184270},{"_id":"themes/next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1677807184270},{"_id":"themes/next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1677807184270},{"_id":"themes/next/layout/_third-party/search/algolia-search.njk","hash":"24ed76e0c72a25ac152820c750a05826a706b6f4","modified":1677807184280},{"_id":"themes/next/layout/_third-party/search/localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":1677807184280},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1677807184280},{"_id":"themes/next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1677807184280},{"_id":"themes/next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1677807184280},{"_id":"themes/next/scripts/events/lib/config.js","hash":"9ec51eb61f7fee612ffc5252f489003a0fa301fc","modified":1677807184290},{"_id":"themes/next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":1677807184290},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1677807184290},{"_id":"themes/next/scripts/events/lib/navigation.js","hash":"dd3562686d95a50375e6fd32e717ccb0d99c1e3d","modified":1677807184290},{"_id":"themes/next/scripts/events/lib/utils.js","hash":"ec996d0673f766167c86df0966e9da1ae036e103","modified":1677807184290},{"_id":"themes/next/scripts/events/lib/vendors.js","hash":"64e4024376b51fe81be7ad80235abdf0a83853bd","modified":1677807184300},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"5798cfc8f63665031dd3e01debed051628cec319","modified":1677807184300},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"19a402a225c31edffc50f202a14e0d582d3db23e","modified":1677807184300},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1677807184300},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1677807184300},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"a600a98e7436edeb31e291abca359885567df3c9","modified":1677807184300},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1677807184300},{"_id":"themes/next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1677807184300},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1677807184300},{"_id":"themes/next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1677807184300},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1677807184280},{"_id":"themes/next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1677807184280},{"_id":"themes/next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1677807184280},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1677807184390},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a1418c9dc8c0f1a0ad4ded0f4627c45bf0db1a10","modified":1677807184390},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":1677807184390},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"48f4f277946a168d0db1ea02804e85c22ca2c7db","modified":1677807184390},{"_id":"themes/next/source/css/_variables/base.styl","hash":"9845209c54174a42cbff5b5efd5e2e2fb7e60589","modified":1677807184390},{"_id":"themes/next/source/js/schemes/muse.js","hash":"0c490e9ba82efbb8bdf8465e6b537fafd51e1ed7","modified":1677807184410},{"_id":"themes/next/source/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1677807184420},{"_id":"themes/next/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1677807184420},{"_id":"themes/next/source/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1677807184420},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"7664491542046df9a3887cf40a06e00c0b4086a9","modified":1677807184330},{"_id":"themes/next/source/css/_common/components/index.styl","hash":"2298e521253b3bf376a2412271bc2a7d305051f3","modified":1677807184330},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"90a86045a33c1bae49fc2f6fa1e1b53170c7f77b","modified":1677807184340},{"_id":"themes/next/source/css/_common/outline/index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":1677807184350},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"64775c729512b30b144ab5ae9dc4a4dfd4e13f35","modified":1677807184350},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"d0a7c99095f490b0d2ed6b1be43d435960798cec","modified":1677807184360},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1677807184360},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1677807184360},{"_id":"themes/next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1677807184360},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1677807184360},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"f4228c759db4a650c8d38745c2edd1dc83c45687","modified":1677807184360},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1677807184360},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"782ee1fc5e669d3ddbfeb82b73ad7fe561f1a4fb","modified":1677807184380},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"9dfe853c901bdc52fc950bacdf15484dbb9bf140","modified":1677807184380},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"77b85d4de5ab747e04008ab31200311b29748740","modified":1677807184380},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"fa4fd8f76464e214fb7318f325b13c2b62f4b478","modified":1677807184380},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"485d23ccb42c0d0c8ead7ea8930dd3e06d79a285","modified":1677807184380},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"fb550935d374e0bdf1097fce187337dc05cad3e1","modified":1677807184380},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1677807184380},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"d856127cd7e0a28a88edf0b2eb860ede9c3fdb60","modified":1677807184380},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"7fecfb76420f786d6bf60218a81705bb48fb1d18","modified":1677807184380},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"b7f48be3c43bfa393d62142544a5487a67871713","modified":1677807184380},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"cef9c5f9524fd01b59b0a89e51904b42cbdedc8c","modified":1677807184380},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1677807184380},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1677807184380},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"ac2dc0ce9c775a83ef7132ae957b54539366ac9c","modified":1677807184390},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"4266eed6f75625bb30ef0280dc5d4093e7c3beb1","modified":1677807184390},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"72dc825c50357402c342d62ab60fc0c478ab6bc1","modified":1677807184390},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1677807184390},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"91dbf3ca5c3a613d4e30618c120da535bf2d0336","modified":1677807184390},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1677807184390},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1677807184410},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1677807184410},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1677807184410},{"_id":"themes/next/source/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1677807184410},{"_id":"themes/next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1677807184410},{"_id":"themes/next/source/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1677807184410},{"_id":"themes/next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1677807184410},{"_id":"themes/next/source/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1677807184420},{"_id":"themes/next/source/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1677807184420},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1677807184420},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1677807184420},{"_id":"themes/next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1677807184420},{"_id":"themes/next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1677807184420},{"_id":"themes/next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1677807184420},{"_id":"themes/next/source/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1677807184420},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1677807184420},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1677807184420},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","hash":"f27d817b0c2138dd3215b1f46af0753f60a008f3","modified":1677807184430},{"_id":"themes/next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1677807184420},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1677807184420},{"_id":"themes/next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1677807184420},{"_id":"themes/next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1677807184430},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1677807184330},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":1677807184330},{"_id":"themes/next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1677807184330},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1677807184330},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1677807184340},{"_id":"themes/next/source/css/_common/components/post/index.styl","hash":"098d4bd034e986fcf7e443eac4fc2193935461b7","modified":1677807184340},{"_id":"themes/next/source/css/_common/components/post/post-body.styl","hash":"d757768a58743601d0d84158ba955eb15d4c3c01","modified":1677807184340},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"ec37a36e94ba791663607a5022f763915778578f","modified":1677807184340},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1ecfd64507954810b07a9d21fb5305b5378feda0","modified":1677807184340},{"_id":"themes/next/source/css/_common/components/post/post-footer.styl","hash":"11497388f124bfbb4001495a67d3629a9f618405","modified":1677807184340},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1677807184340},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"010c901e4ef49a606f8a350efbf09044e76d2ff3","modified":1677807184340},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1677807184340},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"04cf4a69537fc14d3b8904f965d283356853847f","modified":1677807184340},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"40c9839d3288c3b7de0bf38ac2e18f6c8eba6227","modified":1677807184340},{"_id":"themes/next/source/css/_common/components/third-party/disqusjs.styl","hash":"877a537d5b95beb048142e4fdee6f17e6ef9c7bb","modified":1677807184340},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8f094c4ac17e2ab45569b12d157747f9c7333c12","modified":1677807184340},{"_id":"themes/next/source/css/_common/components/third-party/gitter.styl","hash":"35104dc6883a61c31e0e368dac8ac2f697be62fe","modified":1677807184350},{"_id":"themes/next/source/css/_common/components/third-party/index.styl","hash":"77550e0d3e029b7458e35d8c5ae1fbd612c9673b","modified":1677807184350},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":1677807184350},{"_id":"themes/next/source/css/_common/components/third-party/utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":1677807184350},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"e72799ce3f9b79753e365b2f8c8ef6c310668d4a","modified":1677807184350},{"_id":"themes/next/source/css/_common/outline/footer/index.styl","hash":"0c79462439b1361034a03590cd69a8abb3a678a6","modified":1677807184350},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e74f4bb47a101b014ee2a1783c87f3b87323f9a0","modified":1677807184350},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"38c64c2d04e46848382bfa246a0e9c508294767b","modified":1677807184350},{"_id":"themes/next/source/css/_common/outline/header/index.styl","hash":"6e0d0796ef7fbbb62ffdfb448753a850de82c74f","modified":1677807184350},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"b750af2fb833c10c4313b5a4258237161a7833d7","modified":1677807184350},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"a851e9d5aefcd027c95eeb323860b6da70f202d1","modified":1677807184350},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1677807184350},{"_id":"themes/next/source/css/_common/outline/sidebar/index.styl","hash":"da5e88f8debd5ac8d7af5c6ba6240df66104955f","modified":1677807184350},{"_id":"themes/next/source/css/_common/outline/sidebar/related-posts.styl","hash":"b05908f04ef95f2d91e6eba89b12411c378d050f","modified":1677807184350},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"52fc98b1435129eb3edb9293ced9e507741f1350","modified":1677807184360},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1677807184360},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"c6a27beb3f741211a14576026f3b4cfc44cc6407","modified":1677807184360},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"b926e368f702f8686aaa2eb98d3d2e533418958c","modified":1677807184360},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"f3506fd0c0303ea365de1c7774d98a1a3f3027cf","modified":1677807184360},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"021a37cf178440cc341940a299d3bca359996c6b","modified":1677807184360},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"9a7c71560fbdc936ad4e736fe15063ea3e8a644b","modified":1677807184360},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":1677807184360},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"670fc109b56a010b166b86b616823a1aae97a738","modified":1677807184360},{"_id":"themes/next/source/css/_common/scaffolding/highlight/index.styl","hash":"9056be572ec1cfa429abb22be4b45a662d5b0fb1","modified":1677807184360},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":1677807184370},{"_id":"themes/next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"9dc00fcb0a05899f048eace9f9160b78956655d5","modified":1677807184260},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1677807184370},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1677807184370},{"_id":"themes/next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7f8a7345e6537a62cd9e9a94c8f7065b541d9b04","modified":1677807184370},{"_id":"themes/next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":1677807184370},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"98d4c20aff0f0fcfe1824017fb06ab21ef0d218e","modified":1677807184370},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b6654a1d7cf82577d8263faffee8af3ad4a5c0e8","modified":1677807184370},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"7a39bcce7274284e87388743db62afc847fe6897","modified":1677807184370},{"_id":"source/_posts/手机/Windows和iOS文件共享/icloud-server-share.jpg","hash":"629d9df2b72f3a4dd54c487f5db94756660d9da1","modified":1677807183390},{"_id":"themes/next/source/css/_common/scaffolding/tags/index.styl","hash":"3f76c73a891bbc10679753e702feba9e8a5ffdd2","modified":1677807184370},{"_id":"source/_posts/智能家居/Home_Assistant的定位功能/2021-10-25160029.png","hash":"29bc7e10f39e5890c365fb6cfbcce75a0d1f9dce","modified":1678090857000},{"_id":"source/_posts/手机/Windows和iOS备忘录/mainaccount01.png","hash":"3493ec9deaecfd4e5dec4c14ead9d589a1e5a4c2","modified":1678170323000},{"_id":"source/_posts/手机/Windows和iOS密码管理器/2021-10-03092027.png","hash":"f5249a6bad90df4d6a9939fd3505b6c6d30f2d6a","modified":1678170557000},{"_id":"source/_posts/手机/Windows和iOS密码管理器/2021-10-03092028.png","hash":"7dec86b8a5a2f77ea9b42c6adbce0d163db4f6fe","modified":1678170557000},{"_id":"source/_posts/手机/Windows和iOS密码管理器/2021-10-03092031.png","hash":"09d27ed4b10830b19f57cfb11d478641f03e7d36","modified":1678170557000},{"_id":"source/_posts/blog/发布博客时调整图片的大小/3C1EC821-5DCC-4853-849C-ADB69AE6B0D4_1_105_c.jpeg","hash":"3ccb2dfdbc8f7f88b502f9ace6afe6baccf24a24","modified":1677807183330},{"_id":"source/_posts/手机/Windows和iOS文件共享/icloud-onedrive.jpg","hash":"157cd150048de19d28aac4879715da6c51a3ced3","modified":1677807183410},{"_id":"themes/next/source/.DS_Store","hash":"9dfd3e84c6f1929de1a9e8d6071308f392e79f26","modified":1702350488995},{"_id":"themes/next/source/images/avatar.png","hash":"af422f92dda5d00e8186dfdf33d86a935654e535","modified":1702348080035},{"_id":"themes/next/layout/tag.njk","hash":"9e16ba20c28a7f2c6bc75aa427f48122301a30aa","modified":1677807184290},{"_id":"source/_posts/杂七杂八/Windows-Terminal如何从Vim中复制内容/Pastedimage20230227152428.png","hash":"aca8cd4fee1ae9a061116e953dddae0ff928f67b","modified":1677807183380},{"_id":"source/_posts/手机/Windows和iOS密码管理器/2021-10-03092026.png","hash":"240505cbc68f07e13fb994b4cacd8207cba42dfd","modified":1678170557000},{"_id":"source/_posts/blog/博客主题/20210915_064223000_iOS.jpg","hash":"e7f51e250bea8eebbef837efcaa31894e070c26a","modified":1677807183310},{"_id":"source/_posts/中医/尝试用二至丸治疗白发/image202302221900211.png","hash":"9b4ea4167c269719d8c4e106b150b52bdd8f9f34","modified":1677807183440},{"_id":"source/_posts/智能家居/Home_Assistant_客户端配置/2021-10-20094439.png","hash":"c4838a99caac72bcc85161bd58749af6000c24c3","modified":1678090245000},{"_id":"source/_posts/智能家居/iRobot扫地机器人使用体验/DDAD7481-A2AC-4BAB-8F1B-FA12B3E4D0B0_1_201_a.jpeg","hash":"a8f3c40360216f8de3ed8ad0b184a5005e3c8b81","modified":1677807183640},{"_id":"source/_posts/智能家居/物联网智能小电视/20211101_102902238_iOS.jpg","hash":"058f66b662713c9390b46c4cac3d24c9a6226108","modified":1678088482000},{"_id":"source/_posts/智能家居/Home_Assistant监控Web服务器/20211023_092850000_iOS.png","hash":"2d2803f0fa8b9141a1df76d934678f1daf721af4","modified":1678090736000},{"_id":"source/_posts/智能家居/物联网智能小电视/20211030_014042417_iOS.jpg","hash":"cb19a03a25ee49530aa5a9c6cbb49a15784d92d9","modified":1678088482000},{"_id":"source/_posts/中医/尝试用二至丸治疗白发/E03DCBDD-6B51-46B6-B7DD-18C6C3FD86C1_1_201_a.jpeg","hash":"0d2914f3fead3d0f696b2b00240afd1d62b6a257","modified":1677807183610},{"_id":"source/_posts/智能家居/Home_Assistant_客户端配置/20211020_023853000_iOS.png","hash":"d21ddd52bd552206f949e5ac7f867b9af862949a","modified":1678090245000},{"_id":"source/_posts/智能家居/ESP32点亮TFT屏幕/20211026_072012179_iOS.jpg","hash":"b0aec070a7ac7626916129689c4b1d35aae1e027","modified":1678088696000},{"_id":"source/_posts/智能家居/ESP32点亮TFT屏幕/20211024_091435141_iOS.jpg","hash":"087ace0437a514b9d4ba72107e6c4d2eeb8544f0","modified":1678088696000},{"_id":"source/_posts/中医/尝试用二至丸治疗白发/8ED26B4B-76B8-446F-8CF4-D6DF1F55DF4F_1_201_a.jpeg","hash":"1543316fef4850f85f721b3f4b43caebfa74c0a0","modified":1677807183500},{"_id":"source/_posts/智能家居/ESP32写入MicroPython固件/20211023_013244373_iOS.jpg","hash":"01bdc85b0715021175fd2c3e598ca7d6fa751f04","modified":1678088964000},{"_id":"source/_posts/中医/尝试用二至丸治疗白发/91C9F6E9-784C-4640-86D5-491AA2F66858_1_201_a.jpeg","hash":"16bf212644110ee25f64e7dd7b8e576c5a7b2bf6","modified":1677807183570},{"_id":"source/_posts/智能家居/Home_Assistant_客户端配置/20211023_013244373_iOS.png","hash":"2bc79a8a6cfc9d30862ce6404285d9acb8700549","modified":1678090245000},{"_id":"source/_posts/手机/._Windows和iOS备忘录.md","hash":"03237e378f131021b73f47743091d3e5c241309f","modified":1678170998821},{"_id":"source/_posts/手机/._Windows和iOS密码管理器.md","hash":"bdf20c2bb2e4434a2a176e183c1462c17687a8d0","modified":1678170999425},{"_id":"source/_posts/智能家居/._SSH远程连接.md","hash":"dbc40a16027a378f0fec97813eff9903157ba528","modified":1678170862097},{"_id":"source/_posts/blog/._我的博客.md","hash":"90175237fe62396d9036eae221fc94b0fd0e3224","modified":1678173706279},{"_id":"source/_posts/智能家居/._什么是IFTTT","hash":"0992c9bc3ab81bdfe0182ee3895c2fa4a950cc2e","modified":1678173428901},{"_id":"source/_posts/智能家居/._什么是IFTTT.md","hash":"046d1194e64ce6d107f11bf45d4149c5d8991967","modified":1678173607331},{"_id":"source/_posts/智能家居/._华硕路由器VPN功能","hash":"a651c22c97837aeced4e213ef3dd9e7748c34970","modified":1678173428189},{"_id":"source/_posts/智能家居/._华硕路由器VPN功能.md","hash":"3d3d210a64bd1b08935bcc8d4f4c4a9f0cb4b373","modified":1678173979337},{"_id":"source/_posts/智能家居/什么是IFTTT.md","hash":"44f65364bf67ab4218802eca9e390060885299f6","modified":1678173607209},{"_id":"source/_posts/智能家居/华硕路由器VPN功能.md","hash":"3e93b076072ead9add4fa84cda2507ad5cba778f","modified":1678173979197},{"_id":"source/_posts/智能家居/什么是IFTTT/2021-10-25121610.png","hash":"093c8f23240e021e5ec85eb1c1b4bd482382a6b1","modified":1678172035000},{"_id":"source/_posts/智能家居/什么是IFTTT/2021-10-25121641.png","hash":"db9a0f6f6e0e96f0519d81b7ac1f4f43b3ea806c","modified":1678172035000},{"_id":"source/_posts/智能家居/什么是IFTTT/2021-10-25121709.png","hash":"53c87963fc18aca3dd863535bbcc499076953c38","modified":1678172035000},{"_id":"source/_posts/智能家居/什么是IFTTT/2021-10-25121731.png","hash":"561448f9e69e1d9d4b477edb5e5dad4c25018c39","modified":1678172035000},{"_id":"source/_posts/智能家居/华硕路由器VPN功能/IMG_3185.png","hash":"800c5889fdaf464edb8bf5187586174e1b806124","modified":1678172600000},{"_id":"source/_posts/智能家居/华硕路由器VPN功能/IMG_3186.png","hash":"0148bfe0701c8b8554d031f6abcc435fcff26fd9","modified":1678172600000},{"_id":"source/_posts/智能家居/华硕路由器VPN功能/IMG_3190.png","hash":"848bd0814d7292d1d85f0f516b06e6c4f3042cb2","modified":1678172600000},{"_id":"source/_posts/智能家居/华硕路由器VPN功能/IMG_3191.png","hash":"67c5830035b6755fc5a4e9a8a6b4fa23dc164653","modified":1678172600000},{"_id":"source/_posts/智能家居/华硕路由器VPN功能/IMG_3192.png","hash":"821a9f7c83c8b1e7c189d8d6467c09a4b7da3159","modified":1678172600000},{"_id":"source/_posts/智能家居/什么是IFTTT/2021-10-25120949.png","hash":"c1db0dcb4f3acf46fed16829263fb1eba4174165","modified":1678172035000},{"_id":"source/_posts/智能家居/什么是IFTTT/2021-10-25121115.png","hash":"75733c39599b167b63b390a35425bd92656104c5","modified":1678172035000},{"_id":"source/_posts/智能家居/什么是IFTTT/2021-10-25121856.png","hash":"f2c0dd14922539e2eafa409373e3f45a7468953b","modified":1678172035000},{"_id":"source/_posts/智能家居/什么是IFTTT/2021-10-25123945.png","hash":"84156c8878eb932cae0325684bcd3b274a0a314d","modified":1678172035000},{"_id":"source/_posts/智能家居/华硕路由器VPN功能/IMG_3188.png","hash":"79a6533aecb60ed4d5b3746d615b1ebb4754f89f","modified":1678172600000},{"_id":"source/_posts/智能家居/华硕路由器VPN功能/IMG_3189.png","hash":"86516c10f832bf0cc48e627e3833f7bb6c2efb42","modified":1678172600000},{"_id":"source/_posts/智能家居/华硕路由器VPN功能/IMG_3193.png","hash":"11513ba661a658fb0f067bfe0b2fd501c0616378","modified":1678172600000},{"_id":"source/_posts/智能家居/什么是IFTTT/2021-10-25121340.png","hash":"33d4a1179b7b86820f385ec502fa8bd56bb388dc","modified":1678172035000},{"_id":"source/_posts/blog/我的博客/20230307150931.png","hash":"00a24b6bf00a09655eadc3d40d92d24d0277ec35","modified":1678172971000},{"_id":"source/_posts/智能家居/什么是IFTTT/2021-10-25122357.png","hash":"319c73ead47e9e15d0256c37afcd67f87d082c4f","modified":1678172035000},{"_id":"source/_posts/智能家居/华硕路由器VPN功能/IMG_3187.png","hash":"a529f915267bb1e4c68b939793f22b5af7cfc439","modified":1678172600000},{"_id":"source/_posts/智能家居/华硕路由器VPN功能/2021-10-02094926.jpg","hash":"8793dc65d31ec39aff2636ebc3ad37dfbf9a4e43","modified":1678172600000},{"_id":"source/_posts/智能家居/._华硕路由器VPN功能~.md","hash":"99a33ebbf28c1e92eb9af15b40f4d631e73fae05","modified":1678173960643},{"_id":"themes/next/source/images/avatar2.png","hash":"cd39bbcdda4adbe04725900a883e2b02130897e5","modified":1702257806916},{"_id":"public/search.xml","hash":"c8607cd6b6cbb1825df31c7c8650f30ed0ca75a6","modified":1703582351083},{"_id":"public/categories/index.html","hash":"7ea87fe546813222a6392b162228e776f7a405b5","modified":1703582351083},{"_id":"public/tags/index.html","hash":"798a0364c10ac191185d1161ed9e64550430e611","modified":1703582351083},{"_id":"public/2018/11/08/blog/ge-ren-bo-ke-github-pages-pian/index.html","hash":"2f9f64f27917d0133d60b224dba53ac0a0680fb0","modified":1702363025376},{"_id":"public/archives/index.html","hash":"1e1c91af3f719ec248296243f8bb6627b2ed4d31","modified":1703582351083},{"_id":"public/archives/2018/index.html","hash":"874ec105212d431f40a243e1be997e6dc29ec02b","modified":1702363025376},{"_id":"public/archives/2018/11/index.html","hash":"ec8a02a8dad70f21ffb689ffb796cab2a42981f2","modified":1702363025376},{"_id":"public/index.html","hash":"9bccc1adbf54010204a0672ab7de1671ad485dd6","modified":1703582351083},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1702369298828},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1702369298828},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1702369298828},{"_id":"public/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1702369298828},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1702369298828},{"_id":"public/css/main.css","hash":"d83fd93f7526120380a3b786eb03891644a6b915","modified":1702369298828},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1702369298828},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1702369298828},{"_id":"public/css/noscript.css","hash":"4cd5301e478e0e0d4b176740ec314087ec5cb707","modified":1702369298828},{"_id":"public/js/next-boot.js","hash":"da0f07f9eaaa83de70128b0feaea3fdadb90457a","modified":1702369298828},{"_id":"public/js/motion.js","hash":"770d63c26f22705311028a36b52e999cc8a2da82","modified":1702369298828},{"_id":"public/js/utils.js","hash":"af59257e46d25dda62967c35a65e2efcbd90d3bc","modified":1702369298828},{"_id":"public/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1702369298828},{"_id":"public/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1702369298828},{"_id":"public/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1702369298828},{"_id":"public/images/avatar.png","hash":"af422f92dda5d00e8186dfdf33d86a935654e535","modified":1702369298828},{"_id":"public/images/avatar2.png","hash":"cd39bbcdda4adbe04725900a883e2b02130897e5","modified":1702369298828},{"_id":"source/_posts/面向对象的编程.md","hash":"3502b3fc040f52bfc9c3bb88cec75bc2089f655a","modified":1702257806273},{"_id":"public/2022/02/20/mian-xiang-dui-xiang-de-bian-cheng/index.html","hash":"c19d22ebedecdaec46ae48a054a0e04b510c9077","modified":1703582351083},{"_id":"public/categories/Python/index.html","hash":"15d80fc2740e464aa782344ea0c4d88c3ec7c444","modified":1703582351083},{"_id":"public/archives/2022/index.html","hash":"91ef921572701535d7e0d9b64fcde23b85ee0654","modified":1703582351083},{"_id":"public/archives/2022/02/index.html","hash":"c53746fc27a867def34703d3d12e6fa28bf83fb5","modified":1703582351083},{"_id":"public/tags/python-intermediate/index.html","hash":"0168bf14e755b9d8c5dc08579c3a1c7ac93ad7ef","modified":1703582351083},{"_id":"source/_posts/安装Home_Assistant.md","hash":"ed031c9ab97485f09c8cbc2f71b43746f20fd8b5","modified":1703578464831},{"_id":"public/2021/10/17/an-zhuang-home-assistant/index.html","hash":"8898c5ce12f07d30e11cfd92226c82a250b77e32","modified":1703582351083},{"_id":"public/categories/Home-Assistant/index.html","hash":"1178d1ed0654334e1fceaf5c8b9298e61b796cde","modified":1703582351083},{"_id":"public/archives/2021/index.html","hash":"8f177205e18d407ec79eb5bd5b076726cc85e95b","modified":1703582351083},{"_id":"public/archives/2021/10/index.html","hash":"0093acaabe37ce67ed772b40cd52cf8d7fa166d8","modified":1703582351083},{"_id":"public/tags/home-assistant/index.html","hash":"506e293e1cd69e47e5bf7b5fed6f3a84bd3e0fb6","modified":1703582351083}],"Category":[{"name":"Blog","_id":"clexvkk5200045i73aq27btd7"},{"name":"手机","_id":"clexvkk6w000y5i735arl9znt"},{"name":"智能家居","_id":"clexvkk7s001m5i73b0v4a4xw"},{"name":"Python","_id":"clexvkk9v002r5i733hx3ddei"},{"name":"杂七杂八","_id":"clexvkkaf003f5i730mio0u6h"},{"name":"中医","_id":"clexvkkal003n5i73hwguby8e"},{"name":"Home_Assistant","_id":"clqm4y39900016aechyap2hdo"}],"Data":[],"Page":[{"title":"categories","date":"2022-02-25T04:18:38.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2022-02-25 12:18:38\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2023-03-03T01:33:03.650Z","path":"categories/index.html","comments":1,"_id":"clexvkk4c00005i73ele1b4g1","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2022-02-25T04:18:27.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-02-25 12:18:27\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2023-03-03T01:33:03.640Z","path":"tags/index.html","comments":1,"_id":"clexvkk4u00025i732erhdc9s","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"面向对象的编程","date":"2022-02-20T07:49:45.000Z","img":"/medias/featureimages/30.jpg","_content":"\n# 面向对象的编程\n\n> 注：本文翻译自[Object-Oriented Programming (OOP) in Python 3 – Real Python](https://realpython.com/python3-object-oriented-programming/)。\n\n**面向对象的编程**（**Object-oriented programming** ）是一种构建程序的方式，这种方式将相关的属性和行为绑定到个别的对象上。通过本文，你将了解到关于面向对象编程的基础知识。\n\n理论上来说，对象就好像是一个系统的组件。如果将一个程序想象成一家工厂的各种装配线。在装配线上的每一个环境，系统的部件都会对原材料进行加工处理，最后，原材料被加工成一个产品。\n\n一个对象包含数据（就像是装配线上需要处理的原材料）和行为（装配线上的组件执行的操作）。\n\n<!-- more -->\n\n## 什么是面向对象的编程\n\n**面向对象的编程**（**Object-oriented programming** ）是一种编程的范式。它提供了一种构建程序的方式，这种方式将相关的属性和行为绑定到个别的对象上。\n\n例如，一个对象可以代表一个人，这个人拥有属性，如姓名，年龄和地址，以及拥有行为（方法），例如行走，讲话，呼吸和奔跑。或者一个对象也可以代表一封邮寄，这封邮件拥有属性，如收件人列表，主题和正文，以及拥有行为，例如添加附件和发送。\n\n换一种说法，面向对象的编程用一种建模的方法来描述现实世界的事物，例如汽车，以及相关的事务，如工厂和工人，学生和老师等等。面向对象的编程通过建模的方式，将现实世界的个体描述为软件的对象，这些对象拥有相关的数据和哈数。\n\n另外一种常见的编程方式是面向过程的编程。这种方式就像是一本菜谱，提供了一系列的步骤，以函数和代码块的方式，按顺序完成任务。\n\n关键点是，对象是面向对象编程的核心，对象不仅代表数据，同时也代表了程序的整体结构。\n\n## 定义一个类\n\n基础的数据结构，如数字、字符串和列表，主要分别用来表示简单的信息，例如苹果的加个，诗的名称或者你喜欢的颜色。但是，如果你想要表示更为复杂的信息该怎么办呢？\n\n例如，假设你想要记录组织的员工信息。你需要存储每一个员工的基本信息，例如他们的名字、年龄、职位和工作年限。\n\n一种方式是通过列表来表示每一个员工的信息：\n\n```python\nkirk = [\"James Kirk\", 34, \"Captain\", 2265]\nspock = [\"Spock\", 35, \"Science Officer\", 2254]\nmccoy = [\"Leonard McCoy\", \"Chief Medical Officer\", 2266]\n```\n\n如果使用以上这种方式，会存在一些问题。\n\n首先，它使得代码文件难以管理。如果你定义了`kirk`列表以后，隔了很多行才引用`kirk[0]`，你还会记得索引值为0的列表元素对应的是员工的名字吗？\n\n其次，如果每一个员工在列表中的信息数量并不相同，就会导致代码运行出错。以上例子中，`mccoy`列表缺少年龄的信息，因此`mccoy[1]`返回的是\"Chief Medical Officer\"，而不是Dr. McCoy的年龄。\n\n一种比较好的解决方式是使用类。\n\n### 类和实例\n\n类用于创建用户自己定义的数据结构。类定义的函数成为**方法**（**methods**）。方法定义了对象可以对数据所作的操作。\n\n本文中，你将创建一个名为`Dog`的类，该类将用来存储狗的信息以及行为。\n\n一个类本身并不包含任何数据，而是一种蓝图，用来定义事物。`Dog`类定义了狗的名字和年龄，但是并没有包含某一条狗的具体名字和年龄。\n\n既然类是一种蓝图，那么实例就是根据蓝图创建的对象，包含实际的数据。一个`Dog`类的实例不再是一种蓝图，它是一只实际的狗，有名字，例如Miles，年龄是4岁。\n\n换一种说法，一个类就像是一张空白的表格或者问卷表。一个实例就是一张已经填写了信息的表格。就像许多人都可以根据自己的信息来填写表格，根据同一个类，也可以创建许多实例。\n\n### 如何定义一个类\n\n首先定义一个类，需要以关键字`class`开头，然后后面是类的名称和冒号。换行后，下面缩进的内容都属于类的正文。\n\n下面以`Dog`类为例：\n\n```python\nclass Dog:\n    pass\n```\n\n`Dog`类的正文只有一个声明：关键字`pass`。 `pass`不执行任何操作，只是一个占位符。在没有为类写任何代码的情况下，使用`pass`可以避免程序在运行时出错。\n\n>注意：类的名称通常是首字母大写。例如，定义某一种狗的类，如 Jack Russell Terrier，那么类的名称就可以写为`JackRussellTerrier`。\n\n目前，`Dog`类并没有任何属性，我们可以为它定义一些属性，例如名字、年龄、衣服颜色和品种。为了简单起见，我们只使用名字和年龄。\n\n类的属性通常都是通过方法`.__init__()`来定义。每次创建一个`Dog`对象的时候，`.__init__()`就会通过为对象的属性赋值，来设置对象的初始状态。因此，`.__init__()`为类的每一个实例完成了初始化。\n\n你可以为`.__init__()`设置任意数量的参数，但是第一个参数都是`self`。当一个类的实例被创建的时候，改实例自动被传递给`.__init__()`中的`self`参数，这样才能为对象定义新的属性。\n\n让我们更改一下`Dog`类的`.__init__()`方法，创建`.name`和`.age`属性(attributes)。\n\n```python\nclass Dog:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n```\n\n注意到`.__init__()`方法缩进了4个空格，而方法的正文缩进了8个空格。空格缩进十分重要，通过空格缩进，Python才能知道`.__init__()`方法属于`Dog`类。\n\n在`.__init__()`的正文中，有2个声明使用了`self`变量：\n\n1. `self.name = name`创建了一个名为`name`的属性，并用参数`name`为它赋值。\n2. `self.age = age`创建了一个名为`age`的属性，并用参数`age`为它赋值。\n\n在`.__init__()`中创建的属性称为**实例属性**（**Instance attributes**）。实例属性的值只属于类的某一个实例。所有`Dog`对象都有名字和年龄，但是每一个实例的名字和年龄值是不相同的。\n\n另一方面，**类的属性**（**class attributes**）在所有的类的实例中，都拥有相同的属性值。你可以在`.__init__()`以外的位置定义一个变量并为其赋值，该变量就是类的属性。\n\n例如，下面的`Dog`类中有一个类的属性`species`，值为\"Canis familiaris\"：\n\n```python\nclass Dog:\n    # Class attribute\n    species = \"Canis familiaris\"\n\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n```\n\n类的属性直接定义在类的名称下方第一行，并缩进4格。它们必须设置一个初始值。当创建类的实例的时候，类的属性被自动创建，并分配初始值。\n\n当需要为每一个类的实例赋予相同属性值的时候，可以使用**类的属性**，当需要为每一个类的实例赋予不同属性值的时候，可以使用**实例属性**。\n\n## 实例化一个对象\n\n打开IDLE的交互窗口，输入以下内容：\n\n```python\n>>> class Dog:\n...     pass\n```\n\n这样就创建了一个`Dog`类，但是这个类既没有属性也没有方法。\n\n从一个类创建一个新的对象，成为**实例化**(**instantiating**)一个对象。通过输入类的名称并加上双括号，你可以实例化一个新的`Dog`对象：\n\n```python\n>>> Dog()\n<__main__.Dog object at 0x106702d30>\n```\n\n现在，你在`0x106702d30`有一个新的`Dog`对象。`0x106702d30`代表的是内存地址。在不同的电脑上，该内存地址的值是不同的。\n\n现在，实例化第二个对象：\n\n```python\n>>> Dog()\n<__main__.Dog object at 0x0004ccc90>\n```\n\n这个新的`Dog`实例存储在完全不同的内存地址。因为这是一个全新的实例，与之前创建的第一个实例完全不同。\n\n我们可以通过以下方式来判断两个实例是否相同：\n\n```python\n>>> a = Dog()\n>>> b = Dog()\n>>> a == b\nFalse\n```\n\n通过以上代码，我们可以看到，虽然a和b都是通过`Dog`类创建的实例，但是他们代表了完全不同的对象。\n\n### 类和实例属性\n\n现在，创建一个`Dog`类，该类包含一个类的属性`.species`以及两个实例属性`.name`和`.age`。\n\n```python\n>>> class Dog:\n...     species = \"Canis familiaris\"\n...     def __init__(self, name, age):\n...         self.name = name\n...         self.age = age\n```\n\n为了实例化这个类，你需要为name和age提供参数值。否则，Python会抛出一个`TypeError`异常：\n\n```python\n>>> Dog()\nTraceback (most recent call last):\n  File \"<pyshell#6>\", line 1, in <module>\n    Dog()\nTypeError: __init__() missing 2 required positional arguments: 'name' and 'age'\n```\n\n通过在类名后面的括号中填入值，可以将参数传递给name和age。\n\n```python\n>>> buddy = Dog(\"Buddy\", 9)\n>>> miles = Dog(\"Miles\", 4)\n```\n\n以上创建了两个`Dog`实例，一个是名叫Buddy的9岁小狗，另一个是名叫Miles的4岁小狗。\n\n`Dog`类的`.__init__()`方法有三个参数，为什么在上面的例子中只使用了2个参数呢？\n\n当你实例化一个`Dog`对象的时候，Python会创建一个新的实例，并将它传递给`.__init__()`的第一个参数。这样就移除了`self`参数，所以你只需要担心`name`和`age`参数。\n\n当你创建了`Dog`实例后，你就可以使用**dot notation**访问实例的属性了。\n\n```python\n>>> buddy.name\n'Buddy'\n>>> buddy.age\n9\n\n>>> miles.name\n'Miles'\n>>> miles.age\n4\n```\n\n你还可以用相同的访问访问类的属性：\n\n```python\n>>> buddy.species\n'Canis familiaris'\n```\n\n使用类来组织数据的好处之一，就是可以确保实例拥有预期的属性。所有的`Dog`实例都有`.species`, `.name`和`.age`属性，所有你确定当访问这些属性的时候，总是能获取到相应的值。\n\n虽然类能确保这些属性总是存在，但是相应的值却可以动态改变：\n\n```python\n>>> buddy.age = 10\n>>> buddy.age\n10\n\n>>> miles.species = \"Felis silvestris\"\n>>> miles.species\n'Felis silvestris'\n```\n\n在上面的例子中，你将`buddy`对象的属性`.age`更改为10，然后你将`miles`对象的属性`.species`更改为猫的品种\"Felis silvestris\"。虽然这样使得Miles看起来像是一只奇怪的狗，但是这对Python而言是有效的。\n\n这里的关键点是，默认情况下，自定义对象是可变的(mutable)的。如果一个对象可以被动态更改，那么它就是可变的(mutable)。例如，列表和字典都是可变的，但是字符串和元组是不可变的(immutable)。\n\n### 实例方法\n\n**实例方法**(**Instance methods**)是在类中定义的一种函数，这种函数只能被类的实例调用。跟`.__init__()`相同，实例方法的第一个参数都是`self`。\n\n在IDLE打开一个新的文本编辑器，然后输入以下`Dog`类：\n\n```python\nclass Dog:\n    species = \"Canis familiaris\"\n\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    # Instance method\n    def description(self):\n        return f\"{self.name} is {self.age} years old\"\n\n    # Another instance method\n    def speak(self, sound):\n        return f\"{self.name} says {sound}\"\n```\n\n该`Dog`类有两个实例方法：\n\n1. **`.description()`**返回一个字符串，用于显示狗的名字和年龄。\n2. **`.speak()`**有一个`sound`参数，返回一个字符串，用于显示狗的名字和吼叫声。\n\n将以上代码保存到文件`dog.py`，然后按F5运行程序。\n\n然后打开交互式窗口，输入以下实例方法：\n\n```python\n>>> miles = Dog(\"Miles\", 4)\n\n>>> miles.description()\n'Miles is 4 years old'\n\n>>> miles.speak(\"Woof Woof\")\n'Miles says Woof Woof'\n\n>>> miles.speak(\"Bow Wow\")\n'Miles says Bow Wow'\n```\n\n在以上`Dog`类中，`.description()`返回了关于实例miles的信息。当你写类的时候，最好能有一个方法可以用来返回关于类的实例的说明信息。虽然`.description()`返回了实例的描述信息，但着并不是最佳的Python方式。\n\n当你创建一个列表对象的时候，你可以用`print()`来显示以下内容：\n\n```python\n>>> names = [\"Fletcher\", \"David\", \"Dan\"]\n>>> print(names)\n['Fletcher', 'David', 'Dan']\n```\n\n如果我们用`print()`来打印miles对象，会发生什么呢：\n\n```python\n>>> print(miles)\n<__main__.Dog object at 0x00aeff70>\n```\n\n当你`print(miles)`的时候，你看到的是一串很奇怪的字符串，miles是一个`Dog`的对象，内存地址为0x00aeff70。这些信息并不是很有用。你可以通过定义一个特殊的实例方法`.__str__()`来打印出更有用的信息。\n\n下面，将`.description()`方法的名字更改为`.__str__()`:\n\n```python\nclass Dog:\n    # Leave other parts of Dog class as-is\n\n    # Replace .description() with __str__()\n    def __str__(self):\n        return f\"{self.name} is {self.age} years old\"\n```\n\n保存文件然后按F5。现在，当你`print(miles)`的时候，你会得到更友好的输出内容：\n\n```python\n>>> miles = Dog(\"Miles\", 4)\n>>> print(miles)\n'Miles is 4 years old'\n```\n\n像`.__init__()`和`.__str__()`这样的方法被称为**dunder methods**，因为他们的名字都是以双下划线开始，并以双下划线结尾。在Python中，有许多**dunder methods**可以用来定制类。虽然对于初学者来说，这些内容有点深奥，但是在Python中，**dunder methods**对于掌握面向对象的编程很重要。\n\n## 类的继承\n\n类的继承是指一个类可以继承另一个类的所有特性和方法。新创建的类成为子类，被继承的类成为父类。\n\n子类可以重写或者扩展父类的特性和方法。也就是说，子类既可以继承父类的所有特性和方法，也可以定义自己独有的特性性和方法。\n\n虽然这个比喻不是十分恰当，类的继承有点类似于人类的遗传。\n\n你可能继承了你母亲头发的颜色，这是你出生时的特性。但是，你决定将头发染成紫色，由于你母亲的头发不是紫色，所有可以说你重新定义(**overridden** )了头发的特性。\n\n### 遛狗公园的例子\n\n假设你正在一个公园中遛狗。在这个公园里，有许多不同品种的狗，正在从事于各种不同的行为。\n\n假设你想用Python类来为遛狗的公园建立一个模型。之前的`Dog`类可以通过狗的姓名和年龄来区分不同的狗，但是无法通过狗的品种来区分。\n\n你可以在`Dog`类中添加`.breed`的特性：\n\n```python\nclass Dog:\n    species = \"Canis familiaris\"\n\n    def __init__(self, name, age, breed):\n        self.name = name\n        self.age = age\n        self.breed = breed\n```\n\n在以上类中，之所以省略了方法的定义，是因为与本章需要讨论的内容无关。\n\n通过点击F5保存并运行文件，你可以在交互式窗口中，创建各种不同狗的实例：\n\n```python\n>>> miles = Dog(\"Miles\", 4, \"Jack Russell Terrier\")\n>>> buddy = Dog(\"Buddy\", 9, \"Dachshund\")\n>>> jack = Dog(\"Jack\", 3, \"Bulldog\")\n>>> jim = Dog(\"Jim\", 5, \"Bulldog\")\n```\n\n不同品种的狗通常有不同的行为。例如，牛头犬的叫声比较低，声音类似于`woof`，但是腊肠犬的叫声比较高，声音类似于`yap`。\n\n使用`Dog`类的时候，你必须为`.speak()`方法提供一个声音的参数`sound`，每次调用`Dog`实例的时候如下：\n\n```python\n>>> buddy.speak(\"Yap\")\n'Buddy says Yap'\n\n>>> jim.speak(\"Woof\")\n'Jim says Woof'\n\n>>> jack.speak(\"Woof\")\n'Jack says Woof'\n```\n\n每次调用`.speak()`方法的时候，都要传递一个参数，这样既显得重复，又不太方便。此外，每次传递参数的时候，还需要根据狗的品种`.breed`来决定对应的声音参数。\n\n你可以通过为每一种狗创建一个子类的方法，来简化以上问题。这使得你可以扩展子类从父类继承的方法，例如为`.speak()`指定默认的参数。\n\n### 父类和子类\n\n接下来我们为三种不同品种的狗各自创建一个子类：Jack Russell Terrier, Dachshund, and Bulldog:\n\n```python\nclass Dog:\n    species = \"Canis familiaris\"\n\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def __str__(self):\n        return f\"{self.name} is {self.age} years old\"\n\n    def speak(self, sound):\n        return f\"{self.name} says {sound}\"\n```\n\n创建子类的时候，你需要为子类定义一个自己的名称，然后在括号中填写父类的名称：\n\n```python\nclass JackRussellTerrier(Dog):\n    pass\n\nclass Dachshund(Dog):\n    pass\n\nclass Bulldog(Dog):\n    pass\n```\n\n现在你可以在交互式窗口中通过以下方式创建各种实例：\n\n```python\n>>> miles = JackRussellTerrier(\"Miles\", 4)\n>>> buddy = Dachshund(\"Buddy\", 9)\n>>> jack = Bulldog(\"Jack\", 3)\n>>> jim = Bulldog(\"Jim\", 5)\n```\n\n子类的实例继承了父类所有的特性和方法：\n\n```python\n>>> miles.species\n'Canis familiaris'\n\n>>> buddy.name\n'Buddy'\n\n>>> print(jack)\nJack is 3 years old\n\n>>> jim.speak(\"Woof\")\n'Jim says Woof'\n```\n\n如果要判断某一个对象属于哪一个类，你可以使用内建函数`type()`:\n\n```python\n>>> type(miles)\n<class '__main__.JackRussellTerrier'>\n```\n\n如果你还想判断`miles`是否是`Dog`类的实例，可以i使用内建函数`isinstance()`:\n\n```python\n>>> isinstance(miles, Dog)\nTrue\n```\n\n注意到`isinstance`需要两个参数，一个对象和一个类。以上例子中，`isinstance()`检查 `miles`是否是`Dog`类的使用，返回值为`True`。\n\n对象`miles`，`buddy`，`jack`和`jim`都是`Dog`类的实例，但是`miles`不是`Bulldog`的实例，`jack`不是`Dachshund`的实例。\n\n```python\n>>> isinstance(miles, Bulldog)\nFalse\n\n>>> isinstance(jack, Dachshund)\nFalse\n```\n\n概而言之，所有子类的对象，同时也是父类的对象，但是它们并不一定是其它子类的对象。\n\n### 扩展父类的功能\n\n由于不同品种的狗有不同的叫声，如果你想要为每一种狗各自的`.speak()`方法指定一个默认的`sound`参数值，你可以在各自的子类中重新定义`.speak()`方法。\n\n为了覆盖父类中的某一个方法，你需要在子类中定义相同名字的方法。下面以`JackRussellTerrier`子类为例：\n\n```python\nclass JackRussellTerrier(Dog):\n    def speak(self, sound=\"Arf\"):\n        return f\"{self.name} says {sound}\"\n```\n\n通过在子类`JackRussellTerrier`中重新定义方法`.speak()`后，现在JackRussellTerrier品种的狗有了一种默认的叫声“Arf”。\n\n现在，如果你可以通过`JackRussellTerrier`的实例调用`.speak()`方法，并且不传递任何参数：\n\n```python\n>>> miles = JackRussellTerrier(\"Miles\", 4)\n>>> miles.speak()\n'Miles says Arf'\n```\n\n有时候，有些狗在愤怒的时候会发出不同的叫声，这是你仍然可以调用`.speak()`方法，并传递相应的参数值：\n\n```python\n>>> miles.speak(\"Grrr\")\n'Miles says Grrr'\n```\n\n请记住，如果对父类做了更改，会自动传递给子类。但是，如果子类已经重新定义了父类的特性或者方法，那么父类的更改并不会传递给子类。\n\n例如，在`Dog`类中，更改`.speak()`中的返回字符串内容，将`says`更改为`barks`:\n\n```python\nclass Dog:\n    # Leave other attributes and methods as they are\n\n    # Change the string returned by .speak()\n    def speak(self, sound):\n        return f\"{self.name} barks: {sound}\"\n```\n\n现在，你创建一个新的`Bulldog`实例，名称为`jim`，`jim.speak()`会返回新的字符串：\n\n```python\n>>> jim = Bulldog(\"Jim\", 5)\n>>> jim.speak(\"Woof\")\n'Jim barks: Woof'\n```\n\n但是，如果调用`JackRussellTerrier`实例的`.speak()`方法，会发现并不会返回新的字符串：\n\n```python\n>>> miles = JackRussellTerrier(\"Miles\", 4)\n>>> miles.speak()\n'Miles says Arf'\n```\n\n有时候，可能需要完全覆盖父类的方法，但是在这个例子中，我们想让子类`JackRussellTerrier`继续使用父类中`.speak()`方法返回的字符串格式。\n\n为了实现这个目的，你仍然需要在子类`JackRussellTerrier`中定义`.speak()`方法。但是，你在子类的`.speak()`方法中需要调用父类的`.speak()`方法，并且将相应的参数传递给父类的`.speak()`方法。\n\n在子类中的某一个方法中，可以使用`super()`来访问父类：\n\n```python\nclass JackRussellTerrier(Dog):\n    def speak(self, sound=\"Arf\"):\n        return super().speak(sound)\n```\n\n当你在子类`JackRussellTerrier`中调用`super().speak(sound)`的时候，Python会在父类`Dog`中查找`.speak()`方法，然后调用并传递参数`sound`。\n\n下面，我们可以测试一下新定义的子类`JackRussellTerrier`：\n\n```python\n>>> miles = JackRussellTerrier(\"Miles\", 4)\n>>> miles.speak()\n'Miles barks: Arf'\n```\n\n现在，当你调用`miles.speak()`的时候，你可以看到返回的结果是`Dog`类中定义的格式。\n\n> 注意：在上面的例子中，类的继承结构非常简单。`JackRussellTerrier`子类有一个父类`Dog`。在实际的应用场景中，类的结构十分复杂。\n>\n> `super()`不仅只是在父类中查找某个方法或者特性，它还可以在整个类的结构中查找匹配的类和特性。如果你使用`super()`的时候不太小心，容易导致意外的结果。\n\n\n\n## 总结\n\n通过本指南，你学到了Python中面向对象编程的知识。大多数编程语言，如Java, C#和C++等都是基于面向对象编程的原理，所以本指南的知识同样适用于以上语言。\n\n在本指南中，你学到了以下内容：\n\n- 定义一个类\n- 从一个类实例化一个对象\n- 使用特性和方法来定义对象的属性和行为\n- 通过继承，从父类创建一个子类\n- 使用`super()`访问父类的某一个方法\n- 使用`isinstance()`判断一个对象是否继承于另外一个类\n","source":"_posts/面向对象的编程.md","raw":"---\ntitle: 面向对象的编程\ndate: 2022-02-20 15:49:45\ntags: \n - python-intermediate\ncategories: \n - Python\nimg: /medias/featureimages/30.jpg\n---\n\n# 面向对象的编程\n\n> 注：本文翻译自[Object-Oriented Programming (OOP) in Python 3 – Real Python](https://realpython.com/python3-object-oriented-programming/)。\n\n**面向对象的编程**（**Object-oriented programming** ）是一种构建程序的方式，这种方式将相关的属性和行为绑定到个别的对象上。通过本文，你将了解到关于面向对象编程的基础知识。\n\n理论上来说，对象就好像是一个系统的组件。如果将一个程序想象成一家工厂的各种装配线。在装配线上的每一个环境，系统的部件都会对原材料进行加工处理，最后，原材料被加工成一个产品。\n\n一个对象包含数据（就像是装配线上需要处理的原材料）和行为（装配线上的组件执行的操作）。\n\n<!-- more -->\n\n## 什么是面向对象的编程\n\n**面向对象的编程**（**Object-oriented programming** ）是一种编程的范式。它提供了一种构建程序的方式，这种方式将相关的属性和行为绑定到个别的对象上。\n\n例如，一个对象可以代表一个人，这个人拥有属性，如姓名，年龄和地址，以及拥有行为（方法），例如行走，讲话，呼吸和奔跑。或者一个对象也可以代表一封邮寄，这封邮件拥有属性，如收件人列表，主题和正文，以及拥有行为，例如添加附件和发送。\n\n换一种说法，面向对象的编程用一种建模的方法来描述现实世界的事物，例如汽车，以及相关的事务，如工厂和工人，学生和老师等等。面向对象的编程通过建模的方式，将现实世界的个体描述为软件的对象，这些对象拥有相关的数据和哈数。\n\n另外一种常见的编程方式是面向过程的编程。这种方式就像是一本菜谱，提供了一系列的步骤，以函数和代码块的方式，按顺序完成任务。\n\n关键点是，对象是面向对象编程的核心，对象不仅代表数据，同时也代表了程序的整体结构。\n\n## 定义一个类\n\n基础的数据结构，如数字、字符串和列表，主要分别用来表示简单的信息，例如苹果的加个，诗的名称或者你喜欢的颜色。但是，如果你想要表示更为复杂的信息该怎么办呢？\n\n例如，假设你想要记录组织的员工信息。你需要存储每一个员工的基本信息，例如他们的名字、年龄、职位和工作年限。\n\n一种方式是通过列表来表示每一个员工的信息：\n\n```python\nkirk = [\"James Kirk\", 34, \"Captain\", 2265]\nspock = [\"Spock\", 35, \"Science Officer\", 2254]\nmccoy = [\"Leonard McCoy\", \"Chief Medical Officer\", 2266]\n```\n\n如果使用以上这种方式，会存在一些问题。\n\n首先，它使得代码文件难以管理。如果你定义了`kirk`列表以后，隔了很多行才引用`kirk[0]`，你还会记得索引值为0的列表元素对应的是员工的名字吗？\n\n其次，如果每一个员工在列表中的信息数量并不相同，就会导致代码运行出错。以上例子中，`mccoy`列表缺少年龄的信息，因此`mccoy[1]`返回的是\"Chief Medical Officer\"，而不是Dr. McCoy的年龄。\n\n一种比较好的解决方式是使用类。\n\n### 类和实例\n\n类用于创建用户自己定义的数据结构。类定义的函数成为**方法**（**methods**）。方法定义了对象可以对数据所作的操作。\n\n本文中，你将创建一个名为`Dog`的类，该类将用来存储狗的信息以及行为。\n\n一个类本身并不包含任何数据，而是一种蓝图，用来定义事物。`Dog`类定义了狗的名字和年龄，但是并没有包含某一条狗的具体名字和年龄。\n\n既然类是一种蓝图，那么实例就是根据蓝图创建的对象，包含实际的数据。一个`Dog`类的实例不再是一种蓝图，它是一只实际的狗，有名字，例如Miles，年龄是4岁。\n\n换一种说法，一个类就像是一张空白的表格或者问卷表。一个实例就是一张已经填写了信息的表格。就像许多人都可以根据自己的信息来填写表格，根据同一个类，也可以创建许多实例。\n\n### 如何定义一个类\n\n首先定义一个类，需要以关键字`class`开头，然后后面是类的名称和冒号。换行后，下面缩进的内容都属于类的正文。\n\n下面以`Dog`类为例：\n\n```python\nclass Dog:\n    pass\n```\n\n`Dog`类的正文只有一个声明：关键字`pass`。 `pass`不执行任何操作，只是一个占位符。在没有为类写任何代码的情况下，使用`pass`可以避免程序在运行时出错。\n\n>注意：类的名称通常是首字母大写。例如，定义某一种狗的类，如 Jack Russell Terrier，那么类的名称就可以写为`JackRussellTerrier`。\n\n目前，`Dog`类并没有任何属性，我们可以为它定义一些属性，例如名字、年龄、衣服颜色和品种。为了简单起见，我们只使用名字和年龄。\n\n类的属性通常都是通过方法`.__init__()`来定义。每次创建一个`Dog`对象的时候，`.__init__()`就会通过为对象的属性赋值，来设置对象的初始状态。因此，`.__init__()`为类的每一个实例完成了初始化。\n\n你可以为`.__init__()`设置任意数量的参数，但是第一个参数都是`self`。当一个类的实例被创建的时候，改实例自动被传递给`.__init__()`中的`self`参数，这样才能为对象定义新的属性。\n\n让我们更改一下`Dog`类的`.__init__()`方法，创建`.name`和`.age`属性(attributes)。\n\n```python\nclass Dog:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n```\n\n注意到`.__init__()`方法缩进了4个空格，而方法的正文缩进了8个空格。空格缩进十分重要，通过空格缩进，Python才能知道`.__init__()`方法属于`Dog`类。\n\n在`.__init__()`的正文中，有2个声明使用了`self`变量：\n\n1. `self.name = name`创建了一个名为`name`的属性，并用参数`name`为它赋值。\n2. `self.age = age`创建了一个名为`age`的属性，并用参数`age`为它赋值。\n\n在`.__init__()`中创建的属性称为**实例属性**（**Instance attributes**）。实例属性的值只属于类的某一个实例。所有`Dog`对象都有名字和年龄，但是每一个实例的名字和年龄值是不相同的。\n\n另一方面，**类的属性**（**class attributes**）在所有的类的实例中，都拥有相同的属性值。你可以在`.__init__()`以外的位置定义一个变量并为其赋值，该变量就是类的属性。\n\n例如，下面的`Dog`类中有一个类的属性`species`，值为\"Canis familiaris\"：\n\n```python\nclass Dog:\n    # Class attribute\n    species = \"Canis familiaris\"\n\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n```\n\n类的属性直接定义在类的名称下方第一行，并缩进4格。它们必须设置一个初始值。当创建类的实例的时候，类的属性被自动创建，并分配初始值。\n\n当需要为每一个类的实例赋予相同属性值的时候，可以使用**类的属性**，当需要为每一个类的实例赋予不同属性值的时候，可以使用**实例属性**。\n\n## 实例化一个对象\n\n打开IDLE的交互窗口，输入以下内容：\n\n```python\n>>> class Dog:\n...     pass\n```\n\n这样就创建了一个`Dog`类，但是这个类既没有属性也没有方法。\n\n从一个类创建一个新的对象，成为**实例化**(**instantiating**)一个对象。通过输入类的名称并加上双括号，你可以实例化一个新的`Dog`对象：\n\n```python\n>>> Dog()\n<__main__.Dog object at 0x106702d30>\n```\n\n现在，你在`0x106702d30`有一个新的`Dog`对象。`0x106702d30`代表的是内存地址。在不同的电脑上，该内存地址的值是不同的。\n\n现在，实例化第二个对象：\n\n```python\n>>> Dog()\n<__main__.Dog object at 0x0004ccc90>\n```\n\n这个新的`Dog`实例存储在完全不同的内存地址。因为这是一个全新的实例，与之前创建的第一个实例完全不同。\n\n我们可以通过以下方式来判断两个实例是否相同：\n\n```python\n>>> a = Dog()\n>>> b = Dog()\n>>> a == b\nFalse\n```\n\n通过以上代码，我们可以看到，虽然a和b都是通过`Dog`类创建的实例，但是他们代表了完全不同的对象。\n\n### 类和实例属性\n\n现在，创建一个`Dog`类，该类包含一个类的属性`.species`以及两个实例属性`.name`和`.age`。\n\n```python\n>>> class Dog:\n...     species = \"Canis familiaris\"\n...     def __init__(self, name, age):\n...         self.name = name\n...         self.age = age\n```\n\n为了实例化这个类，你需要为name和age提供参数值。否则，Python会抛出一个`TypeError`异常：\n\n```python\n>>> Dog()\nTraceback (most recent call last):\n  File \"<pyshell#6>\", line 1, in <module>\n    Dog()\nTypeError: __init__() missing 2 required positional arguments: 'name' and 'age'\n```\n\n通过在类名后面的括号中填入值，可以将参数传递给name和age。\n\n```python\n>>> buddy = Dog(\"Buddy\", 9)\n>>> miles = Dog(\"Miles\", 4)\n```\n\n以上创建了两个`Dog`实例，一个是名叫Buddy的9岁小狗，另一个是名叫Miles的4岁小狗。\n\n`Dog`类的`.__init__()`方法有三个参数，为什么在上面的例子中只使用了2个参数呢？\n\n当你实例化一个`Dog`对象的时候，Python会创建一个新的实例，并将它传递给`.__init__()`的第一个参数。这样就移除了`self`参数，所以你只需要担心`name`和`age`参数。\n\n当你创建了`Dog`实例后，你就可以使用**dot notation**访问实例的属性了。\n\n```python\n>>> buddy.name\n'Buddy'\n>>> buddy.age\n9\n\n>>> miles.name\n'Miles'\n>>> miles.age\n4\n```\n\n你还可以用相同的访问访问类的属性：\n\n```python\n>>> buddy.species\n'Canis familiaris'\n```\n\n使用类来组织数据的好处之一，就是可以确保实例拥有预期的属性。所有的`Dog`实例都有`.species`, `.name`和`.age`属性，所有你确定当访问这些属性的时候，总是能获取到相应的值。\n\n虽然类能确保这些属性总是存在，但是相应的值却可以动态改变：\n\n```python\n>>> buddy.age = 10\n>>> buddy.age\n10\n\n>>> miles.species = \"Felis silvestris\"\n>>> miles.species\n'Felis silvestris'\n```\n\n在上面的例子中，你将`buddy`对象的属性`.age`更改为10，然后你将`miles`对象的属性`.species`更改为猫的品种\"Felis silvestris\"。虽然这样使得Miles看起来像是一只奇怪的狗，但是这对Python而言是有效的。\n\n这里的关键点是，默认情况下，自定义对象是可变的(mutable)的。如果一个对象可以被动态更改，那么它就是可变的(mutable)。例如，列表和字典都是可变的，但是字符串和元组是不可变的(immutable)。\n\n### 实例方法\n\n**实例方法**(**Instance methods**)是在类中定义的一种函数，这种函数只能被类的实例调用。跟`.__init__()`相同，实例方法的第一个参数都是`self`。\n\n在IDLE打开一个新的文本编辑器，然后输入以下`Dog`类：\n\n```python\nclass Dog:\n    species = \"Canis familiaris\"\n\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    # Instance method\n    def description(self):\n        return f\"{self.name} is {self.age} years old\"\n\n    # Another instance method\n    def speak(self, sound):\n        return f\"{self.name} says {sound}\"\n```\n\n该`Dog`类有两个实例方法：\n\n1. **`.description()`**返回一个字符串，用于显示狗的名字和年龄。\n2. **`.speak()`**有一个`sound`参数，返回一个字符串，用于显示狗的名字和吼叫声。\n\n将以上代码保存到文件`dog.py`，然后按F5运行程序。\n\n然后打开交互式窗口，输入以下实例方法：\n\n```python\n>>> miles = Dog(\"Miles\", 4)\n\n>>> miles.description()\n'Miles is 4 years old'\n\n>>> miles.speak(\"Woof Woof\")\n'Miles says Woof Woof'\n\n>>> miles.speak(\"Bow Wow\")\n'Miles says Bow Wow'\n```\n\n在以上`Dog`类中，`.description()`返回了关于实例miles的信息。当你写类的时候，最好能有一个方法可以用来返回关于类的实例的说明信息。虽然`.description()`返回了实例的描述信息，但着并不是最佳的Python方式。\n\n当你创建一个列表对象的时候，你可以用`print()`来显示以下内容：\n\n```python\n>>> names = [\"Fletcher\", \"David\", \"Dan\"]\n>>> print(names)\n['Fletcher', 'David', 'Dan']\n```\n\n如果我们用`print()`来打印miles对象，会发生什么呢：\n\n```python\n>>> print(miles)\n<__main__.Dog object at 0x00aeff70>\n```\n\n当你`print(miles)`的时候，你看到的是一串很奇怪的字符串，miles是一个`Dog`的对象，内存地址为0x00aeff70。这些信息并不是很有用。你可以通过定义一个特殊的实例方法`.__str__()`来打印出更有用的信息。\n\n下面，将`.description()`方法的名字更改为`.__str__()`:\n\n```python\nclass Dog:\n    # Leave other parts of Dog class as-is\n\n    # Replace .description() with __str__()\n    def __str__(self):\n        return f\"{self.name} is {self.age} years old\"\n```\n\n保存文件然后按F5。现在，当你`print(miles)`的时候，你会得到更友好的输出内容：\n\n```python\n>>> miles = Dog(\"Miles\", 4)\n>>> print(miles)\n'Miles is 4 years old'\n```\n\n像`.__init__()`和`.__str__()`这样的方法被称为**dunder methods**，因为他们的名字都是以双下划线开始，并以双下划线结尾。在Python中，有许多**dunder methods**可以用来定制类。虽然对于初学者来说，这些内容有点深奥，但是在Python中，**dunder methods**对于掌握面向对象的编程很重要。\n\n## 类的继承\n\n类的继承是指一个类可以继承另一个类的所有特性和方法。新创建的类成为子类，被继承的类成为父类。\n\n子类可以重写或者扩展父类的特性和方法。也就是说，子类既可以继承父类的所有特性和方法，也可以定义自己独有的特性性和方法。\n\n虽然这个比喻不是十分恰当，类的继承有点类似于人类的遗传。\n\n你可能继承了你母亲头发的颜色，这是你出生时的特性。但是，你决定将头发染成紫色，由于你母亲的头发不是紫色，所有可以说你重新定义(**overridden** )了头发的特性。\n\n### 遛狗公园的例子\n\n假设你正在一个公园中遛狗。在这个公园里，有许多不同品种的狗，正在从事于各种不同的行为。\n\n假设你想用Python类来为遛狗的公园建立一个模型。之前的`Dog`类可以通过狗的姓名和年龄来区分不同的狗，但是无法通过狗的品种来区分。\n\n你可以在`Dog`类中添加`.breed`的特性：\n\n```python\nclass Dog:\n    species = \"Canis familiaris\"\n\n    def __init__(self, name, age, breed):\n        self.name = name\n        self.age = age\n        self.breed = breed\n```\n\n在以上类中，之所以省略了方法的定义，是因为与本章需要讨论的内容无关。\n\n通过点击F5保存并运行文件，你可以在交互式窗口中，创建各种不同狗的实例：\n\n```python\n>>> miles = Dog(\"Miles\", 4, \"Jack Russell Terrier\")\n>>> buddy = Dog(\"Buddy\", 9, \"Dachshund\")\n>>> jack = Dog(\"Jack\", 3, \"Bulldog\")\n>>> jim = Dog(\"Jim\", 5, \"Bulldog\")\n```\n\n不同品种的狗通常有不同的行为。例如，牛头犬的叫声比较低，声音类似于`woof`，但是腊肠犬的叫声比较高，声音类似于`yap`。\n\n使用`Dog`类的时候，你必须为`.speak()`方法提供一个声音的参数`sound`，每次调用`Dog`实例的时候如下：\n\n```python\n>>> buddy.speak(\"Yap\")\n'Buddy says Yap'\n\n>>> jim.speak(\"Woof\")\n'Jim says Woof'\n\n>>> jack.speak(\"Woof\")\n'Jack says Woof'\n```\n\n每次调用`.speak()`方法的时候，都要传递一个参数，这样既显得重复，又不太方便。此外，每次传递参数的时候，还需要根据狗的品种`.breed`来决定对应的声音参数。\n\n你可以通过为每一种狗创建一个子类的方法，来简化以上问题。这使得你可以扩展子类从父类继承的方法，例如为`.speak()`指定默认的参数。\n\n### 父类和子类\n\n接下来我们为三种不同品种的狗各自创建一个子类：Jack Russell Terrier, Dachshund, and Bulldog:\n\n```python\nclass Dog:\n    species = \"Canis familiaris\"\n\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def __str__(self):\n        return f\"{self.name} is {self.age} years old\"\n\n    def speak(self, sound):\n        return f\"{self.name} says {sound}\"\n```\n\n创建子类的时候，你需要为子类定义一个自己的名称，然后在括号中填写父类的名称：\n\n```python\nclass JackRussellTerrier(Dog):\n    pass\n\nclass Dachshund(Dog):\n    pass\n\nclass Bulldog(Dog):\n    pass\n```\n\n现在你可以在交互式窗口中通过以下方式创建各种实例：\n\n```python\n>>> miles = JackRussellTerrier(\"Miles\", 4)\n>>> buddy = Dachshund(\"Buddy\", 9)\n>>> jack = Bulldog(\"Jack\", 3)\n>>> jim = Bulldog(\"Jim\", 5)\n```\n\n子类的实例继承了父类所有的特性和方法：\n\n```python\n>>> miles.species\n'Canis familiaris'\n\n>>> buddy.name\n'Buddy'\n\n>>> print(jack)\nJack is 3 years old\n\n>>> jim.speak(\"Woof\")\n'Jim says Woof'\n```\n\n如果要判断某一个对象属于哪一个类，你可以使用内建函数`type()`:\n\n```python\n>>> type(miles)\n<class '__main__.JackRussellTerrier'>\n```\n\n如果你还想判断`miles`是否是`Dog`类的实例，可以i使用内建函数`isinstance()`:\n\n```python\n>>> isinstance(miles, Dog)\nTrue\n```\n\n注意到`isinstance`需要两个参数，一个对象和一个类。以上例子中，`isinstance()`检查 `miles`是否是`Dog`类的使用，返回值为`True`。\n\n对象`miles`，`buddy`，`jack`和`jim`都是`Dog`类的实例，但是`miles`不是`Bulldog`的实例，`jack`不是`Dachshund`的实例。\n\n```python\n>>> isinstance(miles, Bulldog)\nFalse\n\n>>> isinstance(jack, Dachshund)\nFalse\n```\n\n概而言之，所有子类的对象，同时也是父类的对象，但是它们并不一定是其它子类的对象。\n\n### 扩展父类的功能\n\n由于不同品种的狗有不同的叫声，如果你想要为每一种狗各自的`.speak()`方法指定一个默认的`sound`参数值，你可以在各自的子类中重新定义`.speak()`方法。\n\n为了覆盖父类中的某一个方法，你需要在子类中定义相同名字的方法。下面以`JackRussellTerrier`子类为例：\n\n```python\nclass JackRussellTerrier(Dog):\n    def speak(self, sound=\"Arf\"):\n        return f\"{self.name} says {sound}\"\n```\n\n通过在子类`JackRussellTerrier`中重新定义方法`.speak()`后，现在JackRussellTerrier品种的狗有了一种默认的叫声“Arf”。\n\n现在，如果你可以通过`JackRussellTerrier`的实例调用`.speak()`方法，并且不传递任何参数：\n\n```python\n>>> miles = JackRussellTerrier(\"Miles\", 4)\n>>> miles.speak()\n'Miles says Arf'\n```\n\n有时候，有些狗在愤怒的时候会发出不同的叫声，这是你仍然可以调用`.speak()`方法，并传递相应的参数值：\n\n```python\n>>> miles.speak(\"Grrr\")\n'Miles says Grrr'\n```\n\n请记住，如果对父类做了更改，会自动传递给子类。但是，如果子类已经重新定义了父类的特性或者方法，那么父类的更改并不会传递给子类。\n\n例如，在`Dog`类中，更改`.speak()`中的返回字符串内容，将`says`更改为`barks`:\n\n```python\nclass Dog:\n    # Leave other attributes and methods as they are\n\n    # Change the string returned by .speak()\n    def speak(self, sound):\n        return f\"{self.name} barks: {sound}\"\n```\n\n现在，你创建一个新的`Bulldog`实例，名称为`jim`，`jim.speak()`会返回新的字符串：\n\n```python\n>>> jim = Bulldog(\"Jim\", 5)\n>>> jim.speak(\"Woof\")\n'Jim barks: Woof'\n```\n\n但是，如果调用`JackRussellTerrier`实例的`.speak()`方法，会发现并不会返回新的字符串：\n\n```python\n>>> miles = JackRussellTerrier(\"Miles\", 4)\n>>> miles.speak()\n'Miles says Arf'\n```\n\n有时候，可能需要完全覆盖父类的方法，但是在这个例子中，我们想让子类`JackRussellTerrier`继续使用父类中`.speak()`方法返回的字符串格式。\n\n为了实现这个目的，你仍然需要在子类`JackRussellTerrier`中定义`.speak()`方法。但是，你在子类的`.speak()`方法中需要调用父类的`.speak()`方法，并且将相应的参数传递给父类的`.speak()`方法。\n\n在子类中的某一个方法中，可以使用`super()`来访问父类：\n\n```python\nclass JackRussellTerrier(Dog):\n    def speak(self, sound=\"Arf\"):\n        return super().speak(sound)\n```\n\n当你在子类`JackRussellTerrier`中调用`super().speak(sound)`的时候，Python会在父类`Dog`中查找`.speak()`方法，然后调用并传递参数`sound`。\n\n下面，我们可以测试一下新定义的子类`JackRussellTerrier`：\n\n```python\n>>> miles = JackRussellTerrier(\"Miles\", 4)\n>>> miles.speak()\n'Miles barks: Arf'\n```\n\n现在，当你调用`miles.speak()`的时候，你可以看到返回的结果是`Dog`类中定义的格式。\n\n> 注意：在上面的例子中，类的继承结构非常简单。`JackRussellTerrier`子类有一个父类`Dog`。在实际的应用场景中，类的结构十分复杂。\n>\n> `super()`不仅只是在父类中查找某个方法或者特性，它还可以在整个类的结构中查找匹配的类和特性。如果你使用`super()`的时候不太小心，容易导致意外的结果。\n\n\n\n## 总结\n\n通过本指南，你学到了Python中面向对象编程的知识。大多数编程语言，如Java, C#和C++等都是基于面向对象编程的原理，所以本指南的知识同样适用于以上语言。\n\n在本指南中，你学到了以下内容：\n\n- 定义一个类\n- 从一个类实例化一个对象\n- 使用特性和方法来定义对象的属性和行为\n- 通过继承，从父类创建一个子类\n- 使用`super()`访问父类的某一个方法\n- 使用`isinstance()`判断一个对象是否继承于另外一个类\n","slug":"面向对象的编程","published":1,"updated":"2023-12-11T01:23:26.273Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clq21ttzh0000bqec4cxdc1p4","content":"<h1 id=\"面向对象的编程\"><a href=\"#面向对象的编程\" class=\"headerlink\" title=\"面向对象的编程\"></a>面向对象的编程</h1><blockquote>\n<p>注：本文翻译自<a href=\"https://realpython.com/python3-object-oriented-programming/\">Object-Oriented Programming (OOP) in Python 3 – Real Python</a>。</p>\n</blockquote>\n<p><strong>面向对象的编程</strong>（<strong>Object-oriented programming</strong> ）是一种构建程序的方式，这种方式将相关的属性和行为绑定到个别的对象上。通过本文，你将了解到关于面向对象编程的基础知识。</p>\n<p>理论上来说，对象就好像是一个系统的组件。如果将一个程序想象成一家工厂的各种装配线。在装配线上的每一个环境，系统的部件都会对原材料进行加工处理，最后，原材料被加工成一个产品。</p>\n<p>一个对象包含数据（就像是装配线上需要处理的原材料）和行为（装配线上的组件执行的操作）。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"什么是面向对象的编程\"><a href=\"#什么是面向对象的编程\" class=\"headerlink\" title=\"什么是面向对象的编程\"></a>什么是面向对象的编程</h2><p><strong>面向对象的编程</strong>（<strong>Object-oriented programming</strong> ）是一种编程的范式。它提供了一种构建程序的方式，这种方式将相关的属性和行为绑定到个别的对象上。</p>\n<p>例如，一个对象可以代表一个人，这个人拥有属性，如姓名，年龄和地址，以及拥有行为（方法），例如行走，讲话，呼吸和奔跑。或者一个对象也可以代表一封邮寄，这封邮件拥有属性，如收件人列表，主题和正文，以及拥有行为，例如添加附件和发送。</p>\n<p>换一种说法，面向对象的编程用一种建模的方法来描述现实世界的事物，例如汽车，以及相关的事务，如工厂和工人，学生和老师等等。面向对象的编程通过建模的方式，将现实世界的个体描述为软件的对象，这些对象拥有相关的数据和哈数。</p>\n<p>另外一种常见的编程方式是面向过程的编程。这种方式就像是一本菜谱，提供了一系列的步骤，以函数和代码块的方式，按顺序完成任务。</p>\n<p>关键点是，对象是面向对象编程的核心，对象不仅代表数据，同时也代表了程序的整体结构。</p>\n<h2 id=\"定义一个类\"><a href=\"#定义一个类\" class=\"headerlink\" title=\"定义一个类\"></a>定义一个类</h2><p>基础的数据结构，如数字、字符串和列表，主要分别用来表示简单的信息，例如苹果的加个，诗的名称或者你喜欢的颜色。但是，如果你想要表示更为复杂的信息该怎么办呢？</p>\n<p>例如，假设你想要记录组织的员工信息。你需要存储每一个员工的基本信息，例如他们的名字、年龄、职位和工作年限。</p>\n<p>一种方式是通过列表来表示每一个员工的信息：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">kirk <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"James Kirk\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Captain\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2265</span><span class=\"token punctuation\">]</span>\nspock <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Spock\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">35</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Science Officer\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2254</span><span class=\"token punctuation\">]</span>\nmccoy <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Leonard McCoy\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Chief Medical Officer\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2266</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>如果使用以上这种方式，会存在一些问题。</p>\n<p>首先，它使得代码文件难以管理。如果你定义了<code>kirk</code>列表以后，隔了很多行才引用<code>kirk[0]</code>，你还会记得索引值为0的列表元素对应的是员工的名字吗？</p>\n<p>其次，如果每一个员工在列表中的信息数量并不相同，就会导致代码运行出错。以上例子中，<code>mccoy</code>列表缺少年龄的信息，因此<code>mccoy[1]</code>返回的是”Chief Medical Officer”，而不是Dr. McCoy的年龄。</p>\n<p>一种比较好的解决方式是使用类。</p>\n<h3 id=\"类和实例\"><a href=\"#类和实例\" class=\"headerlink\" title=\"类和实例\"></a>类和实例</h3><p>类用于创建用户自己定义的数据结构。类定义的函数成为<strong>方法</strong>（<strong>methods</strong>）。方法定义了对象可以对数据所作的操作。</p>\n<p>本文中，你将创建一个名为<code>Dog</code>的类，该类将用来存储狗的信息以及行为。</p>\n<p>一个类本身并不包含任何数据，而是一种蓝图，用来定义事物。<code>Dog</code>类定义了狗的名字和年龄，但是并没有包含某一条狗的具体名字和年龄。</p>\n<p>既然类是一种蓝图，那么实例就是根据蓝图创建的对象，包含实际的数据。一个<code>Dog</code>类的实例不再是一种蓝图，它是一只实际的狗，有名字，例如Miles，年龄是4岁。</p>\n<p>换一种说法，一个类就像是一张空白的表格或者问卷表。一个实例就是一张已经填写了信息的表格。就像许多人都可以根据自己的信息来填写表格，根据同一个类，也可以创建许多实例。</p>\n<h3 id=\"如何定义一个类\"><a href=\"#如何定义一个类\" class=\"headerlink\" title=\"如何定义一个类\"></a>如何定义一个类</h3><p>首先定义一个类，需要以关键字<code>class</code>开头，然后后面是类的名称和冒号。换行后，下面缩进的内容都属于类的正文。</p>\n<p>下面以<code>Dog</code>类为例：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><code>Dog</code>类的正文只有一个声明：关键字<code>pass</code>。 <code>pass</code>不执行任何操作，只是一个占位符。在没有为类写任何代码的情况下，使用<code>pass</code>可以避免程序在运行时出错。</p>\n<blockquote>\n<p>注意：类的名称通常是首字母大写。例如，定义某一种狗的类，如 Jack Russell Terrier，那么类的名称就可以写为<code>JackRussellTerrier</code>。</p>\n</blockquote>\n<p>目前，<code>Dog</code>类并没有任何属性，我们可以为它定义一些属性，例如名字、年龄、衣服颜色和品种。为了简单起见，我们只使用名字和年龄。</p>\n<p>类的属性通常都是通过方法<code>.__init__()</code>来定义。每次创建一个<code>Dog</code>对象的时候，<code>.__init__()</code>就会通过为对象的属性赋值，来设置对象的初始状态。因此，<code>.__init__()</code>为类的每一个实例完成了初始化。</p>\n<p>你可以为<code>.__init__()</code>设置任意数量的参数，但是第一个参数都是<code>self</code>。当一个类的实例被创建的时候，改实例自动被传递给<code>.__init__()</code>中的<code>self</code>参数，这样才能为对象定义新的属性。</p>\n<p>让我们更改一下<code>Dog</code>类的<code>.__init__()</code>方法，创建<code>.name</code>和<code>.age</code>属性(attributes)。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意到<code>.__init__()</code>方法缩进了4个空格，而方法的正文缩进了8个空格。空格缩进十分重要，通过空格缩进，Python才能知道<code>.__init__()</code>方法属于<code>Dog</code>类。</p>\n<p>在<code>.__init__()</code>的正文中，有2个声明使用了<code>self</code>变量：</p>\n<ol>\n<li><code>self.name = name</code>创建了一个名为<code>name</code>的属性，并用参数<code>name</code>为它赋值。</li>\n<li><code>self.age = age</code>创建了一个名为<code>age</code>的属性，并用参数<code>age</code>为它赋值。</li>\n</ol>\n<p>在<code>.__init__()</code>中创建的属性称为<strong>实例属性</strong>（<strong>Instance attributes</strong>）。实例属性的值只属于类的某一个实例。所有<code>Dog</code>对象都有名字和年龄，但是每一个实例的名字和年龄值是不相同的。</p>\n<p>另一方面，<strong>类的属性</strong>（<strong>class attributes</strong>）在所有的类的实例中，都拥有相同的属性值。你可以在<code>.__init__()</code>以外的位置定义一个变量并为其赋值，该变量就是类的属性。</p>\n<p>例如，下面的<code>Dog</code>类中有一个类的属性<code>species</code>，值为”Canis familiaris”：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># Class attribute</span>\n    species <span class=\"token operator\">=</span> <span class=\"token string\">\"Canis familiaris\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>类的属性直接定义在类的名称下方第一行，并缩进4格。它们必须设置一个初始值。当创建类的实例的时候，类的属性被自动创建，并分配初始值。</p>\n<p>当需要为每一个类的实例赋予相同属性值的时候，可以使用<strong>类的属性</strong>，当需要为每一个类的实例赋予不同属性值的时候，可以使用<strong>实例属性</strong>。</p>\n<h2 id=\"实例化一个对象\"><a href=\"#实例化一个对象\" class=\"headerlink\" title=\"实例化一个对象\"></a>实例化一个对象</h2><p>打开IDLE的交互窗口，输入以下内容：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">pass</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>这样就创建了一个<code>Dog</code>类，但是这个类既没有属性也没有方法。</p>\n<p>从一个类创建一个新的对象，成为<strong>实例化</strong>(<strong>instantiating</strong>)一个对象。通过输入类的名称并加上双括号，你可以实例化一个新的<code>Dog</code>对象：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> Dog<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>__main__<span class=\"token punctuation\">.</span>Dog <span class=\"token builtin\">object</span> at <span class=\"token number\">0x106702d30</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>现在，你在<code>0x106702d30</code>有一个新的<code>Dog</code>对象。<code>0x106702d30</code>代表的是内存地址。在不同的电脑上，该内存地址的值是不同的。</p>\n<p>现在，实例化第二个对象：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> Dog<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>__main__<span class=\"token punctuation\">.</span>Dog <span class=\"token builtin\">object</span> at <span class=\"token number\">0x0004ccc90</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>这个新的<code>Dog</code>实例存储在完全不同的内存地址。因为这是一个全新的实例，与之前创建的第一个实例完全不同。</p>\n<p>我们可以通过以下方式来判断两个实例是否相同：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> a <span class=\"token operator\">=</span> Dog<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> b <span class=\"token operator\">=</span> Dog<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> a <span class=\"token operator\">==</span> b\n<span class=\"token boolean\">False</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>通过以上代码，我们可以看到，虽然a和b都是通过<code>Dog</code>类创建的实例，但是他们代表了完全不同的对象。</p>\n<h3 id=\"类和实例属性\"><a href=\"#类和实例属性\" class=\"headerlink\" title=\"类和实例属性\"></a>类和实例属性</h3><p>现在，创建一个<code>Dog</code>类，该类包含一个类的属性<code>.species</code>以及两个实例属性<code>.name</code>和<code>.age</code>。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     species <span class=\"token operator\">=</span> <span class=\"token string\">\"Canis familiaris\"</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>为了实例化这个类，你需要为name和age提供参数值。否则，Python会抛出一个<code>TypeError</code>异常：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> Dog<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nTraceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  File <span class=\"token string\">\"&lt;pyshell#6>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span>\n    Dog<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nTypeError<span class=\"token punctuation\">:</span> __init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> missing <span class=\"token number\">2</span> required positional arguments<span class=\"token punctuation\">:</span> <span class=\"token string\">'name'</span> <span class=\"token keyword\">and</span> <span class=\"token string\">'age'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>通过在类名后面的括号中填入值，可以将参数传递给name和age。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> buddy <span class=\"token operator\">=</span> Dog<span class=\"token punctuation\">(</span><span class=\"token string\">\"Buddy\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> miles <span class=\"token operator\">=</span> Dog<span class=\"token punctuation\">(</span><span class=\"token string\">\"Miles\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>以上创建了两个<code>Dog</code>实例，一个是名叫Buddy的9岁小狗，另一个是名叫Miles的4岁小狗。</p>\n<p><code>Dog</code>类的<code>.__init__()</code>方法有三个参数，为什么在上面的例子中只使用了2个参数呢？</p>\n<p>当你实例化一个<code>Dog</code>对象的时候，Python会创建一个新的实例，并将它传递给<code>.__init__()</code>的第一个参数。这样就移除了<code>self</code>参数，所以你只需要担心<code>name</code>和<code>age</code>参数。</p>\n<p>当你创建了<code>Dog</code>实例后，你就可以使用<strong>dot notation</strong>访问实例的属性了。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> buddy<span class=\"token punctuation\">.</span>name\n<span class=\"token string\">'Buddy'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> buddy<span class=\"token punctuation\">.</span>age\n<span class=\"token number\">9</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> miles<span class=\"token punctuation\">.</span>name\n<span class=\"token string\">'Miles'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> miles<span class=\"token punctuation\">.</span>age\n<span class=\"token number\">4</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>你还可以用相同的访问访问类的属性：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> buddy<span class=\"token punctuation\">.</span>species\n<span class=\"token string\">'Canis familiaris'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>使用类来组织数据的好处之一，就是可以确保实例拥有预期的属性。所有的<code>Dog</code>实例都有<code>.species</code>, <code>.name</code>和<code>.age</code>属性，所有你确定当访问这些属性的时候，总是能获取到相应的值。</p>\n<p>虽然类能确保这些属性总是存在，但是相应的值却可以动态改变：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> buddy<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> buddy<span class=\"token punctuation\">.</span>age\n<span class=\"token number\">10</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> miles<span class=\"token punctuation\">.</span>species <span class=\"token operator\">=</span> <span class=\"token string\">\"Felis silvestris\"</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> miles<span class=\"token punctuation\">.</span>species\n<span class=\"token string\">'Felis silvestris'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在上面的例子中，你将<code>buddy</code>对象的属性<code>.age</code>更改为10，然后你将<code>miles</code>对象的属性<code>.species</code>更改为猫的品种”Felis silvestris”。虽然这样使得Miles看起来像是一只奇怪的狗，但是这对Python而言是有效的。</p>\n<p>这里的关键点是，默认情况下，自定义对象是可变的(mutable)的。如果一个对象可以被动态更改，那么它就是可变的(mutable)。例如，列表和字典都是可变的，但是字符串和元组是不可变的(immutable)。</p>\n<h3 id=\"实例方法\"><a href=\"#实例方法\" class=\"headerlink\" title=\"实例方法\"></a>实例方法</h3><p><strong>实例方法</strong>(<strong>Instance methods</strong>)是在类中定义的一种函数，这种函数只能被类的实例调用。跟<code>.__init__()</code>相同，实例方法的第一个参数都是<code>self</code>。</p>\n<p>在IDLE打开一个新的文本编辑器，然后输入以下<code>Dog</code>类：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">:</span>\n    species <span class=\"token operator\">=</span> <span class=\"token string\">\"Canis familiaris\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n\n    <span class=\"token comment\"># Instance method</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">description</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> is </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> years old\"</span></span>\n\n    <span class=\"token comment\"># Another instance method</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> sound<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> says </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>sound<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>该<code>Dog</code>类有两个实例方法：</p>\n<ol>\n<li>**<code>.description()</code>**返回一个字符串，用于显示狗的名字和年龄。</li>\n<li>**<code>.speak()</code>**有一个<code>sound</code>参数，返回一个字符串，用于显示狗的名字和吼叫声。</li>\n</ol>\n<p>将以上代码保存到文件<code>dog.py</code>，然后按F5运行程序。</p>\n<p>然后打开交互式窗口，输入以下实例方法：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> miles <span class=\"token operator\">=</span> Dog<span class=\"token punctuation\">(</span><span class=\"token string\">\"Miles\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> miles<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Miles is 4 years old'</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> miles<span class=\"token punctuation\">.</span>speak<span class=\"token punctuation\">(</span><span class=\"token string\">\"Woof Woof\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Miles says Woof Woof'</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> miles<span class=\"token punctuation\">.</span>speak<span class=\"token punctuation\">(</span><span class=\"token string\">\"Bow Wow\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Miles says Bow Wow'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在以上<code>Dog</code>类中，<code>.description()</code>返回了关于实例miles的信息。当你写类的时候，最好能有一个方法可以用来返回关于类的实例的说明信息。虽然<code>.description()</code>返回了实例的描述信息，但着并不是最佳的Python方式。</p>\n<p>当你创建一个列表对象的时候，你可以用<code>print()</code>来显示以下内容：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Fletcher\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"David\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Dan\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'Fletcher'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'David'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Dan'</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>如果我们用<code>print()</code>来打印miles对象，会发生什么呢：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>miles<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>__main__<span class=\"token punctuation\">.</span>Dog <span class=\"token builtin\">object</span> at <span class=\"token number\">0x00aeff70</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>当你<code>print(miles)</code>的时候，你看到的是一串很奇怪的字符串，miles是一个<code>Dog</code>的对象，内存地址为0x00aeff70。这些信息并不是很有用。你可以通过定义一个特殊的实例方法<code>.__str__()</code>来打印出更有用的信息。</p>\n<p>下面，将<code>.description()</code>方法的名字更改为<code>.__str__()</code>:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># Leave other parts of Dog class as-is</span>\n\n    <span class=\"token comment\"># Replace .description() with __str__()</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> is </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> years old\"</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>保存文件然后按F5。现在，当你<code>print(miles)</code>的时候，你会得到更友好的输出内容：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> miles <span class=\"token operator\">=</span> Dog<span class=\"token punctuation\">(</span><span class=\"token string\">\"Miles\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>miles<span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Miles is 4 years old'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>像<code>.__init__()</code>和<code>.__str__()</code>这样的方法被称为<strong>dunder methods</strong>，因为他们的名字都是以双下划线开始，并以双下划线结尾。在Python中，有许多<strong>dunder methods</strong>可以用来定制类。虽然对于初学者来说，这些内容有点深奥，但是在Python中，<strong>dunder methods</strong>对于掌握面向对象的编程很重要。</p>\n<h2 id=\"类的继承\"><a href=\"#类的继承\" class=\"headerlink\" title=\"类的继承\"></a>类的继承</h2><p>类的继承是指一个类可以继承另一个类的所有特性和方法。新创建的类成为子类，被继承的类成为父类。</p>\n<p>子类可以重写或者扩展父类的特性和方法。也就是说，子类既可以继承父类的所有特性和方法，也可以定义自己独有的特性性和方法。</p>\n<p>虽然这个比喻不是十分恰当，类的继承有点类似于人类的遗传。</p>\n<p>你可能继承了你母亲头发的颜色，这是你出生时的特性。但是，你决定将头发染成紫色，由于你母亲的头发不是紫色，所有可以说你重新定义(<strong>overridden</strong> )了头发的特性。</p>\n<h3 id=\"遛狗公园的例子\"><a href=\"#遛狗公园的例子\" class=\"headerlink\" title=\"遛狗公园的例子\"></a>遛狗公园的例子</h3><p>假设你正在一个公园中遛狗。在这个公园里，有许多不同品种的狗，正在从事于各种不同的行为。</p>\n<p>假设你想用Python类来为遛狗的公园建立一个模型。之前的<code>Dog</code>类可以通过狗的姓名和年龄来区分不同的狗，但是无法通过狗的品种来区分。</p>\n<p>你可以在<code>Dog</code>类中添加<code>.breed</code>的特性：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">:</span>\n    species <span class=\"token operator\">=</span> <span class=\"token string\">\"Canis familiaris\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> breed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n        self<span class=\"token punctuation\">.</span>breed <span class=\"token operator\">=</span> breed<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在以上类中，之所以省略了方法的定义，是因为与本章需要讨论的内容无关。</p>\n<p>通过点击F5保存并运行文件，你可以在交互式窗口中，创建各种不同狗的实例：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> miles <span class=\"token operator\">=</span> Dog<span class=\"token punctuation\">(</span><span class=\"token string\">\"Miles\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Jack Russell Terrier\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> buddy <span class=\"token operator\">=</span> Dog<span class=\"token punctuation\">(</span><span class=\"token string\">\"Buddy\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Dachshund\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> jack <span class=\"token operator\">=</span> Dog<span class=\"token punctuation\">(</span><span class=\"token string\">\"Jack\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bulldog\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> jim <span class=\"token operator\">=</span> Dog<span class=\"token punctuation\">(</span><span class=\"token string\">\"Jim\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bulldog\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>不同品种的狗通常有不同的行为。例如，牛头犬的叫声比较低，声音类似于<code>woof</code>，但是腊肠犬的叫声比较高，声音类似于<code>yap</code>。</p>\n<p>使用<code>Dog</code>类的时候，你必须为<code>.speak()</code>方法提供一个声音的参数<code>sound</code>，每次调用<code>Dog</code>实例的时候如下：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> buddy<span class=\"token punctuation\">.</span>speak<span class=\"token punctuation\">(</span><span class=\"token string\">\"Yap\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Buddy says Yap'</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> jim<span class=\"token punctuation\">.</span>speak<span class=\"token punctuation\">(</span><span class=\"token string\">\"Woof\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Jim says Woof'</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> jack<span class=\"token punctuation\">.</span>speak<span class=\"token punctuation\">(</span><span class=\"token string\">\"Woof\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Jack says Woof'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>每次调用<code>.speak()</code>方法的时候，都要传递一个参数，这样既显得重复，又不太方便。此外，每次传递参数的时候，还需要根据狗的品种<code>.breed</code>来决定对应的声音参数。</p>\n<p>你可以通过为每一种狗创建一个子类的方法，来简化以上问题。这使得你可以扩展子类从父类继承的方法，例如为<code>.speak()</code>指定默认的参数。</p>\n<h3 id=\"父类和子类\"><a href=\"#父类和子类\" class=\"headerlink\" title=\"父类和子类\"></a>父类和子类</h3><p>接下来我们为三种不同品种的狗各自创建一个子类：Jack Russell Terrier, Dachshund, and Bulldog:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">:</span>\n    species <span class=\"token operator\">=</span> <span class=\"token string\">\"Canis familiaris\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> is </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> years old\"</span></span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> sound<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> says </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>sound<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>创建子类的时候，你需要为子类定义一个自己的名称，然后在括号中填写父类的名称：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">JackRussellTerrier</span><span class=\"token punctuation\">(</span>Dog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Dachshund</span><span class=\"token punctuation\">(</span>Dog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Bulldog</span><span class=\"token punctuation\">(</span>Dog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>现在你可以在交互式窗口中通过以下方式创建各种实例：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> miles <span class=\"token operator\">=</span> JackRussellTerrier<span class=\"token punctuation\">(</span><span class=\"token string\">\"Miles\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> buddy <span class=\"token operator\">=</span> Dachshund<span class=\"token punctuation\">(</span><span class=\"token string\">\"Buddy\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> jack <span class=\"token operator\">=</span> Bulldog<span class=\"token punctuation\">(</span><span class=\"token string\">\"Jack\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> jim <span class=\"token operator\">=</span> Bulldog<span class=\"token punctuation\">(</span><span class=\"token string\">\"Jim\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>子类的实例继承了父类所有的特性和方法：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> miles<span class=\"token punctuation\">.</span>species\n<span class=\"token string\">'Canis familiaris'</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> buddy<span class=\"token punctuation\">.</span>name\n<span class=\"token string\">'Buddy'</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>jack<span class=\"token punctuation\">)</span>\nJack <span class=\"token keyword\">is</span> <span class=\"token number\">3</span> years old\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> jim<span class=\"token punctuation\">.</span>speak<span class=\"token punctuation\">(</span><span class=\"token string\">\"Woof\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Jim says Woof'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果要判断某一个对象属于哪一个类，你可以使用内建函数<code>type()</code>:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>miles<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token string\">'__main__.JackRussellTerrier'</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>如果你还想判断<code>miles</code>是否是<code>Dog</code>类的实例，可以i使用内建函数<code>isinstance()</code>:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>miles<span class=\"token punctuation\">,</span> Dog<span class=\"token punctuation\">)</span>\n<span class=\"token boolean\">True</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>注意到<code>isinstance</code>需要两个参数，一个对象和一个类。以上例子中，<code>isinstance()</code>检查 <code>miles</code>是否是<code>Dog</code>类的使用，返回值为<code>True</code>。</p>\n<p>对象<code>miles</code>，<code>buddy</code>，<code>jack</code>和<code>jim</code>都是<code>Dog</code>类的实例，但是<code>miles</code>不是<code>Bulldog</code>的实例，<code>jack</code>不是<code>Dachshund</code>的实例。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>miles<span class=\"token punctuation\">,</span> Bulldog<span class=\"token punctuation\">)</span>\n<span class=\"token boolean\">False</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>jack<span class=\"token punctuation\">,</span> Dachshund<span class=\"token punctuation\">)</span>\n<span class=\"token boolean\">False</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>概而言之，所有子类的对象，同时也是父类的对象，但是它们并不一定是其它子类的对象。</p>\n<h3 id=\"扩展父类的功能\"><a href=\"#扩展父类的功能\" class=\"headerlink\" title=\"扩展父类的功能\"></a>扩展父类的功能</h3><p>由于不同品种的狗有不同的叫声，如果你想要为每一种狗各自的<code>.speak()</code>方法指定一个默认的<code>sound</code>参数值，你可以在各自的子类中重新定义<code>.speak()</code>方法。</p>\n<p>为了覆盖父类中的某一个方法，你需要在子类中定义相同名字的方法。下面以<code>JackRussellTerrier</code>子类为例：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">JackRussellTerrier</span><span class=\"token punctuation\">(</span>Dog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> sound<span class=\"token operator\">=</span><span class=\"token string\">\"Arf\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> says </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>sound<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>通过在子类<code>JackRussellTerrier</code>中重新定义方法<code>.speak()</code>后，现在JackRussellTerrier品种的狗有了一种默认的叫声“Arf”。</p>\n<p>现在，如果你可以通过<code>JackRussellTerrier</code>的实例调用<code>.speak()</code>方法，并且不传递任何参数：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> miles <span class=\"token operator\">=</span> JackRussellTerrier<span class=\"token punctuation\">(</span><span class=\"token string\">\"Miles\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> miles<span class=\"token punctuation\">.</span>speak<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Miles says Arf'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>有时候，有些狗在愤怒的时候会发出不同的叫声，这是你仍然可以调用<code>.speak()</code>方法，并传递相应的参数值：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> miles<span class=\"token punctuation\">.</span>speak<span class=\"token punctuation\">(</span><span class=\"token string\">\"Grrr\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Miles says Grrr'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>请记住，如果对父类做了更改，会自动传递给子类。但是，如果子类已经重新定义了父类的特性或者方法，那么父类的更改并不会传递给子类。</p>\n<p>例如，在<code>Dog</code>类中，更改<code>.speak()</code>中的返回字符串内容，将<code>says</code>更改为<code>barks</code>:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># Leave other attributes and methods as they are</span>\n\n    <span class=\"token comment\"># Change the string returned by .speak()</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> sound<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> barks: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>sound<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>现在，你创建一个新的<code>Bulldog</code>实例，名称为<code>jim</code>，<code>jim.speak()</code>会返回新的字符串：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> jim <span class=\"token operator\">=</span> Bulldog<span class=\"token punctuation\">(</span><span class=\"token string\">\"Jim\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> jim<span class=\"token punctuation\">.</span>speak<span class=\"token punctuation\">(</span><span class=\"token string\">\"Woof\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Jim barks: Woof'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>但是，如果调用<code>JackRussellTerrier</code>实例的<code>.speak()</code>方法，会发现并不会返回新的字符串：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> miles <span class=\"token operator\">=</span> JackRussellTerrier<span class=\"token punctuation\">(</span><span class=\"token string\">\"Miles\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> miles<span class=\"token punctuation\">.</span>speak<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Miles says Arf'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>有时候，可能需要完全覆盖父类的方法，但是在这个例子中，我们想让子类<code>JackRussellTerrier</code>继续使用父类中<code>.speak()</code>方法返回的字符串格式。</p>\n<p>为了实现这个目的，你仍然需要在子类<code>JackRussellTerrier</code>中定义<code>.speak()</code>方法。但是，你在子类的<code>.speak()</code>方法中需要调用父类的<code>.speak()</code>方法，并且将相应的参数传递给父类的<code>.speak()</code>方法。</p>\n<p>在子类中的某一个方法中，可以使用<code>super()</code>来访问父类：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">JackRussellTerrier</span><span class=\"token punctuation\">(</span>Dog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> sound<span class=\"token operator\">=</span><span class=\"token string\">\"Arf\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>speak<span class=\"token punctuation\">(</span>sound<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>当你在子类<code>JackRussellTerrier</code>中调用<code>super().speak(sound)</code>的时候，Python会在父类<code>Dog</code>中查找<code>.speak()</code>方法，然后调用并传递参数<code>sound</code>。</p>\n<p>下面，我们可以测试一下新定义的子类<code>JackRussellTerrier</code>：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> miles <span class=\"token operator\">=</span> JackRussellTerrier<span class=\"token punctuation\">(</span><span class=\"token string\">\"Miles\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> miles<span class=\"token punctuation\">.</span>speak<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Miles barks: Arf'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>现在，当你调用<code>miles.speak()</code>的时候，你可以看到返回的结果是<code>Dog</code>类中定义的格式。</p>\n<blockquote>\n<p>注意：在上面的例子中，类的继承结构非常简单。<code>JackRussellTerrier</code>子类有一个父类<code>Dog</code>。在实际的应用场景中，类的结构十分复杂。</p>\n<p><code>super()</code>不仅只是在父类中查找某个方法或者特性，它还可以在整个类的结构中查找匹配的类和特性。如果你使用<code>super()</code>的时候不太小心，容易导致意外的结果。</p>\n</blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>通过本指南，你学到了Python中面向对象编程的知识。大多数编程语言，如Java, C#和C++等都是基于面向对象编程的原理，所以本指南的知识同样适用于以上语言。</p>\n<p>在本指南中，你学到了以下内容：</p>\n<ul>\n<li>定义一个类</li>\n<li>从一个类实例化一个对象</li>\n<li>使用特性和方法来定义对象的属性和行为</li>\n<li>通过继承，从父类创建一个子类</li>\n<li>使用<code>super()</code>访问父类的某一个方法</li>\n<li>使用<code>isinstance()</code>判断一个对象是否继承于另外一个类</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"面向对象的编程\"><a href=\"#面向对象的编程\" class=\"headerlink\" title=\"面向对象的编程\"></a>面向对象的编程</h1><blockquote>\n<p>注：本文翻译自<a href=\"https://realpython.com/python3-object-oriented-programming/\">Object-Oriented Programming (OOP) in Python 3 – Real Python</a>。</p>\n</blockquote>\n<p><strong>面向对象的编程</strong>（<strong>Object-oriented programming</strong> ）是一种构建程序的方式，这种方式将相关的属性和行为绑定到个别的对象上。通过本文，你将了解到关于面向对象编程的基础知识。</p>\n<p>理论上来说，对象就好像是一个系统的组件。如果将一个程序想象成一家工厂的各种装配线。在装配线上的每一个环境，系统的部件都会对原材料进行加工处理，最后，原材料被加工成一个产品。</p>\n<p>一个对象包含数据（就像是装配线上需要处理的原材料）和行为（装配线上的组件执行的操作）。</p>","more":"<h2 id=\"什么是面向对象的编程\"><a href=\"#什么是面向对象的编程\" class=\"headerlink\" title=\"什么是面向对象的编程\"></a>什么是面向对象的编程</h2><p><strong>面向对象的编程</strong>（<strong>Object-oriented programming</strong> ）是一种编程的范式。它提供了一种构建程序的方式，这种方式将相关的属性和行为绑定到个别的对象上。</p>\n<p>例如，一个对象可以代表一个人，这个人拥有属性，如姓名，年龄和地址，以及拥有行为（方法），例如行走，讲话，呼吸和奔跑。或者一个对象也可以代表一封邮寄，这封邮件拥有属性，如收件人列表，主题和正文，以及拥有行为，例如添加附件和发送。</p>\n<p>换一种说法，面向对象的编程用一种建模的方法来描述现实世界的事物，例如汽车，以及相关的事务，如工厂和工人，学生和老师等等。面向对象的编程通过建模的方式，将现实世界的个体描述为软件的对象，这些对象拥有相关的数据和哈数。</p>\n<p>另外一种常见的编程方式是面向过程的编程。这种方式就像是一本菜谱，提供了一系列的步骤，以函数和代码块的方式，按顺序完成任务。</p>\n<p>关键点是，对象是面向对象编程的核心，对象不仅代表数据，同时也代表了程序的整体结构。</p>\n<h2 id=\"定义一个类\"><a href=\"#定义一个类\" class=\"headerlink\" title=\"定义一个类\"></a>定义一个类</h2><p>基础的数据结构，如数字、字符串和列表，主要分别用来表示简单的信息，例如苹果的加个，诗的名称或者你喜欢的颜色。但是，如果你想要表示更为复杂的信息该怎么办呢？</p>\n<p>例如，假设你想要记录组织的员工信息。你需要存储每一个员工的基本信息，例如他们的名字、年龄、职位和工作年限。</p>\n<p>一种方式是通过列表来表示每一个员工的信息：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">kirk <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"James Kirk\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Captain\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2265</span><span class=\"token punctuation\">]</span>\nspock <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Spock\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">35</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Science Officer\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2254</span><span class=\"token punctuation\">]</span>\nmccoy <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Leonard McCoy\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Chief Medical Officer\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2266</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>如果使用以上这种方式，会存在一些问题。</p>\n<p>首先，它使得代码文件难以管理。如果你定义了<code>kirk</code>列表以后，隔了很多行才引用<code>kirk[0]</code>，你还会记得索引值为0的列表元素对应的是员工的名字吗？</p>\n<p>其次，如果每一个员工在列表中的信息数量并不相同，就会导致代码运行出错。以上例子中，<code>mccoy</code>列表缺少年龄的信息，因此<code>mccoy[1]</code>返回的是”Chief Medical Officer”，而不是Dr. McCoy的年龄。</p>\n<p>一种比较好的解决方式是使用类。</p>\n<h3 id=\"类和实例\"><a href=\"#类和实例\" class=\"headerlink\" title=\"类和实例\"></a>类和实例</h3><p>类用于创建用户自己定义的数据结构。类定义的函数成为<strong>方法</strong>（<strong>methods</strong>）。方法定义了对象可以对数据所作的操作。</p>\n<p>本文中，你将创建一个名为<code>Dog</code>的类，该类将用来存储狗的信息以及行为。</p>\n<p>一个类本身并不包含任何数据，而是一种蓝图，用来定义事物。<code>Dog</code>类定义了狗的名字和年龄，但是并没有包含某一条狗的具体名字和年龄。</p>\n<p>既然类是一种蓝图，那么实例就是根据蓝图创建的对象，包含实际的数据。一个<code>Dog</code>类的实例不再是一种蓝图，它是一只实际的狗，有名字，例如Miles，年龄是4岁。</p>\n<p>换一种说法，一个类就像是一张空白的表格或者问卷表。一个实例就是一张已经填写了信息的表格。就像许多人都可以根据自己的信息来填写表格，根据同一个类，也可以创建许多实例。</p>\n<h3 id=\"如何定义一个类\"><a href=\"#如何定义一个类\" class=\"headerlink\" title=\"如何定义一个类\"></a>如何定义一个类</h3><p>首先定义一个类，需要以关键字<code>class</code>开头，然后后面是类的名称和冒号。换行后，下面缩进的内容都属于类的正文。</p>\n<p>下面以<code>Dog</code>类为例：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><code>Dog</code>类的正文只有一个声明：关键字<code>pass</code>。 <code>pass</code>不执行任何操作，只是一个占位符。在没有为类写任何代码的情况下，使用<code>pass</code>可以避免程序在运行时出错。</p>\n<blockquote>\n<p>注意：类的名称通常是首字母大写。例如，定义某一种狗的类，如 Jack Russell Terrier，那么类的名称就可以写为<code>JackRussellTerrier</code>。</p>\n</blockquote>\n<p>目前，<code>Dog</code>类并没有任何属性，我们可以为它定义一些属性，例如名字、年龄、衣服颜色和品种。为了简单起见，我们只使用名字和年龄。</p>\n<p>类的属性通常都是通过方法<code>.__init__()</code>来定义。每次创建一个<code>Dog</code>对象的时候，<code>.__init__()</code>就会通过为对象的属性赋值，来设置对象的初始状态。因此，<code>.__init__()</code>为类的每一个实例完成了初始化。</p>\n<p>你可以为<code>.__init__()</code>设置任意数量的参数，但是第一个参数都是<code>self</code>。当一个类的实例被创建的时候，改实例自动被传递给<code>.__init__()</code>中的<code>self</code>参数，这样才能为对象定义新的属性。</p>\n<p>让我们更改一下<code>Dog</code>类的<code>.__init__()</code>方法，创建<code>.name</code>和<code>.age</code>属性(attributes)。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意到<code>.__init__()</code>方法缩进了4个空格，而方法的正文缩进了8个空格。空格缩进十分重要，通过空格缩进，Python才能知道<code>.__init__()</code>方法属于<code>Dog</code>类。</p>\n<p>在<code>.__init__()</code>的正文中，有2个声明使用了<code>self</code>变量：</p>\n<ol>\n<li><code>self.name = name</code>创建了一个名为<code>name</code>的属性，并用参数<code>name</code>为它赋值。</li>\n<li><code>self.age = age</code>创建了一个名为<code>age</code>的属性，并用参数<code>age</code>为它赋值。</li>\n</ol>\n<p>在<code>.__init__()</code>中创建的属性称为<strong>实例属性</strong>（<strong>Instance attributes</strong>）。实例属性的值只属于类的某一个实例。所有<code>Dog</code>对象都有名字和年龄，但是每一个实例的名字和年龄值是不相同的。</p>\n<p>另一方面，<strong>类的属性</strong>（<strong>class attributes</strong>）在所有的类的实例中，都拥有相同的属性值。你可以在<code>.__init__()</code>以外的位置定义一个变量并为其赋值，该变量就是类的属性。</p>\n<p>例如，下面的<code>Dog</code>类中有一个类的属性<code>species</code>，值为”Canis familiaris”：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># Class attribute</span>\n    species <span class=\"token operator\">=</span> <span class=\"token string\">\"Canis familiaris\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>类的属性直接定义在类的名称下方第一行，并缩进4格。它们必须设置一个初始值。当创建类的实例的时候，类的属性被自动创建，并分配初始值。</p>\n<p>当需要为每一个类的实例赋予相同属性值的时候，可以使用<strong>类的属性</strong>，当需要为每一个类的实例赋予不同属性值的时候，可以使用<strong>实例属性</strong>。</p>\n<h2 id=\"实例化一个对象\"><a href=\"#实例化一个对象\" class=\"headerlink\" title=\"实例化一个对象\"></a>实例化一个对象</h2><p>打开IDLE的交互窗口，输入以下内容：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">pass</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>这样就创建了一个<code>Dog</code>类，但是这个类既没有属性也没有方法。</p>\n<p>从一个类创建一个新的对象，成为<strong>实例化</strong>(<strong>instantiating</strong>)一个对象。通过输入类的名称并加上双括号，你可以实例化一个新的<code>Dog</code>对象：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> Dog<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>__main__<span class=\"token punctuation\">.</span>Dog <span class=\"token builtin\">object</span> at <span class=\"token number\">0x106702d30</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>现在，你在<code>0x106702d30</code>有一个新的<code>Dog</code>对象。<code>0x106702d30</code>代表的是内存地址。在不同的电脑上，该内存地址的值是不同的。</p>\n<p>现在，实例化第二个对象：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> Dog<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>__main__<span class=\"token punctuation\">.</span>Dog <span class=\"token builtin\">object</span> at <span class=\"token number\">0x0004ccc90</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>这个新的<code>Dog</code>实例存储在完全不同的内存地址。因为这是一个全新的实例，与之前创建的第一个实例完全不同。</p>\n<p>我们可以通过以下方式来判断两个实例是否相同：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> a <span class=\"token operator\">=</span> Dog<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> b <span class=\"token operator\">=</span> Dog<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> a <span class=\"token operator\">==</span> b\n<span class=\"token boolean\">False</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>通过以上代码，我们可以看到，虽然a和b都是通过<code>Dog</code>类创建的实例，但是他们代表了完全不同的对象。</p>\n<h3 id=\"类和实例属性\"><a href=\"#类和实例属性\" class=\"headerlink\" title=\"类和实例属性\"></a>类和实例属性</h3><p>现在，创建一个<code>Dog</code>类，该类包含一个类的属性<code>.species</code>以及两个实例属性<code>.name</code>和<code>.age</code>。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     species <span class=\"token operator\">=</span> <span class=\"token string\">\"Canis familiaris\"</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>为了实例化这个类，你需要为name和age提供参数值。否则，Python会抛出一个<code>TypeError</code>异常：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> Dog<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nTraceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  File <span class=\"token string\">\"&lt;pyshell#6>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span>\n    Dog<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nTypeError<span class=\"token punctuation\">:</span> __init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> missing <span class=\"token number\">2</span> required positional arguments<span class=\"token punctuation\">:</span> <span class=\"token string\">'name'</span> <span class=\"token keyword\">and</span> <span class=\"token string\">'age'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>通过在类名后面的括号中填入值，可以将参数传递给name和age。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> buddy <span class=\"token operator\">=</span> Dog<span class=\"token punctuation\">(</span><span class=\"token string\">\"Buddy\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> miles <span class=\"token operator\">=</span> Dog<span class=\"token punctuation\">(</span><span class=\"token string\">\"Miles\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>以上创建了两个<code>Dog</code>实例，一个是名叫Buddy的9岁小狗，另一个是名叫Miles的4岁小狗。</p>\n<p><code>Dog</code>类的<code>.__init__()</code>方法有三个参数，为什么在上面的例子中只使用了2个参数呢？</p>\n<p>当你实例化一个<code>Dog</code>对象的时候，Python会创建一个新的实例，并将它传递给<code>.__init__()</code>的第一个参数。这样就移除了<code>self</code>参数，所以你只需要担心<code>name</code>和<code>age</code>参数。</p>\n<p>当你创建了<code>Dog</code>实例后，你就可以使用<strong>dot notation</strong>访问实例的属性了。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> buddy<span class=\"token punctuation\">.</span>name\n<span class=\"token string\">'Buddy'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> buddy<span class=\"token punctuation\">.</span>age\n<span class=\"token number\">9</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> miles<span class=\"token punctuation\">.</span>name\n<span class=\"token string\">'Miles'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> miles<span class=\"token punctuation\">.</span>age\n<span class=\"token number\">4</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>你还可以用相同的访问访问类的属性：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> buddy<span class=\"token punctuation\">.</span>species\n<span class=\"token string\">'Canis familiaris'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>使用类来组织数据的好处之一，就是可以确保实例拥有预期的属性。所有的<code>Dog</code>实例都有<code>.species</code>, <code>.name</code>和<code>.age</code>属性，所有你确定当访问这些属性的时候，总是能获取到相应的值。</p>\n<p>虽然类能确保这些属性总是存在，但是相应的值却可以动态改变：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> buddy<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> buddy<span class=\"token punctuation\">.</span>age\n<span class=\"token number\">10</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> miles<span class=\"token punctuation\">.</span>species <span class=\"token operator\">=</span> <span class=\"token string\">\"Felis silvestris\"</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> miles<span class=\"token punctuation\">.</span>species\n<span class=\"token string\">'Felis silvestris'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在上面的例子中，你将<code>buddy</code>对象的属性<code>.age</code>更改为10，然后你将<code>miles</code>对象的属性<code>.species</code>更改为猫的品种”Felis silvestris”。虽然这样使得Miles看起来像是一只奇怪的狗，但是这对Python而言是有效的。</p>\n<p>这里的关键点是，默认情况下，自定义对象是可变的(mutable)的。如果一个对象可以被动态更改，那么它就是可变的(mutable)。例如，列表和字典都是可变的，但是字符串和元组是不可变的(immutable)。</p>\n<h3 id=\"实例方法\"><a href=\"#实例方法\" class=\"headerlink\" title=\"实例方法\"></a>实例方法</h3><p><strong>实例方法</strong>(<strong>Instance methods</strong>)是在类中定义的一种函数，这种函数只能被类的实例调用。跟<code>.__init__()</code>相同，实例方法的第一个参数都是<code>self</code>。</p>\n<p>在IDLE打开一个新的文本编辑器，然后输入以下<code>Dog</code>类：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">:</span>\n    species <span class=\"token operator\">=</span> <span class=\"token string\">\"Canis familiaris\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n\n    <span class=\"token comment\"># Instance method</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">description</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> is </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> years old\"</span></span>\n\n    <span class=\"token comment\"># Another instance method</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> sound<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> says </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>sound<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>该<code>Dog</code>类有两个实例方法：</p>\n<ol>\n<li>**<code>.description()</code>**返回一个字符串，用于显示狗的名字和年龄。</li>\n<li>**<code>.speak()</code>**有一个<code>sound</code>参数，返回一个字符串，用于显示狗的名字和吼叫声。</li>\n</ol>\n<p>将以上代码保存到文件<code>dog.py</code>，然后按F5运行程序。</p>\n<p>然后打开交互式窗口，输入以下实例方法：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> miles <span class=\"token operator\">=</span> Dog<span class=\"token punctuation\">(</span><span class=\"token string\">\"Miles\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> miles<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Miles is 4 years old'</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> miles<span class=\"token punctuation\">.</span>speak<span class=\"token punctuation\">(</span><span class=\"token string\">\"Woof Woof\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Miles says Woof Woof'</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> miles<span class=\"token punctuation\">.</span>speak<span class=\"token punctuation\">(</span><span class=\"token string\">\"Bow Wow\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Miles says Bow Wow'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在以上<code>Dog</code>类中，<code>.description()</code>返回了关于实例miles的信息。当你写类的时候，最好能有一个方法可以用来返回关于类的实例的说明信息。虽然<code>.description()</code>返回了实例的描述信息，但着并不是最佳的Python方式。</p>\n<p>当你创建一个列表对象的时候，你可以用<code>print()</code>来显示以下内容：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Fletcher\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"David\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Dan\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">'Fletcher'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'David'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Dan'</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>如果我们用<code>print()</code>来打印miles对象，会发生什么呢：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>miles<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>__main__<span class=\"token punctuation\">.</span>Dog <span class=\"token builtin\">object</span> at <span class=\"token number\">0x00aeff70</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>当你<code>print(miles)</code>的时候，你看到的是一串很奇怪的字符串，miles是一个<code>Dog</code>的对象，内存地址为0x00aeff70。这些信息并不是很有用。你可以通过定义一个特殊的实例方法<code>.__str__()</code>来打印出更有用的信息。</p>\n<p>下面，将<code>.description()</code>方法的名字更改为<code>.__str__()</code>:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># Leave other parts of Dog class as-is</span>\n\n    <span class=\"token comment\"># Replace .description() with __str__()</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> is </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> years old\"</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>保存文件然后按F5。现在，当你<code>print(miles)</code>的时候，你会得到更友好的输出内容：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> miles <span class=\"token operator\">=</span> Dog<span class=\"token punctuation\">(</span><span class=\"token string\">\"Miles\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>miles<span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Miles is 4 years old'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>像<code>.__init__()</code>和<code>.__str__()</code>这样的方法被称为<strong>dunder methods</strong>，因为他们的名字都是以双下划线开始，并以双下划线结尾。在Python中，有许多<strong>dunder methods</strong>可以用来定制类。虽然对于初学者来说，这些内容有点深奥，但是在Python中，<strong>dunder methods</strong>对于掌握面向对象的编程很重要。</p>\n<h2 id=\"类的继承\"><a href=\"#类的继承\" class=\"headerlink\" title=\"类的继承\"></a>类的继承</h2><p>类的继承是指一个类可以继承另一个类的所有特性和方法。新创建的类成为子类，被继承的类成为父类。</p>\n<p>子类可以重写或者扩展父类的特性和方法。也就是说，子类既可以继承父类的所有特性和方法，也可以定义自己独有的特性性和方法。</p>\n<p>虽然这个比喻不是十分恰当，类的继承有点类似于人类的遗传。</p>\n<p>你可能继承了你母亲头发的颜色，这是你出生时的特性。但是，你决定将头发染成紫色，由于你母亲的头发不是紫色，所有可以说你重新定义(<strong>overridden</strong> )了头发的特性。</p>\n<h3 id=\"遛狗公园的例子\"><a href=\"#遛狗公园的例子\" class=\"headerlink\" title=\"遛狗公园的例子\"></a>遛狗公园的例子</h3><p>假设你正在一个公园中遛狗。在这个公园里，有许多不同品种的狗，正在从事于各种不同的行为。</p>\n<p>假设你想用Python类来为遛狗的公园建立一个模型。之前的<code>Dog</code>类可以通过狗的姓名和年龄来区分不同的狗，但是无法通过狗的品种来区分。</p>\n<p>你可以在<code>Dog</code>类中添加<code>.breed</code>的特性：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">:</span>\n    species <span class=\"token operator\">=</span> <span class=\"token string\">\"Canis familiaris\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> breed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n        self<span class=\"token punctuation\">.</span>breed <span class=\"token operator\">=</span> breed<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在以上类中，之所以省略了方法的定义，是因为与本章需要讨论的内容无关。</p>\n<p>通过点击F5保存并运行文件，你可以在交互式窗口中，创建各种不同狗的实例：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> miles <span class=\"token operator\">=</span> Dog<span class=\"token punctuation\">(</span><span class=\"token string\">\"Miles\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Jack Russell Terrier\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> buddy <span class=\"token operator\">=</span> Dog<span class=\"token punctuation\">(</span><span class=\"token string\">\"Buddy\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Dachshund\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> jack <span class=\"token operator\">=</span> Dog<span class=\"token punctuation\">(</span><span class=\"token string\">\"Jack\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bulldog\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> jim <span class=\"token operator\">=</span> Dog<span class=\"token punctuation\">(</span><span class=\"token string\">\"Jim\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bulldog\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>不同品种的狗通常有不同的行为。例如，牛头犬的叫声比较低，声音类似于<code>woof</code>，但是腊肠犬的叫声比较高，声音类似于<code>yap</code>。</p>\n<p>使用<code>Dog</code>类的时候，你必须为<code>.speak()</code>方法提供一个声音的参数<code>sound</code>，每次调用<code>Dog</code>实例的时候如下：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> buddy<span class=\"token punctuation\">.</span>speak<span class=\"token punctuation\">(</span><span class=\"token string\">\"Yap\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Buddy says Yap'</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> jim<span class=\"token punctuation\">.</span>speak<span class=\"token punctuation\">(</span><span class=\"token string\">\"Woof\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Jim says Woof'</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> jack<span class=\"token punctuation\">.</span>speak<span class=\"token punctuation\">(</span><span class=\"token string\">\"Woof\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Jack says Woof'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>每次调用<code>.speak()</code>方法的时候，都要传递一个参数，这样既显得重复，又不太方便。此外，每次传递参数的时候，还需要根据狗的品种<code>.breed</code>来决定对应的声音参数。</p>\n<p>你可以通过为每一种狗创建一个子类的方法，来简化以上问题。这使得你可以扩展子类从父类继承的方法，例如为<code>.speak()</code>指定默认的参数。</p>\n<h3 id=\"父类和子类\"><a href=\"#父类和子类\" class=\"headerlink\" title=\"父类和子类\"></a>父类和子类</h3><p>接下来我们为三种不同品种的狗各自创建一个子类：Jack Russell Terrier, Dachshund, and Bulldog:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">:</span>\n    species <span class=\"token operator\">=</span> <span class=\"token string\">\"Canis familiaris\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> is </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> years old\"</span></span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> sound<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> says </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>sound<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>创建子类的时候，你需要为子类定义一个自己的名称，然后在括号中填写父类的名称：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">JackRussellTerrier</span><span class=\"token punctuation\">(</span>Dog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Dachshund</span><span class=\"token punctuation\">(</span>Dog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Bulldog</span><span class=\"token punctuation\">(</span>Dog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">pass</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>现在你可以在交互式窗口中通过以下方式创建各种实例：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> miles <span class=\"token operator\">=</span> JackRussellTerrier<span class=\"token punctuation\">(</span><span class=\"token string\">\"Miles\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> buddy <span class=\"token operator\">=</span> Dachshund<span class=\"token punctuation\">(</span><span class=\"token string\">\"Buddy\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> jack <span class=\"token operator\">=</span> Bulldog<span class=\"token punctuation\">(</span><span class=\"token string\">\"Jack\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> jim <span class=\"token operator\">=</span> Bulldog<span class=\"token punctuation\">(</span><span class=\"token string\">\"Jim\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>子类的实例继承了父类所有的特性和方法：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> miles<span class=\"token punctuation\">.</span>species\n<span class=\"token string\">'Canis familiaris'</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> buddy<span class=\"token punctuation\">.</span>name\n<span class=\"token string\">'Buddy'</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>jack<span class=\"token punctuation\">)</span>\nJack <span class=\"token keyword\">is</span> <span class=\"token number\">3</span> years old\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> jim<span class=\"token punctuation\">.</span>speak<span class=\"token punctuation\">(</span><span class=\"token string\">\"Woof\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Jim says Woof'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果要判断某一个对象属于哪一个类，你可以使用内建函数<code>type()</code>:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>miles<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token string\">'__main__.JackRussellTerrier'</span><span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>如果你还想判断<code>miles</code>是否是<code>Dog</code>类的实例，可以i使用内建函数<code>isinstance()</code>:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>miles<span class=\"token punctuation\">,</span> Dog<span class=\"token punctuation\">)</span>\n<span class=\"token boolean\">True</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>注意到<code>isinstance</code>需要两个参数，一个对象和一个类。以上例子中，<code>isinstance()</code>检查 <code>miles</code>是否是<code>Dog</code>类的使用，返回值为<code>True</code>。</p>\n<p>对象<code>miles</code>，<code>buddy</code>，<code>jack</code>和<code>jim</code>都是<code>Dog</code>类的实例，但是<code>miles</code>不是<code>Bulldog</code>的实例，<code>jack</code>不是<code>Dachshund</code>的实例。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>miles<span class=\"token punctuation\">,</span> Bulldog<span class=\"token punctuation\">)</span>\n<span class=\"token boolean\">False</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>jack<span class=\"token punctuation\">,</span> Dachshund<span class=\"token punctuation\">)</span>\n<span class=\"token boolean\">False</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>概而言之，所有子类的对象，同时也是父类的对象，但是它们并不一定是其它子类的对象。</p>\n<h3 id=\"扩展父类的功能\"><a href=\"#扩展父类的功能\" class=\"headerlink\" title=\"扩展父类的功能\"></a>扩展父类的功能</h3><p>由于不同品种的狗有不同的叫声，如果你想要为每一种狗各自的<code>.speak()</code>方法指定一个默认的<code>sound</code>参数值，你可以在各自的子类中重新定义<code>.speak()</code>方法。</p>\n<p>为了覆盖父类中的某一个方法，你需要在子类中定义相同名字的方法。下面以<code>JackRussellTerrier</code>子类为例：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">JackRussellTerrier</span><span class=\"token punctuation\">(</span>Dog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> sound<span class=\"token operator\">=</span><span class=\"token string\">\"Arf\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> says </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>sound<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>通过在子类<code>JackRussellTerrier</code>中重新定义方法<code>.speak()</code>后，现在JackRussellTerrier品种的狗有了一种默认的叫声“Arf”。</p>\n<p>现在，如果你可以通过<code>JackRussellTerrier</code>的实例调用<code>.speak()</code>方法，并且不传递任何参数：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> miles <span class=\"token operator\">=</span> JackRussellTerrier<span class=\"token punctuation\">(</span><span class=\"token string\">\"Miles\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> miles<span class=\"token punctuation\">.</span>speak<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Miles says Arf'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>有时候，有些狗在愤怒的时候会发出不同的叫声，这是你仍然可以调用<code>.speak()</code>方法，并传递相应的参数值：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> miles<span class=\"token punctuation\">.</span>speak<span class=\"token punctuation\">(</span><span class=\"token string\">\"Grrr\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Miles says Grrr'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>请记住，如果对父类做了更改，会自动传递给子类。但是，如果子类已经重新定义了父类的特性或者方法，那么父类的更改并不会传递给子类。</p>\n<p>例如，在<code>Dog</code>类中，更改<code>.speak()</code>中的返回字符串内容，将<code>says</code>更改为<code>barks</code>:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># Leave other attributes and methods as they are</span>\n\n    <span class=\"token comment\"># Change the string returned by .speak()</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> sound<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> barks: </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>sound<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>现在，你创建一个新的<code>Bulldog</code>实例，名称为<code>jim</code>，<code>jim.speak()</code>会返回新的字符串：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> jim <span class=\"token operator\">=</span> Bulldog<span class=\"token punctuation\">(</span><span class=\"token string\">\"Jim\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> jim<span class=\"token punctuation\">.</span>speak<span class=\"token punctuation\">(</span><span class=\"token string\">\"Woof\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Jim barks: Woof'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>但是，如果调用<code>JackRussellTerrier</code>实例的<code>.speak()</code>方法，会发现并不会返回新的字符串：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> miles <span class=\"token operator\">=</span> JackRussellTerrier<span class=\"token punctuation\">(</span><span class=\"token string\">\"Miles\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> miles<span class=\"token punctuation\">.</span>speak<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Miles says Arf'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>有时候，可能需要完全覆盖父类的方法，但是在这个例子中，我们想让子类<code>JackRussellTerrier</code>继续使用父类中<code>.speak()</code>方法返回的字符串格式。</p>\n<p>为了实现这个目的，你仍然需要在子类<code>JackRussellTerrier</code>中定义<code>.speak()</code>方法。但是，你在子类的<code>.speak()</code>方法中需要调用父类的<code>.speak()</code>方法，并且将相应的参数传递给父类的<code>.speak()</code>方法。</p>\n<p>在子类中的某一个方法中，可以使用<code>super()</code>来访问父类：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">JackRussellTerrier</span><span class=\"token punctuation\">(</span>Dog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> sound<span class=\"token operator\">=</span><span class=\"token string\">\"Arf\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>speak<span class=\"token punctuation\">(</span>sound<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>当你在子类<code>JackRussellTerrier</code>中调用<code>super().speak(sound)</code>的时候，Python会在父类<code>Dog</code>中查找<code>.speak()</code>方法，然后调用并传递参数<code>sound</code>。</p>\n<p>下面，我们可以测试一下新定义的子类<code>JackRussellTerrier</code>：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> miles <span class=\"token operator\">=</span> JackRussellTerrier<span class=\"token punctuation\">(</span><span class=\"token string\">\"Miles\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> miles<span class=\"token punctuation\">.</span>speak<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Miles barks: Arf'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>现在，当你调用<code>miles.speak()</code>的时候，你可以看到返回的结果是<code>Dog</code>类中定义的格式。</p>\n<blockquote>\n<p>注意：在上面的例子中，类的继承结构非常简单。<code>JackRussellTerrier</code>子类有一个父类<code>Dog</code>。在实际的应用场景中，类的结构十分复杂。</p>\n<p><code>super()</code>不仅只是在父类中查找某个方法或者特性，它还可以在整个类的结构中查找匹配的类和特性。如果你使用<code>super()</code>的时候不太小心，容易导致意外的结果。</p>\n</blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>通过本指南，你学到了Python中面向对象编程的知识。大多数编程语言，如Java, C#和C++等都是基于面向对象编程的原理，所以本指南的知识同样适用于以上语言。</p>\n<p>在本指南中，你学到了以下内容：</p>\n<ul>\n<li>定义一个类</li>\n<li>从一个类实例化一个对象</li>\n<li>使用特性和方法来定义对象的属性和行为</li>\n<li>通过继承，从父类创建一个子类</li>\n<li>使用<code>super()</code>访问父类的某一个方法</li>\n<li>使用<code>isinstance()</code>判断一个对象是否继承于另外一个类</li>\n</ul>"},{"title":"安装Home Assistant","date":"2021-10-17T07:02:00.000Z","updated":"2023-12-26T01:35:00.000Z","_content":"\n## 通过Docker的方式安装Home Assistant\n### 安装Docker\n\n1 更新树莓派的系统。\n\n```bash\nsudo apt-get update\nsudo apt-get upgrade\n```\n\n2 下载Docker安装脚本，然后执行脚本安装Docker。\n\n```bash\ncurl -fsSL https://get.docker.com -o get-docker.sh\nsudo sh get-docker.sh --mirror Aliyun\n```\n\n**需要注意的是，由于国内访问Docker官方的安装源很慢，因此可以添加参数`--mirror Aliyun`，将安装源更改为阿里云镜像，从而提高安装速度。**\n\n3 默认情况下，只有拥有管理员权限的账号才可以运行docker，如果登录的账号是普通用户，需要通过sudo来运行docker。或者，也可以将普通用户账号添加到docker用户组，这样该用户就可以直接运行docker的命令。\n\n以下命令可以将用户`pi`添加到docker用户组中。\n\n```bash\nsudo usermod -aG docker pi\n```\n\n<!-- more -->\n\n4 使用命令`docker version`和`docker info`查看Docker的版本信息和运行状态。\n\n```bash\n$ docker version\n\nClient:\n Version:           20.10.5+dfsg1\n API version:       1.41\n Go version:        go1.15.15\n Git commit:        55c4c88\n Built:             Mon May 30 18:34:49 2022\n OS/Arch:           linux/arm64\n Context:           default\n Experimental:      true\n\nServer:\n Engine:\n  Version:          20.10.5+dfsg1\n  API version:      1.41 (minimum version 1.12)\n  Go version:       go1.15.15\n  Git commit:       363e9a8\n  Built:            Mon May 30 18:34:49 2022\n  OS/Arch:          linux/arm64\n  Experimental:     false\n containerd:\n  Version:          1.4.13~ds1\n  GitCommit:        1.4.13~ds1-1~deb11u4\n runc:\n  Version:          1.0.0~rc93+ds1\n  GitCommit:        1.0.0~rc93+ds1-5+deb11u2\n docker-init:\n  Version:          0.19.0\n  GitCommit:\n\ndocker info\n```\n\n```bash\n$ docker info\n\nClient:\n Context:    default\n Debug Mode: false\n Plugins:\n  buildx: Docker Buildx (Docker Inc., v0.10.4)\n  compose: Docker Compose (Docker Inc., v2.17.3)\n\nServer:\n Containers: 1\n  Running: 1\n  Paused: 0\n  Stopped: 0\n Images: 1\n Server Version: 20.10.5+dfsg1\n Storage Driver: overlay2\n  Backing Filesystem: extfs\n  Supports d_type: true\n  Native Overlay Diff: true\n Logging Driver: json-file\n Cgroup Driver: systemd\n Cgroup Version: 2\n Plugins:\n  Volume: local\n  Network: bridge host ipvlan macvlan null overlay\n  Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog\n Swarm: inactive\n Runtimes: io.containerd.runc.v2 io.containerd.runtime.v1.linux runc\n Default Runtime: runc\n Init Binary: docker-init\n containerd version: 1.4.13~ds1-1~deb11u4\n runc version: 1.0.0~rc93+ds1-5+deb11u2\n init version:\n Security Options:\n  seccomp\n   Profile: default\n  cgroupns\n Kernel Version: 6.1.21-v8+\n Operating System: Debian GNU/Linux 11 (bullseye)\n OSType: linux\n Architecture: aarch64\n CPUs: 4\n Total Memory: 7.629GiB\n Name: pi4-8g\n ID: AT4S:WDKG:SCHA:D56T:SRNU:TJJB:ZEMH:YR67:6GRF:KLVC:B6MI:SVIE\n Docker Root Dir: /var/lib/docker\n Debug Mode: false\n Registry: https://index.docker.io/v1/\n Labels:\n Experimental: false\n Insecure Registries:\n  127.0.0.0/8\n Registry Mirrors:\n  https://docker.mirrors.ustc.edu.cn/\n Live Restore Enabled: false\n\nWARNING: No memory limit support\nWARNING: No swap limit support\nWARNING: Support for cgroup v2 is experimental\n```\n\n### 安装Home Assistant\n\n### Raspberry pi 3\n\n```bash\ndocker run -d \\\n  --name homeassistant \\\n  --privileged \\\n  --restart=unless-stopped \\\n  -e TZ=MY_TIME_ZONE \\\n  -v /PATH_TO_YOUR_CONFIG:/config \\\n  --network=host \\\n  ghcr.io/home-assistant/raspberrypi3-homeassistant:stable\n```\n\n### Raspberry pi 4\n\n```bash\ndocker run -d \\\n  --name homeassistant \\\n  --privileged \\\n  --restart=unless-stopped \\\n  -e TZ=MY_TIME_ZONE \\\n  -v /PATH_TO_YOUR_CONFIG:/config \\\n  --network=host \\\n  ghcr.io/home-assistant/raspberrypi4-homeassistant:stable\n```\n\n以上安装命令中，一定要将`/PATH_TO_YOUR_CONFIG`修改成指定的安装路径，例如`/home/pi/homeassistant`，如果忘记修改，配置文件就会保存到`/PATH_TO_YOUR_CONFIG`目录。\n\n安装成功后，打开浏览器访问`http://<host>:8123`，登录Home Assistant的Web界面。\n\n","source":"_posts/安装Home_Assistant.md","raw":"---\ntitle: 安装Home Assistant\ndate: 2021-10-17 15:02:00\ntags:\n  - home_assistant\ncategories:\n  - Home_Assistant\nupdated: 2023-12-26 09:35:00\n---\n\n## 通过Docker的方式安装Home Assistant\n### 安装Docker\n\n1 更新树莓派的系统。\n\n```bash\nsudo apt-get update\nsudo apt-get upgrade\n```\n\n2 下载Docker安装脚本，然后执行脚本安装Docker。\n\n```bash\ncurl -fsSL https://get.docker.com -o get-docker.sh\nsudo sh get-docker.sh --mirror Aliyun\n```\n\n**需要注意的是，由于国内访问Docker官方的安装源很慢，因此可以添加参数`--mirror Aliyun`，将安装源更改为阿里云镜像，从而提高安装速度。**\n\n3 默认情况下，只有拥有管理员权限的账号才可以运行docker，如果登录的账号是普通用户，需要通过sudo来运行docker。或者，也可以将普通用户账号添加到docker用户组，这样该用户就可以直接运行docker的命令。\n\n以下命令可以将用户`pi`添加到docker用户组中。\n\n```bash\nsudo usermod -aG docker pi\n```\n\n<!-- more -->\n\n4 使用命令`docker version`和`docker info`查看Docker的版本信息和运行状态。\n\n```bash\n$ docker version\n\nClient:\n Version:           20.10.5+dfsg1\n API version:       1.41\n Go version:        go1.15.15\n Git commit:        55c4c88\n Built:             Mon May 30 18:34:49 2022\n OS/Arch:           linux/arm64\n Context:           default\n Experimental:      true\n\nServer:\n Engine:\n  Version:          20.10.5+dfsg1\n  API version:      1.41 (minimum version 1.12)\n  Go version:       go1.15.15\n  Git commit:       363e9a8\n  Built:            Mon May 30 18:34:49 2022\n  OS/Arch:          linux/arm64\n  Experimental:     false\n containerd:\n  Version:          1.4.13~ds1\n  GitCommit:        1.4.13~ds1-1~deb11u4\n runc:\n  Version:          1.0.0~rc93+ds1\n  GitCommit:        1.0.0~rc93+ds1-5+deb11u2\n docker-init:\n  Version:          0.19.0\n  GitCommit:\n\ndocker info\n```\n\n```bash\n$ docker info\n\nClient:\n Context:    default\n Debug Mode: false\n Plugins:\n  buildx: Docker Buildx (Docker Inc., v0.10.4)\n  compose: Docker Compose (Docker Inc., v2.17.3)\n\nServer:\n Containers: 1\n  Running: 1\n  Paused: 0\n  Stopped: 0\n Images: 1\n Server Version: 20.10.5+dfsg1\n Storage Driver: overlay2\n  Backing Filesystem: extfs\n  Supports d_type: true\n  Native Overlay Diff: true\n Logging Driver: json-file\n Cgroup Driver: systemd\n Cgroup Version: 2\n Plugins:\n  Volume: local\n  Network: bridge host ipvlan macvlan null overlay\n  Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog\n Swarm: inactive\n Runtimes: io.containerd.runc.v2 io.containerd.runtime.v1.linux runc\n Default Runtime: runc\n Init Binary: docker-init\n containerd version: 1.4.13~ds1-1~deb11u4\n runc version: 1.0.0~rc93+ds1-5+deb11u2\n init version:\n Security Options:\n  seccomp\n   Profile: default\n  cgroupns\n Kernel Version: 6.1.21-v8+\n Operating System: Debian GNU/Linux 11 (bullseye)\n OSType: linux\n Architecture: aarch64\n CPUs: 4\n Total Memory: 7.629GiB\n Name: pi4-8g\n ID: AT4S:WDKG:SCHA:D56T:SRNU:TJJB:ZEMH:YR67:6GRF:KLVC:B6MI:SVIE\n Docker Root Dir: /var/lib/docker\n Debug Mode: false\n Registry: https://index.docker.io/v1/\n Labels:\n Experimental: false\n Insecure Registries:\n  127.0.0.0/8\n Registry Mirrors:\n  https://docker.mirrors.ustc.edu.cn/\n Live Restore Enabled: false\n\nWARNING: No memory limit support\nWARNING: No swap limit support\nWARNING: Support for cgroup v2 is experimental\n```\n\n### 安装Home Assistant\n\n### Raspberry pi 3\n\n```bash\ndocker run -d \\\n  --name homeassistant \\\n  --privileged \\\n  --restart=unless-stopped \\\n  -e TZ=MY_TIME_ZONE \\\n  -v /PATH_TO_YOUR_CONFIG:/config \\\n  --network=host \\\n  ghcr.io/home-assistant/raspberrypi3-homeassistant:stable\n```\n\n### Raspberry pi 4\n\n```bash\ndocker run -d \\\n  --name homeassistant \\\n  --privileged \\\n  --restart=unless-stopped \\\n  -e TZ=MY_TIME_ZONE \\\n  -v /PATH_TO_YOUR_CONFIG:/config \\\n  --network=host \\\n  ghcr.io/home-assistant/raspberrypi4-homeassistant:stable\n```\n\n以上安装命令中，一定要将`/PATH_TO_YOUR_CONFIG`修改成指定的安装路径，例如`/home/pi/homeassistant`，如果忘记修改，配置文件就会保存到`/PATH_TO_YOUR_CONFIG`目录。\n\n安装成功后，打开浏览器访问`http://<host>:8123`，登录Home Assistant的Web界面。\n\n","slug":"安装Home_Assistant","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clqm4y39400006aeca8sa9qmy","content":"<h2 id=\"通过Docker的方式安装Home-Assistant\"><a href=\"#通过Docker的方式安装Home-Assistant\" class=\"headerlink\" title=\"通过Docker的方式安装Home Assistant\"></a>通过Docker的方式安装Home Assistant</h2><h3 id=\"安装Docker\"><a href=\"#安装Docker\" class=\"headerlink\" title=\"安装Docker\"></a>安装Docker</h3><p>1 更新树莓派的系统。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> update\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> upgrade<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>2 下载Docker安装脚本，然后执行脚本安装Docker。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -fsSL https://get.docker.com -o get-docker.sh\n<span class=\"token function\">sudo</span> <span class=\"token function\">sh</span> get-docker.sh --mirror Aliyun<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>需要注意的是，由于国内访问Docker官方的安装源很慢，因此可以添加参数<code>--mirror Aliyun</code>，将安装源更改为阿里云镜像，从而提高安装速度。</strong></p>\n<p>3 默认情况下，只有拥有管理员权限的账号才可以运行docker，如果登录的账号是普通用户，需要通过sudo来运行docker。或者，也可以将普通用户账号添加到docker用户组，这样该用户就可以直接运行docker的命令。</p>\n<p>以下命令可以将用户<code>pi</code>添加到docker用户组中。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">usermod</span> -aG <span class=\"token function\">docker</span> pi<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<span id=\"more\"></span>\n\n<p>4 使用命令<code>docker version</code>和<code>docker info</code>查看Docker的版本信息和运行状态。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">docker</span> version\n\nClient:\n Version:           <span class=\"token number\">20.10</span>.5+dfsg1\n API version:       <span class=\"token number\">1.41</span>\n Go version:        go1.15.15\n Git commit:        55c4c88\n Built:             Mon May <span class=\"token number\">30</span> <span class=\"token number\">18</span>:34:49 <span class=\"token number\">2022</span>\n OS/Arch:           linux/arm64\n Context:           default\n Experimental:      <span class=\"token boolean\">true</span>\n\nServer:\n Engine:\n  Version:          <span class=\"token number\">20.10</span>.5+dfsg1\n  API version:      <span class=\"token number\">1.41</span> <span class=\"token punctuation\">(</span>minimum version <span class=\"token number\">1.12</span><span class=\"token punctuation\">)</span>\n  Go version:       go1.15.15\n  Git commit:       363e9a8\n  Built:            Mon May <span class=\"token number\">30</span> <span class=\"token number\">18</span>:34:49 <span class=\"token number\">2022</span>\n  OS/Arch:          linux/arm64\n  Experimental:     <span class=\"token boolean\">false</span>\n containerd:\n  Version:          <span class=\"token number\">1.4</span>.13~ds1\n  GitCommit:        <span class=\"token number\">1.4</span>.13~ds1-1~deb11u4\n runc:\n  Version:          <span class=\"token number\">1.0</span>.0~rc93+ds1\n  GitCommit:        <span class=\"token number\">1.0</span>.0~rc93+ds1-5+deb11u2\n docker-init:\n  Version:          <span class=\"token number\">0.19</span>.0\n  GitCommit:\n\n<span class=\"token function\">docker</span> info<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">docker</span> info\n\nClient:\n Context:    default\n Debug Mode: <span class=\"token boolean\">false</span>\n Plugins:\n  buildx: Docker Buildx <span class=\"token punctuation\">(</span>Docker Inc., v0.10.4<span class=\"token punctuation\">)</span>\n  compose: Docker Compose <span class=\"token punctuation\">(</span>Docker Inc., v2.17.3<span class=\"token punctuation\">)</span>\n\nServer:\n Containers: <span class=\"token number\">1</span>\n  Running: <span class=\"token number\">1</span>\n  Paused: <span class=\"token number\">0</span>\n  Stopped: <span class=\"token number\">0</span>\n Images: <span class=\"token number\">1</span>\n Server Version: <span class=\"token number\">20.10</span>.5+dfsg1\n Storage Driver: overlay2\n  Backing Filesystem: extfs\n  Supports d_type: <span class=\"token boolean\">true</span>\n  Native Overlay Diff: <span class=\"token boolean\">true</span>\n Logging Driver: json-file\n Cgroup Driver: systemd\n Cgroup Version: <span class=\"token number\">2</span>\n Plugins:\n  Volume: <span class=\"token builtin class-name\">local</span>\n  Network: bridge <span class=\"token function\">host</span> ipvlan macvlan null overlay\n  Log: awslogs fluentd gcplogs gelf journald json-file <span class=\"token builtin class-name\">local</span> logentries splunk syslog\n Swarm: inactive\n Runtimes: io.containerd.runc.v2 io.containerd.runtime.v1.linux runc\n Default Runtime: runc\n Init Binary: docker-init\n containerd version: <span class=\"token number\">1.4</span>.13~ds1-1~deb11u4\n runc version: <span class=\"token number\">1.0</span>.0~rc93+ds1-5+deb11u2\n init version:\n Security Options:\n  seccomp\n   Profile: default\n  cgroupns\n Kernel Version: <span class=\"token number\">6.1</span>.21-v8+\n Operating System: Debian GNU/Linux <span class=\"token number\">11</span> <span class=\"token punctuation\">(</span>bullseye<span class=\"token punctuation\">)</span>\n OSType: linux\n Architecture: aarch64\n CPUs: <span class=\"token number\">4</span>\n Total Memory: <span class=\"token number\">7</span>.629GiB\n Name: pi4-8g\n ID: AT4S:WDKG:SCHA:D56T:SRNU:TJJB:ZEMH:YR67:6GRF:KLVC:B6MI:SVIE\n Docker Root Dir: /var/lib/docker\n Debug Mode: <span class=\"token boolean\">false</span>\n Registry: https://index.docker.io/v1/\n Labels:\n Experimental: <span class=\"token boolean\">false</span>\n Insecure Registries:\n  <span class=\"token number\">127.0</span>.0.0/8\n Registry Mirrors:\n  https://docker.mirrors.ustc.edu.cn/\n Live Restore Enabled: <span class=\"token boolean\">false</span>\n\nWARNING: No memory limit support\nWARNING: No swap limit support\nWARNING: Support <span class=\"token keyword\">for</span> cgroup v2 is experimental<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"安装Home-Assistant\"><a href=\"#安装Home-Assistant\" class=\"headerlink\" title=\"安装Home Assistant\"></a>安装Home Assistant</h3><h3 id=\"Raspberry-pi-3\"><a href=\"#Raspberry-pi-3\" class=\"headerlink\" title=\"Raspberry pi 3\"></a>Raspberry pi 3</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run -d <span class=\"token punctuation\">\\</span>\n  --name homeassistant <span class=\"token punctuation\">\\</span>\n  --privileged <span class=\"token punctuation\">\\</span>\n  --restart<span class=\"token operator\">=</span>unless-stopped <span class=\"token punctuation\">\\</span>\n  -e <span class=\"token assign-left variable\">TZ</span><span class=\"token operator\">=</span>MY_TIME_ZONE <span class=\"token punctuation\">\\</span>\n  -v /PATH_TO_YOUR_CONFIG:/config <span class=\"token punctuation\">\\</span>\n  --network<span class=\"token operator\">=</span>host <span class=\"token punctuation\">\\</span>\n  ghcr.io/home-assistant/raspberrypi3-homeassistant:stable<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Raspberry-pi-4\"><a href=\"#Raspberry-pi-4\" class=\"headerlink\" title=\"Raspberry pi 4\"></a>Raspberry pi 4</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run -d <span class=\"token punctuation\">\\</span>\n  --name homeassistant <span class=\"token punctuation\">\\</span>\n  --privileged <span class=\"token punctuation\">\\</span>\n  --restart<span class=\"token operator\">=</span>unless-stopped <span class=\"token punctuation\">\\</span>\n  -e <span class=\"token assign-left variable\">TZ</span><span class=\"token operator\">=</span>MY_TIME_ZONE <span class=\"token punctuation\">\\</span>\n  -v /PATH_TO_YOUR_CONFIG:/config <span class=\"token punctuation\">\\</span>\n  --network<span class=\"token operator\">=</span>host <span class=\"token punctuation\">\\</span>\n  ghcr.io/home-assistant/raspberrypi4-homeassistant:stable<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>以上安装命令中，一定要将<code>/PATH_TO_YOUR_CONFIG</code>修改成指定的安装路径，例如<code>/home/pi/homeassistant</code>，如果忘记修改，配置文件就会保存到<code>/PATH_TO_YOUR_CONFIG</code>目录。</p>\n<p>安装成功后，打开浏览器访问<code>http://&lt;host&gt;:8123</code>，登录Home Assistant的Web界面。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"通过Docker的方式安装Home-Assistant\"><a href=\"#通过Docker的方式安装Home-Assistant\" class=\"headerlink\" title=\"通过Docker的方式安装Home Assistant\"></a>通过Docker的方式安装Home Assistant</h2><h3 id=\"安装Docker\"><a href=\"#安装Docker\" class=\"headerlink\" title=\"安装Docker\"></a>安装Docker</h3><p>1 更新树莓派的系统。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> update\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> upgrade<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>2 下载Docker安装脚本，然后执行脚本安装Docker。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -fsSL https://get.docker.com -o get-docker.sh\n<span class=\"token function\">sudo</span> <span class=\"token function\">sh</span> get-docker.sh --mirror Aliyun<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>需要注意的是，由于国内访问Docker官方的安装源很慢，因此可以添加参数<code>--mirror Aliyun</code>，将安装源更改为阿里云镜像，从而提高安装速度。</strong></p>\n<p>3 默认情况下，只有拥有管理员权限的账号才可以运行docker，如果登录的账号是普通用户，需要通过sudo来运行docker。或者，也可以将普通用户账号添加到docker用户组，这样该用户就可以直接运行docker的命令。</p>\n<p>以下命令可以将用户<code>pi</code>添加到docker用户组中。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">usermod</span> -aG <span class=\"token function\">docker</span> pi<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>","more":"<p>4 使用命令<code>docker version</code>和<code>docker info</code>查看Docker的版本信息和运行状态。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">docker</span> version\n\nClient:\n Version:           <span class=\"token number\">20.10</span>.5+dfsg1\n API version:       <span class=\"token number\">1.41</span>\n Go version:        go1.15.15\n Git commit:        55c4c88\n Built:             Mon May <span class=\"token number\">30</span> <span class=\"token number\">18</span>:34:49 <span class=\"token number\">2022</span>\n OS/Arch:           linux/arm64\n Context:           default\n Experimental:      <span class=\"token boolean\">true</span>\n\nServer:\n Engine:\n  Version:          <span class=\"token number\">20.10</span>.5+dfsg1\n  API version:      <span class=\"token number\">1.41</span> <span class=\"token punctuation\">(</span>minimum version <span class=\"token number\">1.12</span><span class=\"token punctuation\">)</span>\n  Go version:       go1.15.15\n  Git commit:       363e9a8\n  Built:            Mon May <span class=\"token number\">30</span> <span class=\"token number\">18</span>:34:49 <span class=\"token number\">2022</span>\n  OS/Arch:          linux/arm64\n  Experimental:     <span class=\"token boolean\">false</span>\n containerd:\n  Version:          <span class=\"token number\">1.4</span>.13~ds1\n  GitCommit:        <span class=\"token number\">1.4</span>.13~ds1-1~deb11u4\n runc:\n  Version:          <span class=\"token number\">1.0</span>.0~rc93+ds1\n  GitCommit:        <span class=\"token number\">1.0</span>.0~rc93+ds1-5+deb11u2\n docker-init:\n  Version:          <span class=\"token number\">0.19</span>.0\n  GitCommit:\n\n<span class=\"token function\">docker</span> info<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">docker</span> info\n\nClient:\n Context:    default\n Debug Mode: <span class=\"token boolean\">false</span>\n Plugins:\n  buildx: Docker Buildx <span class=\"token punctuation\">(</span>Docker Inc., v0.10.4<span class=\"token punctuation\">)</span>\n  compose: Docker Compose <span class=\"token punctuation\">(</span>Docker Inc., v2.17.3<span class=\"token punctuation\">)</span>\n\nServer:\n Containers: <span class=\"token number\">1</span>\n  Running: <span class=\"token number\">1</span>\n  Paused: <span class=\"token number\">0</span>\n  Stopped: <span class=\"token number\">0</span>\n Images: <span class=\"token number\">1</span>\n Server Version: <span class=\"token number\">20.10</span>.5+dfsg1\n Storage Driver: overlay2\n  Backing Filesystem: extfs\n  Supports d_type: <span class=\"token boolean\">true</span>\n  Native Overlay Diff: <span class=\"token boolean\">true</span>\n Logging Driver: json-file\n Cgroup Driver: systemd\n Cgroup Version: <span class=\"token number\">2</span>\n Plugins:\n  Volume: <span class=\"token builtin class-name\">local</span>\n  Network: bridge <span class=\"token function\">host</span> ipvlan macvlan null overlay\n  Log: awslogs fluentd gcplogs gelf journald json-file <span class=\"token builtin class-name\">local</span> logentries splunk syslog\n Swarm: inactive\n Runtimes: io.containerd.runc.v2 io.containerd.runtime.v1.linux runc\n Default Runtime: runc\n Init Binary: docker-init\n containerd version: <span class=\"token number\">1.4</span>.13~ds1-1~deb11u4\n runc version: <span class=\"token number\">1.0</span>.0~rc93+ds1-5+deb11u2\n init version:\n Security Options:\n  seccomp\n   Profile: default\n  cgroupns\n Kernel Version: <span class=\"token number\">6.1</span>.21-v8+\n Operating System: Debian GNU/Linux <span class=\"token number\">11</span> <span class=\"token punctuation\">(</span>bullseye<span class=\"token punctuation\">)</span>\n OSType: linux\n Architecture: aarch64\n CPUs: <span class=\"token number\">4</span>\n Total Memory: <span class=\"token number\">7</span>.629GiB\n Name: pi4-8g\n ID: AT4S:WDKG:SCHA:D56T:SRNU:TJJB:ZEMH:YR67:6GRF:KLVC:B6MI:SVIE\n Docker Root Dir: /var/lib/docker\n Debug Mode: <span class=\"token boolean\">false</span>\n Registry: https://index.docker.io/v1/\n Labels:\n Experimental: <span class=\"token boolean\">false</span>\n Insecure Registries:\n  <span class=\"token number\">127.0</span>.0.0/8\n Registry Mirrors:\n  https://docker.mirrors.ustc.edu.cn/\n Live Restore Enabled: <span class=\"token boolean\">false</span>\n\nWARNING: No memory limit support\nWARNING: No swap limit support\nWARNING: Support <span class=\"token keyword\">for</span> cgroup v2 is experimental<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"安装Home-Assistant\"><a href=\"#安装Home-Assistant\" class=\"headerlink\" title=\"安装Home Assistant\"></a>安装Home Assistant</h3><h3 id=\"Raspberry-pi-3\"><a href=\"#Raspberry-pi-3\" class=\"headerlink\" title=\"Raspberry pi 3\"></a>Raspberry pi 3</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run -d <span class=\"token punctuation\">\\</span>\n  --name homeassistant <span class=\"token punctuation\">\\</span>\n  --privileged <span class=\"token punctuation\">\\</span>\n  --restart<span class=\"token operator\">=</span>unless-stopped <span class=\"token punctuation\">\\</span>\n  -e <span class=\"token assign-left variable\">TZ</span><span class=\"token operator\">=</span>MY_TIME_ZONE <span class=\"token punctuation\">\\</span>\n  -v /PATH_TO_YOUR_CONFIG:/config <span class=\"token punctuation\">\\</span>\n  --network<span class=\"token operator\">=</span>host <span class=\"token punctuation\">\\</span>\n  ghcr.io/home-assistant/raspberrypi3-homeassistant:stable<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Raspberry-pi-4\"><a href=\"#Raspberry-pi-4\" class=\"headerlink\" title=\"Raspberry pi 4\"></a>Raspberry pi 4</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run -d <span class=\"token punctuation\">\\</span>\n  --name homeassistant <span class=\"token punctuation\">\\</span>\n  --privileged <span class=\"token punctuation\">\\</span>\n  --restart<span class=\"token operator\">=</span>unless-stopped <span class=\"token punctuation\">\\</span>\n  -e <span class=\"token assign-left variable\">TZ</span><span class=\"token operator\">=</span>MY_TIME_ZONE <span class=\"token punctuation\">\\</span>\n  -v /PATH_TO_YOUR_CONFIG:/config <span class=\"token punctuation\">\\</span>\n  --network<span class=\"token operator\">=</span>host <span class=\"token punctuation\">\\</span>\n  ghcr.io/home-assistant/raspberrypi4-homeassistant:stable<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>以上安装命令中，一定要将<code>/PATH_TO_YOUR_CONFIG</code>修改成指定的安装路径，例如<code>/home/pi/homeassistant</code>，如果忘记修改，配置文件就会保存到<code>/PATH_TO_YOUR_CONFIG</code>目录。</p>\n<p>安装成功后，打开浏览器访问<code>http://&lt;host&gt;:8123</code>，登录Home Assistant的Web界面。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"clq21ttzh0000bqec4cxdc1p4","category_id":"clexvkk9v002r5i733hx3ddei","_id":"clq21ttzo0002bqecdkgu4r31"},{"post_id":"clqm4y39400006aeca8sa9qmy","category_id":"clqm4y39900016aechyap2hdo","_id":"clqm4y39b00036aecb9rc3zsb"}],"PostTag":[{"post_id":"clq21ttzh0000bqec4cxdc1p4","tag_id":"clexvkkak003m5i735twogr2k","_id":"clq21ttzn0001bqec3fomcx22"},{"post_id":"clqm4y39400006aeca8sa9qmy","tag_id":"clexvkk8s00205i735ub0g6ld","_id":"clqm4y39b00026aecduzc7evh"}],"Tag":[{"name":"pelican","_id":"clexvkk5700055i73d22102d1"},{"name":"hexo","_id":"clexvkk5m000a5i73bpjl055k"},{"name":"ios","_id":"clexvkk7100125i73233o2v38"},{"name":"ESP32","_id":"clexvkk7u001o5i736k0q76kf"},{"name":"home_assistant","_id":"clexvkk8s00205i735ub0g6ld"},{"name":"raspberrypi","_id":"clexvkka3002y5i731m4jhu9y"},{"name":"扫地机器人","_id":"clexvkka600325i73f0bv0qyc"},{"name":"python-basic","_id":"clexvkka900365i73e86yh5jh"},{"name":"python-web","_id":"clexvkkae003e5i730rv029hn"},{"name":"python-intermediate","_id":"clexvkkak003m5i735twogr2k"},{"name":"windows","_id":"clexvkkao003t5i734n6i5pol"},{"name":"广域网","_id":"clexvkkaq003w5i73hrxj8ehv"},{"name":"医案","_id":"clexvkkar003y5i734m9f4ed7"},{"name":"ifttt","_id":"clexxb8pa0002v673dxqj42a1"},{"name":"vpn","_id":"clexxb8q40005v67372yj3wtd"}]}}