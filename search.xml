<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>在树莓派上部署Hexo博客</title>
    <url>/2023/12/28/raspberrypi/zai-shu-mei-pai-shang-bu-shu-hexo-bo-ke/</url>
    <content><![CDATA[<p>本文主要介绍如何将Hexo博客部署在树莓派上，从而实现在本地局域网直接访问博客内容。由于博客的源码保存在本地PC，并已经同步到Github。因此，只需将Hexo生成的网页文件发布到树莓派的Nginx服务器。</p>
<h2 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h2><p>首先在树莓派上安装nginx服务器，用于发布博客网站。</p>
<p>获取并更新软件列表。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>安装 nginx服务器。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<span id="more"></span>
<p>查看nginx服务器的版本，确认已安装成功。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ nginx -v
nginx version: nginx/1.18.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>配置nginx服务器随机启动。</p>
<pre class="line-numbers language-none"><code class="language-none">sudo systemctl enable nginx.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>创建一个新的文件夹<code>/var/www/hexo</code>，用于存放博客的网页文件，并将该文件夹作为nginx服务器的根目录。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkdir</span> -p /var/www/hexo
<span class="token function">sudo</span> <span class="token function">chown</span> -R <span class="token environment constant">$USER</span><span class="token builtin class-name">:</span><span class="token environment constant">$USER</span> /var/www/hexo
<span class="token function">sudo</span> <span class="token function">chmod</span> -R <span class="token number">755</span> /var/www/hexo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>打开nginx的配置文件，将根目录设置为<code>/var/www/hexo</code>。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vi</span> /etc/nginx/sites-available/default<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>将配置文件中默认的根目录<code>root /var/www/html</code>用#号注释掉，并在下方添加新的根目录为<code>root /var/www/hexo</code>。</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text"># Default server configuration
#
server &#123;
	listen 80 default_server;
	listen [::]:80 default_server;

	# SSL configuration
	#
	# listen 443 ssl default_server;
	# listen [::]:443 ssl default_server;
	#
	# Note: You should disable gzip for SSL traffic.
	# See: https://bugs.debian.org/773332
	#
	# Read up on ssl_ciphers to ensure a secure configuration.
	# See: https://bugs.debian.org/765782
	#
	# Self signed certs generated by the ssl-cert package
	# Don't use them in a production server!
	#
	# include snippets/snakeoil.conf;

	#root /var/www/html;
	root /var/www/hexo;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>配置完成后，重启 nginx服务器。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">service</span> nginx restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="安装-git"><a href="#安装-git" class="headerlink" title="安装 git"></a>安装 git</h2><p>查看树莓派上是否已安装git，如果没有安装，可以执行以下命令。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>安装完成后，查看版本，确认已安装成功。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> --version
<span class="token function">git</span> version <span class="token number">2.30</span>.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="远程Git仓库"><a href="#远程Git仓库" class="headerlink" title="远程Git仓库"></a>远程Git仓库</h2><p>在树莓派上建立一个远程仓库，这样本地PC就可以将网页文件提交到该仓库。</p>
<p>创建一个新的文件夹，并在该文件夹下面建立一个新的Git仓库。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> /home/pi/myapps/git_repository
<span class="token builtin class-name">cd</span> /home/pi/myapps/git_repository
<span class="token function">git</span> init --bare myblog.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><strong>git init</strong> - 创建一个空的Git仓库或者重新初始化现有的仓库。<br><strong>–bare</strong> - 创建一个全新的Git仓库。<br><strong>myblog.git</strong> - 仓库的名称为myblog，并添加后缀.git。</p>
<p>然后在仓库 <code>myblog.git</code> 下创建一个钩子，将网页文件传送到nginx服务器的根目录下，即 <code>/var/www/hexo</code>下面：</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">#在仓库下创建一个新的钩子文件
sudo vi /home/pi/myblog.git/hooks/post-receive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>在文件中添加以下命令，然后保存文件。该命令中的<code>--work-tree</code>参数可以将目录<code>/var/www/hexo</code>映射到仓库中，本地提交的网页文件会自动存储到<code>/var/www/hexo</code>目录下。</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">#!/bin/bash
git --work-tree=/var/www/hexo --git-dir=/home/pi/myapps/git_repository/myblog.git checkout -f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>为文件<code>post-receive</code>添加可执行权限。</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">sudo chmod +x /var/repo/web_blog.git/hooks/post-receive<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="配置SSH公钥登录"><a href="#配置SSH公钥登录" class="headerlink" title="配置SSH公钥登录"></a>配置SSH公钥登录</h2><p>在本地 PC上生成公钥文件<code>id_rsa.pub</code>。</p>
<pre class="line-numbers language-none"><code class="language-none">$ ssh-keygen -t rsa -P &#39;&#39;
		
Generating public&#x2F;private rsa key pair.
Enter file in which to save the key (&#x2F;user&#x2F;.ssh&#x2F;id_rsa):
Your identification has been saved in &#x2F;user&#x2F;.ssh&#x2F;id_rsa.
Your public key has been saved in &#x2F;user&#x2F;.ssh&#x2F;id_rsa.pub.
The key fingerprint is:
3f:35:7c:d2:33:65:d6:69:7f:34:92:31:38:1d:c1:94 user@bogon
The key&#39;s randomart image is:
+--[ RSA 2048]----+
|            &#x3D;B&#x3D;&#x3D;B|
|           o E*o&#x3D;|
|            ... o|
|         . . .  .|
|        S + o    |
|         o o     |
|          +      |
|         . .     |
|                 |
+————————+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>本地PC的公钥上传到树莓派。</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">ssh-copy-id -i ~/.ssh/id_rsa.pub pi@pi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>以上命令会将本地PC的公钥写入到树莓派的<code>~/.ssh/authorized_keys</code>文件中。如果树莓派上不存在文件<code>authorized_keys</code>，<code>ssh-copy-id</code>会新建文件。</p>
<h2 id="配置本地Hexo"><a href="#配置本地Hexo" class="headerlink" title="配置本地Hexo"></a>配置本地Hexo</h2><p>打开Hexo的配置文件<code>_config.yml</code>，设置部署博客的方式。</p>
<p>type: git<br>repo: pi@pi:&#x2F;home&#x2F;pi&#x2F;myapps&#x2F;git_repository&#x2F;myblog<br>branch: main</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">deploy:
  - type: git
    repo: pi@pi:/home/pi/myapps/git_repository/myblog
    branch: main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>在本地PC执行命令<code>hexo g -d</code>后，本地生成的网页文件会自动部署到树莓派上。</p>
<pre class="line-numbers language-none"><code class="language-none">hexo g -d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      <categories>
        <category>RaspberryPi</category>
      </categories>
      <tags>
        <tag>#raspberrypi</tag>
        <tag>#hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>安装Home Assistant</title>
    <url>/2021/10/17/home-assistant/an-zhuang-home-assistant/</url>
    <content><![CDATA[<h2 id="通过Docker的方式安装Home-Assistant"><a href="#通过Docker的方式安装Home-Assistant" class="headerlink" title="通过Docker的方式安装Home Assistant"></a>通过Docker的方式安装Home Assistant</h2><h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><p>1 更新树莓派的系统。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update
<span class="token function">sudo</span> <span class="token function">apt-get</span> upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>2 下载Docker安装脚本，然后执行脚本安装Docker。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> -fsSL https://get.docker.com -o get-docker.sh
<span class="token function">sudo</span> <span class="token function">sh</span> get-docker.sh --mirror Aliyun<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><strong>需要注意的是，由于国内访问Docker官方的安装源很慢，因此可以添加参数<code>--mirror Aliyun</code>，将安装源更改为阿里云镜像，从而提高安装速度。</strong></p>
<span id="more"></span>

<p>3 默认情况下，只有拥有管理员权限的账号才可以运行docker，如果登录的账号是普通用户，需要通过sudo来运行docker。或者，也可以将普通用户账号添加到docker用户组，这样该用户就可以直接运行docker的命令。</p>
<p>以下命令可以将用户<code>pi</code>添加到docker用户组中。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">usermod</span> -aG <span class="token function">docker</span> pi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>


<p>4 使用命令<code>docker version</code>和<code>docker info</code>查看Docker的版本信息和运行状态。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> version

Client:
 Version:           <span class="token number">20.10</span>.5+dfsg1
 API version:       <span class="token number">1.41</span>
 Go version:        go1.15.15
 Git commit:        55c4c88
 Built:             Mon May <span class="token number">30</span> <span class="token number">18</span>:34:49 <span class="token number">2022</span>
 OS/Arch:           linux/arm64
 Context:           default
 Experimental:      <span class="token boolean">true</span>

Server:
 Engine:
  Version:          <span class="token number">20.10</span>.5+dfsg1
  API version:      <span class="token number">1.41</span> <span class="token punctuation">(</span>minimum version <span class="token number">1.12</span><span class="token punctuation">)</span>
  Go version:       go1.15.15
  Git commit:       363e9a8
  Built:            Mon May <span class="token number">30</span> <span class="token number">18</span>:34:49 <span class="token number">2022</span>
  OS/Arch:          linux/arm64
  Experimental:     <span class="token boolean">false</span>
 containerd:
  Version:          <span class="token number">1.4</span>.13~ds1
  GitCommit:        <span class="token number">1.4</span>.13~ds1-1~deb11u4
 runc:
  Version:          <span class="token number">1.0</span>.0~rc93+ds1
  GitCommit:        <span class="token number">1.0</span>.0~rc93+ds1-5+deb11u2
 docker-init:
  Version:          <span class="token number">0.19</span>.0
  GitCommit:

<span class="token function">docker</span> info<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> info

Client:
 Context:    default
 Debug Mode: <span class="token boolean">false</span>
 Plugins:
  buildx: Docker Buildx <span class="token punctuation">(</span>Docker Inc., v0.10.4<span class="token punctuation">)</span>
  compose: Docker Compose <span class="token punctuation">(</span>Docker Inc., v2.17.3<span class="token punctuation">)</span>

Server:
 Containers: <span class="token number">1</span>
  Running: <span class="token number">1</span>
  Paused: <span class="token number">0</span>
  Stopped: <span class="token number">0</span>
 Images: <span class="token number">1</span>
 Server Version: <span class="token number">20.10</span>.5+dfsg1
 Storage Driver: overlay2
  Backing Filesystem: extfs
  Supports d_type: <span class="token boolean">true</span>
  Native Overlay Diff: <span class="token boolean">true</span>
 Logging Driver: json-file
 Cgroup Driver: systemd
 Cgroup Version: <span class="token number">2</span>
 Plugins:
  Volume: <span class="token builtin class-name">local</span>
  Network: bridge <span class="token function">host</span> ipvlan macvlan null overlay
  Log: awslogs fluentd gcplogs gelf journald json-file <span class="token builtin class-name">local</span> logentries splunk syslog
 Swarm: inactive
 Runtimes: io.containerd.runc.v2 io.containerd.runtime.v1.linux runc
 Default Runtime: runc
 Init Binary: docker-init
 containerd version: <span class="token number">1.4</span>.13~ds1-1~deb11u4
 runc version: <span class="token number">1.0</span>.0~rc93+ds1-5+deb11u2
 init version:
 Security Options:
  seccomp
   Profile: default
  cgroupns
 Kernel Version: <span class="token number">6.1</span>.21-v8+
 Operating System: Debian GNU/Linux <span class="token number">11</span> <span class="token punctuation">(</span>bullseye<span class="token punctuation">)</span>
 OSType: linux
 Architecture: aarch64
 CPUs: <span class="token number">4</span>
 Total Memory: <span class="token number">7</span>.629GiB
 Name: pi4-8g
 ID: AT4S:WDKG:SCHA:D56T:SRNU:TJJB:ZEMH:YR67:6GRF:KLVC:B6MI:SVIE
 Docker Root Dir: /var/lib/docker
 Debug Mode: <span class="token boolean">false</span>
 Registry: https://index.docker.io/v1/
 Labels:
 Experimental: <span class="token boolean">false</span>
 Insecure Registries:
  <span class="token number">127.0</span>.0.0/8
 Registry Mirrors:
  https://docker.mirrors.ustc.edu.cn/
 Live Restore Enabled: <span class="token boolean">false</span>

WARNING: No memory limit support
WARNING: No swap limit support
WARNING: Support <span class="token keyword">for</span> cgroup v2 is experimental<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="安装Home-Assistant"><a href="#安装Home-Assistant" class="headerlink" title="安装Home Assistant"></a>安装Home Assistant</h3><h3 id="Raspberry-pi-3"><a href="#Raspberry-pi-3" class="headerlink" title="Raspberry pi 3"></a>Raspberry pi 3</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run -d <span class="token punctuation">\</span>
  --name homeassistant <span class="token punctuation">\</span>
  --privileged <span class="token punctuation">\</span>
  --restart<span class="token operator">=</span>unless-stopped <span class="token punctuation">\</span>
  -e <span class="token assign-left variable">TZ</span><span class="token operator">=</span>MY_TIME_ZONE <span class="token punctuation">\</span>
  -v /PATH_TO_YOUR_CONFIG:/config <span class="token punctuation">\</span>
  --network<span class="token operator">=</span>host <span class="token punctuation">\</span>
  ghcr.io/home-assistant/raspberrypi3-homeassistant:stable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Raspberry-pi-4"><a href="#Raspberry-pi-4" class="headerlink" title="Raspberry pi 4"></a>Raspberry pi 4</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run -d <span class="token punctuation">\</span>
  --name homeassistant <span class="token punctuation">\</span>
  --privileged <span class="token punctuation">\</span>
  --restart<span class="token operator">=</span>unless-stopped <span class="token punctuation">\</span>
  -e <span class="token assign-left variable">TZ</span><span class="token operator">=</span>MY_TIME_ZONE <span class="token punctuation">\</span>
  -v /PATH_TO_YOUR_CONFIG:/config <span class="token punctuation">\</span>
  --network<span class="token operator">=</span>host <span class="token punctuation">\</span>
  ghcr.io/home-assistant/raspberrypi4-homeassistant:stable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>以上安装命令中，一定要将<code>/PATH_TO_YOUR_CONFIG</code>修改成指定的安装路径，例如<code>/home/pi/homeassistant</code>，如果忘记修改，配置文件就会保存到<code>/PATH_TO_YOUR_CONFIG</code>目录。</p>
<p>安装成功后，打开浏览器访问<code>http://&lt;host&gt;:8123</code>，登录Home Assistant的Web界面。</p>
]]></content>
      <categories>
        <category>Home_Assistant</category>
      </categories>
      <tags>
        <tag>home_assistant</tag>
      </tags>
  </entry>
</search>
