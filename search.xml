<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>在树莓派上部署Hexo博客</title>
    <url>/2023/12/28/raspberrypi/zai-shu-mei-pai-shang-bu-shu-hexo-bo-ke/</url>
    <content><![CDATA[<p>本文主要介绍如何将Hexo博客部署在树莓派上，从而实现在本地局域网直接访问博客内容。由于博客的源码保存在本地PC，并已经同步到Github。因此，只需将Hexo生成的网页文件发布到树莓派的Nginx服务器。</p>
<h2 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h2><p>首先在树莓派上安装nginx服务器，用于发布博客网站。</p>
<p>获取并更新软件列表。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>

<p>安装 nginx服务器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nginx</span><br></pre></td></tr></table></figure>

<span id="more"></span>
<p>查看nginx服务器的版本，确认已安装成功。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nginx -v</span><br><span class="line">nginx version: nginx/1.18.0</span><br></pre></td></tr></table></figure>

<p>配置nginx服务器随机启动。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl enable nginx.service</span><br></pre></td></tr></table></figure>

<p>创建一个新的文件夹<code>/var/www/hexo</code>，用于存放博客的网页文件，并将该文件夹作为nginx服务器的根目录。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> -p /var/www/hexo</span><br><span class="line">sudo <span class="built_in">chown</span> -R <span class="variable">$USER</span>:<span class="variable">$USER</span> /var/www/hexo</span><br><span class="line">sudo <span class="built_in">chmod</span> -R 755 /var/www/hexo</span><br></pre></td></tr></table></figure>

<p>打开nginx的配置文件，将根目录设置为<code>/var/www/hexo</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure>

<p>将配置文件中默认的根目录<code>root /var/www/html</code>用#号注释掉，并在下方添加新的根目录为<code>root /var/www/hexo</code>。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># Default server configuration</span><br><span class="line">#</span><br><span class="line">server &#123;</span><br><span class="line">	listen 80 default_server;</span><br><span class="line">	listen [::]:80 default_server;</span><br><span class="line"></span><br><span class="line">	# SSL configuration</span><br><span class="line">	#</span><br><span class="line">	# listen 443 ssl default_server;</span><br><span class="line">	# listen [::]:443 ssl default_server;</span><br><span class="line">	#</span><br><span class="line">	# Note: You should disable gzip for SSL traffic.</span><br><span class="line">	# See: https://bugs.debian.org/773332</span><br><span class="line">	#</span><br><span class="line">	# Read up on ssl_ciphers to ensure a secure configuration.</span><br><span class="line">	# See: https://bugs.debian.org/765782</span><br><span class="line">	#</span><br><span class="line">	# Self signed certs generated by the ssl-cert package</span><br><span class="line">	# Don&#x27;t use them in a production server!</span><br><span class="line">	#</span><br><span class="line">	# include snippets/snakeoil.conf;</span><br><span class="line"></span><br><span class="line">	#root /var/www/html;</span><br><span class="line">	root /var/www/hexo;</span><br></pre></td></tr></table></figure>

<p>配置完成后，重启 nginx服务器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service nginx restart</span><br></pre></td></tr></table></figure>

<h2 id="安装-git"><a href="#安装-git" class="headerlink" title="安装 git"></a>安装 git</h2><p>查看树莓派上是否已安装git，如果没有安装，可以执行以下命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure>

<p>安装完成后，查看版本，确认已安装成功。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git --version</span><br><span class="line">git version 2.30.2</span><br></pre></td></tr></table></figure>

<h2 id="远程Git仓库"><a href="#远程Git仓库" class="headerlink" title="远程Git仓库"></a>远程Git仓库</h2><p>在树莓派上建立一个远程仓库，这样本地PC就可以将网页文件提交到该仓库。</p>
<p>创建一个新的文件夹，并在该文件夹下面建立一个新的Git仓库。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /home/pi/myapps/git_repository</span><br><span class="line"><span class="built_in">cd</span> /home/pi/myapps/git_repository</span><br><span class="line">git init --bare myblog.git</span><br></pre></td></tr></table></figure>

<p><strong>git init</strong> - 创建一个空的Git仓库或者重新初始化现有的仓库。<br><strong>–bare</strong> - 创建一个全新的Git仓库。<br><strong>myblog.git</strong> - 仓库的名称为myblog，并添加后缀.git。</p>
<p>然后在仓库 <code>myblog.git</code> 下创建一个钩子，将网页文件传送到nginx服务器的根目录下，即 <code>/var/www/hexo</code>下面：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">#在仓库下创建一个新的钩子文件</span><br><span class="line">sudo vi /home/pi/myblog.git/hooks/post-receive</span><br></pre></td></tr></table></figure>

<p>在文件中添加以下命令，然后保存文件。该命令中的<code>--work-tree</code>参数可以将目录<code>/var/www/hexo</code>映射到仓库中，本地提交的网页文件会自动存储到<code>/var/www/hexo</code>目录下。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">git --work-tree=/var/www/hexo --git-dir=/home/pi/myapps/git_repository/myblog.git checkout -f</span><br></pre></td></tr></table></figure>

<p>为文件<code>post-receive</code>添加可执行权限。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">sudo chmod +x /var/repo/web_blog.git/hooks/post-receive</span><br></pre></td></tr></table></figure>

<h2 id="配置SSH公钥登录"><a href="#配置SSH公钥登录" class="headerlink" title="配置SSH公钥登录"></a>配置SSH公钥登录</h2><p>在本地 PC上生成公钥文件<code>id_rsa.pub</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -P &#x27;&#x27;</span><br><span class="line">		</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/user/.ssh/id_rsa):</span><br><span class="line">Your identification has been saved in /user/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /user/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">3f:35:7c:d2:33:65:d6:69:7f:34:92:31:38:1d:c1:94 user@bogon</span><br><span class="line">The key&#x27;s randomart image is:</span><br><span class="line">+--[ RSA 2048]----+</span><br><span class="line">|            =B==B|</span><br><span class="line">|           o E*o=|</span><br><span class="line">|            ... o|</span><br><span class="line">|         . . .  .|</span><br><span class="line">|        S + o    |</span><br><span class="line">|         o o     |</span><br><span class="line">|          +      |</span><br><span class="line">|         . .     |</span><br><span class="line">|                 |</span><br><span class="line">+————————+</span><br></pre></td></tr></table></figure>

<p>本地PC的公钥上传到树莓派。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub pi@pi</span><br></pre></td></tr></table></figure>

<p>以上命令会将本地PC的公钥写入到树莓派的<code>~/.ssh/authorized_keys</code>文件中。如果树莓派上不存在文件<code>authorized_keys</code>，<code>ssh-copy-id</code>会新建文件。</p>
<h2 id="配置本地Hexo"><a href="#配置本地Hexo" class="headerlink" title="配置本地Hexo"></a>配置本地Hexo</h2><p>打开Hexo的配置文件<code>_config.yml</code>，设置部署博客的方式。</p>
<p>type: git<br>repo: pi@pi:&#x2F;home&#x2F;pi&#x2F;myapps&#x2F;git_repository&#x2F;myblog<br>branch: main</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  - type: git</span><br><span class="line">    repo: pi@pi:/home/pi/myapps/git_repository/myblog</span><br><span class="line">    branch: main</span><br></pre></td></tr></table></figure>

<p>在本地PC执行命令<code>hexo g -d</code>后，本地生成的网页文件会自动部署到树莓派上。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>RaspberryPi</category>
      </categories>
      <tags>
        <tag>#raspberrypi</tag>
        <tag>#hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Home Assistant配置HTTPS</title>
    <url>/2021/10/19/home-assistant/home-assistant-https/</url>
    <content><![CDATA[<p>默认情况下，Home Assistant安装完成后，使用HTTP访问。如果在内网使用，HTTP相对还比较安全。但是，为了能让手机在外网访问HA网关，需要将其发布到外网（Internet）。因此，首先必须要配置HTTPS，确保数据传输的安全性。</p>
<p>为了节约成本，可以使用自签的SSL证书。或者，也可以选用官方推荐的免费TLS&#x2F;SSL证书服务：<a href="https://www.home-assistant.io/docs/ecosystem/certificates/lets_encrypt/">Let’s Encrypt</a>和<a href="https://www.home-assistant.io/integrations/duckdns/">Duck DNS integrating Let’s Encrypt</a>。</p>
<h2 id="制作自签的证书"><a href="#制作自签的证书" class="headerlink" title="制作自签的证书"></a>制作自签的证书</h2><p>证书的制作过程都是在树莓派上使用<code>openssl</code>完成。</p>
<p>首先创建目录<code>certs</code>，并进入该目录：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir certs</span><br><span class="line">cd certs</span><br></pre></td></tr></table></figure>

<h3 id="制作根证书"><a href="#制作根证书" class="headerlink" title="制作根证书"></a>制作根证书</h3><p>首先，需要创建根证书密钥，该密钥用于为证书签名。安全起见，该密钥不能泄露给其他人：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl genrsa -des3 -out rootCA.key 4096</span><br></pre></td></tr></table></figure>

<p><strong>该命令生成的Key默认使用密码保护，如果要取消密码保护，只需要移除选项-des3。</strong></p>
<p>然后用根证书密钥制作根证书：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl req -x509 -new -nodes -key rootCA.key -sha256 -days 3650 -out rootCA.pem</span><br></pre></td></tr></table></figure>

<p>如果需要使用苹果设备**macOS vs 10.15 &#x2F; iOS 13 (or above)**，请使用以下命令制作根证书，区别是根证书的有效期只有 825 天：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl req -x509 -new -nodes -key rootCA.key -sha256 -days 825 -out rootCA.pem</span><br></pre></td></tr></table></figure>

<h3 id="制作服务器证书"><a href="#制作服务器证书" class="headerlink" title="制作服务器证书"></a>制作服务器证书</h3><p>请根据以下步骤，制作Home Assistant服务器的证书。</p>
<p>创建<code>rootCA.csr.cnf</code>文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">touch rootCA.csr.cnf</span><br><span class="line">vi rootCA.csr.cnf</span><br></pre></td></tr></table></figure>

<p>将以下内容复制-粘贴到文件<code>rootCA.csr.cnf</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># rootCA.csr.cnf</span><br><span class="line">[req]</span><br><span class="line">default_bits = 2048</span><br><span class="line">prompt = no</span><br><span class="line">default_md = sha256</span><br><span class="line">distinguished_name = dn</span><br><span class="line">             </span><br><span class="line">[dn]</span><br><span class="line">C=CN</span><br><span class="line">ST=Shanghai</span><br><span class="line">L=Shanghai</span><br><span class="line">O=HA</span><br><span class="line">OU=HAU</span><br><span class="line">emailAddress=admin@ha.com</span><br><span class="line">CN = ivpn.asuscomm.com   </span><br></pre></td></tr></table></figure>

<p>创建<code>v3.ext</code>文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">touch v3.ext</span><br><span class="line">vi v3.ext</span><br></pre></td></tr></table></figure>

<p>将以下内容复制-粘贴到文件<code>v3.ext</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># v3.ext</span><br><span class="line">authorityKeyIdentifier=keyid,issuer</span><br><span class="line">basicConstraints=CA:FALSE</span><br><span class="line">keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment</span><br><span class="line">subjectAltName = @alt_names</span><br><span class="line">extendedKeyUsage=serverAuth</span><br><span class="line">                </span><br><span class="line">[alt_names]</span><br><span class="line">DNS.1 = ivpn.asuscomm.com</span><br><span class="line">IP.1 = 192.168.1.65</span><br></pre></td></tr></table></figure>

<p>创建证书密钥<code>hassio.csr</code>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl req -new -sha256 -nodes -out hassio.csr -newkey rsa:2048 -keyout hassio.key -config &lt;( <span class="built_in">cat</span> rootCA.csr.cnf )</span><br></pre></td></tr></table></figure>

<p>如果在Windows平台上运行该命令，需要注意-config参数后面rootCA.csr.cnf文件的路径地址。请参考以下例子：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl req -new -sha256 -nodes -out hassio.csr -newkey rsa:2048 -keyout hassio.key -config <span class="string">&quot;C:\Program Files\Git\usr\bin\rootCA.csr.cnf&quot;</span></span><br></pre></td></tr></table></figure>

<p>创建证书<code>hassio.csr</code>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl x509 -req -<span class="keyword">in</span> hassio.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out hassio.crt -days 3650 -sha256 -extfile v3.ext</span><br></pre></td></tr></table></figure>

<p>如果需要使用苹果设备**macOS vs 10.15 &#x2F; iOS 13 (or above)**，请使用以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl x509 -req -<span class="keyword">in</span> hassio.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out hassio.crt -days 825 -sha256 -extfile v3.ext</span><br></pre></td></tr></table></figure>

<h2 id="配置Home-Assistant"><a href="#配置Home-Assistant" class="headerlink" title="配置Home Assistant"></a>配置Home Assistant</h2><p>将服务器证书和私钥重新命名为.pem格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rename hassio.crt fullchain.pem</span><br><span class="line">rename hassio.key privkey.pem</span><br></pre></td></tr></table></figure>

<p>将证书复制到<code>/PATH_TO_YOUR_CONFIG/ssl</code>目录：</p>
<p><strong>这里需要注意的是，由于采用了Docker方式安装HA，没有权限访问&#x2F;etc目录，所以，只能将证书复制到&#x2F;PATH_TO_YOUR_CONFIG&#x2F;ssl。</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /PATH_TO_YOUR_CONFIG/ssl</span><br><span class="line"><span class="built_in">cp</span> fullchain.pem /PATH_TO_YOUR_CONFIG/ssl/</span><br><span class="line"><span class="built_in">cp</span> privkey.pem /PATH_TO_YOUR_CONFIG/ssl/</span><br></pre></td></tr></table></figure>

<p>修改配置文件<code>configuration.yaml</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">http:</span>                                                                       </span><br><span class="line">	<span class="attr">ssl_certificate:</span> <span class="string">./ssl/fullchain.pem</span>                                     </span><br><span class="line">	<span class="attr">ssl_key:</span> <span class="string">./ssl/privkey.pem</span>  </span><br></pre></td></tr></table></figure>

<h2 id="将Home-Assistant发布到公网"><a href="#将Home-Assistant发布到公网" class="headerlink" title="将Home Assistant发布到公网"></a>将Home Assistant发布到公网</h2><p>由于本地网络没有公网IP地址，因此通过SSH Tunnel的方式，将Home Assistant网关映射到远端网络，并发布到公网上。</p>
<p>在HA网关上运行以下命令，该命令会将本地的8123端口映射到远端树莓派的10000端口。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">autossh -f -M 0 -NR 0.0.0.0:10000:localhost:8123 pi@ivpn.asuscomm.com -p 30100</span><br></pre></td></tr></table></figure>

<p>然后，创建计划任务，每次HA网关重启后，会自动执行以上命令。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br><span class="line">@reboot autossh -f -M 0 -NR 0.0.0.0:10000:localhost:8123 pi@ivpn.asuscomm.com -p 30100 &amp;</span><br></pre></td></tr></table></figure>

<p>在远端路由器上，选择<strong>外部网络(WAN) - 端口转发 - 自定义设置</strong> ，添加端口转发的条目。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">服务名称：Home-Assistant</span><br><span class="line">通信协议：TCP</span><br><span class="line">外部端口：10000</span><br><span class="line">内部端口：10000</span><br><span class="line">本地IP地址：192.168.100.100</span><br></pre></td></tr></table></figure>

<h2 id="iOS如何安装根证书"><a href="#iOS如何安装根证书" class="headerlink" title="iOS如何安装根证书"></a>iOS如何安装根证书</h2><p>点击<code>rootCA.pem</code>文件，安装根证书。</p>
<p><img src="/2021/10/19/home-assistant/home-assistant-https/20211019_001515000_iOS.png"></p>
<p>打开<strong>设置</strong>应用，找到<strong>已下载描述文件</strong>，点击<strong>安装</strong>，安装过程中需要输入手机密码。</p>
<p><img src="/2021/10/19/home-assistant/home-assistant-https/20211019_001547000_iOS.png"></p>
<p>安装完成后，需要在<strong>设置 - 通用 - 关于本机 - 证书信任设置</strong>中，启用安装的根证书。</p>
<p><img src="/2021/10/19/home-assistant/home-assistant-https/20211019_001714000_iOS.png"></p>
<h2 id="Android如何安装根证书"><a href="#Android如何安装根证书" class="headerlink" title="Android如何安装根证书"></a>Android如何安装根证书</h2><p>重新命名<code>rootCA.pem</code>文件为<code>rootCA.crt</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rename rootCA.pem rootCA.crt</span><br></pre></td></tr></table></figure>

<p>在Android设备上点击安装<code>rootCA.crt</code>文件。</p>
<h2 id="Mac如何安装根证书"><a href="#Mac如何安装根证书" class="headerlink" title="Mac如何安装根证书"></a>Mac如何安装根证书</h2><p>打开终端工具，输入以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">CERT=&quot;/path/to/my/cert/my-root.crt&quot;</span><br><span class="line">sudo security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain $CERT</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Home_Assistant</category>
      </categories>
      <tags>
        <tag>home_assistant</tag>
      </tags>
  </entry>
</search>
