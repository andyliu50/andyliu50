<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Pelican小贴士</title>
    <url>/2021/09/20/blog/pelican-xiao-tie-shi/</url>
    <content><![CDATA[<h2 id="如何修改每篇博文的作者、分类、日期等信息"><a href="#如何修改每篇博文的作者、分类、日期等信息" class="headerlink" title="如何修改每篇博文的作者、分类、日期等信息"></a>如何修改每篇博文的作者、分类、日期等信息</h2><p>修改文件<code>article_infos.html</code>，文件位置：<code>~/blog/venv/lib/python3.7/site-packages/pelican/themes/notmyidea/templates</code></p>
<p>以下内容中，已将<code>author</code>和<code>category</code>的相关代码注释，所以博文中将不会出现作者和分类的信息。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post-info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>abbr</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>published<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123; article.date.isoformat() &#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                日期: &#123;&#123; article.locale_date &#125;&#125;
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>abbr</span><span class="token punctuation">></span></span>
        &#123;% if article.modified %&#125;
        <span class="token comment">&lt;!--            &lt;br /> --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>abbr</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modified<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123; article.modified.isoformat() &#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                更新: &#123;&#123; article.locale_modified &#125;&#125;
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>abbr</span><span class="token punctuation">></span></span>
        &#123;% endif %&#125;

<span class="token comment">&lt;!--        &#123;% if article.authors %&#125;
        &lt;address class="vcard author">
                作者: &#123;% for author in article.authors %&#125;
                        &lt;a class="url fn" href="&#123;&#123; SITEURL &#125;&#125;/&#123;&#123; author.url &#125;&#125;">&#123;&#123; author &#125;&#125;&lt;/a>
                &#123;% endfor %&#125;
        &lt;/address>
        &#123;% endif %&#125;
        &lt;p>分类: &lt;a href="&#123;&#123; SITEURL &#125;&#125;/&#123;&#123; article.category.url &#125;&#125;">&#123;&#123; article.category &#125;&#125;&lt;/a>.&lt;/p> --></span>
&#123;% include 'taglist.html' %&#125;
&#123;% import 'translations.html' as translations with context %&#125;
&#123;&#123; translations.translations_for(article) &#125;&#125;
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- /.post-info --></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>修改文件<code>main.css</code>，找到<code>.post-info</code>，修改以下内容后，字体大小和颜色，以及位置都会发生变化。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.post-info</span> <span class="token punctuation">&#123;</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span>0.5em<span class="token punctuation">;</span>
    <span class="token property">color</span><span class="token punctuation">:</span>#808080<span class="token punctuation">;</span>
    <span class="token property">float</span><span class="token punctuation">:</span>top<span class="token punctuation">;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>
    <span class="token property">padding</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<span id="more"></span>

<hr>
<h2 id="如何修改或者删除网页的脚注-Footer"><a href="#如何修改或者删除网页的脚注-Footer" class="headerlink" title="如何修改或者删除网页的脚注(Footer)"></a>如何修改或者删除网页的脚注(Footer)</h2><p>修改文件<code>base.html</code>，如果要删除脚注，只需要注释(<code>&lt;!-- ... --&gt;</code>)以下代码。</p>
<pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;!-- &lt;footer id&#x3D;&quot;contentinfo&quot; class&#x3D;&quot;body&quot;&gt;
                &lt;address id&#x3D;&quot;about&quot; class&#x3D;&quot;vcard body&quot;&gt;
                Proudly powered by &lt;a href&#x3D;&quot;https:&#x2F;&#x2F;getpelican.com&#x2F;&quot;&gt;Pelican&lt;&#x2F;a&gt;, which takes great advantage of &lt;a href&#x3D;&quot;https:&#x2F;&#x2F;www.python.org&#x2F;&quot;&gt;Python&lt;&#x2F;a&gt;.
                &lt;&#x2F;address&gt;

                &lt;p&gt;The theme is by &lt;a href&#x3D;&quot;https:&#x2F;&#x2F;www.smashingmagazine.com&#x2F;2009&#x2F;08&#x2F;designing-a-html-5-layout-from-scratch&#x2F;&quot;&gt;Smashing Magazine&lt;&#x2F;a&gt;, thanks!&lt;&#x2F;p&gt;
        &lt;&#x2F;footer&gt; --&gt; &lt;!-- &#x2F;#contentinfo --&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<hr>
<h2 id="如何修改导航栏的颜色和超链接的文字颜色"><a href="#如何修改导航栏的颜色和超链接的文字颜色" class="headerlink" title="如何修改导航栏的颜色和超链接的文字颜色"></a>如何修改导航栏的颜色和超链接的文字颜色</h2><p>将导航栏的颜色修改为蓝色，可以修改<code>main.css</code>文件，找到<code>#banner nav</code>，然后将<code>background</code>设置为<code>#5faee3</code>。</p>
<pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">#banner nav &#123;
                background: #5faee3;
                font-size: 1.143em;
                height: 40px;
                ...
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>将超链接文字的颜色修改为蓝色，可以修改<code>main.css</code>文件，找到<code>a:link, a:visited</code>，然后将<code>color</code>设置为<code>#5faee3</code>。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">a:link, a:visited</span> <span class="token punctuation">&#123;</span>
        <span class="token property">color</span><span class="token punctuation">:</span> #5faee3<span class="token punctuation">;</span>
        <span class="token property">padding</span><span class="token punctuation">:</span> 0 1px<span class="token punctuation">;</span>
        <span class="token property">text-decoration</span><span class="token punctuation">:</span> underline<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="如何让图片自动适应页面的宽度"><a href="#如何让图片自动适应页面的宽度" class="headerlink" title="如何让图片自动适应页面的宽度"></a>如何让图片自动适应页面的宽度</h2><p>以前，每次用手机拍摄的高分辨率图片插入博文后，图片都会以原始大小的长宽显示，导致无法在网页正常显示图片。</p>
<p>通过修改主题的<code>main.css</code>文件，并增加以下内容后，可以解决该问题。该方案使用的技术仍然是CSS响应式设计。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">img</span> <span class="token punctuation">&#123;</span>
    <span class="token property">max-width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>[参考资料]</strong></p>
<p><a href="https://www.w3school.com.cn/css/css_rwd_images.asp">响应式网页设计 - 图像 (w3school.com.cn)</a></p>
<hr>
<h2 id="如何适应手机的屏幕"><a href="#如何适应手机的屏幕" class="headerlink" title="如何适应手机的屏幕"></a>如何适应手机的屏幕</h2><p>博客的默认主题notmyidear并不能够自动适应手机屏幕的大小，也就是自动根据屏幕调整字体和图片的大小。</p>
<p>通过查询相关资料，了解到了CSS响应式设计，即网页可以根据电脑、平板和手机的尺寸变化，自动调整大小、内容布局等。</p>
<p>首先，需要修改文件<code>base.html</code>，文件位置<code>~/blog/venv/lib/python3.7/site-packages/pelican/themes/notmyidea/templates</code>。在文件中，需要添加内容：<code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</code>。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        &#123;% block head %&#125;
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>generator<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Pelican<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        ...
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然后，修改主题的<code>main.css</code>文件，并增加以下内容后，移动设备的宽度为760px或以下，则会自动适配该CSS的定义。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/*
 For mobile devices
 ***********************/</span>

<span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>

  <span class="token selector">#content</span> <span class="token punctuation">&#123;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 86%<span class="token punctuation">;</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> 108%<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>									<span class="token selector">//博客首页
  #featured</span> <span class="token punctuation">&#123;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 86%<span class="token punctuation">;</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> 108%<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>									<span class="token selector">//博客背景
  #banner nav</span> <span class="token punctuation">&#123;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 95%<span class="token punctuation">;</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> 70%<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>									<span class="token selector">//导航条
  #extras</span> <span class="token punctuation">&#123;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 86%<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>								    <span class="token selector">//其它博客
  .body</span> <span class="token punctuation">&#123;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>									//单篇博客的内容
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>[参考资料]</strong></p>
<p><a href="https://www.w3school.com.cn/css/css_rwd_intro.asp">响应式网页设计 - 简介 (w3school.com.cn)</a></p>
<hr>
<h2 id="如何修改博客标题的字体类型"><a href="#如何修改博客标题的字体类型" class="headerlink" title="如何修改博客标题的字体类型"></a>如何修改博客标题的字体类型</h2><p>通过修改主题的<code>main.css</code>文件，设置需要的字体类型。例如，微软雅黑。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/blog/venv/lib/python3.7/site-packages/pelican/themes/notmyidea/static/css
<span class="token function">vi</span> main.css<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>打开main.css以后，查找关键字<strong>font-family</strong>，然后找到h1, h2, h3, h4, h5, h6的位置，添加**’Microsoft YaHei’**。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">h1, h2, h3, h4, h5, h6</span> <span class="token punctuation">&#123;</span>
        <span class="token property">font-weight</span><span class="token punctuation">:</span> 400<span class="token punctuation">;</span>
        <span class="token property">line-height</span><span class="token punctuation">:</span> 1.1<span class="token punctuation">;</span>
        <span class="token property">margin-bottom</span><span class="token punctuation">:</span> .8em<span class="token punctuation">;</span>
    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'Microsoft YaHei'</span><span class="token punctuation">,</span> <span class="token string">'Yanone Kaffeesatz'</span><span class="token punctuation">,</span> arial<span class="token punctuation">,</span> serif<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h2 id="如何为文章创建目录大纲"><a href="#如何为文章创建目录大纲" class="headerlink" title="如何为文章创建目录大纲"></a>如何为文章创建目录大纲</h2><p>修改Pelican配置文件<code>pelicanconf.py</code>，在配置文件中添加以下内容：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Support for Markdown Toc</span>
MARKDOWN <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token string">"extension_configs"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>
        <span class="token comment"># Needed for code syntax highlighting</span>
        <span class="token string">"markdown.extensions.codehilite"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">"css_class"</span><span class="token punctuation">:</span> <span class="token string">"highlight"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token string">"markdown.extensions.extra"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token string">"markdown.extensions.meta"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token comment"># This is for enabling the TOC generation</span>
        <span class="token string">"markdown.extensions.toc"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">"title"</span><span class="token punctuation">:</span> <span class="token string">"目录"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token string">"output_format"</span><span class="token punctuation">:</span> <span class="token string">"html5"</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>[参考资料]</p>
<ul>
<li><a href="https://cloudbytes.dev/articles/add-a-table-of-contents-using-markdown-in-pelican">Add a Table of Contents using Markdown in Pelican (cloudbytes.dev)</a></li>
</ul>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>pelican</tag>
      </tags>
  </entry>
  <entry>
    <title>个人博客 — GitHub Pages篇</title>
    <url>/2018/11/08/blog/ge-ren-bo-ke-github-pages-pian/</url>
    <content><![CDATA[<h1 id="什么是GitHub-Pages？"><a href="#什么是GitHub-Pages？" class="headerlink" title="什么是GitHub Pages？"></a>什么是GitHub Pages？</h1><p><a href="https://pages.github.com/">GitHub Pages</a>是一项免费的静态网站托管服务（不支持PHP, Ruby, or Python.），可用于托管个人、组织或者项目的网页。</p>
<p><strong>创建和发布网站的两种方式</strong>：  </p>
<ul>
<li>利用<a href="https://help.github.com/articles/adding-a-jekyll-theme-to-your-github-pages-site-with-the-jekyll-theme-chooser">Jekyll Theme Chooser</a>在线创建网站</li>
<li>在本地计算机创建网站，然后利用<a href="http://desktop.github.com/">GitHub Desktop</a> 或者 <a href="https://help.github.com/articles/adding-an-existing-project-to-github-using-the-command-line">the command line</a>将网站发布至GitHub Pages.</li>
</ul>
<p><strong>GitHub Pages网站的两种类型</strong>：</p>
<ul>
<li>项目网站 —— 该网站与项目关联， 并且网站文件存储于项目仓库的分支中</li>
<li>个人和组织网站 —— 该网站与项目无关，并且网站文件存储于专用的仓库中</li>
</ul>
<span id="more"></span>


<h1 id="如何将博客发布到GitHub-Pages"><a href="#如何将博客发布到GitHub-Pages" class="headerlink" title="如何将博客发布到GitHub Pages"></a>如何将博客发布到GitHub Pages</h1><ol>
<li><p>访问<a href="https://github.com/">GitHub</a>网站，注册一个新账号  </p>
</li>
<li><p>登陆GitHub网站，并创建新Repository。如果用户名是john，创建的Repository name必须为john.github.io</p>
</li>
</ol>
<p><img src="/2018/11/08/blog/ge-ren-bo-ke-github-pages-pian/09.png">  </p>
<ol start="3">
<li>修改Hexo的配置文件</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">deploy: 
	type: <span class="token function">git</span>              
	repo: https://github.com/john/john.github.io.git              
	branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="4">
<li>打开GitHub Bash, 设置GitHub的账户信息</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"GitHub用户名"</span>
<span class="token function">git</span> config --global user.email <span class="token string">"GitHub注册邮箱"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ol start="5">
<li>安装Git部署插件</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>


<ol start="6">
<li>运行以下三条命令，将网页内容发布到GitHub Pages</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean    // 清除缓存，并删除Public目录  
hexo g        // 创建Public目录，并在Public目录下生成静态的网页文件  
hexo d        // 将网页文件同步到GitHub，同步前需要输入GitHub用户名和密码通过身份认证<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ol start="7">
<li>登陆GitHub，在Repository的Settings页面中，可以看到博客的访问URL: <a href="https://john.github.io./">https://john.github.io。</a></li>
</ol>
<p><img src="/2018/11/08/blog/ge-ren-bo-ke-github-pages-pian/10.png">  </p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>个人博客 — Hexo多终端同步篇</title>
    <url>/2019/01/01/blog/ge-ren-bo-ke-hexo-duo-zhong-duan-tong-bu-pian/</url>
    <content><![CDATA[<p>如果需要在多台终端设备上发布博客，那么就需要将Hexo源代码发布到GitHub，并且在多台终端设备之间同步。</p>
<h1 id="配置远程仓库"><a href="#配置远程仓库" class="headerlink" title="配置远程仓库"></a>配置远程仓库</h1><ol>
<li><p>在GitHub上创建一个新的分支，例如，分支名称为Hexo<br><img src="/2019/01/01/blog/ge-ren-bo-ke-hexo-duo-zhong-duan-tong-bu-pian/21.png"></p>
</li>
<li><p>将Hexo分支设置成默认分支<br><img src="/2019/01/01/blog/ge-ren-bo-ke-hexo-duo-zhong-duan-tong-bu-pian/22.png"></p>
</li>
</ol>
<span id="more"></span>

<h1 id="配置本地仓库"><a href="#配置本地仓库" class="headerlink" title="配置本地仓库"></a>配置本地仓库</h1><ol>
<li><p>注意！！！如果使用git clone下载的三方主题，要把主题文件夹下面把.git文件夹删除掉，不然主题无法push到远程仓库，导致你发布的博客是一片空白</p>
</li>
<li><p>在初次安装Hexo的设备上，初始化博客所在目录</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>添加本地所有文件到仓库</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> -A<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>添加远程仓库<br> 我执行该命令后，提示fatal: remote origin already exists.可以忽略该报错。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote <span class="token function">add</span> origin git@github.com:yourname/yourname.github.io.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>添加本地仓库分支Hexo</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch hexo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>将本地Hexo分支的文件强制推送到远程Hexo分支</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push origin hexo -f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>切换到Hexo分支</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout -b hexo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>上传完成之后，就会拥有两个远程的分支：master和hexo，其中master是部署成博客的分支；hexo是我们可以clone到其他电脑或其他系统的hexo源文件的分支，而且我们已经将它设置成默认仓库。</p>
</li>
</ol>
<h1 id="多终端同步和发布博客"><a href="#多终端同步和发布博客" class="headerlink" title="多终端同步和发布博客"></a>多终端同步和发布博客</h1><ol>
<li>在其它终端设备上clone远程分支hexo到本地<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone -b hexo git@github.com:yourname/yourname.github.io.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>进入本地仓库执行hexo安装<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>先将远程分支同步到本地hexo分支<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> pull origin hexo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>编辑本地博客后，同步到远程hexo分支<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> <span class="token string">"blog files"</span>
<span class="token function">git</span> commit -m <span class="token string">"comments"</span>
<span class="token function">git</span> push origin hexo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li>发布博客<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo g -d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ol>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>个人博客 — Hexo安装篇</title>
    <url>/2018/11/07/blog/ge-ren-bo-ke-hexo-an-zhuang-pian/</url>
    <content><![CDATA[<h1 id="个人博客-—-Hexo安装篇"><a href="#个人博客-—-Hexo安装篇" class="headerlink" title="个人博客 — Hexo安装篇"></a>个人博客 — Hexo安装篇</h1><h2 id="什么是Hexo"><a href="#什么是Hexo" class="headerlink" title="什么是Hexo"></a>什么是Hexo</h2><p><a href="https://hexo.io/">Hexo</a>是一个快速、 简单和强大的博客框架。你可以用Markdown或者其它语言撰写博客内容，Hexo会自动生成静态文件。</p>
<h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p><strong>Node.js</strong> 是一个基于 Chrome V8 引擎的 服务器端的JavaScript 运行环境。首先，需要下载并安装<a href="https://nodejs.org/en/">Node.js</a>，然后再安装<code>Hexo</code>以及相关插件。</p>
<span id="more"></span>

<h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><ol>
<li>下载并安装<a href="https://nodejs.org/en/">Node.js</a>。     </li>
<li>下载并安装<a href="https://git-scm.com/download/win">Git</a>。</li>
</ol>
<h3 id="树莓派"><a href="#树莓派" class="headerlink" title="树莓派"></a>树莓派</h3><p>在树莓派上，先创建一个目录，用来存放<code>Node.js</code>文件，然后把下载的<code>Node.js</code>安装文件解压缩到目录<code>nodejs</code>下面。</p>
<p>下面以安装文件<code>node-v16.14.0-linux-armv7l.tar.xz</code>为例：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkdir</span> -p /usr/local/lib/nodejs
<span class="token function">sudo</span> <span class="token function">tar</span> -xJvf node-v16.14.0-linux-armv7l.tar.xz -C /usr/local/lib/nodejs <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>然后，在当前用户的配置文件<code>~/.profile</code>中，设置<code>Node.js</code>的环境变量：</p>
<pre class="line-numbers language-profile" data-language="profile"><code class="language-profile">export PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;nodejs&#x2F;node-v16.14.0-linux-armv7l&#x2F;bin:$PATH<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>刷新配置文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">.</span> ~/.profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>完成以上步骤后，<code>Node.js</code>已经安装成功。</p>
<p>通过以下命令，可以查看<code>node</code>, <code>npm</code>和<code>npx</code>的版本。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">node</span> -v
v16.14.0

$ <span class="token function">npm</span> -v
<span class="token number">8.3</span>.1

$ npx -v
<span class="token number">8.3</span>.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>通过修改配置文件<code>~/.profile</code>设置<code>Node.js</code>的方式，只能让当前用户能够使用最新版的node, npm和npx（其它用户，如root等无法使用新版<code>Node.js</code>）。而且在某些情况下，例如用crontab配置计划任务，或者将脚本配置为systemd服务的时候，仍然会使用旧版的<code>Node.js</code>。</p>
<p>为了解决以上问题，可以删除或者重命名<code>/usr/bin/</code>目录下的<code>node</code>，<code>npm</code>和<code>npx</code>，然后为新版的<code>Node.js</code>创建软链接：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mv</span> /usr/bin/node /usr/bin/node.bak
<span class="token function">sudo</span> <span class="token function">mv</span> /usr/bin/npm /usr/bin/npm.bak
<span class="token function">sudo</span> <span class="token function">mv</span> /usr/bin/npx /usr/bin/npx.bak
<span class="token function">sudo</span> <span class="token function">ln</span> -s /usr/local/lib/nodejs/node-v16.14.0-linux-armv7l/bin/node /usr/bin/node
<span class="token function">sudo</span> <span class="token function">ln</span> -s /usr/local/lib/nodejs/node-v16.14.0-linux-armv7l/bin/npm /usr/bin/npm
<span class="token function">sudo</span> <span class="token function">ln</span> -s /usr/local/lib/nodejs/node-v16.14.0-linux-armv7l/bin/npx /usr/bin/npx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>在命令行中，运行以下命令，安装<code>Hexo</code>：</p>
<pre class="line-numbers language-Command" data-language="Command"><code class="language-Command">npm install -g hexo-cli <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>验证<code>Hexo</code>安装成功。输入以下命令，可以看到<code>Hexo</code>的版本信息。</p>
<pre class="line-numbers language-Command" data-language="Command"><code class="language-Command">[Computer]:&gt; hexo -v
INFO  Validating config
hexo: 6.0.0
hexo-cli: 4.3.0
os: linux 5.4.51-v7l+ Raspbian GNU&#x2F;Linux 10 (buster) 10 (buster)
node: 16.14.0
v8: 9.4.146.24-node.20
uv: 1.43.0
zlib: 1.2.11
brotli: 1.0.9
ares: 1.18.1
modules: 93
nghttp2: 1.45.1
napi: 8
llhttp: 6.0.4
openssl: 1.1.1m+quic
cldr: 40.0
icu: 70.1
tz: 2021a3
unicode: 14.0
ngtcp2: 0.1.0-DEV
nghttp3: 0.1.0-DEV<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="安装Hexo插件"><a href="#安装Hexo插件" class="headerlink" title="安装Hexo插件"></a>安装Hexo插件</h2><p>如果需要将博客部署到<code>Github Page</code>，还需要安装插件<code>hexo-deployer-git</code>：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>插件hexo-permalink-pinyin可以将博文链接中的中文字符转换为拼音：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i hexo-permalink-pinyin --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="配置Hexo"><a href="#配置Hexo" class="headerlink" title="配置Hexo"></a>配置Hexo</h2><p>创建目录<code>blog</code>，并完成初始化：</p>
<pre class="line-numbers language-Command" data-language="Command"><code class="language-Command">[Computer]:&gt; mkdir blog
[Computer]:&gt; hexo init blog
INFO  Cloning hexo-starter https:&#x2F;&#x2F;github.com&#x2F;hexojs&#x2F;hexo-starter.git
INFO  Install dependencies
INFO  Start blogging with Hexo!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>设置语言， 用记事本打开<code>_config.yml</code>， 设置<code>language</code>参数：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">language</span><span class="token punctuation">:</span> zh<span class="token punctuation">-</span>CN<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>修改主题：</p>
<pre class="line-numbers language-Command" data-language="Command"><code class="language-Command">git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next themes&#x2F;next  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p> 用记事本打开<code>_config.yml</code>， 设置<code>theme</code>参数。</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">theme</span><span class="token punctuation">:</span> next  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="运行和访问"><a href="#运行和访问" class="headerlink" title="运行和访问"></a>运行和访问</h2><p>在命令行窗口中，运行命令:</p>
<pre class="line-numbers language-Command" data-language="Command"><code class="language-Command">[Computer]:&gt; hexo s
INFO  Validating config
INFO  Start processing
INFO  Hexo is running at http:&#x2F;&#x2F;localhost:4000&#x2F; . Press Ctrl+C to stop. <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p> 打开浏览器，输入URL: <a href="http://localhost:4000/">http://localhost:4000</a><br> <img src="/2018/11/07/blog/ge-ren-bo-ke-hexo-an-zhuang-pian/08.png"></p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>个人博客 — Hexo标签和分类篇</title>
    <url>/2018/11/09/blog/ge-ren-bo-ke-hexo-biao-qian-he-fen-lei-pian/</url>
    <content><![CDATA[<h1 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h1><h2 id="新建标签页面"><a href="#新建标签页面" class="headerlink" title="新建标签页面"></a>新建标签页面</h2><ol>
<li>在站点目录下，打开Git Bash命令窗口</li>
<li>输入以下命令，新建标签页面，该命令将在.\source\tags目录下创建文件index.md  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page tags<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ol>
<h2 id="设置页面类型"><a href="#设置页面类型" class="headerlink" title="设置页面类型"></a>设置页面类型</h2><ol>
<li>访问目录.\source\tags，并用记事本打开文件index.md</li>
<li>添加 type: “tags”, 将页面类型设置为tags<pre class="line-numbers language-none"><code class="language-none">---
title: 标签
date: 2018-11-08 12:02:31
type: &quot;tags&quot;
---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<span id="more"></span></li>
</ol>
<h2 id="修改菜单"><a href="#修改菜单" class="headerlink" title="修改菜单"></a>修改菜单</h2><ol>
<li>打开Next配置文件_config.yml</li>
<li>查找”Menu settings”，删除tags设置所在的#号<pre class="line-numbers language-none"><code class="language-none">menu:

	home: &#x2F;
	tags: &#x2F;tags<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>启用Tags以后，首页会显示“标签”的选项</li>
</ol>
<h2 id="为新建的博文添加标签"><a href="#为新建的博文添加标签" class="headerlink" title="为新建的博文添加标签"></a>为新建的博文添加标签</h2><ol>
<li>以下示例为博文添加了两个标签: Blog 和 Hexo <pre class="line-numbers language-none"><code class="language-none">---
title: 个人博客 —— Hexo标签和分类篇
date: 2018-11-09 13:16:18
tags:
- Blog
- Hexo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1></li>
</ol>
<h2 id="新建分类页面"><a href="#新建分类页面" class="headerlink" title="新建分类页面"></a>新建分类页面</h2><ol>
<li><p>在站点目录下，打开Git Bash命令窗口</p>
</li>
<li><p>输入以下命令，新建标签页面，该命令将在.\source\categories目录下创建文件index.md  </p>
<pre class="line-numbers language-none"><code class="language-none">hexo new page categories<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="设置页面类型-1"><a href="#设置页面类型-1" class="headerlink" title="设置页面类型"></a>设置页面类型</h2></li>
<li><p>访问目录.\source\categories，并用记事本打开文件index.md</p>
</li>
<li><p>添加 type: “categories”, 将页面类型设置为categories</p>
<pre class="line-numbers language-none"><code class="language-none">---
title: 分类
date: 2018-11-08 12:02:31
type: &quot;categories&quot;
---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="修改菜单-1"><a href="#修改菜单-1" class="headerlink" title="修改菜单"></a>修改菜单</h2></li>
<li><p>打开Next配置文件_config.yml</p>
</li>
<li><p>查找”Menu settings”，删除categories设置所在的#号</p>
<pre class="line-numbers language-none"><code class="language-none">menu:

	home: &#x2F;
	categories: &#x2F;categories<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>启用categories以后，首页会显示“分类”的选项</p>
</li>
</ol>
<h2 id="为新建的博文添加标签-1"><a href="#为新建的博文添加标签-1" class="headerlink" title="为新建的博文添加标签"></a>为新建的博文添加标签</h2><ol>
<li>以下示例为博文添加了一个分类: 互联网 <pre class="line-numbers language-none"><code class="language-none">---
title: 个人博客 —— Hexo标签和分类篇
date: 2018-11-09 13:16:18
tags:
- 互联网<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>博客主题</title>
    <url>/2021/09/16/blog/bo-ke-zhu-ti/</url>
    <content><![CDATA[<p>经过几天的学习和摸索，总算把博客的主题调整为自己喜欢的风格了。由于不是程序员，所以对于HTML和CSS的语法不太了解，但是幸好找到了一个专门介绍Web开发的网站<a href="https://www.w3school.com.cn/">W3School</a>，学到很多关于网页开发的知识。</p>
<p>简单总结一下，主要是调整了以下内容：</p>
<ul>
<li>博客网页的标题和文章标题的字体，将其调整为微软雅黑</li>
<li>导航栏的颜色，文章标题的颜色</li>
<li>所有字体的大小</li>
<li>文章中发布的日期、作者、分类等信息的位置，字体大小</li>
<li><strong>图片在文章中的自适应缩放</strong></li>
<li><strong>网站适配手机屏幕</strong></li>
</ul>
<p>为了调整最后两项功能，花费了很多时间学习和修改代码。</p>
<p>以下是PC上的显示效果：</p>
<img src="/2021/09/16/blog/bo-ke-zhu-ti/blog_pc.JPG" class="" width="600">
<span id="more"></span>
<p>以下是手机上的显示效果：</p>
<img src="/2021/09/16/blog/bo-ke-zhu-ti/20210915_064223000_iOS.jpg" class="" width="600">

]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>pelican</tag>
      </tags>
  </entry>
  <entry>
    <title>发布博客时调整图片的大小</title>
    <url>/2023/02/26/blog/fa-bu-bo-ke-shi-diao-zheng-tu-pian-de-da-xiao/</url>
    <content><![CDATA[<p>在博客中插入的图片，等发布以后，只能以实际的尺寸显示，无法通过Markdown语句修改图片大小。如果图片很大，就会占用大幅的版面，看起来非常不协调。</p>
<p>例如以下的示例图片就占据了比较大的版面。</p>
<p><img src="/2023/02/26/blog/fa-bu-bo-ke-shi-diao-zheng-tu-pian-de-da-xiao/3C1EC821-5DCC-4853-849C-ADB69AE6B0D4_1_105_c.jpeg"></p>
<span id="more"></span>

<p>为了能让版面美观一些，只能用画图软件手工调小图片尺寸，然后再插入到博客中。如果图片数量太多，每次调校图片也是不小的工作量。因此，最好的方法就是在写博客的时候，可以直接用语句定义图片的尺寸，然后发布博客的时候，由软件自动完成。</p>
<p>翻了一下Hexo的官方文档，发现<a href="https://hexo.io/docs/tag-plugins">Tag Plugins</a>中的<a href="https://hexo.io/docs/tag-plugins#Embed-image">Embed image</a> 语句可以解决这个问题。</p>
<p><code>&#123;% asset_img [class names] slug [width] [height] [title text [alt text]] %&#125;</code></p>
<p><strong>asset_imag：</strong> 标签名称，是<strong>必填项</strong>。</p>
<p><strong>class names：</strong> 设置class属性的名称，是可选项。</p>
<p><strong>slug：</strong> 图片文件的路径，既可以使用本地路径，也可以使用网络路径，是<strong>必填项</strong>。如果是本地路径，可以使用相对路径，例如，直接填写图片的文件名：example.jpg。</p>
<p><strong>width：</strong> 图片的宽度，是可选项。</p>
<p><strong>height：</strong> 图片的高度，是可选项。</p>
<p><strong>title text：</strong> 图片的名称，显示在图片下方，是可选项。</p>
<p><strong>alt text：</strong> <strong>用文本替代图片</strong>，在图片无法显示或者用户禁用图片显示时，代替图片显示在浏览器中的内容</p>
<p>下方语句将图片的宽度设置为500， 并且设置了图片的名称为“示例”。</p>
<p><code>&#123;% asset_img 3C1EC821-5DCC-4853-849C-ADB69AE6B0D4_1_105_c.jpeg 500 示例%&#125;</code></p>
<img src="/2023/02/26/blog/fa-bu-bo-ke-shi-diao-zheng-tu-pian-de-da-xiao/3C1EC821-5DCC-4853-849C-ADB69AE6B0D4_1_105_c.jpeg" class="" width="500" title="示例">

]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>如何整理博客中的图片资源</title>
    <url>/2023/02/24/blog/ru-he-zheng-li-bo-ke-zhong-de-tu-pian-zi-yuan/</url>
    <content><![CDATA[<p>图片是一篇优秀博文的重要组成部分，在Hexo中，通常可以用两种方式来储存图片：（1）<strong>全局资源目录</strong>，（2）<strong>博客资源目录</strong>。</p>
<h2 id="全局资源目录"><a href="#全局资源目录" class="headerlink" title="全局资源目录"></a>全局资源目录</h2><p><strong>全局资源目录</strong> —— 在<code>source</code>目录下，创建<code>images</code>目录，把博客中的所有图片都放到该目录下。</p>
<p><img src="/2023/02/24/blog/ru-he-zheng-li-bo-ke-zhong-de-tu-pian-zi-yuan/Pastedimage20230224145541.png"><br>这种方法操作起来比较简单，只需要把每一篇博文的图片都存放到<code>images</code>目录下，但是，随着图片数量的增加，将来查找和修改博文中的图片会相对麻烦一些。</p>
<span id="more"></span>

<h2 id="博客资源目录"><a href="#博客资源目录" class="headerlink" title="博客资源目录"></a>博客资源目录</h2><p><strong>博客资源目录</strong> —— 每篇博客文章都拥有一个独立的资源目录，目录名称与博客文件的文件名相同。目录中可以存放图片、PDF文件、脚本等资源。</p>
<p><img src="/2023/02/24/blog/ru-he-zheng-li-bo-ke-zhong-de-tu-pian-zi-yuan/Pastedimage20230224145706.png"></p>
<p>与全局资源目录相比，博客资源目录更有弹性，每一篇博文拥有一个单独的资源目录，并且可以存放除图片以外的其它文件。如果需要修改博文中的图片，只需到博客资源目录下查找对应的文件。</p>
<p>如果要启用博客资源目录的功能，需要在配置文件<code>_config.yml</code>中，配置参数<code>post_asset_folder</code>为<code>true</code>。这样，每次用命令<code>hexo new [layout] &lt;title&gt;</code>创建新博文的时候，都会自动生成一个与博客文件名相同的资源目录。</p>
<pre class="line-numbers language-none"><code class="language-none">_config.yml

post_asset_folder: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="使用相对路径引用图片"><a href="#使用相对路径引用图片" class="headerlink" title="使用相对路径引用图片"></a>使用相对路径引用图片</h2><p>如果要在文章中引用图片，除了可以使用Markdown语句<code>![](example.jpg)</code>以外，还可以使用Hexo的<a href="https://hexo.io/docs/tag-plugins#Embed-image">Tag Plugins</a>语句<code>&#123;% asset_img example.jpg %&#125;</code>。</p>
<p>在以前的Hexo版本中，如果在Markdown语句中使用图片文件的相对路径，图片无法在首页和存档中正常显示，只有点击打开文章后，才能看到里面的图片。这个问题目前已经解决，只需要在<code>_config.yml</code>中配置以下参数：</p>
<pre class="line-numbers language-none"><code class="language-none">_config.yml

post_asset_folder: true  
marked:  
  prependRoot: true  
  postAsset: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>此外，除了Markdown语句以外，也可以使用Hexo的<a href="https://hexo.io/docs/tag-plugins#Embed-image">Tag Plugins</a>语句<code>&#123;% asset_img slug [title] %&#125;</code>。</p>
<p>例如，下面的语句就是使用图片的相对路径。</p>
<p><code>&#123;% asset_img example.jpg This is an example image %&#125;</code></p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>定期备份博客</title>
    <url>/2021/09/21/blog/ding-qi-bei-fen-bo-ke/</url>
    <content><![CDATA[<p>为了避免数据丢失，决定使用Python脚本来实现定期备份博客的内容。</p>
<p>以下是需要实现的具体内容：</p>
<ul>
<li><strong>每周日晚上11点30开始自动备份</strong></li>
<li><strong>将Blog目录下面的所有文件打包压缩后，复制到指定的备份目录下方</strong></li>
<li><strong>备份的文件名格式为: <code>backup-timestamps.tar.gz</code>，例如：<code>backup-2021-09-21_132517.tar.gz</code></strong></li>
</ul>
<span id="more"></span>

<p>以下是具体的代码：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span>
<span class="token comment"># -*- coding: utf-8 -*-</span>

<span class="token keyword">import</span> tarfile
<span class="token keyword">import</span> os
<span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime
<span class="token keyword">from</span> shutil <span class="token keyword">import</span> copy<span class="token punctuation">,</span> rmtree

<span class="token comment"># 指定源文件夹路径，例如：/var/log</span>
src_folder <span class="token operator">=</span> <span class="token string">'/home/pi/blog'</span>

<span class="token comment"># 指定目标文件夹路径, 例如：/home/backup</span>
dst_folder <span class="token operator">=</span> <span class="token string">'/media/pi/D1T/backup/blog'</span>

<span class="token comment"># 备份开始的时间戳</span>
timestamp <span class="token operator">=</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d_%H%M%S'</span><span class="token punctuation">)</span>

<span class="token comment"># 指定备份的文件名</span>

filename <span class="token operator">=</span> <span class="token string">'backup'</span>

full_filename <span class="token operator">=</span> <span class="token string">'%s/%s-%s.tar.gz'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>src_folder<span class="token punctuation">,</span> filename<span class="token punctuation">,</span> timestamp<span class="token punctuation">)</span>

tar <span class="token operator">=</span> tarfile<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>full_filename<span class="token punctuation">,</span> <span class="token string">"w:gz"</span><span class="token punctuation">)</span>
os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span>src_folder<span class="token punctuation">)</span>

<span class="token keyword">for</span> name <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        tar<span class="token punctuation">.</span>add<span class="token punctuation">(</span>name<span class="token punctuation">)</span>
tar<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

copy<span class="token punctuation">(</span>full_filename<span class="token punctuation">,</span> dst_folder<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>为了能实现定期的自动备份，需要使用Linux系统的计划任务工具Crond。</p>
<p>以下是配置计划任务的格式，从左往右的顺序为：分钟、小时、日、月、周。</p>
<pre class="line-numbers language-none"><code class="language-none"># * * * * *  command to execute
# ┬ ┬ ┬ ┬ ┬
# │ │ │ │ │
# │ │ │ │ │
# │ │ │ │ └───── day of week (0 - 7) (0 to 6 are Sunday to Saturday, or use names; 7 is Sunday, the same as 0)
# │ │ │ └────────── month (1 - 12)
# │ │ └─────────────── day of month (1 - 31)
# │ └──────────────────── hour (0 - 23)
# └───────────────────────── min (0 - 59)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>为了能实现每周日晚上11点30开始自动备份，需要执行命令<code>crontab -e</code>，然后配置以下内容：</p>
<pre class="line-numbers language-none"><code class="language-none">30 23 * * 7 &#x2F;usr&#x2F;bin&#x2F;python3 &#x2F;home&#x2F;pi&#x2F;python&#x2F;backup_blog.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>pelican</tag>
      </tags>
  </entry>
  <entry>
    <title>我的博客</title>
    <url>/2021/09/13/blog/wo-de-bo-ke/</url>
    <content><![CDATA[<p>最近，很想静下心来写点东西，于是，就想到了创建自己的博客。其实，以前也写过一段时间的博客，采用了HEXO的博客框架。但是，很遗憾，没能坚持下来。后来，在学习Python的过程中，无意中浏览到一位博主的博客使用的是<a href="https://blog.getpelican.com/">Pelican</a> ——一款用Python编写的静态网站生成工具，想到自己原本就一直对Python很感兴趣，于是决定采用Pelican作为自己的博客框架。</p>
<p>由于家中有一台24小时开机的树莓派，可以被随时访问，所以我决定将博客部署在树莓派上。Pelican的初始安装和部署非常简单，通过执行几条简单的命令，就可以完成安装。但是，由于Pelican是用Python编写，所以部署的时候，必须先确保已经安装了Python。</p>
<p>安装Pelican之前，在&#x2F;home&#x2F;pi目录下，先新建blog目录，然后进入该目录。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> /home/pi/blog
<span class="token builtin class-name">cd</span> /home/pi/blog<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>为了能为Pelican创建一个独立的虚拟Python环境，需要先安装[virtualenv](<a href="https://virtualenv.pypa.io/en/latest/">Virtualenv — virtualenv 20.7.3.dev3+g19cd823 documentation (pypa.io)</a>)，然后再创建和激活虚拟环境。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pipx <span class="token function">install</span> virtualenv
virtualenv venv
<span class="token builtin class-name">source</span> venv/bin/activate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<span id="more"></span>

<p>开始安装Pelican。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python -m pip <span class="token function">install</span> pelican<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>如果要使用Markdown语言，建议使用以下命令安装Pelican。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python -m pip <span class="token function">install</span> <span class="token string">"pelican[markdown]"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>Pelican安装成功后，完成初始配置。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pelican-quickstart

This script will <span class="token builtin class-name">help</span> you create a new Pelican-based website.

Please answer the following questions so this script can generate the files
needed by Pelican.

<span class="token operator">></span> Where <span class="token keyword">do</span> you want to create your new web site? <span class="token punctuation">[</span>.<span class="token punctuation">]</span>
<span class="token operator">></span> What will be the title of this web site? Andy's Blog		           //博客的站点名称
<span class="token operator">></span> Who will be the author of this web site? Andy						   //博客的作者名称
<span class="token operator">></span> What will be the default language of this web site? <span class="token punctuation">[</span>English<span class="token punctuation">]</span> zh     //博客的语言，zh为中文
<span class="token operator">></span> Do you want to <span class="token builtin class-name">enable</span> article pagination? <span class="token punctuation">(</span>Y/n<span class="token punctuation">)</span> Y
<span class="token operator">></span> How many articles per page <span class="token keyword">do</span> you want? <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token number">5</span>
<span class="token operator">></span> What is your <span class="token function">time</span> zone? <span class="token punctuation">[</span>Europe/Paris<span class="token punctuation">]</span> Asia/Shanghai
<span class="token operator">></span> Do you want to generate a tasks.py/Makefile to automate generation and publishing? <span class="token punctuation">(</span>Y/n<span class="token punctuation">)</span> Y
<span class="token operator">></span> Do you want to upload your website using FTP? <span class="token punctuation">(</span>y/N<span class="token punctuation">)</span> N
<span class="token operator">></span> Do you want to upload your website using SSH? <span class="token punctuation">(</span>y/N<span class="token punctuation">)</span> N
<span class="token operator">></span> Do you want to upload your website using Dropbox? <span class="token punctuation">(</span>y/N<span class="token punctuation">)</span> N
<span class="token operator">></span> Do you want to upload your website using S3? <span class="token punctuation">(</span>y/N<span class="token punctuation">)</span> N
<span class="token operator">></span> Do you want to upload your website using Rackspace Cloud Files? <span class="token punctuation">(</span>y/N<span class="token punctuation">)</span> N
<span class="token operator">></span> Do you want to upload your website using GitHub Pages? <span class="token punctuation">(</span>y/N<span class="token punctuation">)</span> y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>完成以上配置后，Pelican可以算是初步部署完成了，如果以后要更改相关配置，可以通过文件<code>pelicanconf.py</code>来修改。</p>
<p>好了，下一步就可以直接将写好的文章正式发布到博客了。</p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>pelican</tag>
      </tags>
  </entry>
  <entry>
    <title>Python介绍</title>
    <url>/2022/08/31/python/python-jie-shao/</url>
    <content><![CDATA[<blockquote>
<p>注：本文翻译自<a href="https://realpython.com/python-introduction/">Introduction to Python 3</a>。</p>
</blockquote>
<h1 id="Python介绍"><a href="#Python介绍" class="headerlink" title="Python介绍"></a>Python介绍</h1><p>Python是一种高级的解释性脚本语言，其作者<strong>Guido van Rossum</strong>于20世纪80年代（1980s）在荷兰国家数据和计算机科学研究所发明了该编程语言。Python的初始版本发布于1991年，正式的1.0版本发布于1994年。</p>
<p>在2000年，Python 2.0版本发布，此后，Python一直持续发布2.x的版本。到了2008年，Python开发组决定发布Python 3.0版本，与2.x相比，该版本做了一些重要的改变，并且不支持向下兼容版本2.x。</p>
<p>此后，虽然Python开发组仍然为Python 2进行了一段时间的维护和开发，但是最终于2020年1月1日正式宣布停止对Python 2的维护。因此，对于Python新人来说，建议直接学习Python 3。</p>
<p>据说，该编程语言之所以被称为Python，是因为<strong>Guido</strong>是英国喜剧剧团的戏剧作品《巨蟒剧团之飞翔的马戏团》的粉丝。目前，Python仍然由研究所的核心团队维护和开发，并且<strong>Guido</strong>依然是主要负责人，并且已经被Python社区授予BDFL(Benevolent Dictator For Life)的称号。</p>
<span id="more"></span>

<h2 id="为什么选择Python"><a href="#为什么选择Python" class="headerlink" title="为什么选择Python"></a>为什么选择Python</h2><p>如果要编写一个程序，有很多的编程语言可以选择。那么，为什么要选择Python呢？</p>
<h3 id="Python十分流行"><a href="#Python十分流行" class="headerlink" title="Python十分流行"></a>Python十分流行</h3><p>在过去的几年，Python正在变得越来越受欢迎。2018年，根据StackOverflow的开发者调查结果显示，Python的受欢迎度排名为第七位，并且是程序员们最想掌握的语言。许多国际大公司，如谷歌、脸书、Instagram等都在使用Python。详情请参考<a href="https://realpython.com/world-class-companies-using-python/">8 World-Class Software Companies That Use Python</a>。</p>
<p>根据Dice的研究，Python是最热门的技能之一，并且根据PYPL编程语言流行指数的统计，Python是排名第一的编程语言。</p>
<p>由于Python的流行和广泛使用，Python程序员受到企业的追捧，并且可以获得十分可观的收入。</p>
<h3 id="Python是一种解释性语言"><a href="#Python是一种解释性语言" class="headerlink" title="Python是一种解释性语言"></a>Python是一种解释性语言</h3><p>许多编程语言需要编译后才能运行，换句话说，在运行你编写的程序以前，源代码需要被转换成机器语言—一种计算机处理器能够理解的语言，然后程序才能运行。相对而言，用解释性编程语言写的代码，可以由解释器直接运行，不需要经过编译处理。因此，这样带来的好处就是加快了开发周期，提高了开发效率。</p>
<p>但是，相对于需要编译的语言来说，解释性语言的运行速度比较慢。尤其对于一些对运算要求比较高的应用来说，例如图形处理和密集型运算，解释性语言会有一些局限性。</p>
<p>尽管如此，但是在实际的应用中，对于大部分程序来说，毫秒级或者秒级差异的运行速度，用户并不会有太明显的感知区别。因此，使用解释性语言来编程，利大于弊。</p>
<blockquote>
<p>更多信息：关于解释性语言和编译性语言的区别，请阅读<a href="https://en.wikipedia.org/wiki/Interpreted_language">维基百科</a>。</p>
</blockquote>
<h3 id="Python是免费的"><a href="#Python是免费的" class="headerlink" title="Python是免费的"></a>Python是免费的</h3><p>Python解释器是基于开源许可证发布，因此用户可以免费安装和使用，甚至可以用于开发商用产品。</p>
<p>Python可以支持所有主流的操作系统，包括Unix&#x2F;Linux, Windows, MacOS和移动设备。</p>
<h3 id="Python是跨平台的"><a href="#Python是跨平台的" class="headerlink" title="Python是跨平台的"></a>Python是跨平台的</h3><p>因为Python是解释性的语言，不需要编译成机器语言，只要操作系统上安装了Python解释器，用Python编写的源代码就可以在该平台上直接运行。</p>
<h3 id="Python很简单"><a href="#Python很简单" class="headerlink" title="Python很简单"></a>Python很简单</h3><p>在编程语言中，可以通过关键字和保留字的数量衡量语言的复杂度，Python 3有33个关键字，Python 2是31个，而C++有62个， Java有53个，相对而言，Python的关键字数量比较少。</p>
<p>Python的代码机构简洁、清晰，非常易懂和易学。</p>
<h3 id="但是，Python也不是那么简单"><a href="#但是，Python也不是那么简单" class="headerlink" title="但是，Python也不是那么简单"></a>但是，Python也不是那么简单</h3><p>虽然Python的语法很简单，但是Python支持所有高级语言的特性，包括复杂的动态数据类型，结构和功能性编程以及面向对象的编程。</p>
<p>此外，大量的类库和函数为Python提供了强大的扩展功能，包括数据库操作和图形界面的编程。</p>
<p>虽然Python语言本身被设计地很简单，但是功能却十分强大。</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>本文主要简单介绍了一下Python这门编程语言，包括：</p>
<ul>
<li>简单的Python开发历史</li>
<li>为什么要选择Python</li>
</ul>
<p>无论Python新手，还是编程老司机，Python都是一个很不错的选择。</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python-basic</tag>
      </tags>
  </entry>
  <entry>
    <title>Python模块和包-介绍</title>
    <url>/2022/02/03/python/python-mo-kuai-he-bao-jie-shao/</url>
    <content><![CDATA[<blockquote>
<p>注：本文翻译自<a href="https://realpython.com/python-modules-packages/">Python Modules and Packages – An Introduction</a>。</p>
</blockquote>
<p>本文主要探讨Python编程语言中的两种便于<strong>模块化编程(Modular programming)<strong>的机制：</strong>模块</strong>和<strong>包</strong>。</p>
<p><strong>模块化编程</strong>是将大型的、复杂的编程工作，划分成独立、小块且便于管理的子任务或者模块，这些独立的模块可以像积木一样拼凑在一起，用于构建成一个应用。</p>
<p>在开发大型的应用中，模块化编程有以下好处或特性：</p>
<ul>
<li><strong>简易性：</strong>与专注于全局相比，模块通常只需要专注在解决所有编程任务中的某一个局部问题。如果是负责编写一个模块，那么就只要专注于该模块所需要解决的问题，而不用去考虑模块以外的问题。这使得开发任务变得简单且不易出错。</li>
<li><strong>可维护性：</strong>通常在设计模块的时候，需要为各个模块之间实施逻辑边界。如果在编写模块的时候，能够尽量减少模块之间的依赖性，就可以减少由于单个模块的改变，导致对其它模块影响的可能性。（你甚至可以在不了解整个应用架构的情况下，对单个模块更改而不影响应用。）这对于团队的所有程序员能够互相协作完成整个大型应用而言，变得至关重要。</li>
<li><strong>可重复性：</strong>通过合理地定义模块中的接口，模块中定义的功能可以很方便地被应用中的其它部分重复利用。这减少了冗余的代码。</li>
<li><strong>范围：</strong>模块通常定义了一个独立的<strong>命名空间</strong>(<strong>namespace</strong>)，这有助于避免在程序不同部分中包含的标识符冲突。</li>
</ul>
<span id="more"></span>

<h2 id="Python模块概述"><a href="#Python模块概述" class="headerlink" title="Python模块概述"></a>Python模块概述</h2><p>在Python中，有三种定义模块的方式：</p>
<ol>
<li>用Python语言编写的模块</li>
<li>用<strong>C</strong>语言编写的模块，这种模块通常在程序运行时被动态加载，例如re(<strong>regular expression</strong>)模块</li>
<li>Python内置的模块，例如<strong>itertools</strong>模块</li>
</ol>
<p>对于以上三种定义模块的方式，都可以使用<strong>import</strong>声明来访问模块的内容。</p>
<p>在本文中，我们主要侧重于用Python语言编写的模块。比较酷的是，用Python语言编写的模块十分容易编译。只需要创建一个文件，文件名以<code>.py</code>后缀命名，然后写入合法的Python代码，该文件就可以作为模块使用了。</p>
<p>举例说明，假设你创建了一个名为mod.py的文件，并且包含以下代码：</p>
<p><em><strong>mod.py</strong></em></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">"If Comrade Napoleon says it, it must be right."</span>
a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">]</span>

<span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'arg = </span><span class="token interpolation"><span class="token punctuation">&#123;</span>arg<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在<code>mod.py</code>中，主要定义了以下对象：</p>
<ul>
<li><code>s</code> (a string)</li>
<li><code>a</code> (a list)</li>
<li><code>foo()</code> (a function)</li>
<li><code>Foo</code> (a class)</li>
</ul>
<p>假设<code>mod.py</code>模块已经被放置在合适的位置，那么模块中包含的对象就可以通过<code>import</code>的方式访问模块的内容：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> mod
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>mod<span class="token punctuation">.</span>s<span class="token punctuation">)</span>
If Comrade Napoleon says it<span class="token punctuation">,</span> it must be right<span class="token punctuation">.</span>
<span class="token operator">>></span><span class="token operator">></span> mod<span class="token punctuation">.</span>a
<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> mod<span class="token punctuation">.</span>foo<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'quux'</span><span class="token punctuation">,</span> <span class="token string">'corge'</span><span class="token punctuation">,</span> <span class="token string">'grault'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
arg <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'quux'</span><span class="token punctuation">,</span> <span class="token string">'corge'</span><span class="token punctuation">,</span> <span class="token string">'grault'</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> mod<span class="token punctuation">.</span>Foo<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> x
<span class="token operator">&lt;</span>mod<span class="token punctuation">.</span>Foo <span class="token builtin">object</span> at <span class="token number">0x03C181F0</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="模块查找路径"><a href="#模块查找路径" class="headerlink" title="模块查找路径"></a>模块查找路径</h2><p>继续引用上面的例子，让我们来看一下，当运行<code>import</code>声明时，到底发生了什么：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> mod<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>当Python解释器运行以上的<code>import</code>声明时，它会在一系列的目录中查找<code>mod.py</code>模块。这些目录的位置主要包含以下来源：</p>
<ul>
<li>如果解释器是通过交互式的方式运行，就会在脚本所在的<strong>当前目录</strong>查找<code>mod.py</code>模块。</li>
<li>如果设置了Python的环境变量，就会在<code>PYTHONPATH</code>环境变量定义的目录中查找模块。</li>
<li>Python安装过程中配置的与安装相关的目录</li>
</ul>
<p>模块的查找路径，可以通过<code>sys</code>模块获取：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> sys
<span class="token operator">>></span><span class="token operator">></span> sys<span class="token punctuation">.</span>path
<span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'C:\\Users\\john\\Documents\\Python\\doc'</span><span class="token punctuation">,</span> <span class="token string">'C:\\Python36\\Lib\\idlelib'</span><span class="token punctuation">,</span>
<span class="token string">'C:\\Python36\\python36.zip'</span><span class="token punctuation">,</span> <span class="token string">'C:\\Python36\\DLLs'</span><span class="token punctuation">,</span> <span class="token string">'C:\\Python36\\lib'</span><span class="token punctuation">,</span>
<span class="token string">'C:\\Python36'</span><span class="token punctuation">,</span> <span class="token string">'C:\\Python36\\lib\\site-packages'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>注意：根据安装的Python版本和操作系统不同，sys.path的内容会略有不同。以上例子中输出的结果可能与你计算机上看到的结果稍有差异。</p>
</blockquote>
<p>因此，为了确保编写的模块能够被Python解释器找到，你需要做以下工作：</p>
<ul>
<li>如果是交互式运行Python，需要将<code>mod.py</code>放到脚本所在的目录下面</li>
<li>打开Python解释器之前，修改<code>PYTHONPATH</code>环境变量，以包含<code>mod.py</code>模块所在的目录，或者也可以将<code>mod.py</code>模块复制到<code>PYTHONPATH</code>环境变量已经定义的目录下</li>
<li>将<code>mod.py</code>模块放到安装相关的目录下，但是根据操作系统的不同，可能对这些目录只有读取的权限，而没有写入的权限。</li>
</ul>
<p>其实，还有另外一种方法：你可以将模块文件放在任何一个目录下面，然后在运行脚本的时候修改<code>sys.path</code>的内容，以包含放置模块的目录。</p>
<p>例如，在下面的例子中，可以将<code>mod.py</code>放在目录<code>C:\Users\john</code>下面，然后运行以下指令：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">r'C:\Users\john'</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> sys<span class="token punctuation">.</span>path
<span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'C:\\Users\\john\\Documents\\Python\\doc'</span><span class="token punctuation">,</span> <span class="token string">'C:\\Python36\\Lib\\idlelib'</span><span class="token punctuation">,</span>
<span class="token string">'C:\\Python36\\python36.zip'</span><span class="token punctuation">,</span> <span class="token string">'C:\\Python36\\DLLs'</span><span class="token punctuation">,</span> <span class="token string">'C:\\Python36\\lib'</span><span class="token punctuation">,</span>
<span class="token string">'C:\\Python36'</span><span class="token punctuation">,</span> <span class="token string">'C:\\Python36\\lib\\site-packages'</span><span class="token punctuation">,</span> <span class="token string">'C:\\Users\\john'</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> mod<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>模块被导入以后，你可以通过模块的属性<code>__file__</code>来查看模块文件的路径：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> mod
<span class="token operator">>></span><span class="token operator">></span> mod<span class="token punctuation">.</span>__file__
<span class="token string">'C:\\Users\\john\\mod.py'</span>

<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> re
<span class="token operator">>></span><span class="token operator">></span> re<span class="token punctuation">.</span>__file__
<span class="token string">'C:\\Python36\\lib\\re.py'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>__file__</code>输出结果的目录部分，应该包含在<code>sys.path</code>的目录中。</p>
<h2 id="import声明"><a href="#import声明" class="headerlink" title="import声明"></a>import声明</h2><p>通过<code>import</code>声明可以导入模块的内容。<code>import</code>声明可以通过几种不同的方式来导入模块，以下一一介绍。</p>
<h3 id="import-lt-module-name-gt"><a href="#import-lt-module-name-gt" class="headerlink" title="import &lt;module_name&gt;"></a>import &lt;module_name&gt;</h3><p>最简单的导入模块的方式如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> <span class="token operator">&lt;</span>module_name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>由于模块有独立的命名空间，也就是说，模块有自己的<strong>私有符号表（private symbol table）</strong>，所以，即使在脚本中导入了模块，仍然无法直接访问模块中的对象。因为，这些对象仍然是被定义在模块的私有符号表中，如果要访问这些模块中的对象，必须要通过<strong>dot notation</strong>的方式来访问。</p>
<p>在通过<code>import</code>导入模块以后，<code>mod</code>已经在当前脚本的本地符号表中，因此，<code>mod</code>在当前脚本中可以直接访问：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> mod
<span class="token operator">>></span><span class="token operator">></span> mod
<span class="token operator">&lt;</span>module <span class="token string">'mod'</span> <span class="token keyword">from</span> <span class="token string">'C:\\Users\\john\\Documents\\Python\\doc\\mod.py'</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>但是，模块中定义的对象：<code>s</code>和<code>foo</code>仍然在模块私有符号表中，因此在本地符号表中并没有被定义：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> s
NameError<span class="token punctuation">:</span> name <span class="token string">'s'</span> <span class="token keyword">is</span> <span class="token keyword">not</span> defined
<span class="token operator">>></span><span class="token operator">></span> foo<span class="token punctuation">(</span><span class="token string">'quux'</span><span class="token punctuation">)</span>
NameError<span class="token punctuation">:</span> name <span class="token string">'foo'</span> <span class="token keyword">is</span> <span class="token keyword">not</span> defined<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>为了能在当前脚本中访问模块中的对象，必须在对象前面加上前缀：**<module_name>.**</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> mod<span class="token punctuation">.</span>s
<span class="token string">'If Comrade Napoleon says it, it must be right.'</span>
<span class="token operator">>></span><span class="token operator">></span> mod<span class="token punctuation">.</span>foo<span class="token punctuation">(</span><span class="token string">'quux'</span><span class="token punctuation">)</span>
arg <span class="token operator">=</span> quux<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>import</code>声明还可以一次导入多个模块，不同模块之间可以用逗号隔开：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> <span class="token operator">&lt;</span>module_name<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>module_name<span class="token operator">></span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="from-lt-module-name-gt-import-lt-name-s-gt"><a href="#from-lt-module-name-gt-import-lt-name-s-gt" class="headerlink" title="from &lt;module_name&gt; import &lt;name(s)&gt;"></a>from &lt;module_name&gt; import &lt;name(s)&gt;</h3><p><code>import</code>声明还可以将模块的对象直接导入到当前脚本的本地符号表中：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> <span class="token operator">&lt;</span>module_name<span class="token operator">></span> <span class="token keyword">import</span> <span class="token operator">&lt;</span>name<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>根据以上的导入方式，对象可以被直接访问，而不需要添加模块名前缀：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> mod <span class="token keyword">import</span> s<span class="token punctuation">,</span> foo
<span class="token operator">>></span><span class="token operator">></span> s
<span class="token string">'If Comrade Napoleon says it, it must be right.'</span>
<span class="token operator">>></span><span class="token operator">></span> foo<span class="token punctuation">(</span><span class="token string">'quux'</span><span class="token punctuation">)</span>
arg <span class="token operator">=</span> quux

<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> mod <span class="token keyword">import</span> Foo
<span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> Foo<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> x
<span class="token operator">&lt;</span>mod<span class="token punctuation">.</span>Foo <span class="token builtin">object</span> at <span class="token number">0x02E3AD50</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>由于<code>import</code>直接把对象导入到当前脚本的本地符号表中，当前脚本如果已经存在相同名称的对象，将会被导入的对象所覆盖：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'baz'</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> a
<span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'baz'</span><span class="token punctuation">]</span>

<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> mod <span class="token keyword">import</span> a
<span class="token operator">>></span><span class="token operator">></span> a
<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>通过以下方式，还可以将模块中的所有对象一次性导入到当前的脚本：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> <span class="token operator">&lt;</span>module_name<span class="token operator">></span> <span class="token keyword">import</span> <span class="token operator">*</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这种方式会将模块中的所有对象导入到本地符号表中，除了名称以下划线(__)开始的对象。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> mod <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token operator">>></span><span class="token operator">></span> s
<span class="token string">'If Comrade Napoleon says it, it must be right.'</span>
<span class="token operator">>></span><span class="token operator">></span> a
<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> foo
<span class="token operator">&lt;</span>function foo at <span class="token number">0x03B449C0</span><span class="token operator">></span>
<span class="token operator">>></span><span class="token operator">></span> Foo
<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'mod.Foo'</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在大规模的代码开发场景中，并不推荐这种一次性导入所有对象的方式。因为，这种方式很容易导致冲突，会将已经定义的对象覆盖，应尽量避免。</p>
<p>但是，如果在交互式解释器中运行，这种方式就非常方便，简单的输入，就能访问模块中的所有内容。</p>
<h3 id="from-lt-module-name-gt-import-lt-name-gt-as-lt-alt-name-gt"><a href="#from-lt-module-name-gt-import-lt-name-gt-as-lt-alt-name-gt" class="headerlink" title="from &lt;module_name&gt; import &lt;name&gt; as &lt;alt_name&gt;"></a>from &lt;module_name&gt; import &lt;name&gt; as &lt;alt_name&gt;</h3><p>如果导入的对象名称与本地对象名称冲突，可以用别名来代替模块中的对象名称：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> <span class="token operator">&lt;</span>module_name<span class="token operator">></span> <span class="token keyword">import</span> <span class="token operator">&lt;</span>name<span class="token operator">></span> <span class="token keyword">as</span> <span class="token operator">&lt;</span>alt_name<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>name<span class="token operator">></span> <span class="token keyword">as</span> <span class="token operator">&lt;</span>alt_name<span class="token operator">></span> …<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这样，就可以既避免冲突，也可以直接将模块对象导入到本地符号表中：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> s <span class="token operator">=</span> <span class="token string">'foo'</span>
<span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'baz'</span><span class="token punctuation">]</span>

<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> mod <span class="token keyword">import</span> s <span class="token keyword">as</span> string<span class="token punctuation">,</span> a <span class="token keyword">as</span> alist
<span class="token operator">>></span><span class="token operator">></span> s
<span class="token string">'foo'</span>
<span class="token operator">>></span><span class="token operator">></span> string
<span class="token string">'If Comrade Napoleon says it, it must be right.'</span>
<span class="token operator">>></span><span class="token operator">></span> a
<span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'baz'</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> alist
<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="import-lt-module-name-gt-as-lt-alt-name-gt"><a href="#import-lt-module-name-gt-as-lt-alt-name-gt" class="headerlink" title="import &lt;module_name&gt; as &lt;alt_name&gt;"></a>import &lt;module_name&gt; as &lt;alt_name&gt;</h3><p>你也可以在导入模块的时候，指定用别名来代替模块的实际名称：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> <span class="token operator">&lt;</span>module_name<span class="token operator">></span> <span class="token keyword">as</span> <span class="token operator">&lt;</span>alt_name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> mod <span class="token keyword">as</span> my_module
<span class="token operator">>></span><span class="token operator">></span> my_module<span class="token punctuation">.</span>a
<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> my_module<span class="token punctuation">.</span>foo<span class="token punctuation">(</span><span class="token string">'qux'</span><span class="token punctuation">)</span>
arg <span class="token operator">=</span> qux<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>另外，在函数的定义中，也可以导入模块的内容。但是，只有当函数被调用的时候，模块才会被导入。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">from</span> mod <span class="token keyword">import</span> foo
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     foo<span class="token punctuation">(</span><span class="token string">'corge'</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token operator">>></span><span class="token operator">></span> bar<span class="token punctuation">(</span><span class="token punctuation">)</span>
arg <span class="token operator">=</span> corge<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>需要注意的是，在Python 3中，不支持用<code>import *</code>的语法在函数中定义导入模块的声明：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">from</span> mod <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
SyntaxError<span class="token punctuation">:</span> <span class="token keyword">import</span> <span class="token operator">*</span> only allowed at module level<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>最后，可以使用<code> try statement with an except ImportError</code>语句来处理导入模块失败的情况：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">try</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token comment"># Non-existent module</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">import</span> baz
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">except</span> ImportError<span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Module not found'</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

Module <span class="token keyword">not</span> found<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">try</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token comment"># Existing module, but non-existent object</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">from</span> mod <span class="token keyword">import</span> baz
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">except</span> ImportError<span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Object not found in module'</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

Object <span class="token keyword">not</span> found <span class="token keyword">in</span> module<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="函数dir"><a href="#函数dir" class="headerlink" title="函数dir()"></a>函数dir()</h2><p>在一个命名空间中，内置的<code>dir()</code>函数会返回一个列表，列表中包含的元素是已定义的名称。默认情况下，生成的列表成员按字母排序。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token string">'__annotations__'</span><span class="token punctuation">,</span> <span class="token string">'__builtins__'</span><span class="token punctuation">,</span> <span class="token string">'__doc__'</span><span class="token punctuation">,</span> <span class="token string">'__loader__'</span><span class="token punctuation">,</span> <span class="token string">'__name__'</span><span class="token punctuation">,</span>
<span class="token string">'__package__'</span><span class="token punctuation">,</span> <span class="token string">'__spec__'</span><span class="token punctuation">]</span>

<span class="token operator">>></span><span class="token operator">></span> qux <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token string">'__annotations__'</span><span class="token punctuation">,</span> <span class="token string">'__builtins__'</span><span class="token punctuation">,</span> <span class="token string">'__doc__'</span><span class="token punctuation">,</span> <span class="token string">'__loader__'</span><span class="token punctuation">,</span> <span class="token string">'__name__'</span><span class="token punctuation">,</span>
<span class="token string">'__package__'</span><span class="token punctuation">,</span> <span class="token string">'__spec__'</span><span class="token punctuation">,</span> <span class="token string">'qux'</span><span class="token punctuation">]</span>

<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">Bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">pass</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> Bar<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token string">'Bar'</span><span class="token punctuation">,</span> <span class="token string">'__annotations__'</span><span class="token punctuation">,</span> <span class="token string">'__builtins__'</span><span class="token punctuation">,</span> <span class="token string">'__doc__'</span><span class="token punctuation">,</span> <span class="token string">'__loader__'</span><span class="token punctuation">,</span> <span class="token string">'__name__'</span><span class="token punctuation">,</span>
<span class="token string">'__package__'</span><span class="token punctuation">,</span> <span class="token string">'__spec__'</span><span class="token punctuation">,</span> <span class="token string">'qux'</span><span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>从以上例子中可以注意到，第一次调用函数<code>dir()</code>后，在命名空间中已经存在预先定义好的名称。等到新的名称定义（qux, Bar, x）以后，就会出现在虽有调用函数<code>dir()</code>输出的结果中。</p>
<p>函数<code>dir()</code>有助于我们识别哪些对象通过<code>import</code>的方式导入到了当前的命名空间中：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token string">'__annotations__'</span><span class="token punctuation">,</span> <span class="token string">'__builtins__'</span><span class="token punctuation">,</span> <span class="token string">'__doc__'</span><span class="token punctuation">,</span> <span class="token string">'__loader__'</span><span class="token punctuation">,</span> <span class="token string">'__name__'</span><span class="token punctuation">,</span>
<span class="token string">'__package__'</span><span class="token punctuation">,</span> <span class="token string">'__spec__'</span><span class="token punctuation">]</span>

<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> mod
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token string">'__annotations__'</span><span class="token punctuation">,</span> <span class="token string">'__builtins__'</span><span class="token punctuation">,</span> <span class="token string">'__doc__'</span><span class="token punctuation">,</span> <span class="token string">'__loader__'</span><span class="token punctuation">,</span> <span class="token string">'__name__'</span><span class="token punctuation">,</span>
<span class="token string">'__package__'</span><span class="token punctuation">,</span> <span class="token string">'__spec__'</span><span class="token punctuation">,</span> <span class="token string">'mod'</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> mod<span class="token punctuation">.</span>s
<span class="token string">'If Comrade Napoleon says it, it must be right.'</span>
<span class="token operator">>></span><span class="token operator">></span> mod<span class="token punctuation">.</span>foo<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
arg <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>

<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> mod <span class="token keyword">import</span> a<span class="token punctuation">,</span> Foo
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token string">'Foo'</span><span class="token punctuation">,</span> <span class="token string">'__annotations__'</span><span class="token punctuation">,</span> <span class="token string">'__builtins__'</span><span class="token punctuation">,</span> <span class="token string">'__doc__'</span><span class="token punctuation">,</span> <span class="token string">'__loader__'</span><span class="token punctuation">,</span> <span class="token string">'__name__'</span><span class="token punctuation">,</span>
<span class="token string">'__package__'</span><span class="token punctuation">,</span> <span class="token string">'__spec__'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'mod'</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> a
<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> Foo<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> x
<span class="token operator">&lt;</span>mod<span class="token punctuation">.</span>Foo <span class="token builtin">object</span> at <span class="token number">0x002EAD50</span><span class="token operator">></span>

<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> mod <span class="token keyword">import</span> s <span class="token keyword">as</span> string
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token string">'Foo'</span><span class="token punctuation">,</span> <span class="token string">'__annotations__'</span><span class="token punctuation">,</span> <span class="token string">'__builtins__'</span><span class="token punctuation">,</span> <span class="token string">'__doc__'</span><span class="token punctuation">,</span> <span class="token string">'__loader__'</span><span class="token punctuation">,</span> <span class="token string">'__name__'</span><span class="token punctuation">,</span>
<span class="token string">'__package__'</span><span class="token punctuation">,</span> <span class="token string">'__spec__'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'mod'</span><span class="token punctuation">,</span> <span class="token string">'string'</span><span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> string
<span class="token string">'If Comrade Napoleon says it, it must be right.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>当我们调用函数<code>dir()</code>的时候，将模块的名称作为参数，函数<code>dir()</code>就会列出模块中定义的所有名称：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> mod
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">dir</span><span class="token punctuation">(</span>mod<span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token string">'Foo'</span><span class="token punctuation">,</span> <span class="token string">'__builtins__'</span><span class="token punctuation">,</span> <span class="token string">'__cached__'</span><span class="token punctuation">,</span> <span class="token string">'__doc__'</span><span class="token punctuation">,</span> <span class="token string">'__file__'</span><span class="token punctuation">,</span> <span class="token string">'__loader__'</span><span class="token punctuation">,</span>
<span class="token string">'__name__'</span><span class="token punctuation">,</span> <span class="token string">'__package__'</span><span class="token punctuation">,</span> <span class="token string">'__spec__'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token string">'__annotations__'</span><span class="token punctuation">,</span> <span class="token string">'__builtins__'</span><span class="token punctuation">,</span> <span class="token string">'__doc__'</span><span class="token punctuation">,</span> <span class="token string">'__loader__'</span><span class="token punctuation">,</span> <span class="token string">'__name__'</span><span class="token punctuation">,</span>
<span class="token string">'__package__'</span><span class="token punctuation">,</span> <span class="token string">'__spec__'</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> mod <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token string">'Foo'</span><span class="token punctuation">,</span> <span class="token string">'__annotations__'</span><span class="token punctuation">,</span> <span class="token string">'__builtins__'</span><span class="token punctuation">,</span> <span class="token string">'__doc__'</span><span class="token punctuation">,</span> <span class="token string">'__loader__'</span><span class="token punctuation">,</span> <span class="token string">'__name__'</span><span class="token punctuation">,</span>
<span class="token string">'__package__'</span><span class="token punctuation">,</span> <span class="token string">'__spec__'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="用脚本的方式运行模块"><a href="#用脚本的方式运行模块" class="headerlink" title="用脚本的方式运行模块"></a>用脚本的方式运行模块</h2><p>在Python中，任何模块文件同时也是一个脚本，因此，可以直接当成脚本来运行。</p>
<p>下面还是以<code>mod.py</code>脚本为例：</p>
<p><em><strong>mod.py</strong></em></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">"If Comrade Napoleon says it, it must be right."</span>
a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">]</span>

<span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'arg = </span><span class="token interpolation"><span class="token punctuation">&#123;</span>arg<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>该模块如果以脚本来运行：</p>
<pre class="line-numbers language-Windows" data-language="Windows"><div class="caption"><span>Command Prompt</span></div><code class="language-Windows">C:\Users\john\Documents&gt;python mod.py
C:\Users\john\Documents&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>从以上结果来看，没有出现任何错误。因此，说明该脚本运行成功，但是由于只定义了对象，并没有输出任何结果。</p>
<p>下面修改一下脚本，让它输出一些内容：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">"If Comrade Napoleon says it, it must be right."</span>
a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">]</span>

<span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'arg = </span><span class="token interpolation"><span class="token punctuation">&#123;</span>arg<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
foo<span class="token punctuation">(</span><span class="token string">'quux'</span><span class="token punctuation">)</span>
x <span class="token operator">=</span> Foo<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>现在，我们可以看到以下输出结果：</p>
<pre class="line-numbers language-Windows" data-language="Windows"><div class="caption"><span>Command Prompt</span></div><code class="language-Windows">C:\Users\john\Documents&gt;python mod.py
If Comrade Napoleon says it, it must be right.
[100, 200, 300]
arg &#x3D; quux
&lt;__main__.Foo object at 0x02F101D0&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果将其作为模块导入，我们会发现导入模块的过程中，也会输出结果：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> mod
If Comrade Napoleon says it<span class="token punctuation">,</span> it must be right<span class="token punctuation">.</span>
<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">]</span>
arg <span class="token operator">=</span> quux
<span class="token operator">&lt;</span>mod<span class="token punctuation">.</span>Foo <span class="token builtin">object</span> at <span class="token number">0x0169AD50</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>通常情况下，我们都希望导入模块的时候，不生成任何结果。只有当模块作为脚本运行的时候，才输出结果。</p>
<p>当模块导入的时候，Python会将变量<code>__name__</code>设置为模块的名称，但是当作为脚本运行时，<code>__name__</code>会设置为字符串<code>__main__</code>。根据该特性，我们可以区分是导入模块还是运行脚本：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">"If Comrade Napoleon says it, it must be right."</span>
a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">]</span>

<span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'arg = </span><span class="token interpolation"><span class="token punctuation">&#123;</span>arg<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>__name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Executing as standalone script'</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
    foo<span class="token punctuation">(</span><span class="token string">'quux'</span><span class="token punctuation">)</span>
    x <span class="token operator">=</span> Foo<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>现在，如果运行脚本，会得到以下结果：</p>
<pre class="line-numbers language-Windows" data-language="Windows"><div class="caption"><span>Command Prompt</span></div><code class="language-Windows">C:\Users\john\Documents&gt;python mod.py
Executing as standalone script
If Comrade Napoleon says it, it must be right.
[100, 200, 300]
arg &#x3D; quux
&lt;__main__.Foo object at 0x03450690&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>但是，如果当模块导入，就不会有任何结果输出：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> mod
<span class="token operator">>></span><span class="token operator">></span> mod<span class="token punctuation">.</span>foo<span class="token punctuation">(</span><span class="token string">'grault'</span><span class="token punctuation">)</span>
arg <span class="token operator">=</span> grault<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>通常在设计模块的时候，为了对模块做单元测试，也需要将模块当作脚本来直接运行。例如，假设创建了一个<code>fact.py</code>的模块，该模块包含factorial函数：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fact</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token number">1</span> <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">else</span> n <span class="token operator">*</span> fact<span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>__name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">import</span> sys
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>fact<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>将该模块中的<code>fact()</code>函数导入：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> fact <span class="token keyword">import</span> fact
<span class="token operator">>></span><span class="token operator">></span> fact<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>
<span class="token number">720</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>另外，为了测试，也可以将该模块单独运行，在命令行中输入整型参数：</p>
<pre class="line-numbers language-Windows" data-language="Windows"><div class="caption"><span>Command Prompt</span></div><code class="language-Windows">C:\Users\john\Documents&gt;python fact.py 6
720<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>



<h2 id="重新加载模块"><a href="#重新加载模块" class="headerlink" title="重新加载模块"></a>重新加载模块</h2><p>出于效率的原因，在每一个解释器会话中，模块只会被加载一次。对于函数和类的定义来说，这没什么问题。但是，通常是为了初始化的缘故，模块还可能包含一些可执行的声明。需要注意的是，在当前的解释器会话中，当模块被导入后，这些声明只会被执行一次。即使再次导入模块，这些声明也不会被再次执行。</p>
<p>下面以<code>mod.py</code>:</p>
<p><em><strong>mod.py</strong></em></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'a ='</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> mod
a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> mod
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> mod

<span class="token operator">>></span><span class="token operator">></span> mod<span class="token punctuation">.</span>a
<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>以上例子中，在后续两次import过程中，<code>print()</code>声明都没有别执行。其实，声明<code>a = [100, 200, 300]</code>也没有再次执行，但是最后<code>mod.a</code>的结果显示，一旦赋值声明（assignment statement）执行后，就会将结果保留。</p>
<p>如果更改了模块的内容，并且需要重新加载模块，可以重启解释器，或者使用模块<code>importlib</code>中的函数<code>reload()</code>:</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> mod
a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">]</span>

<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> mod

<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> importlib
<span class="token operator">>></span><span class="token operator">></span> importlib<span class="token punctuation">.</span><span class="token builtin">reload</span><span class="token punctuation">(</span>mod<span class="token punctuation">)</span>
a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">]</span>
<span class="token operator">&lt;</span>module <span class="token string">'mod'</span> <span class="token keyword">from</span> <span class="token string">'C:\\Users\\john\\Documents\\Python\\doc\\mod.py'</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="Python-包"><a href="#Python-包" class="headerlink" title="Python 包"></a>Python 包</h2><p>假设你开发了一个大型的应用，该应用包含许多模块。随着模块数量的增加，尤其是当这些模块有相似的名称和功能的时候，管理这些模块变得越来越困难。你可能会希望有一个更换的方法来分类和组织这些模块。</p>
<p><strong>包</strong>通过使用点表示法（<strong>dot notation</strong>），可以提供一种层次性结构的模块命名空间。通过这种方式，<strong>模块</strong>可以使得全局变量名之间避免冲突，<strong>包</strong>可以使得模块名之间避免冲突。</p>
<p>创建一个<strong>包</strong>非常简单，只需要创建一个目录，并将模块放到该目录下面。该目录就是一个Python<strong>包</strong>。</p>
<p>可以参考一下下面的例子：</p>
<p><img src="/2022/02/03/python/python-mo-kuai-he-bao-jie-shao/pkg1.9af1c7aea48f.png"></p>
<p>以上例子中，目录名为<code>pkg</code>，该目录包含两个模块：<code>mod1.py</code>和<code>mod2.py</code>。模块的内容如下：</p>
<p><em><strong>mod1.py</strong></em></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[mod1] foo()'</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><em><strong>mod2.py</strong></em></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[mod2] bar()'</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Bar</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>根据这种结构，我们可以继续使用之前导入模块的方法，使用点表示法（<strong>dot notation</strong>）来导入包里面的模块：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> <span class="token operator">&lt;</span>module_name<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>module_name<span class="token operator">></span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> pkg<span class="token punctuation">.</span>mod1<span class="token punctuation">,</span> pkg<span class="token punctuation">.</span>mod2
<span class="token operator">>></span><span class="token operator">></span> pkg<span class="token punctuation">.</span>mod1<span class="token punctuation">.</span>foo<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span>mod1<span class="token punctuation">]</span> foo<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> pkg<span class="token punctuation">.</span>mod2<span class="token punctuation">.</span>Bar<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> x
<span class="token operator">&lt;</span>pkg<span class="token punctuation">.</span>mod2<span class="token punctuation">.</span>Bar <span class="token builtin">object</span> at <span class="token number">0x033F7290</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> <span class="token operator">&lt;</span>module_name<span class="token operator">></span> <span class="token keyword">import</span> <span class="token operator">&lt;</span>name<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> pkg<span class="token punctuation">.</span>mod1 <span class="token keyword">import</span> foo
<span class="token operator">>></span><span class="token operator">></span> foo<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span>mod1<span class="token punctuation">]</span> foo<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> <span class="token operator">&lt;</span>module_name<span class="token operator">></span> <span class="token keyword">import</span> <span class="token operator">&lt;</span>name<span class="token operator">></span> <span class="token keyword">as</span> <span class="token operator">&lt;</span>alt_name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> pkg<span class="token punctuation">.</span>mod2 <span class="token keyword">import</span> Bar <span class="token keyword">as</span> Qux
<span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> Qux<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> x
<span class="token operator">&lt;</span>pkg<span class="token punctuation">.</span>mod2<span class="token punctuation">.</span>Bar <span class="token builtin">object</span> at <span class="token number">0x036DFFD0</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>另外，你也可以使用以下方式导入模块：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> <span class="token operator">&lt;</span>package_name<span class="token operator">></span> <span class="token keyword">import</span> <span class="token operator">&lt;</span>modules_name<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>module_name<span class="token operator">></span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>
<span class="token keyword">from</span> <span class="token operator">&lt;</span>package_name<span class="token operator">></span> <span class="token keyword">import</span> <span class="token operator">&lt;</span>module_name<span class="token operator">></span> <span class="token keyword">as</span> <span class="token operator">&lt;</span>alt_name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> pkg <span class="token keyword">import</span> mod1
<span class="token operator">>></span><span class="token operator">></span> mod1<span class="token punctuation">.</span>foo<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span>mod1<span class="token punctuation">]</span> foo<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> pkg <span class="token keyword">import</span> mod2 <span class="token keyword">as</span> quux
<span class="token operator">>></span><span class="token operator">></span> quux<span class="token punctuation">.</span>bar<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span>mod2<span class="token punctuation">]</span> bar<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>其实，从技术上来讲，你也可以直接导入包：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> pkg
<span class="token operator">>></span><span class="token operator">></span> pkg
<span class="token operator">&lt;</span>module <span class="token string">'pkg'</span> <span class="token punctuation">(</span>namespace<span class="token punctuation">)</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>但是，其实这没有什么用。虽然用这种方式导入了包，但实际上模块并没有被导入到本地命名空间。所以，在调用模块时就会报错。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> pkg<span class="token punctuation">.</span>mod1
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  File <span class="token string">"&lt;pyshell#34>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>
    pkg<span class="token punctuation">.</span>mod1
AttributeError<span class="token punctuation">:</span> module <span class="token string">'pkg'</span> has no attribute <span class="token string">'mod1'</span>
<span class="token operator">>></span><span class="token operator">></span> pkg<span class="token punctuation">.</span>mod1<span class="token punctuation">.</span>foo<span class="token punctuation">(</span><span class="token punctuation">)</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  File <span class="token string">"&lt;pyshell#35>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>
    pkg<span class="token punctuation">.</span>mod1<span class="token punctuation">.</span>foo<span class="token punctuation">(</span><span class="token punctuation">)</span>
AttributeError<span class="token punctuation">:</span> module <span class="token string">'pkg'</span> has no attribute <span class="token string">'mod1'</span>
<span class="token operator">>></span><span class="token operator">></span> pkg<span class="token punctuation">.</span>mod2<span class="token punctuation">.</span>Bar<span class="token punctuation">(</span><span class="token punctuation">)</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  File <span class="token string">"&lt;pyshell#36>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>
    pkg<span class="token punctuation">.</span>mod2<span class="token punctuation">.</span>Bar<span class="token punctuation">(</span><span class="token punctuation">)</span>
AttributeError<span class="token punctuation">:</span> module <span class="token string">'pkg'</span> has no attribute <span class="token string">'mod2'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>因此，你需要使用之前的方法导入模块或者模块所包含的对象。</p>
<h2 id="包初始化"><a href="#包初始化" class="headerlink" title="包初始化"></a>包初始化</h2><p>如果在包的目录下有文件名为<code>__init__.py</code>的文件，当包或者模块被导入的时候，该文件就会被调用执行。文件中包含的代码主要用来对包进行初始化。</p>
<p>下面，可以参考一下以下<code>__init__.py</code>文件：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Invoking __init__.py for </span><span class="token interpolation"><span class="token punctuation">&#123;</span>__name__<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>
A <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'quux'</span><span class="token punctuation">,</span> <span class="token string">'corge'</span><span class="token punctuation">,</span> <span class="token string">'grault'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>将文件<code>__init__.py</code>放到<code>pkg</code>目录下方：</p>
<p><img src="/2022/02/03/python/python-mo-kuai-he-bao-jie-shao/pkg1_133918.png"></p>
<p>当包被导入的时候，全局列表A会被初始化：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> pkg
Invoking __init__<span class="token punctuation">.</span>py <span class="token keyword">for</span> pkg
<span class="token operator">>></span><span class="token operator">></span> pkg<span class="token punctuation">.</span>A
<span class="token punctuation">[</span><span class="token string">'quux'</span><span class="token punctuation">,</span> <span class="token string">'corge'</span><span class="token punctuation">,</span> <span class="token string">'grault'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>在包中的模块也可以访问全局列表A：</p>
<p><em><strong>mode1.py</strong></em></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">from</span> pkg <span class="token keyword">import</span> A
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[mod1] foo() / A = '</span><span class="token punctuation">,</span> A<span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> pkg <span class="token keyword">import</span> mod1
Invoking __init__<span class="token punctuation">.</span>py <span class="token keyword">for</span> pkg
<span class="token operator">>></span><span class="token operator">></span> mod1<span class="token punctuation">.</span>foo<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span>mod1<span class="token punctuation">]</span> foo<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> A <span class="token operator">=</span>  <span class="token punctuation">[</span><span class="token string">'quux'</span><span class="token punctuation">,</span> <span class="token string">'corge'</span><span class="token punctuation">,</span> <span class="token string">'grault'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>文件<code>__init__.py</code>还可以用来导入包中的模块。例如，之前如果只导入包<code>import pkg</code>，实际上模块并没有被导入。但是，如果在文件<code>__init__.py</code>中添加以下语句：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Invoking __init__.py for </span><span class="token interpolation"><span class="token punctuation">&#123;</span>__name__<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>
<span class="token keyword">import</span> pkg<span class="token punctuation">.</span>mod1<span class="token punctuation">,</span> pkg<span class="token punctuation">.</span>mod2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>当运行<code>import pkg</code>的时候，模块mod1和mod2就会自动被导入：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> pkg
Invoking __init__<span class="token punctuation">.</span>py <span class="token keyword">for</span> pkg
<span class="token operator">>></span><span class="token operator">></span> pkg<span class="token punctuation">.</span>mod1<span class="token punctuation">.</span>foo<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span>mod1<span class="token punctuation">]</span> foo<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> pkg<span class="token punctuation">.</span>mod2<span class="token punctuation">.</span>bar<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span>mod2<span class="token punctuation">]</span> bar<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>注意：大部分的Pyton文档中都声明，如果要创建包，就必须在包目录下创建文件<code>__init__.py</code>，即使该文件不包含任何内容，也必须出现在包所在目录下。</p>
<p>但是，从Python 3.3开始， <a href="https://www.python.org/dev/peps/pep-0420">Implicit Namespace Packages</a>允许即使没有文件<code>__init__.py</code>文件，仍然可以创建包。当然，如果要初始化包，仍然可以使用<code>__init__.py</code>文件。</p>
</blockquote>
<h2 id="Importing-From-a-Package"><a href="#Importing-From-a-Package" class="headerlink" title="Importing * From a Package"></a>Importing * From a Package</h2><p>为了便于接下来的讨论，在之前定义的包中增加一些额外的模块：</p>
<p><img src="/2022/02/03/python/python-mo-kuai-he-bao-jie-shao/pkg3.d2160908ae77.png"></p>
<p>现在，包里面有4个模块，具体分别如下：</p>
<p><em><strong>mod1.py</strong></em></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[mod1] foo()'</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><em><strong>mod2.py</strong></em></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[mod2] bar()'</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Bar</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><em><strong>mod3.py</strong></em></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[mod3] baz()'</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Baz</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><em><strong>mod4.py</strong></em></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">qux</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[mod4] qux()'</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Qux</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>根据之前的例子，如果用<code>from &lt;module name &gt; import *</code>的方式导入模块，除了以下划线命名的对象以外，可以将模块包含的所有对象导入到本地符号表：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token string">'__annotations__'</span><span class="token punctuation">,</span> <span class="token string">'__builtins__'</span><span class="token punctuation">,</span> <span class="token string">'__doc__'</span><span class="token punctuation">,</span> <span class="token string">'__loader__'</span><span class="token punctuation">,</span> <span class="token string">'__name__'</span><span class="token punctuation">,</span>
<span class="token string">'__package__'</span><span class="token punctuation">,</span> <span class="token string">'__spec__'</span><span class="token punctuation">]</span>

<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> pkg<span class="token punctuation">.</span>mod3 <span class="token keyword">import</span> <span class="token operator">*</span>

<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token string">'Baz'</span><span class="token punctuation">,</span> <span class="token string">'__annotations__'</span><span class="token punctuation">,</span> <span class="token string">'__builtins__'</span><span class="token punctuation">,</span> <span class="token string">'__doc__'</span><span class="token punctuation">,</span> <span class="token string">'__loader__'</span><span class="token punctuation">,</span> <span class="token string">'__name__'</span><span class="token punctuation">,</span>
<span class="token string">'__package__'</span><span class="token punctuation">,</span> <span class="token string">'__spec__'</span><span class="token punctuation">,</span> <span class="token string">'baz'</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> baz<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span>mod3<span class="token punctuation">]</span> baz<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> Baz
<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'pkg.mod3.Baz'</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>同样，我们也可以用相似的语法导入包：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> <span class="token operator">&lt;</span>package_name<span class="token operator">></span> <span class="token keyword">import</span> <span class="token operator">*</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token string">'__annotations__'</span><span class="token punctuation">,</span> <span class="token string">'__builtins__'</span><span class="token punctuation">,</span> <span class="token string">'__doc__'</span><span class="token punctuation">,</span> <span class="token string">'__loader__'</span><span class="token punctuation">,</span> <span class="token string">'__name__'</span><span class="token punctuation">,</span>
<span class="token string">'__package__'</span><span class="token punctuation">,</span> <span class="token string">'__spec__'</span><span class="token punctuation">]</span>

<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> pkg <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token string">'__annotations__'</span><span class="token punctuation">,</span> <span class="token string">'__builtins__'</span><span class="token punctuation">,</span> <span class="token string">'__doc__'</span><span class="token punctuation">,</span> <span class="token string">'__loader__'</span><span class="token punctuation">,</span> <span class="token string">'__name__'</span><span class="token punctuation">,</span>
<span class="token string">'__package__'</span><span class="token punctuation">,</span> <span class="token string">'__spec__'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>但是，与导入模块不同，用<code>from &lt;package_name&gt; import *</code>导入包后，结果却显示没有导入任何内容。</p>
<p>其实，Python遵循了一种规范：如果<code>__init__.py</code>的代码中有一个名为<code>__all__</code>的列表，该列表中定义的模块名，在用<code>from &lt;package_name&gt; import *</code>导入时，就会被自动导入。</p>
<p>在当前的例子中，假设你在<code>pkg</code>包中创建了一个<code>__init__.py</code>的文件，内容如下：</p>
<p><em><strong>pkg&#x2F;<strong>init</strong>.py</strong></em></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">__all__ <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token string">'mod1'</span><span class="token punctuation">,</span>
        <span class="token string">'mod2'</span><span class="token punctuation">,</span>
        <span class="token string">'mod3'</span><span class="token punctuation">,</span>
        <span class="token string">'mod4'</span>
        <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>现在用<code>from pkg import *</code>导入包后，就可以同时导入4个模块：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token string">'__annotations__'</span><span class="token punctuation">,</span> <span class="token string">'__builtins__'</span><span class="token punctuation">,</span> <span class="token string">'__doc__'</span><span class="token punctuation">,</span> <span class="token string">'__loader__'</span><span class="token punctuation">,</span> <span class="token string">'__name__'</span><span class="token punctuation">,</span>
<span class="token string">'__package__'</span><span class="token punctuation">,</span> <span class="token string">'__spec__'</span><span class="token punctuation">]</span>

<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> pkg <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token string">'__annotations__'</span><span class="token punctuation">,</span> <span class="token string">'__builtins__'</span><span class="token punctuation">,</span> <span class="token string">'__doc__'</span><span class="token punctuation">,</span> <span class="token string">'__loader__'</span><span class="token punctuation">,</span> <span class="token string">'__name__'</span><span class="token punctuation">,</span>
<span class="token string">'__package__'</span><span class="token punctuation">,</span> <span class="token string">'__spec__'</span><span class="token punctuation">,</span> <span class="token string">'mod1'</span><span class="token punctuation">,</span> <span class="token string">'mod2'</span><span class="token punctuation">,</span> <span class="token string">'mod3'</span><span class="token punctuation">,</span> <span class="token string">'mod4'</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> mod2<span class="token punctuation">.</span>bar<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span>mod2<span class="token punctuation">]</span> bar<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> mod4<span class="token punctuation">.</span>Qux
<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'pkg.mod4.Qux'</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>通过<code>__all__</code>这种方式，我们就可以控制哪些模块可以被<code>import *</code>这种方式自动导入。</p>
<p>其实，<code>__all__</code>也可以用相同的方式作用于模块：控制模块中的哪些对象可以被<code>import *</code>的方式导入。</p>
<p>下面以<code>mod1.py</code>为例：</p>
<p><em><strong>pkg&#x2F;mod1.py</strong></em></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">__all__ <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">]</span>

<span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[mod1] foo()'</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>根据以上模块中<code>__all__</code>的定义，通过<code>import *</code>只会导入<code>foo</code>对象：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token string">'__annotations__'</span><span class="token punctuation">,</span> <span class="token string">'__builtins__'</span><span class="token punctuation">,</span> <span class="token string">'__doc__'</span><span class="token punctuation">,</span> <span class="token string">'__loader__'</span><span class="token punctuation">,</span> <span class="token string">'__name__'</span><span class="token punctuation">,</span>
<span class="token string">'__package__'</span><span class="token punctuation">,</span> <span class="token string">'__spec__'</span><span class="token punctuation">]</span>

<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> pkg<span class="token punctuation">.</span>mod1 <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token string">'__annotations__'</span><span class="token punctuation">,</span> <span class="token string">'__builtins__'</span><span class="token punctuation">,</span> <span class="token string">'__doc__'</span><span class="token punctuation">,</span> <span class="token string">'__loader__'</span><span class="token punctuation">,</span> <span class="token string">'__name__'</span><span class="token punctuation">,</span>
<span class="token string">'__package__'</span><span class="token punctuation">,</span> <span class="token string">'__spec__'</span><span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">]</span>

<span class="token operator">>></span><span class="token operator">></span> foo<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span>mod1<span class="token punctuation">]</span> foo<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> Foo
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  File <span class="token string">"&lt;pyshell#37>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>
    Foo
NameError<span class="token punctuation">:</span> name <span class="token string">'Foo'</span> <span class="token keyword">is</span> <span class="token keyword">not</span> defined<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>foo()</code>被导入到本地命名空间，但是类<code>Foo</code>并没有被导入，因为<code>Foo</code>并没有被定义在<code>__all__</code>中。</p>
<p>总结一下，当使用<code>import *</code>语句的时候，<code>__all__</code>可以用来定义<strong>包</strong>和<strong>模块</strong>导入的内容。但是，具体的使用上有一些区别：</p>
<ul>
<li>对包而言，当<code>__all__</code>没有定义的时候，<code>import *</code>不会导入任何内容。</li>
<li>对模块而言，当<code>__all__</code>没有定义的时候，<code>import *</code>会导入模块中的所有对象（除了以下划线命名的对象）。</li>
</ul>
<h2 id="子包（Subpackages）"><a href="#子包（Subpackages）" class="headerlink" title="子包（Subpackages）"></a>子包（Subpackages）</h2><p>包还可以包含子包，对于子包的层级也没有任何限制。例如，对之前的例子做一些修改：</p>
<p><img src="/2022/02/03/python/python-mo-kuai-he-bao-jie-shao/pkg4_100818.png"></p>
<p>之前定义的四个模块：<code>mod1.py</code>, <code>mod2.py</code>, <code>mod3.py</code>, <code>mod4.py</code>，分别被放到两个子包下面：<code>sub_pkg1</code>和<code>sub_pkg2</code>。</p>
<p>仍然和之前一样，可以用点表达式的方式导入子包下面的模块：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> pkg<span class="token punctuation">.</span>sub_pkg1<span class="token punctuation">.</span>mod1
<span class="token operator">>></span><span class="token operator">></span> pkg<span class="token punctuation">.</span>sub_pkg1<span class="token punctuation">.</span>mod1<span class="token punctuation">.</span>foo<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span>mod1<span class="token punctuation">]</span> foo<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> pkg<span class="token punctuation">.</span>sub_pkg1 <span class="token keyword">import</span> mod2
<span class="token operator">>></span><span class="token operator">></span> mod2<span class="token punctuation">.</span>bar<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span>mod2<span class="token punctuation">]</span> bar<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> pkg<span class="token punctuation">.</span>sub_pkg2<span class="token punctuation">.</span>mod3 <span class="token keyword">import</span> baz
<span class="token operator">>></span><span class="token operator">></span> baz<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span>mod3<span class="token punctuation">]</span> baz<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> pkg<span class="token punctuation">.</span>sub_pkg2<span class="token punctuation">.</span>mod4 <span class="token keyword">import</span> qux <span class="token keyword">as</span> grault
<span class="token operator">>></span><span class="token operator">></span> grault<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span>mod4<span class="token punctuation">]</span> qux<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>另外，在子包中的模块，还可以引用同级子包中的模块。</p>
<p>例如，假设你想要在模块<code>mod3</code>中导入并允许函数模块<code>mod1</code>中的函数<code>foo()</code>，你可以使用<strong>绝对导入</strong>：</p>
<p><em><strong>pkg&#x2F;sub__pkg2&#x2F;mod3.py</strong></em></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[mod3] baz()'</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Baz</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>

<span class="token keyword">from</span> pkg<span class="token punctuation">.</span>sub_pkg1<span class="token punctuation">.</span>mod1 <span class="token keyword">import</span> foo
foo<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> pkg<span class="token punctuation">.</span>sub_pkg2 <span class="token keyword">import</span> mod3
<span class="token punctuation">[</span>mod1<span class="token punctuation">]</span> foo<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> mod3<span class="token punctuation">.</span>foo<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span>mod1<span class="token punctuation">]</span> foo<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>或者，你还可以使用<strong>相对导入</strong>，在相对导入中，<code>..</code>代表的是上一级包。</p>
<ul>
<li><code>..</code>代表的是上级包<code>pkg</code></li>
<li><code>..sub_pkg1</code>代表的是子包<code>sub_pkg1</code>的上一级包</li>
</ul>
<p><em><strong>pkg&#x2F;sub__pkg2&#x2F;mod3.py</strong></em></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[mod3] baz()'</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Baz</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>

<span class="token keyword">from</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">import</span> sub_pkg1
<span class="token keyword">print</span><span class="token punctuation">(</span>sub_pkg1<span class="token punctuation">)</span>

<span class="token keyword">from</span> <span class="token punctuation">.</span><span class="token punctuation">.</span>sub_pkg1<span class="token punctuation">.</span>mod1 <span class="token keyword">import</span> foo
foo<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> pkg<span class="token punctuation">.</span>sub_pkg2 <span class="token keyword">import</span> mod3
<span class="token operator">&lt;</span>module <span class="token string">'pkg.sub_pkg1'</span> <span class="token punctuation">(</span>namespace<span class="token punctuation">)</span><span class="token operator">></span>
<span class="token punctuation">[</span>mod1<span class="token punctuation">]</span> foo<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在本指南中，你可以学到以下内容：</p>
<ul>
<li>如何创建Python模块</li>
<li>Python解释器如何查找模块</li>
<li>通过<code>import</code>语句，如何访问模块中定义的对象</li>
<li>如何将模块作为独立脚本来运行</li>
<li>如何用包和子包的方式组织模块</li>
<li>如何初始化包</li>
</ul>
<p>关于更多模块和包的内容，可以参考<strong>Python.org</strong>网站的文档：</p>
<ul>
<li><a href="https://docs.python.org/3/reference/import.html">The <code>import</code> system</a></li>
<li><a href="https://docs.python.org/3/tutorial/modules.html">The Python tutorial: Modules</a></li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python-basic</tag>
      </tags>
  </entry>
  <entry>
    <title>Requests库使用指南</title>
    <url>/2022/02/08/python/requests-ku-shi-yong-zhi-nan/</url>
    <content><![CDATA[<blockquote>
<p>注：本文翻译自<a href="https://realpython.com/python-requests/">Python’s Requests Library (Guide)</a>。</p>
</blockquote>
<h1 id="Requests库使用指南"><a href="#Requests库使用指南" class="headerlink" title="Requests库使用指南"></a>Requests库使用指南</h1><p>在Python中，<code>requests</code>库是处理HTTP请求的标准。它使得复杂的HTTP请求变得简单、易用，让你可以专注于处理与服务之间的交互，为应用获取所需的数据。</p>
<p>通过本文，你可以学到许多<code>requests</code>库中的有用功能，并且可以根据实际的需求，定制和优化这些功能。你还会学到如何有效地使用<code>requests</code>库，避免由于访问外部服务而影响应用的响应速度。</p>
<p>在本指南中，你将学到以下内容：</p>
<ul>
<li>通过<code>requests</code>使用HTTP中最常见的方式</li>
<li>定制<code>requests</code>中的报头和数据，使用询问字符和消息内容</li>
<li>检查查询和响应中的数据</li>
<li>发送认证请求</li>
<li>配置请求，防止应用的响应速度变慢</li>
</ul>
<span id="more"></span>

<h2 id="开始使用requests"><a href="#开始使用requests" class="headerlink" title="开始使用requests"></a>开始使用requests</h2><p>首先，需要安装<code>requests</code>库：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ pip <span class="token function">install</span> requests<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>安装完成后，需要先导入<code>requests</code>库：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h2><p>HTTP有很多种请求方式，例如GET和POST，不同的请求方式，所执行的操作是不同的。其中，GET是最常用的HTTP请求。GET主要是用来获取Web数据。如果发起一个GET请求，就会调用<code>requests.get()</code>。</p>
<p>以下例子中，你可以看到通过调用<code>get()</code>发送GET请求给Github的<a href="https://developer.github.com/v3/#root-endpoint">Root REST API</a>。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://api.github.com'</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span>Response <span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h2><p>通过发送GET请求以后，我们可以得到一个Response的对象。将该对象存储到一个变量中后，我们可以查看该对象的属性和方法：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://api.github.com'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>在以上例子中，我们将响应对象存储到<code>response</code>变量中。</p>
<h3 id="状态码（Status-Codes）"><a href="#状态码（Status-Codes）" class="headerlink" title="状态码（Status Codes）"></a>状态码（Status Codes）</h3><p>从响应<code>Response</code>中首先可以获取状态码，通过状态码来判断请求是否成功。</p>
<p>例如，如果状态码是<code>200 OK</code>，那么说明请求是成功的，但是如果状态码是<code>404 NOT FOUND</code>，则说明未找到需要获取的资源。关于状态码的详细说明，请参考文档：<a href="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes">many other possible status codes</a></p>
<p>通过访问响应<code>response</code>的属性<code>.status_code</code>，可以看到服务器返回的状态码：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> response<span class="token punctuation">.</span>status_code
<span class="token number">200</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><code>.status_code</code>返回的是<code>200</code>，说明请求时成功的，并且服务器返回了你需要获取的数据。</p>
<p>有些情况下，你可能想要通过状态码来作为判断条件：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Success!'</span><span class="token punctuation">)</span>
<span class="token keyword">elif</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">404</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Not Found.'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>以上例子中，如果服务器返回<code>200</code>的状态码，那么程序就会打印<code>Success!</code>。如果服务器返回<code>404</code>的状态码，程序就会打印<code>Not Found.</code>。</p>
<p><code>requests</code>提供了一种更为简便的方法。如果直接使用<code>Response</code>实例作为判断的条件，假设状态码在<code>200</code>和<code>400</code>之间，那么表达式就会被评估为<code>True</code>，否则就会被评估为<code>False</code>。</p>
<p>因此，你可以将之前的例子改写如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> response<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Success!'</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'An error has occurred.'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>技术细节：This <a href="https://docs.python.org/3/library/stdtypes.html#truth-value-testing">Truth Value Test</a> is made possible because <a href="https://realpython.com/operator-function-overloading/#making-your-objects-truthy-or-falsey-using-bool"><code>__bool__()</code> is an overloaded method</a> on <code>Response</code>.</p>
<p>This means that the default behavior of <code>Response</code> has been redefined to take the status code into account when determining the truth value of the object.</p>
</blockquote>
<p>记住这种方式并不是检验状态码是否等于<code>200</code>，而是检验状态码是否在<code>200</code>到<code>400</code>之间，例如<code>204 NO CONTENT</code>和<code>304 NOT MODIFIED</code>，也被认为是请求成功的。</p>
<p>例如，<code>204</code>是说明请求是成功的，但是返回的消息正文并没有任何内容。</p>
<p>因此，如果只是为了知道请求是否成功，可以使用这种简便的方法，否则，建议还是根据具体的状态码来判断。</p>
<p>有时候，可能你不希望用<code>if</code>语句来检查状态码，而是希望在请求失败的情况下，引发异常。那么你就可以使用<code>.raise_for_status()</code>：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">from</span> requests<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> HTTPError

<span class="token keyword">for</span> url <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'https://api.github.com'</span><span class="token punctuation">,</span> <span class="token string">'https://api.github.com/invalid'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>

        <span class="token comment"># If the response was successful, no Exception will be raised</span>
        response<span class="token punctuation">.</span>raise_for_status<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span> HTTPError <span class="token keyword">as</span> http_err<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'HTTP error occurred: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>http_err<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>  <span class="token comment"># Python 3.6</span>
    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> err<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Other error occurred: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>err<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>  <span class="token comment"># Python 3.6</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Success!'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果你调用<code>.raise_for_status()</code>，就会对某些失败的状态码引发<code>HTTPError</code>的异常错误。如果状态码显示请求是成功的，那么程序就不会引发异常。</p>
<p>通过以上内容，你了解了很多关于如何处理状态码的知识。下面，你将看到如何查看服务器返回的具体数据内容。</p>
<h3 id="内容（Content）"><a href="#内容（Content）" class="headerlink" title="内容（Content）"></a>内容（Content）</h3><p>GET请求得到的响应经常包含很多有价值的信息，如消息正文中的payload。通过使用<code>Response</code>的属性和方法，你可以用不同的格式来查看payload。</p>
<p>用bytes的格式查看响应的内容，你可以使用<code>.content</code>：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://api.github.com'</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> response<span class="token punctuation">.</span>content
<span class="token string">b'&#123;"current_user_url":"https://api.github.com/user","current_user_authorizations_html_url":"https://github.com/settings/connections/applications&#123;/client_id&#125;","authorizations_url":"https://api.github.com/authorizations","code_search_url":"https://api.github.com/search/code?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;","commit_search_url":"https://api.github.com/search/commits?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;","emails_url":"https://api.github.com/user/emails","emojis_url":"https://api.github.com/emojis","events_url":"https://api.github.com/events","feeds_url":"https://api.github.com/feeds","followers_url":"https://api.github.com/user/followers","following_url":"https://api.github.com/user/following&#123;/target&#125;","gists_url":"https://api.github.com/gists&#123;/gist_id&#125;","hub_url":"https://api.github.com/hub","issue_search_url":"https://api.github.com/search/issues?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;","issues_url":"https://api.github.com/issues","keys_url":"https://api.github.com/user/keys","notifications_url":"https://api.github.com/notifications","organization_repositories_url":"https://api.github.com/orgs/&#123;org&#125;/repos&#123;?type,page,per_page,sort&#125;","organization_url":"https://api.github.com/orgs/&#123;org&#125;","public_gists_url":"https://api.github.com/gists/public","rate_limit_url":"https://api.github.com/rate_limit","repository_url":"https://api.github.com/repos/&#123;owner&#125;/&#123;repo&#125;","repository_search_url":"https://api.github.com/search/repositories?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;","current_user_repositories_url":"https://api.github.com/user/repos&#123;?type,page,per_page,sort&#125;","starred_url":"https://api.github.com/user/starred&#123;/owner&#125;&#123;/repo&#125;","starred_gists_url":"https://api.github.com/gists/starred","team_url":"https://api.github.com/teams","user_url":"https://api.github.com/users/&#123;user&#125;","user_organizations_url":"https://api.github.com/user/orgs","user_repositories_url":"https://api.github.com/users/&#123;user&#125;/repos&#123;?type,page,per_page,sort&#125;","user_search_url":"https://api.github.com/search/users?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;"&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>通过<code>.content</code>读取到的是字节格式的payload，如果你想要将其转换成UTF-8编码的字符串，你可以使用<code>.text</code>：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> response<span class="token punctuation">.</span>text
<span class="token string">'&#123;"current_user_url":"https://api.github.com/user","current_user_authorizations_html_url":"https://github.com/settings/connections/applications&#123;/client_id&#125;","authorizations_url":"https://api.github.com/authorizations","code_search_url":"https://api.github.com/search/code?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;","commit_search_url":"https://api.github.com/search/commits?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;","emails_url":"https://api.github.com/user/emails","emojis_url":"https://api.github.com/emojis","events_url":"https://api.github.com/events","feeds_url":"https://api.github.com/feeds","followers_url":"https://api.github.com/user/followers","following_url":"https://api.github.com/user/following&#123;/target&#125;","gists_url":"https://api.github.com/gists&#123;/gist_id&#125;","hub_url":"https://api.github.com/hub","issue_search_url":"https://api.github.com/search/issues?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;","issues_url":"https://api.github.com/issues","keys_url":"https://api.github.com/user/keys","notifications_url":"https://api.github.com/notifications","organization_repositories_url":"https://api.github.com/orgs/&#123;org&#125;/repos&#123;?type,page,per_page,sort&#125;","organization_url":"https://api.github.com/orgs/&#123;org&#125;","public_gists_url":"https://api.github.com/gists/public","rate_limit_url":"https://api.github.com/rate_limit","repository_url":"https://api.github.com/repos/&#123;owner&#125;/&#123;repo&#125;","repository_search_url":"https://api.github.com/search/repositories?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;","current_user_repositories_url":"https://api.github.com/user/repos&#123;?type,page,per_page,sort&#125;","starred_url":"https://api.github.com/user/starred&#123;/owner&#125;&#123;/repo&#125;","starred_gists_url":"https://api.github.com/gists/starred","team_url":"https://api.github.com/teams","user_url":"https://api.github.com/users/&#123;user&#125;","user_organizations_url":"https://api.github.com/user/orgs","user_repositories_url":"https://api.github.com/users/&#123;user&#125;/repos&#123;?type,page,per_page,sort&#125;","user_search_url":"https://api.github.com/search/users?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;"&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>因为将<code>bytes</code>转换成<code>str</code>需要指定编码的方式，<code>requests</code>会根据响应中的<code>hearders</code>内容来猜测编码的方式，或者，你也可以通过设置<code>.encoding</code>指定编码的方式：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> response<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span> <span class="token comment"># Optional: requests infers this internally</span>
<span class="token operator">>></span><span class="token operator">></span> response<span class="token punctuation">.</span>text
<span class="token string">'&#123;"current_user_url":"https://api.github.com/user","current_user_authorizations_html_url":"https://github.com/settings/connections/applications&#123;/client_id&#125;","authorizations_url":"https://api.github.com/authorizations","code_search_url":"https://api.github.com/search/code?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;","commit_search_url":"https://api.github.com/search/commits?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;","emails_url":"https://api.github.com/user/emails","emojis_url":"https://api.github.com/emojis","events_url":"https://api.github.com/events","feeds_url":"https://api.github.com/feeds","followers_url":"https://api.github.com/user/followers","following_url":"https://api.github.com/user/following&#123;/target&#125;","gists_url":"https://api.github.com/gists&#123;/gist_id&#125;","hub_url":"https://api.github.com/hub","issue_search_url":"https://api.github.com/search/issues?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;","issues_url":"https://api.github.com/issues","keys_url":"https://api.github.com/user/keys","notifications_url":"https://api.github.com/notifications","organization_repositories_url":"https://api.github.com/orgs/&#123;org&#125;/repos&#123;?type,page,per_page,sort&#125;","organization_url":"https://api.github.com/orgs/&#123;org&#125;","public_gists_url":"https://api.github.com/gists/public","rate_limit_url":"https://api.github.com/rate_limit","repository_url":"https://api.github.com/repos/&#123;owner&#125;/&#123;repo&#125;","repository_search_url":"https://api.github.com/search/repositories?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;","current_user_repositories_url":"https://api.github.com/user/repos&#123;?type,page,per_page,sort&#125;","starred_url":"https://api.github.com/user/starred&#123;/owner&#125;&#123;/repo&#125;","starred_gists_url":"https://api.github.com/gists/starred","team_url":"https://api.github.com/teams","user_url":"https://api.github.com/users/&#123;user&#125;","user_organizations_url":"https://api.github.com/user/orgs","user_repositories_url":"https://api.github.com/users/&#123;user&#125;/repos&#123;?type,page,per_page,sort&#125;","user_search_url":"https://api.github.com/search/users?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;"&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>如果你仔细看一下响应的内容，你会发现实际上是序列化的<code>JSON</code>内容。因此，你可以通过<code>.text</code>的方式先获取字符串，然后再通过<a href="https://realpython.com/python-json/#deserializing-json"><code>json.loads()</code></a>的方式获取字典。其实，还有一种更为简单的方法，可以i使用<code>.json()</code>：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span><span class="token string">'current_user_url'</span><span class="token punctuation">:</span> <span class="token string">'https://api.github.com/user'</span><span class="token punctuation">,</span> <span class="token string">'current_user_authorizations_html_url'</span><span class="token punctuation">:</span> <span class="token string">'https://github.com/settings/connections/applications&#123;/client_id&#125;'</span><span class="token punctuation">,</span> <span class="token string">'authorizations_url'</span><span class="token punctuation">:</span> <span class="token string">'https://api.github.com/authorizations'</span><span class="token punctuation">,</span> <span class="token string">'code_search_url'</span><span class="token punctuation">:</span> <span class="token string">'https://api.github.com/search/code?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;'</span><span class="token punctuation">,</span> <span class="token string">'commit_search_url'</span><span class="token punctuation">:</span> <span class="token string">'https://api.github.com/search/commits?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;'</span><span class="token punctuation">,</span> <span class="token string">'emails_url'</span><span class="token punctuation">:</span> <span class="token string">'https://api.github.com/user/emails'</span><span class="token punctuation">,</span> <span class="token string">'emojis_url'</span><span class="token punctuation">:</span> <span class="token string">'https://api.github.com/emojis'</span><span class="token punctuation">,</span> <span class="token string">'events_url'</span><span class="token punctuation">:</span> <span class="token string">'https://api.github.com/events'</span><span class="token punctuation">,</span> <span class="token string">'feeds_url'</span><span class="token punctuation">:</span> <span class="token string">'https://api.github.com/feeds'</span><span class="token punctuation">,</span> <span class="token string">'followers_url'</span><span class="token punctuation">:</span> <span class="token string">'https://api.github.com/user/followers'</span><span class="token punctuation">,</span> <span class="token string">'following_url'</span><span class="token punctuation">:</span> <span class="token string">'https://api.github.com/user/following&#123;/target&#125;'</span><span class="token punctuation">,</span> <span class="token string">'gists_url'</span><span class="token punctuation">:</span> <span class="token string">'https://api.github.com/gists&#123;/gist_id&#125;'</span><span class="token punctuation">,</span> <span class="token string">'hub_url'</span><span class="token punctuation">:</span> <span class="token string">'https://api.github.com/hub'</span><span class="token punctuation">,</span> <span class="token string">'issue_search_url'</span><span class="token punctuation">:</span> <span class="token string">'https://api.github.com/search/issues?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;'</span><span class="token punctuation">,</span> <span class="token string">'issues_url'</span><span class="token punctuation">:</span> <span class="token string">'https://api.github.com/issues'</span><span class="token punctuation">,</span> <span class="token string">'keys_url'</span><span class="token punctuation">:</span> <span class="token string">'https://api.github.com/user/keys'</span><span class="token punctuation">,</span> <span class="token string">'notifications_url'</span><span class="token punctuation">:</span> <span class="token string">'https://api.github.com/notifications'</span><span class="token punctuation">,</span> <span class="token string">'organization_repositories_url'</span><span class="token punctuation">:</span> <span class="token string">'https://api.github.com/orgs/&#123;org&#125;/repos&#123;?type,page,per_page,sort&#125;'</span><span class="token punctuation">,</span> <span class="token string">'organization_url'</span><span class="token punctuation">:</span> <span class="token string">'https://api.github.com/orgs/&#123;org&#125;'</span><span class="token punctuation">,</span> <span class="token string">'public_gists_url'</span><span class="token punctuation">:</span> <span class="token string">'https://api.github.com/gists/public'</span><span class="token punctuation">,</span> <span class="token string">'rate_limit_url'</span><span class="token punctuation">:</span> <span class="token string">'https://api.github.com/rate_limit'</span><span class="token punctuation">,</span> <span class="token string">'repository_url'</span><span class="token punctuation">:</span> <span class="token string">'https://api.github.com/repos/&#123;owner&#125;/&#123;repo&#125;'</span><span class="token punctuation">,</span> <span class="token string">'repository_search_url'</span><span class="token punctuation">:</span> <span class="token string">'https://api.github.com/search/repositories?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;'</span><span class="token punctuation">,</span> <span class="token string">'current_user_repositories_url'</span><span class="token punctuation">:</span> <span class="token string">'https://api.github.com/user/repos&#123;?type,page,per_page,sort&#125;'</span><span class="token punctuation">,</span> <span class="token string">'starred_url'</span><span class="token punctuation">:</span> <span class="token string">'https://api.github.com/user/starred&#123;/owner&#125;&#123;/repo&#125;'</span><span class="token punctuation">,</span> <span class="token string">'starred_gists_url'</span><span class="token punctuation">:</span> <span class="token string">'https://api.github.com/gists/starred'</span><span class="token punctuation">,</span> <span class="token string">'team_url'</span><span class="token punctuation">:</span> <span class="token string">'https://api.github.com/teams'</span><span class="token punctuation">,</span> <span class="token string">'user_url'</span><span class="token punctuation">:</span> <span class="token string">'https://api.github.com/users/&#123;user&#125;'</span><span class="token punctuation">,</span> <span class="token string">'user_organizations_url'</span><span class="token punctuation">:</span> <span class="token string">'https://api.github.com/user/orgs'</span><span class="token punctuation">,</span> <span class="token string">'user_repositories_url'</span><span class="token punctuation">:</span> <span class="token string">'https://api.github.com/users/&#123;user&#125;/repos&#123;?type,page,per_page,sort&#125;'</span><span class="token punctuation">,</span> <span class="token string">'user_search_url'</span><span class="token punctuation">:</span> <span class="token string">'https://api.github.com/search/users?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><code>.json()</code>返回的结果是一个字典，因此你可以通过键来访问字典中的值。</p>
<p>除了状态码和消息正文，你还可以查看响应中的Headers。</p>
<h3 id="报头（Headers）"><a href="#报头（Headers）" class="headerlink" title="报头（Headers）"></a>报头（Headers）</h3><p>响应中的报头通常包含很多有用的信息，例如内容类型，缓存内容的时间限制。</p>
<p>可以通过<code>.headers</code>来查看报头的内容：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> response<span class="token punctuation">.</span>headers
<span class="token punctuation">&#123;</span><span class="token string">'Server'</span><span class="token punctuation">:</span> <span class="token string">'GitHub.com'</span><span class="token punctuation">,</span> <span class="token string">'Date'</span><span class="token punctuation">:</span> <span class="token string">'Mon, 10 Dec 2018 17:49:54 GMT'</span><span class="token punctuation">,</span> <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/json; charset=utf-8'</span><span class="token punctuation">,</span> <span class="token string">'Transfer-Encoding'</span><span class="token punctuation">:</span> <span class="token string">'chunked'</span><span class="token punctuation">,</span> <span class="token string">'Status'</span><span class="token punctuation">:</span> <span class="token string">'200 OK'</span><span class="token punctuation">,</span> <span class="token string">'X-RateLimit-Limit'</span><span class="token punctuation">:</span> <span class="token string">'60'</span><span class="token punctuation">,</span> <span class="token string">'X-RateLimit-Remaining'</span><span class="token punctuation">:</span> <span class="token string">'59'</span><span class="token punctuation">,</span> <span class="token string">'X-RateLimit-Reset'</span><span class="token punctuation">:</span> <span class="token string">'1544467794'</span><span class="token punctuation">,</span> <span class="token string">'Cache-Control'</span><span class="token punctuation">:</span> <span class="token string">'public, max-age=60, s-maxage=60'</span><span class="token punctuation">,</span> <span class="token string">'Vary'</span><span class="token punctuation">:</span> <span class="token string">'Accept'</span><span class="token punctuation">,</span> <span class="token string">'ETag'</span><span class="token punctuation">:</span> <span class="token string">'W/"7dc470913f1fe9bb6c7355b50a0737bc"'</span><span class="token punctuation">,</span> <span class="token string">'X-GitHub-Media-Type'</span><span class="token punctuation">:</span> <span class="token string">'github.v3; format=json'</span><span class="token punctuation">,</span> <span class="token string">'Access-Control-Expose-Headers'</span><span class="token punctuation">:</span> <span class="token string">'ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type'</span><span class="token punctuation">,</span> <span class="token string">'Access-Control-Allow-Origin'</span><span class="token punctuation">:</span> <span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token string">'Strict-Transport-Security'</span><span class="token punctuation">:</span> <span class="token string">'max-age=31536000; includeSubdomains; preload'</span><span class="token punctuation">,</span> <span class="token string">'X-Frame-Options'</span><span class="token punctuation">:</span> <span class="token string">'deny'</span><span class="token punctuation">,</span> <span class="token string">'X-Content-Type-Options'</span><span class="token punctuation">:</span> <span class="token string">'nosniff'</span><span class="token punctuation">,</span> <span class="token string">'X-XSS-Protection'</span><span class="token punctuation">:</span> <span class="token string">'1; mode=block'</span><span class="token punctuation">,</span> <span class="token string">'Referrer-Policy'</span><span class="token punctuation">:</span> <span class="token string">'origin-when-cross-origin, strict-origin-when-cross-origin'</span><span class="token punctuation">,</span> <span class="token string">'Content-Security-Policy'</span><span class="token punctuation">:</span> <span class="token string">"default-src 'none'"</span><span class="token punctuation">,</span> <span class="token string">'Content-Encoding'</span><span class="token punctuation">:</span> <span class="token string">'gzip'</span><span class="token punctuation">,</span> <span class="token string">'X-GitHub-Request-Id'</span><span class="token punctuation">:</span> <span class="token string">'E439:4581:CF2351:1CA3E06:5C0EA741'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><code>.headers</code>返回的是字典类型的<strong>对象</strong>，因此，你可以像访问字典一样来获取值：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> response<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Content-Type'</span><span class="token punctuation">]</span>
<span class="token string">'application/json; charset=utf-8'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>headers对象有一个特殊的地方。由于HTTP标准定义headers不区分大小写，所有，我们访问headers的时候，不需要担心大小写：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> response<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'content-type'</span><span class="token punctuation">]</span>
<span class="token string">'application/json; charset=utf-8'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>以上例子中，无论使用<code>content-type</code>还是<code>Content-Type</code>，你都能得到相同的结果。</p>
<h2 id="查询字符串参数（Query-String-Parameters）"><a href="#查询字符串参数（Query-String-Parameters）" class="headerlink" title="查询字符串参数（Query String Parameters）"></a>查询字符串参数（Query String Parameters）</h2><p>通过在URL中传递查询字符串参数，可以定制GET请求。在方法<code>get()</code>中，可以传递参数<code>params</code>。例如，你可以使用GitHub的查询API来查找<code>requests</code>库。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests

<span class="token comment"># Search GitHub's repositories for requests</span>
response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>
    <span class="token string">'https://api.github.com/search/repositories'</span><span class="token punctuation">,</span>
    params<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'q'</span><span class="token punctuation">:</span> <span class="token string">'requests+language:python'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>

<span class="token comment"># Inspect some attributes of the `requests` repository</span>
json_response <span class="token operator">=</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>
repository <span class="token operator">=</span> json_response<span class="token punctuation">[</span><span class="token string">'items'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Repository name: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>repository<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>  <span class="token comment"># Python 3.6+</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Repository description: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>repository<span class="token punctuation">[</span><span class="token string">"description"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>  <span class="token comment"># Python 3.6+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在方法<code>.get()</code>中，通过将字典<code>&#123;&#39;q&#39;: &#39;requests+language:python&#39;&#125;</code>传递给参数<code>params</code>，你可以改变从查询API返回的结果。</p>
<p>你接可以用字典作为参数<code>params</code>的值，也可以使用以元组为成员的数组作为参数<code>params</code>的值：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token string">'https://api.github.com/search/repositories'</span><span class="token punctuation">,</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     params<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'q'</span><span class="token punctuation">,</span> <span class="token string">'requests+language:python'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span>
<span class="token operator">&lt;</span>Response <span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>甚至，你还可以传递bytes作为值传递给参数：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token string">'https://api.github.com/search/repositories'</span><span class="token punctuation">,</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     params<span class="token operator">=</span><span class="token string">b'q=requests+language:python'</span><span class="token punctuation">,</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span>
<span class="token operator">&lt;</span>Response <span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>查询字符串对于自定义GET请求非常有用。同时，你还可以通过添加或者修改报头来自定义GET请求。</p>
<h2 id="请求报头（Request-Headers）"><a href="#请求报头（Request-Headers）" class="headerlink" title="请求报头（Request Headers）"></a>请求报头（Request Headers）</h2><p>在方法<code>.get()</code>中，你可以通过将字典作为值传递给参数<code>headers</code>的方式，来自定义报头。例如，在之前的查询例子中，你可以通过在<code>Accept</code>报头中指定<code>text-match</code>类型：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests

response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>
    <span class="token string">'https://api.github.com/search/repositories'</span><span class="token punctuation">,</span>
    params<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'q'</span><span class="token punctuation">:</span> <span class="token string">'requests+language:python'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    headers<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'Accept'</span><span class="token punctuation">:</span> <span class="token string">'application/vnd.github.v3.text-match+json'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>

<span class="token comment"># View the new `text-matches` array which provides information</span>
<span class="token comment"># about your search term within the results</span>
json_response <span class="token operator">=</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>
repository <span class="token operator">=</span> json_response<span class="token punctuation">[</span><span class="token string">'items'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Text matches: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>repository<span class="token punctuation">[</span><span class="token string">"text_matches"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>Accept</code>报头可以告诉服务器，你的应用可以处理的消息正文类型。在本例中，你使用的报头值是<code>application/vnd.github.v3.text-match+json</code>，这是GitHub网站<code>Accept</code>报头的专有属性，正文内容是一种特殊的JSON格式。</p>
<p>在学习其它自定义请求的方式之前，我们先简单了解一下其它的HTTP方法。</p>
<h2 id="其它的HTTP方法"><a href="#其它的HTTP方法" class="headerlink" title="其它的HTTP方法"></a>其它的HTTP方法</h2><p>除了GET以前，HTTP还支持<code>POST</code>, <code>PUT</code>, <code>DELETE</code>, <code>HEAD</code>, <code>PATCH</code>和<code>OPTIONS</code>。在<code>requests</code>库中给，这些方法的使用方法和<code>get()</code>相似：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'https://httpbin.org/post'</span><span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'key'</span><span class="token punctuation">:</span><span class="token string">'value'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> requests<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">'https://httpbin.org/put'</span><span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'key'</span><span class="token punctuation">:</span><span class="token string">'value'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> requests<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token string">'https://httpbin.org/delete'</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> requests<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token string">'https://httpbin.org/get'</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> requests<span class="token punctuation">.</span>patch<span class="token punctuation">(</span><span class="token string">'https://httpbin.org/patch'</span><span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'key'</span><span class="token punctuation">:</span><span class="token string">'value'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> requests<span class="token punctuation">.</span>options<span class="token punctuation">(</span><span class="token string">'https://httpbin.org/get'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>以下例子中，每一个函数调用都会对httpbin服务发起相应的HTTP方法。每一种方法，你都可以使用和之前相同的方式，查看服务器响应的内容：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> response <span class="token operator">=</span> requests<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token string">'https://httpbin.org/get'</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> response<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Content-Type'</span><span class="token punctuation">]</span>
<span class="token string">'application/json'</span>

<span class="token operator">>></span><span class="token operator">></span> response <span class="token operator">=</span> requests<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token string">'https://httpbin.org/delete'</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> json_response <span class="token operator">=</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> json_response<span class="token punctuation">[</span><span class="token string">'args'</span><span class="token punctuation">]</span>
<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>报头、响应正文、状态码和其它信息都会包含在每一种HTTP方法的<code>Response</code>中。接下来，你将更为详细地了解<code>POST</code>，<code>PUT</code>和<code>PATCH</code>方法，以及它们之间的区别。</p>
<h2 id="消息正文"><a href="#消息正文" class="headerlink" title="消息正文"></a>消息正文</h2><p>根据HTTP的规格说明，<code>POST</code>，<code>PUT</code>和<code>PATCH</code>都是通过将数据传递给消息正文，而不是通过将查询字符串传递给参数的方式。通过使用<code>requests</code>，你可以将<code>payload</code>传递给<code>data</code>参数。</p>
<p>你可以将字典，元组为成员的列表或者文件对象传递给参数<code>data</code>。在请求的正文中，根据具体的类型需要，你可以采用不同的数据类型：</p>
<p>例如，如果你请求的内容类型为<code>application/x-www-form-urlencoded</code>，那么你就可以将字典作为表格数据，传递给参数<code>data</code>。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'https://httpbin.org/post'</span><span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'key'</span><span class="token punctuation">:</span><span class="token string">'value'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span>Response <span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>你也可以使用以元组为成员的列表：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'https://httpbin.org/post'</span><span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span>Response <span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>但是，如果你需要发送JSON格式的数据，你可以使用参数<code>json</code>。当你将值传递给参数<code>json</code>后，<code>requests</code>库会序列化你的数据和正确的<code>Content-Type</code>报头。</p>
<p><a href="https://httpbin.org/">httpbin.org</a>是由<code>requests</code>库的开发者 <a href="https://realpython.com/interview-kenneth-reitz/">Kenneth Reitz</a>创建的一个用于测试的网站。该网站可以用来测试<code>requests</code>发起的各种请求。例如，你可以用它来测试POST请求：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'https://httpbin.org/post'</span><span class="token punctuation">,</span> json<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'key'</span><span class="token punctuation">:</span><span class="token string">'value'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> json_response <span class="token operator">=</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> json_response<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span>
<span class="token string">'&#123;"key": "value"&#125;'</span>
<span class="token operator">>></span><span class="token operator">></span> json_response<span class="token punctuation">[</span><span class="token string">'headers'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'Content-Type'</span><span class="token punctuation">]</span>
<span class="token string">'application/json'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="检查请求"><a href="#检查请求" class="headerlink" title="检查请求"></a>检查请求</h2><p>在发送请求到服务器之前，<code>requests</code>库会先将请求准备好。请求的准备包括验证报头以及序列化JSON内容。</p>
<p>你可以通过<code>.request</code>来访问准备请求（<code>PrepareRequest</code>）：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'https://httpbin.org/post'</span><span class="token punctuation">,</span> json<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'key'</span><span class="token punctuation">:</span><span class="token string">'value'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> response<span class="token punctuation">.</span>request<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Content-Type'</span><span class="token punctuation">]</span>
<span class="token string">'application/json'</span>
<span class="token operator">>></span><span class="token operator">></span> response<span class="token punctuation">.</span>request<span class="token punctuation">.</span>url
<span class="token string">'https://httpbin.org/post'</span>
<span class="token operator">>></span><span class="token operator">></span> response<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body
<span class="token string">b'&#123;"key": "value"&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>检查准备请求可以让你访问各种信息，包括payload, URL, headers, authentication等等。</p>
<h2 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h2><p>认证可以让服务器知道你是谁。通常情况下，你可以通过<code>Authorization</code>报头提供你的身份信息，或者也可以通过自定义的报头来提供身份信息。在<code>requests</code>中，你可以使用参数<code>auth</code>来传递你的身份信息。</p>
<p>下面以GitHub的<a href="https://developer.github.com/v3/users/#get-the-authenticated-user">Authenticated User</a> API为例。为了访问该API，你需要通过一个元组来传递用户名和密码：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> getpass <span class="token keyword">import</span> getpass
<span class="token operator">>></span><span class="token operator">></span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://api.github.com/user'</span><span class="token punctuation">,</span> auth<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span> getpass<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span>Response <span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>如果身份信息正确，request请求就会返回成功过。如果request请求中没有包含身份信息，服务器就会返回<code>401 Unauthorized</code>：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://api.github.com/user'</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span>Response <span class="token punctuation">[</span><span class="token number">401</span><span class="token punctuation">]</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>当你通过以上这种方式传递身份信息的时候，实际上<code>requests</code>使用的是HTTP的 <a href="https://en.wikipedia.org/wiki/Basic_access_authentication">Basic access authentication scheme</a>。</p>
<p>因此，你还可以使用<code>HTTPBasicAuth</code>来传递身份信息：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> requests<span class="token punctuation">.</span>auth <span class="token keyword">import</span> HTTPBasicAuth
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> getpass <span class="token keyword">import</span> getpass
<span class="token operator">>></span><span class="token operator">></span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token string">'https://api.github.com/user'</span><span class="token punctuation">,</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     auth<span class="token operator">=</span>HTTPBasicAuth<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span> getpass<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span>
<span class="token operator">&lt;</span>Response <span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>除了Basic认证方式以外，<code>requests</code>还支持其它认证方式，例如<code>HTTPDigestAuth</code>和<code>HTTPProxyAuth</code>。</p>
<p>你甚至还可以提供自定义的认证方式。但是，你必须首先创建一个继承<code>AuthBase</code>的子类。然后，你需要定义<code>__call__()</code>函数：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">from</span> requests<span class="token punctuation">.</span>auth <span class="token keyword">import</span> AuthBase

<span class="token keyword">class</span> <span class="token class-name">TokenAuth</span><span class="token punctuation">(</span>AuthBase<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""Implements a custom authentication scheme."""</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>token <span class="token operator">=</span> token

    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""Attach an API token to a custom auth header."""</span>
        r<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'X-TokenAuth'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>token<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span>  <span class="token comment"># Python 3.6+</span>
        <span class="token keyword">return</span> r


requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://httpbin.org/get'</span><span class="token punctuation">,</span> auth<span class="token operator">=</span>TokenAuth<span class="token punctuation">(</span><span class="token string">'12345abcde-token'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>以上例子中，自定义的类<code>TokenAuth</code>会收到一个Token，然后将收到的token放到<code>x-TokenAuth</code>报头中。</p>
<p>不健全的认证机制会导致安全隐患，所以除非有特殊需求，否则应该使用成熟的认证机制，比如Basic或者OAuth。</p>
<h2 id="SSL证书验证"><a href="#SSL证书验证" class="headerlink" title="SSL证书验证"></a>SSL证书验证</h2><p>任何时候，当发送和接收的信息比较机密，安全往往是最重要的。因此，当你访问安全站点的时候，都会通过SSL建立安全连接，这时候对服务器的SSL证书进行验证显得尤为重要。</p>
<p>默认情况下，<code>requests</code>已经为你执行了SSL证书的验证。但是，在某些情况下，你可能希望改变这种默认的行为。</p>
<p>如果你想要关闭SSL证书的验证，你可以将参数<code>verify</code>设置为<code>False</code>：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://api.github.com'</span><span class="token punctuation">,</span> verify<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
InsecureRequestWarning<span class="token punctuation">:</span> Unverified HTTPS request <span class="token keyword">is</span> being made<span class="token punctuation">.</span> Adding certificate verification <span class="token keyword">is</span> strongly advised<span class="token punctuation">.</span> See<span class="token punctuation">:</span> https<span class="token punctuation">:</span><span class="token operator">//</span>urllib3<span class="token punctuation">.</span>readthedocs<span class="token punctuation">.</span>io<span class="token operator">/</span>en<span class="token operator">/</span>latest<span class="token operator">/</span>advanced<span class="token operator">-</span>usage<span class="token punctuation">.</span>html<span class="token comment">#ssl-warnings</span>
  InsecureRequestWarning<span class="token punctuation">)</span>
<span class="token operator">&lt;</span>Response <span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>当你正在访问一个不安全的站点时，<code>requests</code>会发出警告信息提醒你。</p>
<blockquote>
<p>注意：<code>requests</code>使用<a href="http://docs.python-requests.org/en/master/user/advanced/#ca-certificates"><code>certifi</code></a>来提供SSL证书的颁发机构（ Certificate Authorities）。这可以让<code>requests</code>知道有哪些可以信任的证书颁发机构。因此，你需要定期更新<code>certifi</code>来保证安全性。</p>
</blockquote>
<h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p>当在生产环境中使用<code>requests</code>的时候，特别需要考虑性能的影响。<code>requests</code>库的一些特性，例如超时控制（timeout control），会话（sessions）和重试限制（retry limits）可以使得应用运行得更流畅。</p>
<h3 id="Timeouts"><a href="#Timeouts" class="headerlink" title="Timeouts"></a>Timeouts</h3><p>当你向服务发送请求以后，你得应用将会等待服务端的响应，得到响应以后，才会执行下一步操作。如果应用等待的时间太长，请求就会一直处于等待状态，导致用户体验变差，或者后台任务挂起。</p>
<p>默认情况下，<code>requests</code>将会无限制地等待响应，所以你应该指定一个超时的时间值。你可以通过参数<code>timeout</code>来设置超时的时间值。<code>timeout</code>的值可以是整型或者浮点型，时间的单位是秒。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://api.github.com'</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span>Response <span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token operator">></span>
<span class="token operator">>></span><span class="token operator">></span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://api.github.com'</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">3.05</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span>Response <span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>以上例子中，第一个请求的超时时间是1秒，第二个请求的超时时间是3.05秒。</p>
<p>你还可以传递一个<a href="http://docs.python-requests.org/en/master/user/advanced/#timeouts">元组</a>给参数<code>timeout</code>，元组中的第一个值是连接的超时时间（客户端和服务器之间建立连接的时长），第二个值是读取的超时时间（建立连接后，等待响应的超时时间）：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://api.github.com'</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span>Response <span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>如果请求建立连接的时间在2秒以内，建立连接后，接收数据的时间在5秒以内，那么就可以正常获取到响应。但是，如果请求超时，那么函数就会抛出一个<code>Timeout</code>的异常。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">from</span> requests<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> Timeout

<span class="token keyword">try</span><span class="token punctuation">:</span>
    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://api.github.com'</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">except</span> Timeout<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'The request timed out'</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'The request did not time out'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>你的程序可以捕获这个<code>Timeout</code>的异常，并做相应的处理。</p>
<h3 id="The-Session-Object"><a href="#The-Session-Object" class="headerlink" title="The Session Object"></a>The Session Object</h3><p>到目前为止，你都是使用<code>requests</code>的<code>get()</code>和<code>post()</code>来发送请求。这些函数隐藏了一些细节，例如连接是如何建立以及管理的。</p>
<p>实际上，这些细节都是由类<code>Session</code>来负责处理。如果你需要微调你的请求，或者改进性能，你需要直接使用<code>Session</code>的实例。</p>
<p>会话主要是在一些列的请求中，保持持久的参数。例如，如果你想要在多个请求中使用相同的认证信息，你就可以使用会话：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">from</span> getpass <span class="token keyword">import</span> getpass

<span class="token comment"># By using a context manager, you can ensure the resources used by</span>
<span class="token comment"># the session will be released after use</span>
<span class="token keyword">with</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> session<span class="token punctuation">:</span>
    session<span class="token punctuation">.</span>auth <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span> getpass<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token comment"># Instead of requests.get(), you'll use session.get()</span>
    response <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://api.github.com/user'</span><span class="token punctuation">)</span>

<span class="token comment"># You can inspect the response just like you did before</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>每次你用session发起请求，一旦该会话在初始化时，设定了认证的身份信息，那么该身份信息就可以在多个requests中重复使用。</p>
<p>通过session改进性能，主要是通过保持长连接的方式。当你的应用通过Session来发起请求，它就会在连接池中长时间保持该连接。当应用想要再次连接到同一个服务器的时候，就可以重复使用连接池中的连接，而不需要再新建连接。</p>
<h3 id="Max-Retries"><a href="#Max-Retries" class="headerlink" title="Max Retries"></a>Max Retries</h3><p>当请求失败的时候，你可能希望应用重新发起同样的请求。但是，<code>requests</code>默认并不会帮你重新发送请求。为了实现这个功能，你需要使用<a href="http://docs.python-requests.org/en/master/user/advanced/#transport-adapters">Transport Adapter</a>。</p>
<p>Transport Adapters可以让你为每一个需要访问的服务定义一组配置信息。例如，你想要所有访问<code>https://api.github.com</code>的请求失败后都重复三次，你可以创建一个Transport Adapter，设置参数<code>max_retries</code>的值为3，并将其挂载到当前的会话上：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">from</span> requests<span class="token punctuation">.</span>adapters <span class="token keyword">import</span> HTTPAdapter
<span class="token keyword">from</span> requests<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> ConnectionError

github_adapter <span class="token operator">=</span> HTTPAdapter<span class="token punctuation">(</span>max_retries<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>

session <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># Use `github_adapter` for all requests to endpoints that start with this URL</span>
session<span class="token punctuation">.</span>mount<span class="token punctuation">(</span><span class="token string">'https://api.github.com'</span><span class="token punctuation">,</span> github_adapter<span class="token punctuation">)</span>

<span class="token keyword">try</span><span class="token punctuation">:</span>
    session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://api.github.com'</span><span class="token punctuation">)</span>
<span class="token keyword">except</span> ConnectionError <span class="token keyword">as</span> ce<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>ce<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>当你挂载HTTPAdapter， github_adapter到会话的时候，会话会遵循该配置的设置。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过以上内容，你现在可以：</p>
<ul>
<li>发送不同的HTTP请求，例如：GET, POST, PUT</li>
<li>通过修改报头，认证，查询字符串和消息这个问，自定义请求</li>
<li>检查发送给服务器的数据，以及从服务器接收的数据</li>
<li>SSL证书验证</li>
<li>通过max_retries, timeout, Sessions和Transport Adapters，更有效的使用<code>requests</code></li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python-web</tag>
      </tags>
  </entry>
  <entry>
    <title>Python&#39;s f-Strings:改进版格式化字符串语法指南</title>
    <url>/2022/02/07/python/f-strings-ge-shi-hua-zi-fu-chuan/</url>
    <content><![CDATA[<h1 id="Python’s-f-Strings-改进版格式化字符串语法指南"><a href="#Python’s-f-Strings-改进版格式化字符串语法指南" class="headerlink" title="Python’s f-Strings:改进版格式化字符串语法指南"></a>Python’s f-Strings:改进版格式化字符串语法指南</h1><blockquote>
<p>注：本文翻译自<a href="https://realpython.com/python-f-strings/">Python 3’s f-Strings: An Improved String Formatting Syntax (Guide) – Real Python</a>。</p>
</blockquote>
<p>从Python 3.6开始，f-strings是一种全新的格式化字符串方式。f-strings不仅可读性更强，并且简明、快速，与其它格式化字符串的方式相比，不易出错。</p>
<p>通过阅读本文，你将了解为什么要使用f-strings，以及如何使用它。</p>
<p>但是，首先在介绍f-strings之前，我们先回顾一下以前传统的格式化字符串的方式。</p>
<span id="more"></span>

<h2 id="传统的格式化字符串方式"><a href="#传统的格式化字符串方式" class="headerlink" title="传统的格式化字符串方式"></a>传统的格式化字符串方式</h2><p>在Python 3.6以前，主要有两种格式化字符串的方式：<code>%</code>格式化和<code>str.format()</code>。我们先简单回顾一下如何使用这两种方式，以及它们有哪些局限性。</p>
<h3 id="方法一：-格式化"><a href="#方法一：-格式化" class="headerlink" title="方法一：%格式化"></a>方法一：%格式化</h3><p>%格式化是Python最原始的字符串格式化方式。详情可以参考文档：<a href="https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting">Python docs</a>。根据文档的介绍，并不推荐使用%格式化方式，具体内容如下：</p>
<blockquote>
<p>%格式化字符串的方式会导致程序出现一些错误，例如无法正确显示元组和字典。</p>
<p>建议使用新的格式化字符串方式避免这些错误。新的方法不仅功能更加强大，且可扩展性更强。</p>
</blockquote>
<p> <strong>如何使用%格式化</strong></p>
<p>字符串对象本身具有内置的操作符%，通过该操作符可以用来格式化字符串：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> name <span class="token operator">=</span> <span class="token string">"Eric"</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token string">"Hello, %s."</span> <span class="token operator">%</span> name
<span class="token string">'Hello, Eric.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>为了能够在字符串中插入更多的变量，你必须使用元组来存储这些变量：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> name <span class="token operator">=</span> <span class="token string">"Eric"</span>
<span class="token operator">>></span><span class="token operator">></span> age <span class="token operator">=</span> <span class="token number">74</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token string">"Hello, %s. You are %s."</span> <span class="token operator">%</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span>
<span class="token string">'Hello Eric. You are 74.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>为什么不推荐使用%格式化</strong></p>
<p>虽然上面的例子看起来很简单，但是，一旦你需要使用许多的参数，并且字符串很长的时候，代码的可读性就会变得很差：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> first_name <span class="token operator">=</span> <span class="token string">"Eric"</span>
<span class="token operator">>></span><span class="token operator">></span> last_name <span class="token operator">=</span> <span class="token string">"Idle"</span>
<span class="token operator">>></span><span class="token operator">></span> age <span class="token operator">=</span> <span class="token number">74</span>
<span class="token operator">>></span><span class="token operator">></span> profession <span class="token operator">=</span> <span class="token string">"comedian"</span>
<span class="token operator">>></span><span class="token operator">></span> affiliation <span class="token operator">=</span> <span class="token string">"Monty Python"</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token string">"Hello, %s %s. You are %s. You are a %s. You were a member of %s."</span> <span class="token operator">%</span> <span class="token punctuation">(</span>first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> profession<span class="token punctuation">,</span> affiliation<span class="token punctuation">)</span>
<span class="token string">'Hello, Eric Idle. You are 74. You are a comedian. You were a member of Monty Python.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>以上这种情况，代码就会变得十分冗长，并且非常容易出现错误，例如出现不显示元组和字典的问题。</p>
<h3 id="方法二：str-format"><a href="#方法二：str-format" class="headerlink" title="方法二：str.format()"></a>方法二：str.format()</h3><p>在Python 2.6中，<code>str.format()</code>是一种新的格式化字符串的方式。</p>
<p><strong>如何使用str.format()</strong></p>
<p><code>str.format()</code>是%格式化的改进版。它使用函数调用的方式将对象格式化成字符串。</p>
<p>使用<code>str.format()</code>时，将大括号替换成对应的变量：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"Hello, &#123;&#125;. You are &#123;&#125;."</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span>
<span class="token string">'Hello, Eric. You are 74.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>你还可以在大括号中使用索引值来引用对应的变量，这种方式使得引用变量与顺序无关：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">"Hello, &#123;1&#125;. You are &#123;0&#125;."</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>age<span class="token punctuation">,</span> name<span class="token punctuation">)</span>
<span class="token string">'Hello, Eric. You are 74.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>你可以使用关键字参数的方式，在大括号中插入变量名，然后在format()中为参数赋值：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Eric'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">74</span><span class="token punctuation">&#125;</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token string">"Hello, &#123;name&#125;. You are &#123;age&#125;."</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token operator">=</span>person<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> age<span class="token operator">=</span>person<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token string">'Hello, Eric. You are 74.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>你还可以使用<code>**</code>的方式将字典作为参数：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Eric'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">74</span><span class="token punctuation">&#125;</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token string">"Hello, &#123;name&#125;. You are &#123;age&#125;."</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token operator">**</span>person<span class="token punctuation">)</span>
<span class="token string">'Hello, Eric. You are 74.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><strong>为什么不推荐使用str.format()</strong></p>
<p>相比于%格式化，<code>str.format()</code>的可读性更强，但是在处理多个参数以及长字符串的情况下，代码仍然显得过于冗长：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> first_name <span class="token operator">=</span> <span class="token string">"Eric"</span>
<span class="token operator">>></span><span class="token operator">></span> last_name <span class="token operator">=</span> <span class="token string">"Idle"</span>
<span class="token operator">>></span><span class="token operator">></span> age <span class="token operator">=</span> <span class="token number">74</span>
<span class="token operator">>></span><span class="token operator">></span> profession <span class="token operator">=</span> <span class="token string">"comedian"</span>
<span class="token operator">>></span><span class="token operator">></span> affiliation <span class="token operator">=</span> <span class="token string">"Monty Python"</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"Hello, &#123;first_name&#125; &#123;last_name&#125;. You are &#123;age&#125;. "</span> <span class="token operator">+</span> 
<span class="token operator">>></span><span class="token operator">></span>        <span class="token string">"You are a &#123;profession&#125;. You were a member of &#123;affiliation&#125;."</span><span class="token punctuation">)</span> \
<span class="token operator">>></span><span class="token operator">></span>        <span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>first_name<span class="token operator">=</span>first_name<span class="token punctuation">,</span> last_name<span class="token operator">=</span>last_name<span class="token punctuation">,</span> age<span class="token operator">=</span>age<span class="token punctuation">,</span> \
<span class="token operator">>></span><span class="token operator">></span>                profession<span class="token operator">=</span>profession<span class="token punctuation">,</span> affiliation<span class="token operator">=</span>affiliation<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token string">'Hello, Eric Idle. You are 74. You are a comedian. You were a member of Monty Python.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>虽然你可以使用字典的方式传递参数，例如<code>.format(**some_dict)</code>，但是其实有更好的方法。</p>
<h2 id="f-strings-一种全新的改进版格式化字符串方式"><a href="#f-strings-一种全新的改进版格式化字符串方式" class="headerlink" title="f-strings: 一种全新的改进版格式化字符串方式"></a>f-strings: 一种全新的改进版格式化字符串方式</h2><p><strong>f-strings</strong>全称为“formatted string literals”，表达式的开头用字母f表示，大括号中包含的表达式会被替换成对应的值。大括号中的表达式通常在运行时被运算出结果，然后用<code>__format__</code>协议将对象格式化成字符串。关于f-strings的详细介绍，请参考文档： <a href="https://docs.python.org/3/reference/lexical_analysis.html#f-strings">Python docs</a>。</p>
<h3 id="简单的语法"><a href="#简单的语法" class="headerlink" title="简单的语法"></a>简单的语法</h3><p>f-strings的语法与<code>str.format()</code>相似，但是比它更简单。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> name <span class="token operator">=</span> <span class="token string">"Eric"</span>
<span class="token operator">>></span><span class="token operator">></span> age <span class="token operator">=</span> <span class="token number">74</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token string-interpolation"><span class="token string">f"Hello, </span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">. You are </span><span class="token interpolation"><span class="token punctuation">&#123;</span>age<span class="token punctuation">&#125;</span></span><span class="token string">."</span></span>
<span class="token string">'Hello, Eric. You are 74.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>f-strings同时支持大写的F和小写的f:</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string-interpolation"><span class="token string">F"Hello, </span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">. You are </span><span class="token interpolation"><span class="token punctuation">&#123;</span>age<span class="token punctuation">&#125;</span></span><span class="token string">."</span></span>
<span class="token string">'Hello, Eric. You are 74.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="支持任意的表达式"><a href="#支持任意的表达式" class="headerlink" title="支持任意的表达式"></a>支持任意的表达式</h3><p>因为f-strings在运行时会对表达式进行运算，所以你可以在大括号中使用任何有效的表达式。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">37</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>
<span class="token string">'74'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>你也可以调用函数：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">to_lowercase</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">return</span> <span class="token builtin">input</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token operator">>></span><span class="token operator">></span> name <span class="token operator">=</span> <span class="token string">"Eric Idle"</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>to_lowercase<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string"> is funny."</span></span>
<span class="token string">'eric idle is funny.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>你还可以直接使用方法：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string"> is funny."</span></span>
<span class="token string">'eric idle is funny.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>你在类中也可以使用f-strings调用类的属性：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Comedian</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>first_name <span class="token operator">=</span> first_name
        self<span class="token punctuation">.</span>last_name <span class="token operator">=</span> last_name
        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age

    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>first_name<span class="token punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>last_name<span class="token punctuation">&#125;</span></span><span class="token string"> is </span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>age<span class="token punctuation">&#125;</span></span><span class="token string">."</span></span>

    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>first_name<span class="token punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>last_name<span class="token punctuation">&#125;</span></span><span class="token string"> is </span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>age<span class="token punctuation">&#125;</span></span><span class="token string">. Surprise!"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然后，你可以这样：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> new_comedian <span class="token operator">=</span> Comedian<span class="token punctuation">(</span><span class="token string">"Eric"</span><span class="token punctuation">,</span> <span class="token string">"Idle"</span><span class="token punctuation">,</span> <span class="token string">"74"</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>new_comedian<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>
<span class="token string">'Eric Idle is 74.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><code>__str__()</code>和<code>__repr__()</code>主要用于将对象表示为字符串，所以你需要确保在类的定义中，至少使用其中一种方法。如果要在两种方法中选择其一，建议你使用<code>__repr__()</code>。</p>
<p><code>__str__()</code>返回的是对象的非正式字符串表达式，可读性比较强，主要面向的是最终用户。</p>
<p><code>__repr__()</code>返回的是对象的正式字符串表达式，并且没有任何歧义，主要面向的是开发人员。</p>
<p>对于访问<code>__str__()</code>和<code>__repr__()</code>，建议使用<code>str()</code>和<code>repr()</code>。</p>
<p>默认情况下，f-strings使用<code>__str__()</code>，但是你也可以使用转换标识符<code>!r</code>来使用<code>__repr__()</code>。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>new_comedian<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>
<span class="token string">'Eric Idle is 74.'</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>new_comedian<span class="token conversion-option punctuation">!r</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>
<span class="token string">'Eric Idle is 74. Surprise!'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="多行f-Strings"><a href="#多行f-Strings" class="headerlink" title="多行f-Strings"></a>多行f-Strings</h3><p>你可以使用多行字符串：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> name <span class="token operator">=</span> <span class="token string">"Eric"</span>
<span class="token operator">>></span><span class="token operator">></span> profession <span class="token operator">=</span> <span class="token string">"comedian"</span>
<span class="token operator">>></span><span class="token operator">></span> affiliation <span class="token operator">=</span> <span class="token string">"Monty Python"</span>
<span class="token operator">>></span><span class="token operator">></span> message <span class="token operator">=</span> <span class="token punctuation">(</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token string-interpolation"><span class="token string">f"Hi </span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">. "</span></span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token string-interpolation"><span class="token string">f"You are a </span><span class="token interpolation"><span class="token punctuation">&#123;</span>profession<span class="token punctuation">&#125;</span></span><span class="token string">. "</span></span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token string-interpolation"><span class="token string">f"You were in </span><span class="token interpolation"><span class="token punctuation">&#123;</span>affiliation<span class="token punctuation">&#125;</span></span><span class="token string">."</span></span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> message
<span class="token string">'Hi Eric. You are a comedian. You were in Monty Python.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>但是，你需要记住在每一行字符串的开始部分加上<code>f</code>。</p>
<p>下面是一个错误的示例：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> message <span class="token operator">=</span> <span class="token punctuation">(</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token string-interpolation"><span class="token string">f"Hi </span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">. "</span></span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token string">"You are a &#123;profession&#125;. "</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token string">"You were in &#123;affiliation&#125;."</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> message
<span class="token string">'Hi Eric. You are a &#123;profession&#125;. You were in &#123;affiliation&#125;.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>以上例子中，由于没有在每一行添加<code>f</code>，所以，就导致结果出现异常。</p>
<p>如果你想要将字符串分布到多行，你还可以使用<code>\</code>来转义换行符：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> message <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"Hi </span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">. "</span></span> \
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>           <span class="token string-interpolation"><span class="token string">f"You are a </span><span class="token interpolation"><span class="token punctuation">&#123;</span>profession<span class="token punctuation">&#125;</span></span><span class="token string">. "</span></span> \
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>           <span class="token string-interpolation"><span class="token string">f"You were in </span><span class="token interpolation"><span class="token punctuation">&#123;</span>affiliation<span class="token punctuation">&#125;</span></span><span class="token string">."</span></span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">>></span><span class="token operator">></span> message
<span class="token string">'Hi Eric. You are a comedian. You were in Monty Python.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>但是，如果使用<code>&quot;&quot;&quot;</code>，情况又会有所不同：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> message <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"""
...     Hi </span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">. 
...     You are a </span><span class="token interpolation"><span class="token punctuation">&#123;</span>profession<span class="token punctuation">&#125;</span></span><span class="token string">. 
...     You were in </span><span class="token interpolation"><span class="token punctuation">&#123;</span>affiliation<span class="token punctuation">&#125;</span></span><span class="token string">.
... """</span></span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">>></span><span class="token operator">></span> message
<span class="token string">'\n    Hi Eric.\n    You are a comedian.\n    You were in Monty Python.\n'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="速度"><a href="#速度" class="headerlink" title="速度"></a>速度</h3><p>f-strings的f也有快速的意思。</p>
<p>f-strings的运行速度比%格式化和<code>stri.format()</code>都要快。以下是官方的说明：</p>
<blockquote>
<p>“F-strings provide a way to embed expressions inside string literals, using a minimal syntax. It should be noted that an f-string is really an expression evaluated at run time, not a constant value. In Python source code, an f-string is a literal string, prefixed with <code>f</code>, which contains expressions inside braces. The expressions are replaced with their values.” (<a href="https://www.python.org/dev/peps/pep-0498/#abstract">Source</a>)</p>
</blockquote>
<p>在运行时，大括号中的表达式在它自己的范围（scope）内完成运算，然后再与其它字符串组合成完整的字符串，并返回结果。</p>
<p>以下是几种格式化字符串方法的速度对比：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> timeit
<span class="token operator">>></span><span class="token operator">></span> timeit<span class="token punctuation">.</span>timeit<span class="token punctuation">(</span><span class="token triple-quoted-string string">"""name = "Eric"
... age = 74
... '%s is %s.' % (name, age)"""</span><span class="token punctuation">,</span> number <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">)</span>
<span class="token number">0.003324444866599663</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> timeit<span class="token punctuation">.</span>timeit<span class="token punctuation">(</span><span class="token triple-quoted-string string">"""name = "Eric"
... age = 74
... '&#123;&#125; is &#123;&#125;.'.format(name, age)"""</span><span class="token punctuation">,</span> number <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">)</span>
<span class="token number">0.004242089427570761</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> timeit<span class="token punctuation">.</span>timeit<span class="token punctuation">(</span><span class="token triple-quoted-string string">"""name = "Eric"
... age = 74
... f'&#123;name&#125; is &#123;age&#125;.'"""</span><span class="token punctuation">,</span> number <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">)</span>
<span class="token number">0.0024820892040722242</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>从对比结果可以看出，f-strings的运行速度最快。</p>
<p>尽管如此，但是也有一些特例。具体详情，请参考以下内容：</p>
<ul>
<li><p><a href="https://stackoverflow.com/questions/37365311/why-were-literal-formatted-strings-f-strings-so-slow-in-python-3-6-alpha-now">performance - Why were literal formatted strings (f-strings) so slow in Python 3.6 alpha? (now fixed in 3.6 stable) - Stack Overflow</a></p>
</li>
<li><p><a href="https://bugs.python.org/issue27078"><code>BUILD_STRING</code> opcode</a></p>
</li>
</ul>
<h2 id="f-strings的一些细节"><a href="#f-strings的一些细节" class="headerlink" title="f-strings的一些细节"></a>f-strings的一些细节</h2><p>关于f-strings的使用，有一些细节还需要我们了解并且记住。</p>
<h3 id="引号"><a href="#引号" class="headerlink" title="引号"></a>引号</h3><p>你可以在f-strings中使用任何一种引号，但是必须确保与f-strings最外侧的引号不同。</p>
<p>以下代码可以工作：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token string">'Eric Idle'</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>
<span class="token string">'Eric Idle'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>以下代码也可以工作：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token string">"Eric Idle"</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span>
<span class="token string">'Eric Idle'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>你也可以使用三引号：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string-interpolation"><span class="token string">f"""Eric Idle"""</span></span>
<span class="token string">'Eric Idle'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string-interpolation"><span class="token string">f'''Eric Idle'''</span></span>
<span class="token string">'Eric Idle'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>如果你想使用与外侧相同的引号，可以使用转义符号<code>\</code>:</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string-interpolation"><span class="token string">f"The \"comedian\" is </span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">, aged </span><span class="token interpolation"><span class="token punctuation">&#123;</span>age<span class="token punctuation">&#125;</span></span><span class="token string">."</span></span>
<span class="token string">'The "comedian" is Eric Idle, aged 74.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><p>当使用字典的时候，我们应该注意。如果你对字典的键使用单引号，那么记住f-strings外侧必须使用双引号。</p>
<p>以下例子可以正常工作：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> comedian <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Eric Idle'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">74</span><span class="token punctuation">&#125;</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token string-interpolation"><span class="token string">f"The comedian is </span><span class="token interpolation"><span class="token punctuation">&#123;</span>comedian<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">, aged </span><span class="token interpolation"><span class="token punctuation">&#123;</span>comedian<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">."</span></span>
The comedian <span class="token keyword">is</span> Eric Idle<span class="token punctuation">,</span> aged <span class="token number">74.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>但是下面的例子就会报错：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> comedian <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Eric Idle'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">74</span><span class="token punctuation">&#125;</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token string-interpolation"><span class="token string">f'The comedian is &#123;comedian['</span></span>name<span class="token string">']&#125;, aged &#123;comedian['</span>age<span class="token string">']&#125;.'</span>
  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span>
    <span class="token string-interpolation"><span class="token string">f'The comedian is &#123;comedian['</span></span>name<span class="token string">']&#125;, aged &#123;comedian['</span>age<span class="token string">']&#125;.'</span>
                                    <span class="token operator">^</span>
SyntaxError<span class="token punctuation">:</span> invalid syntax<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果字典的键使用的引号与f-strings外侧的引号相同，那么，字典的第一个键的引号就会被Python解释器识别为是字符串的结尾。</p>
<h3 id="括号"><a href="#括号" class="headerlink" title="括号"></a>括号</h3><p>为了在结果的字符串中显示括号，你必须使用双括号：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string-interpolation"><span class="token string">f"&#123;&#123;70 + 4&#125;&#125;"</span></span>
<span class="token string">'&#123;70 + 4&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>注意虽然使用了三个括号，但是结果仍然只会显示单括号：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string-interpolation"><span class="token string">f"&#123;&#123;</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token number">70</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">&#125;</span></span><span class="token string">&#125;&#125;"</span></span>
<span class="token string">'&#123;74&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>但是，如果使用四个括号，结果就会显示双括号：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> name <span class="token operator">=</span> <span class="token string">"Eric Idle"</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>
<span class="token string">'Eric Idle'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="内联注释"><a href="#内联注释" class="headerlink" title="内联注释"></a>内联注释</h3><p>大括号中不应该包含用#号的注释语句，否则会报错：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string-interpolation"><span class="token string">f"Eric is </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">37</span> <span class="token comment">#Oh my!&#125;</span></span><span class="token string">."</span></span>
  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span>
    <span class="token string-interpolation"><span class="token string">f"Eric is </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">37</span> <span class="token comment">#Oh my!&#125;</span></span><span class="token string">."</span></span>
                                <span class="token operator">^</span>
SyntaxError<span class="token punctuation">:</span> f<span class="token operator">-</span>string expression part cannot include <span class="token string">'#'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>你仍然可以使用以前的格式化字符串方式，但是f-strings更加简明，可读性强并且方便。想要了解更多关于字符串的内容，请参考以下文档：</p>
<ul>
<li><a href="https://www.python.org/dev/peps/pep-0502/">PEP 502</a></li>
<li><a href="https://www.python.org/dev/peps/pep-0536/">PEP 536 draft</a></li>
<li><a href="https://realpython.com/python-string-formatting/">Python String Formatting Best Practices</a> by Dan Bader</li>
<li><a href="https://realpython.com/python-web-scraping-practical-introduction/">Practical Introduction to Web Scraping in Python</a> by Colin OKeefe</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python-basic</tag>
      </tags>
  </entry>
  <entry>
    <title>super()函数介绍</title>
    <url>/2022/02/17/python/super-han-shu/</url>
    <content><![CDATA[<h1 id="super-函数介绍"><a href="#super-函数介绍" class="headerlink" title="super()函数介绍"></a>super()函数介绍</h1><blockquote>
<p>注：本文翻译自<a href="https://realpython.com/python-super/">Supercharge Your Classes With Python super()</a>。</p>
</blockquote>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><strong>简单来说，super()函数可以让你在子类中访问父类中的方法。</strong>通过在子类中调用super()函数，可以返回父类的一个对象，从而访问父类中的方法。</p>
<p>什么情况下需要使用super()函数函数呢？</p>
<p>通常情况下，使用super()函数主要是为了在父类的基础上，扩展子类的功能。这样，既避免了在子类中重写父类的代码，也可以减少对父类的代码更改。</p>
<span id="more"></span>

<h2 id="单重继承"><a href="#单重继承" class="headerlink" title="单重继承"></a>单重继承</h2><p>如果你对面向对象的编程不是十分了解，那么你可能也不太了解<strong>继承</strong>（ <strong>inheritance</strong>）这个术语。在类中，继承是指一个类可以从另外一个类中派生或者继承其所有的属性和方法，而不用在重新实现。</p>
<p>让我们来举例说明：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Rectangle</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> length<span class="token punctuation">,</span> width<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>length <span class="token operator">=</span> length
        self<span class="token punctuation">.</span>width <span class="token operator">=</span> width

    <span class="token keyword">def</span> <span class="token function">area</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>length <span class="token operator">*</span> self<span class="token punctuation">.</span>width

    <span class="token keyword">def</span> <span class="token function">perimeter</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>width

<span class="token keyword">class</span> <span class="token class-name">Square</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>length <span class="token operator">=</span> length

    <span class="token keyword">def</span> <span class="token function">area</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>length <span class="token operator">*</span> self<span class="token punctuation">.</span>length

    <span class="token keyword">def</span> <span class="token function">perimeter</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">4</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>length<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上例中，又两个相似的类：<code>Rectangle</code>和<code>Square</code>。</p>
<p>你可以像下面这样来使用这两个类：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> square <span class="token operator">=</span> Square<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> square<span class="token punctuation">.</span>area<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">16</span>
<span class="token operator">>></span><span class="token operator">></span> rectangle <span class="token operator">=</span> Rectangle<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> rectangle<span class="token punctuation">.</span>area<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在该例中，这两个形状有一种相关性：正方形是一种特殊的长方形。但是，以上代码中并没有体现出这种相关性，因此，代码存在重复的地方。</p>
<p>通过使用继承，根据两种形状的关系，你可以减少代码的编写：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Rectangle</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> length<span class="token punctuation">,</span> width<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>length <span class="token operator">=</span> length
        self<span class="token punctuation">.</span>width <span class="token operator">=</span> width

    <span class="token keyword">def</span> <span class="token function">area</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>length <span class="token operator">*</span> self<span class="token punctuation">.</span>width

    <span class="token keyword">def</span> <span class="token function">perimeter</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>width

<span class="token comment"># Here we declare that the Square class inherits from the Rectangle class</span>
<span class="token keyword">class</span> <span class="token class-name">Square</span><span class="token punctuation">(</span>Rectangle<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>length<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里，你使用<code>super()</code>函数来调用<code>Rectangle</code>类中的初始化函数<code>__init__()</code>，这就使得你不用在<code>Square</code>类中编写重复的代码。在下面的使用中，<code>Square</code>类的核心功能仍然是与<code>Rectangle</code>类相同的：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> square <span class="token operator">=</span> Square<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> square<span class="token punctuation">.</span>area<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">16</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>在上例中，<code>Rectangle</code>是超类， <code>Square</code>是子类。</p>
<p>由于<code>Square</code>和<code>Rectangle</code>类的初始化函数<code>__init__()</code>非常相似，所以你可以直接通过<code>super()</code>函数调用父类的初始化函数<code>__init__()</code>。通过用一个参数<code>length</code>来设置父类初始化函数的参数<code>lenght</code>和<code>width</code>，实现了<code>Square</code>的构造函数。</p>
<blockquote>
<p>笔记：当使用<code>Square</code>类时，例如定义<code>Square</code>类的实例时。如果<code>Square</code>类中没有定义析构函数<code>__init__()</code>，则使用父类<code>Rectangle</code>类中的析构函数。但是，如果<code>Square</code>类中定义了析构函数<code>__init__()</code>，则使用Square类自身的析构函数。</p>
</blockquote>
<p>当你使用<code>Square</code>类的时候，虽然没有为该类显示地编写实现属性和方法的代码，但是当访问<code>.area()</code>方法的时候，将会使用父类<code>Rectangle</code>的方法。因为<code>Square</code>类从父类<code>Rectangle</code>继承了<code>.area()</code>的方法。</p>
<blockquote>
<p>注意：如果想学习更多关于Python类和继承的内容，请参考文档：<a href="https://realpython.com/inheritance-composition-python/">Inheritance and Composition: A Python OOP Guide</a> 和 <a href="https://realpython.com/python3-object-oriented-programming/">Object-Oriented Programming (OOP) in Python 3</a>。</p>
</blockquote>
<h2 id="super-可以做什么"><a href="#super-可以做什么" class="headerlink" title="super()可以做什么"></a>super()可以做什么</h2><p>那么，函数<code>super()</code>可以为你在单重继承中做什么呢？</p>
<p>与其它面向对象的语言相同，它可以让你在子类中调用父类的方法。但是，主要的用途是在子类中，进一步扩展继承自父类的方法的功能。</p>
<p>在以下例子中，你将创建一个名为<code>Cube</code>的类，该类会从<code>Square</code>类继承<code>.area()</code>方法，并通过扩展<code>.area()</code>的功能来计算<code>Cube</code>实例的表面积和容量。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Square</span><span class="token punctuation">(</span>Rectangle<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>length<span class="token punctuation">,</span> length<span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Cube</span><span class="token punctuation">(</span>Square<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">surface_area</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        face_area <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>area<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> face_area <span class="token operator">*</span> <span class="token number">6</span>

    <span class="token keyword">def</span> <span class="token function">volume</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        face_area <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>area<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> face_area <span class="token operator">*</span> self<span class="token punctuation">.</span>length<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>现在你已经创建好了类，下面让我们来计算一下边长为3的Cube的表面积和容量：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> cube <span class="token operator">=</span> Cube<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> cube<span class="token punctuation">.</span>surface_area<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">54</span>
<span class="token operator">>></span><span class="token operator">></span> cube<span class="token punctuation">.</span>volume<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">27</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>注意：在上面的例子中，函数<code>super()</code>本身并不会帮你调用方法：你必须通过proxy object来调用方法。</p>
</blockquote>
<p>在<code>Cube</code>类中，你实现了两个方法：<code>.surface_area()</code>和<code>.volume()</code>。这两种计算方法都需要计算Cube的单个面积，因此，你可以通过<code>super()</code>函数来扩展面积计算的功能。</p>
<p>同时，请注意到在<code>Cube</code>类中，并没有定义构造函数<code>__init__()</code>。首先，<code>Cube</code>继承了<code>Square</code>所有的特性和方法，并且，<code>Cube</code>需要定义的构造函数<code>__init__()</code>与<code>Square</code>的没有什么区别，因此，你不需要再为<code>Cube</code>类重复定义构造函数<code>__init__()</code>，<code>Cube</code>类会自动调用父类<code>Square</code>的构造函数<code>__init__()</code>。</p>
<p>函数<code>super()</code>返回了一个父类的代理对象（delegate object），所以你可以直接调用方法：<code>super().area()</code>。</p>
<p>这不仅使得我们不需要重写计算面积的代码，并且还可以在一个位置更改<code>.area()</code>的内部逻辑。对于一个父类有多个子类的情况，这特别有用。</p>
<h2 id="深入理解super"><a href="#深入理解super" class="headerlink" title="深入理解super()"></a>深入理解super()</h2><h2 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h2><h3 id="多重继承简介"><a href="#多重继承简介" class="headerlink" title="多重继承简介"></a>多重继承简介</h3><h3 id="方法解析顺序（Method-Resolution-Order）"><a href="#方法解析顺序（Method-Resolution-Order）" class="headerlink" title="方法解析顺序（Method Resolution Order）"></a>方法解析顺序（Method Resolution Order）</h3><h3 id="多重继承的其它方法"><a href="#多重继承的其它方法" class="headerlink" title="多重继承的其它方法"></a>多重继承的其它方法</h3><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python-intermediate</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象的编程</title>
    <url>/2022/02/20/python/mian-xiang-dui-xiang-de-bian-cheng/</url>
    <content><![CDATA[<h1 id="面向对象的编程"><a href="#面向对象的编程" class="headerlink" title="面向对象的编程"></a>面向对象的编程</h1><blockquote>
<p>注：本文翻译自<a href="https://realpython.com/python3-object-oriented-programming/">Object-Oriented Programming (OOP) in Python 3 – Real Python</a>。</p>
</blockquote>
<p><strong>面向对象的编程</strong>（<strong>Object-oriented programming</strong> ）是一种构建程序的方式，这种方式将相关的属性和行为绑定到个别的对象上。通过本文，你将了解到关于面向对象编程的基础知识。</p>
<p>理论上来说，对象就好像是一个系统的组件。如果将一个程序想象成一家工厂的各种装配线。在装配线上的每一个环境，系统的部件都会对原材料进行加工处理，最后，原材料被加工成一个产品。</p>
<p>一个对象包含数据（就像是装配线上需要处理的原材料）和行为（装配线上的组件执行的操作）。</p>
<span id="more"></span>

<h2 id="什么是面向对象的编程"><a href="#什么是面向对象的编程" class="headerlink" title="什么是面向对象的编程"></a>什么是面向对象的编程</h2><p><strong>面向对象的编程</strong>（<strong>Object-oriented programming</strong> ）是一种编程的范式。它提供了一种构建程序的方式，这种方式将相关的属性和行为绑定到个别的对象上。</p>
<p>例如，一个对象可以代表一个人，这个人拥有属性，如姓名，年龄和地址，以及拥有行为（方法），例如行走，讲话，呼吸和奔跑。或者一个对象也可以代表一封邮寄，这封邮件拥有属性，如收件人列表，主题和正文，以及拥有行为，例如添加附件和发送。</p>
<p>换一种说法，面向对象的编程用一种建模的方法来描述现实世界的事物，例如汽车，以及相关的事务，如工厂和工人，学生和老师等等。面向对象的编程通过建模的方式，将现实世界的个体描述为软件的对象，这些对象拥有相关的数据和哈数。</p>
<p>另外一种常见的编程方式是面向过程的编程。这种方式就像是一本菜谱，提供了一系列的步骤，以函数和代码块的方式，按顺序完成任务。</p>
<p>关键点是，对象是面向对象编程的核心，对象不仅代表数据，同时也代表了程序的整体结构。</p>
<h2 id="定义一个类"><a href="#定义一个类" class="headerlink" title="定义一个类"></a>定义一个类</h2><p>基础的数据结构，如数字、字符串和列表，主要分别用来表示简单的信息，例如苹果的加个，诗的名称或者你喜欢的颜色。但是，如果你想要表示更为复杂的信息该怎么办呢？</p>
<p>例如，假设你想要记录组织的员工信息。你需要存储每一个员工的基本信息，例如他们的名字、年龄、职位和工作年限。</p>
<p>一种方式是通过列表来表示每一个员工的信息：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">kirk <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"James Kirk"</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token string">"Captain"</span><span class="token punctuation">,</span> <span class="token number">2265</span><span class="token punctuation">]</span>
spock <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Spock"</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token string">"Science Officer"</span><span class="token punctuation">,</span> <span class="token number">2254</span><span class="token punctuation">]</span>
mccoy <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Leonard McCoy"</span><span class="token punctuation">,</span> <span class="token string">"Chief Medical Officer"</span><span class="token punctuation">,</span> <span class="token number">2266</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>如果使用以上这种方式，会存在一些问题。</p>
<p>首先，它使得代码文件难以管理。如果你定义了<code>kirk</code>列表以后，隔了很多行才引用<code>kirk[0]</code>，你还会记得索引值为0的列表元素对应的是员工的名字吗？</p>
<p>其次，如果每一个员工在列表中的信息数量并不相同，就会导致代码运行出错。以上例子中，<code>mccoy</code>列表缺少年龄的信息，因此<code>mccoy[1]</code>返回的是”Chief Medical Officer”，而不是Dr. McCoy的年龄。</p>
<p>一种比较好的解决方式是使用类。</p>
<h3 id="类和实例"><a href="#类和实例" class="headerlink" title="类和实例"></a>类和实例</h3><p>类用于创建用户自己定义的数据结构。类定义的函数成为<strong>方法</strong>（<strong>methods</strong>）。方法定义了对象可以对数据所作的操作。</p>
<p>本文中，你将创建一个名为<code>Dog</code>的类，该类将用来存储狗的信息以及行为。</p>
<p>一个类本身并不包含任何数据，而是一种蓝图，用来定义事物。<code>Dog</code>类定义了狗的名字和年龄，但是并没有包含某一条狗的具体名字和年龄。</p>
<p>既然类是一种蓝图，那么实例就是根据蓝图创建的对象，包含实际的数据。一个<code>Dog</code>类的实例不再是一种蓝图，它是一只实际的狗，有名字，例如Miles，年龄是4岁。</p>
<p>换一种说法，一个类就像是一张空白的表格或者问卷表。一个实例就是一张已经填写了信息的表格。就像许多人都可以根据自己的信息来填写表格，根据同一个类，也可以创建许多实例。</p>
<h3 id="如何定义一个类"><a href="#如何定义一个类" class="headerlink" title="如何定义一个类"></a>如何定义一个类</h3><p>首先定义一个类，需要以关键字<code>class</code>开头，然后后面是类的名称和冒号。换行后，下面缩进的内容都属于类的正文。</p>
<p>下面以<code>Dog</code>类为例：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><code>Dog</code>类的正文只有一个声明：关键字<code>pass</code>。 <code>pass</code>不执行任何操作，只是一个占位符。在没有为类写任何代码的情况下，使用<code>pass</code>可以避免程序在运行时出错。</p>
<blockquote>
<p>注意：类的名称通常是首字母大写。例如，定义某一种狗的类，如 Jack Russell Terrier，那么类的名称就可以写为<code>JackRussellTerrier</code>。</p>
</blockquote>
<p>目前，<code>Dog</code>类并没有任何属性，我们可以为它定义一些属性，例如名字、年龄、衣服颜色和品种。为了简单起见，我们只使用名字和年龄。</p>
<p>类的属性通常都是通过方法<code>.__init__()</code>来定义。每次创建一个<code>Dog</code>对象的时候，<code>.__init__()</code>就会通过为对象的属性赋值，来设置对象的初始状态。因此，<code>.__init__()</code>为类的每一个实例完成了初始化。</p>
<p>你可以为<code>.__init__()</code>设置任意数量的参数，但是第一个参数都是<code>self</code>。当一个类的实例被创建的时候，改实例自动被传递给<code>.__init__()</code>中的<code>self</code>参数，这样才能为对象定义新的属性。</p>
<p>让我们更改一下<code>Dog</code>类的<code>.__init__()</code>方法，创建<code>.name</code>和<code>.age</code>属性(attributes)。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>注意到<code>.__init__()</code>方法缩进了4个空格，而方法的正文缩进了8个空格。空格缩进十分重要，通过空格缩进，Python才能知道<code>.__init__()</code>方法属于<code>Dog</code>类。</p>
<p>在<code>.__init__()</code>的正文中，有2个声明使用了<code>self</code>变量：</p>
<ol>
<li><code>self.name = name</code>创建了一个名为<code>name</code>的属性，并用参数<code>name</code>为它赋值。</li>
<li><code>self.age = age</code>创建了一个名为<code>age</code>的属性，并用参数<code>age</code>为它赋值。</li>
</ol>
<p>在<code>.__init__()</code>中创建的属性称为<strong>实例属性</strong>（<strong>Instance attributes</strong>）。实例属性的值只属于类的某一个实例。所有<code>Dog</code>对象都有名字和年龄，但是每一个实例的名字和年龄值是不相同的。</p>
<p>另一方面，<strong>类的属性</strong>（<strong>class attributes</strong>）在所有的类的实例中，都拥有相同的属性值。你可以在<code>.__init__()</code>以外的位置定义一个变量并为其赋值，该变量就是类的属性。</p>
<p>例如，下面的<code>Dog</code>类中有一个类的属性<code>species</code>，值为”Canis familiaris”：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">:</span>
    <span class="token comment"># Class attribute</span>
    species <span class="token operator">=</span> <span class="token string">"Canis familiaris"</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>类的属性直接定义在类的名称下方第一行，并缩进4格。它们必须设置一个初始值。当创建类的实例的时候，类的属性被自动创建，并分配初始值。</p>
<p>当需要为每一个类的实例赋予相同属性值的时候，可以使用<strong>类的属性</strong>，当需要为每一个类的实例赋予不同属性值的时候，可以使用<strong>实例属性</strong>。</p>
<h2 id="实例化一个对象"><a href="#实例化一个对象" class="headerlink" title="实例化一个对象"></a>实例化一个对象</h2><p>打开IDLE的交互窗口，输入以下内容：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>这样就创建了一个<code>Dog</code>类，但是这个类既没有属性也没有方法。</p>
<p>从一个类创建一个新的对象，成为<strong>实例化</strong>(<strong>instantiating</strong>)一个对象。通过输入类的名称并加上双括号，你可以实例化一个新的<code>Dog</code>对象：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> Dog<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span>__main__<span class="token punctuation">.</span>Dog <span class="token builtin">object</span> at <span class="token number">0x106702d30</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>现在，你在<code>0x106702d30</code>有一个新的<code>Dog</code>对象。<code>0x106702d30</code>代表的是内存地址。在不同的电脑上，该内存地址的值是不同的。</p>
<p>现在，实例化第二个对象：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> Dog<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span>__main__<span class="token punctuation">.</span>Dog <span class="token builtin">object</span> at <span class="token number">0x0004ccc90</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>这个新的<code>Dog</code>实例存储在完全不同的内存地址。因为这是一个全新的实例，与之前创建的第一个实例完全不同。</p>
<p>我们可以通过以下方式来判断两个实例是否相同：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">==</span> b
<span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>通过以上代码，我们可以看到，虽然a和b都是通过<code>Dog</code>类创建的实例，但是他们代表了完全不同的对象。</p>
<h3 id="类和实例属性"><a href="#类和实例属性" class="headerlink" title="类和实例属性"></a>类和实例属性</h3><p>现在，创建一个<code>Dog</code>类，该类包含一个类的属性<code>.species</code>以及两个实例属性<code>.name</code>和<code>.age</code>。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     species <span class="token operator">=</span> <span class="token string">"Canis familiaris"</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         self<span class="token punctuation">.</span>age <span class="token operator">=</span> age<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>为了实例化这个类，你需要为name和age提供参数值。否则，Python会抛出一个<code>TypeError</code>异常：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> Dog<span class="token punctuation">(</span><span class="token punctuation">)</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  File <span class="token string">"&lt;pyshell#6>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>
    Dog<span class="token punctuation">(</span><span class="token punctuation">)</span>
TypeError<span class="token punctuation">:</span> __init__<span class="token punctuation">(</span><span class="token punctuation">)</span> missing <span class="token number">2</span> required positional arguments<span class="token punctuation">:</span> <span class="token string">'name'</span> <span class="token keyword">and</span> <span class="token string">'age'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>通过在类名后面的括号中填入值，可以将参数传递给name和age。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> buddy <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">"Buddy"</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> miles <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">"Miles"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>以上创建了两个<code>Dog</code>实例，一个是名叫Buddy的9岁小狗，另一个是名叫Miles的4岁小狗。</p>
<p><code>Dog</code>类的<code>.__init__()</code>方法有三个参数，为什么在上面的例子中只使用了2个参数呢？</p>
<p>当你实例化一个<code>Dog</code>对象的时候，Python会创建一个新的实例，并将它传递给<code>.__init__()</code>的第一个参数。这样就移除了<code>self</code>参数，所以你只需要担心<code>name</code>和<code>age</code>参数。</p>
<p>当你创建了<code>Dog</code>实例后，你就可以使用<strong>dot notation</strong>访问实例的属性了。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> buddy<span class="token punctuation">.</span>name
<span class="token string">'Buddy'</span>
<span class="token operator">>></span><span class="token operator">></span> buddy<span class="token punctuation">.</span>age
<span class="token number">9</span>

<span class="token operator">>></span><span class="token operator">></span> miles<span class="token punctuation">.</span>name
<span class="token string">'Miles'</span>
<span class="token operator">>></span><span class="token operator">></span> miles<span class="token punctuation">.</span>age
<span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>你还可以用相同的访问访问类的属性：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> buddy<span class="token punctuation">.</span>species
<span class="token string">'Canis familiaris'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>使用类来组织数据的好处之一，就是可以确保实例拥有预期的属性。所有的<code>Dog</code>实例都有<code>.species</code>, <code>.name</code>和<code>.age</code>属性，所有你确定当访问这些属性的时候，总是能获取到相应的值。</p>
<p>虽然类能确保这些属性总是存在，但是相应的值却可以动态改变：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> buddy<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">10</span>
<span class="token operator">>></span><span class="token operator">></span> buddy<span class="token punctuation">.</span>age
<span class="token number">10</span>

<span class="token operator">>></span><span class="token operator">></span> miles<span class="token punctuation">.</span>species <span class="token operator">=</span> <span class="token string">"Felis silvestris"</span>
<span class="token operator">>></span><span class="token operator">></span> miles<span class="token punctuation">.</span>species
<span class="token string">'Felis silvestris'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在上面的例子中，你将<code>buddy</code>对象的属性<code>.age</code>更改为10，然后你将<code>miles</code>对象的属性<code>.species</code>更改为猫的品种”Felis silvestris”。虽然这样使得Miles看起来像是一只奇怪的狗，但是这对Python而言是有效的。</p>
<p>这里的关键点是，默认情况下，自定义对象是可变的(mutable)的。如果一个对象可以被动态更改，那么它就是可变的(mutable)。例如，列表和字典都是可变的，但是字符串和元组是不可变的(immutable)。</p>
<h3 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h3><p><strong>实例方法</strong>(<strong>Instance methods</strong>)是在类中定义的一种函数，这种函数只能被类的实例调用。跟<code>.__init__()</code>相同，实例方法的第一个参数都是<code>self</code>。</p>
<p>在IDLE打开一个新的文本编辑器，然后输入以下<code>Dog</code>类：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">:</span>
    species <span class="token operator">=</span> <span class="token string">"Canis familiaris"</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age

    <span class="token comment"># Instance method</span>
    <span class="token keyword">def</span> <span class="token function">description</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span><span class="token string"> is </span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>age<span class="token punctuation">&#125;</span></span><span class="token string"> years old"</span></span>

    <span class="token comment"># Another instance method</span>
    <span class="token keyword">def</span> <span class="token function">speak</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> sound<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span><span class="token string"> says </span><span class="token interpolation"><span class="token punctuation">&#123;</span>sound<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>该<code>Dog</code>类有两个实例方法：</p>
<ol>
<li>**<code>.description()</code>**返回一个字符串，用于显示狗的名字和年龄。</li>
<li>**<code>.speak()</code>**有一个<code>sound</code>参数，返回一个字符串，用于显示狗的名字和吼叫声。</li>
</ol>
<p>将以上代码保存到文件<code>dog.py</code>，然后按F5运行程序。</p>
<p>然后打开交互式窗口，输入以下实例方法：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> miles <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">"Miles"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>

<span class="token operator">>></span><span class="token operator">></span> miles<span class="token punctuation">.</span>description<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token string">'Miles is 4 years old'</span>

<span class="token operator">>></span><span class="token operator">></span> miles<span class="token punctuation">.</span>speak<span class="token punctuation">(</span><span class="token string">"Woof Woof"</span><span class="token punctuation">)</span>
<span class="token string">'Miles says Woof Woof'</span>

<span class="token operator">>></span><span class="token operator">></span> miles<span class="token punctuation">.</span>speak<span class="token punctuation">(</span><span class="token string">"Bow Wow"</span><span class="token punctuation">)</span>
<span class="token string">'Miles says Bow Wow'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在以上<code>Dog</code>类中，<code>.description()</code>返回了关于实例miles的信息。当你写类的时候，最好能有一个方法可以用来返回关于类的实例的说明信息。虽然<code>.description()</code>返回了实例的描述信息，但着并不是最佳的Python方式。</p>
<p>当你创建一个列表对象的时候，你可以用<code>print()</code>来显示以下内容：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Fletcher"</span><span class="token punctuation">,</span> <span class="token string">"David"</span><span class="token punctuation">,</span> <span class="token string">"Dan"</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token string">'Fletcher'</span><span class="token punctuation">,</span> <span class="token string">'David'</span><span class="token punctuation">,</span> <span class="token string">'Dan'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>如果我们用<code>print()</code>来打印miles对象，会发生什么呢：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>miles<span class="token punctuation">)</span>
<span class="token operator">&lt;</span>__main__<span class="token punctuation">.</span>Dog <span class="token builtin">object</span> at <span class="token number">0x00aeff70</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>当你<code>print(miles)</code>的时候，你看到的是一串很奇怪的字符串，miles是一个<code>Dog</code>的对象，内存地址为0x00aeff70。这些信息并不是很有用。你可以通过定义一个特殊的实例方法<code>.__str__()</code>来打印出更有用的信息。</p>
<p>下面，将<code>.description()</code>方法的名字更改为<code>.__str__()</code>:</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">:</span>
    <span class="token comment"># Leave other parts of Dog class as-is</span>

    <span class="token comment"># Replace .description() with __str__()</span>
    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span><span class="token string"> is </span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>age<span class="token punctuation">&#125;</span></span><span class="token string"> years old"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>保存文件然后按F5。现在，当你<code>print(miles)</code>的时候，你会得到更友好的输出内容：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> miles <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">"Miles"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>miles<span class="token punctuation">)</span>
<span class="token string">'Miles is 4 years old'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>像<code>.__init__()</code>和<code>.__str__()</code>这样的方法被称为<strong>dunder methods</strong>，因为他们的名字都是以双下划线开始，并以双下划线结尾。在Python中，有许多<strong>dunder methods</strong>可以用来定制类。虽然对于初学者来说，这些内容有点深奥，但是在Python中，<strong>dunder methods</strong>对于掌握面向对象的编程很重要。</p>
<h2 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h2><p>类的继承是指一个类可以继承另一个类的所有特性和方法。新创建的类成为子类，被继承的类成为父类。</p>
<p>子类可以重写或者扩展父类的特性和方法。也就是说，子类既可以继承父类的所有特性和方法，也可以定义自己独有的特性性和方法。</p>
<p>虽然这个比喻不是十分恰当，类的继承有点类似于人类的遗传。</p>
<p>你可能继承了你母亲头发的颜色，这是你出生时的特性。但是，你决定将头发染成紫色，由于你母亲的头发不是紫色，所有可以说你重新定义(<strong>overridden</strong> )了头发的特性。</p>
<h3 id="遛狗公园的例子"><a href="#遛狗公园的例子" class="headerlink" title="遛狗公园的例子"></a>遛狗公园的例子</h3><p>假设你正在一个公园中遛狗。在这个公园里，有许多不同品种的狗，正在从事于各种不同的行为。</p>
<p>假设你想用Python类来为遛狗的公园建立一个模型。之前的<code>Dog</code>类可以通过狗的姓名和年龄来区分不同的狗，但是无法通过狗的品种来区分。</p>
<p>你可以在<code>Dog</code>类中添加<code>.breed</code>的特性：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">:</span>
    species <span class="token operator">=</span> <span class="token string">"Canis familiaris"</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> breed<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age
        self<span class="token punctuation">.</span>breed <span class="token operator">=</span> breed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在以上类中，之所以省略了方法的定义，是因为与本章需要讨论的内容无关。</p>
<p>通过点击F5保存并运行文件，你可以在交互式窗口中，创建各种不同狗的实例：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> miles <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">"Miles"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"Jack Russell Terrier"</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> buddy <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">"Buddy"</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token string">"Dachshund"</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> jack <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"Bulldog"</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> jim <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">"Jim"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"Bulldog"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>不同品种的狗通常有不同的行为。例如，牛头犬的叫声比较低，声音类似于<code>woof</code>，但是腊肠犬的叫声比较高，声音类似于<code>yap</code>。</p>
<p>使用<code>Dog</code>类的时候，你必须为<code>.speak()</code>方法提供一个声音的参数<code>sound</code>，每次调用<code>Dog</code>实例的时候如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> buddy<span class="token punctuation">.</span>speak<span class="token punctuation">(</span><span class="token string">"Yap"</span><span class="token punctuation">)</span>
<span class="token string">'Buddy says Yap'</span>

<span class="token operator">>></span><span class="token operator">></span> jim<span class="token punctuation">.</span>speak<span class="token punctuation">(</span><span class="token string">"Woof"</span><span class="token punctuation">)</span>
<span class="token string">'Jim says Woof'</span>

<span class="token operator">>></span><span class="token operator">></span> jack<span class="token punctuation">.</span>speak<span class="token punctuation">(</span><span class="token string">"Woof"</span><span class="token punctuation">)</span>
<span class="token string">'Jack says Woof'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>每次调用<code>.speak()</code>方法的时候，都要传递一个参数，这样既显得重复，又不太方便。此外，每次传递参数的时候，还需要根据狗的品种<code>.breed</code>来决定对应的声音参数。</p>
<p>你可以通过为每一种狗创建一个子类的方法，来简化以上问题。这使得你可以扩展子类从父类继承的方法，例如为<code>.speak()</code>指定默认的参数。</p>
<h3 id="父类和子类"><a href="#父类和子类" class="headerlink" title="父类和子类"></a>父类和子类</h3><p>接下来我们为三种不同品种的狗各自创建一个子类：Jack Russell Terrier, Dachshund, and Bulldog:</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">:</span>
    species <span class="token operator">=</span> <span class="token string">"Canis familiaris"</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age

    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span><span class="token string"> is </span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>age<span class="token punctuation">&#125;</span></span><span class="token string"> years old"</span></span>

    <span class="token keyword">def</span> <span class="token function">speak</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> sound<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span><span class="token string"> says </span><span class="token interpolation"><span class="token punctuation">&#123;</span>sound<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>创建子类的时候，你需要为子类定义一个自己的名称，然后在括号中填写父类的名称：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">JackRussellTerrier</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>

<span class="token keyword">class</span> <span class="token class-name">Dachshund</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>

<span class="token keyword">class</span> <span class="token class-name">Bulldog</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>现在你可以在交互式窗口中通过以下方式创建各种实例：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> miles <span class="token operator">=</span> JackRussellTerrier<span class="token punctuation">(</span><span class="token string">"Miles"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> buddy <span class="token operator">=</span> Dachshund<span class="token punctuation">(</span><span class="token string">"Buddy"</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> jack <span class="token operator">=</span> Bulldog<span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> jim <span class="token operator">=</span> Bulldog<span class="token punctuation">(</span><span class="token string">"Jim"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>子类的实例继承了父类所有的特性和方法：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> miles<span class="token punctuation">.</span>species
<span class="token string">'Canis familiaris'</span>

<span class="token operator">>></span><span class="token operator">></span> buddy<span class="token punctuation">.</span>name
<span class="token string">'Buddy'</span>

<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>jack<span class="token punctuation">)</span>
Jack <span class="token keyword">is</span> <span class="token number">3</span> years old

<span class="token operator">>></span><span class="token operator">></span> jim<span class="token punctuation">.</span>speak<span class="token punctuation">(</span><span class="token string">"Woof"</span><span class="token punctuation">)</span>
<span class="token string">'Jim says Woof'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果要判断某一个对象属于哪一个类，你可以使用内建函数<code>type()</code>:</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">type</span><span class="token punctuation">(</span>miles<span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'__main__.JackRussellTerrier'</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>如果你还想判断<code>miles</code>是否是<code>Dog</code>类的实例，可以i使用内建函数<code>isinstance()</code>:</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>miles<span class="token punctuation">,</span> Dog<span class="token punctuation">)</span>
<span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>注意到<code>isinstance</code>需要两个参数，一个对象和一个类。以上例子中，<code>isinstance()</code>检查 <code>miles</code>是否是<code>Dog</code>类的使用，返回值为<code>True</code>。</p>
<p>对象<code>miles</code>，<code>buddy</code>，<code>jack</code>和<code>jim</code>都是<code>Dog</code>类的实例，但是<code>miles</code>不是<code>Bulldog</code>的实例，<code>jack</code>不是<code>Dachshund</code>的实例。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>miles<span class="token punctuation">,</span> Bulldog<span class="token punctuation">)</span>
<span class="token boolean">False</span>

<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>jack<span class="token punctuation">,</span> Dachshund<span class="token punctuation">)</span>
<span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>概而言之，所有子类的对象，同时也是父类的对象，但是它们并不一定是其它子类的对象。</p>
<h3 id="扩展父类的功能"><a href="#扩展父类的功能" class="headerlink" title="扩展父类的功能"></a>扩展父类的功能</h3><p>由于不同品种的狗有不同的叫声，如果你想要为每一种狗各自的<code>.speak()</code>方法指定一个默认的<code>sound</code>参数值，你可以在各自的子类中重新定义<code>.speak()</code>方法。</p>
<p>为了覆盖父类中的某一个方法，你需要在子类中定义相同名字的方法。下面以<code>JackRussellTerrier</code>子类为例：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">JackRussellTerrier</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">speak</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> sound<span class="token operator">=</span><span class="token string">"Arf"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span><span class="token string"> says </span><span class="token interpolation"><span class="token punctuation">&#123;</span>sound<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>通过在子类<code>JackRussellTerrier</code>中重新定义方法<code>.speak()</code>后，现在JackRussellTerrier品种的狗有了一种默认的叫声“Arf”。</p>
<p>现在，如果你可以通过<code>JackRussellTerrier</code>的实例调用<code>.speak()</code>方法，并且不传递任何参数：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> miles <span class="token operator">=</span> JackRussellTerrier<span class="token punctuation">(</span><span class="token string">"Miles"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> miles<span class="token punctuation">.</span>speak<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token string">'Miles says Arf'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>有时候，有些狗在愤怒的时候会发出不同的叫声，这是你仍然可以调用<code>.speak()</code>方法，并传递相应的参数值：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> miles<span class="token punctuation">.</span>speak<span class="token punctuation">(</span><span class="token string">"Grrr"</span><span class="token punctuation">)</span>
<span class="token string">'Miles says Grrr'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>请记住，如果对父类做了更改，会自动传递给子类。但是，如果子类已经重新定义了父类的特性或者方法，那么父类的更改并不会传递给子类。</p>
<p>例如，在<code>Dog</code>类中，更改<code>.speak()</code>中的返回字符串内容，将<code>says</code>更改为<code>barks</code>:</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">:</span>
    <span class="token comment"># Leave other attributes and methods as they are</span>

    <span class="token comment"># Change the string returned by .speak()</span>
    <span class="token keyword">def</span> <span class="token function">speak</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> sound<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span></span><span class="token string"> barks: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>sound<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>现在，你创建一个新的<code>Bulldog</code>实例，名称为<code>jim</code>，<code>jim.speak()</code>会返回新的字符串：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> jim <span class="token operator">=</span> Bulldog<span class="token punctuation">(</span><span class="token string">"Jim"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> jim<span class="token punctuation">.</span>speak<span class="token punctuation">(</span><span class="token string">"Woof"</span><span class="token punctuation">)</span>
<span class="token string">'Jim barks: Woof'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>但是，如果调用<code>JackRussellTerrier</code>实例的<code>.speak()</code>方法，会发现并不会返回新的字符串：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> miles <span class="token operator">=</span> JackRussellTerrier<span class="token punctuation">(</span><span class="token string">"Miles"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> miles<span class="token punctuation">.</span>speak<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token string">'Miles says Arf'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>有时候，可能需要完全覆盖父类的方法，但是在这个例子中，我们想让子类<code>JackRussellTerrier</code>继续使用父类中<code>.speak()</code>方法返回的字符串格式。</p>
<p>为了实现这个目的，你仍然需要在子类<code>JackRussellTerrier</code>中定义<code>.speak()</code>方法。但是，你在子类的<code>.speak()</code>方法中需要调用父类的<code>.speak()</code>方法，并且将相应的参数传递给父类的<code>.speak()</code>方法。</p>
<p>在子类中的某一个方法中，可以使用<code>super()</code>来访问父类：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">JackRussellTerrier</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">speak</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> sound<span class="token operator">=</span><span class="token string">"Arf"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>speak<span class="token punctuation">(</span>sound<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>当你在子类<code>JackRussellTerrier</code>中调用<code>super().speak(sound)</code>的时候，Python会在父类<code>Dog</code>中查找<code>.speak()</code>方法，然后调用并传递参数<code>sound</code>。</p>
<p>下面，我们可以测试一下新定义的子类<code>JackRussellTerrier</code>：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> miles <span class="token operator">=</span> JackRussellTerrier<span class="token punctuation">(</span><span class="token string">"Miles"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> miles<span class="token punctuation">.</span>speak<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token string">'Miles barks: Arf'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>现在，当你调用<code>miles.speak()</code>的时候，你可以看到返回的结果是<code>Dog</code>类中定义的格式。</p>
<blockquote>
<p>注意：在上面的例子中，类的继承结构非常简单。<code>JackRussellTerrier</code>子类有一个父类<code>Dog</code>。在实际的应用场景中，类的结构十分复杂。</p>
<p><code>super()</code>不仅只是在父类中查找某个方法或者特性，它还可以在整个类的结构中查找匹配的类和特性。如果你使用<code>super()</code>的时候不太小心，容易导致意外的结果。</p>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过本指南，你学到了Python中面向对象编程的知识。大多数编程语言，如Java, C#和C++等都是基于面向对象编程的原理，所以本指南的知识同样适用于以上语言。</p>
<p>在本指南中，你学到了以下内容：</p>
<ul>
<li>定义一个类</li>
<li>从一个类实例化一个对象</li>
<li>使用特性和方法来定义对象的属性和行为</li>
<li>通过继承，从父类创建一个子类</li>
<li>使用<code>super()</code>访问父类的某一个方法</li>
<li>使用<code>isinstance()</code>判断一个对象是否继承于另外一个类</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python-intermediate</tag>
      </tags>
  </entry>
  <entry>
    <title>尝试用二至丸治疗白发</title>
    <url>/2023/02/22/zhong-yi/chang-shi-yong-er-zhi-wan-zhi-liao-bai-fa/</url>
    <content><![CDATA[<p>最近几年，可能是因为工作压力太大的缘故，加上经常熬夜，不断透支自己的精力，头上的白发越来越多。总想着能通过什么方法减少白发的生成，但是又不知道从何入手。</p>
<img src="/2023/02/22/zhong-yi/chang-shi-yong-er-zhi-wan-zhi-liao-bai-fa/image202302221900211.png" class="" width="500">

<span id="more"></span>

<p>最近，在阅读罗大伦写的<a href="https://book.douban.com/subject/30257558/">《中医祖传的那点儿东西1》</a>时，正好看到书中提到了一个治疗白发的方子：<strong>二至丸</strong>。该方由<strong>女贞子</strong>和<strong>墨旱莲</strong>两种药材组成。据作者介绍，他年轻的时候由于学习压力比较大，导致白发很多。因此，他给自己开了二至丸的方子，服用一年后，白发少了很多。</p>
<blockquote><p>等到毕业了，终于有了时间，就在家里给自己开方子，用的是二至丸，女贞子30克、墨旱莲30克，每天熬水当茶喝（三碗水熬剩两碗），这个二至丸中的女贞子是冬至日采，墨旱莲是夏至日采，传统认为这个时候药物的药性是最好的，所以叫二至丸，有滋阴的作用。我则进一步分析这个药有交通阴阳的作用，很平和，只要是因虚损导致的白发都可以服用，不必计较阴虚阳虚。我大约服用了一年，结果头发变黑了很多，理发师再也不劝我了，而且还向我咨询怎么弄的，他也想试试。  </p>
<footer><strong>罗大伦</strong><cite>《中医祖传的那点儿东西1》</cite></footer></blockquote>

<p>​          </p>
<p><strong>墨旱莲</strong></p>
<p>又被称为旱莲草，味甘、酸，性寒，归肝、肾经。主要功效为滋阴益肾，凉血止血。脾胃虚寒，大便泄泻者不宜服用。</p>
<img src="/2023/02/22/zhong-yi/chang-shi-yong-er-zhi-wan-zhi-liao-bai-fa/8ED26B4B-76B8-446F-8CF4-D6DF1F55DF4F_1_201_a.jpeg" class="" width="500">

<p><strong>女贞子</strong></p>
<p>一种果实，味甘、苦，性凉，归肝、肾经。主要功效为补益肝肾，清热明目。脾胃虚寒及阳虚者忌服。</p>
<img src="/2023/02/22/zhong-yi/chang-shi-yong-er-zhi-wan-zhi-liao-bai-fa/91C9F6E9-784C-4640-86D5-491AA2F66858_1_201_a.jpeg" class="" width="500">

<p>于是，我决定买来试试，在网上搜索后，发现二至丸的中成药价格差别很大，几十元到上百元不等。价格贵的吃不起，便宜的又担心药效不行。最后，决定自己买药来熬汤喝。网上找了一家店，花了25元，购买了250克女贞子和250克的墨旱莲。估计这些药大约能喝10天，计划坚持喝一个月，看看效果如何。</p>
<p><strong>熬药方法</strong></p>
<p>三汤勺女贞子，手抓3-5小把墨旱莲，冷水浸泡30分钟后，放入锅中，倒入三碗冷水，然后开火烧至水沸腾后，开小火煎30分钟。最后熬出两碗汤药，上午和下午各喝一碗。</p>
<img src="/2023/02/22/zhong-yi/chang-shi-yong-er-zhi-wan-zhi-liao-bai-fa/E03DCBDD-6B51-46B6-B7DD-18C6C3FD86C1_1_201_a.jpeg" class="" width="500">]]></content>
      <categories>
        <category>中医</category>
      </categories>
      <tags>
        <tag>医案</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows和iOS（一）：文件共享</title>
    <url>/2021/09/24/shou-ji/windows-he-ios-wen-jian-gong-xiang/</url>
    <content><![CDATA[<p>以前一直在苹果的生态中使用各种苹果的服务，例如AirDrop, iCloud文件, iCloud照片等，但是，后来由于MacBook Air出现电池故障以后，就更换成了一台Windows PC。于是，使用过程中，出现了各种不方便，归根结底，就是数据无法在手机和PC之间方便地同步和共享。</p>
<p>起初，我曾经尝试下载并安装了Windows版本的iCloud。虽然软件的版本已经很久没有更新，但是我只需要使用文件和照片的同步功能，想着应该问题不大，但是在实际使用过程中，遇到的以下一系列问题让我果断卸载了该软件：</p>
<ul>
<li><p>程序在后台运行导致CPU占用率很高，风扇会持续转动并发出噪音</p>
</li>
<li><p>Windows上的照片删除后，被删除的照片仍然会保留在手机上</p>
</li>
<li><p>iPhone上的部分照片无法成功下载到Windows上</p>
</li>
<li><p>使用一段时间后，程序会挂起，导致无法同步</p>
<span id="more"></span></li>
</ul>
<p>经过一番比较和尝试，我决定使用微软的网盘工具<a href="https://www.microsoft.com/zh-cn/microsoft-365/onedrive/download">OneDrive</a>来解决文件和照片的同步问题。在使用一段时间以后，OneDrive完全能满足我所有的需求。手机和电脑上的文件和照片不仅能实现双向同步，并且，Windows自带的照片管理软件能很方便的查看和编辑所有的照片。</p>
<p>需要注意的是，有些应用，例如在微信的聊天窗口中，如果要发送文件给对方，只能通过iCloud选择需要发送的文件。为了能在iCloud的操作窗口中，访问OneDrive里面的文件，需要在<strong>文件</strong>应用中，<strong>打开OneDrive的选项</strong>。</p>
<img src="/2021/09/24/shou-ji/windows-he-ios-wen-jian-gong-xiang/icloud-onedrive.jpg" class="" width="600">

<p>除了iCloud以外，苹果还有一项非常好用的功能，即AirDrop。这项功能可以让Mac和iPhone只需要通过局域网就可以互传文件，不需要再依赖于互联网。在Windows系统上，我想到了用<strong>Windows的文件共享（CIFS&#x2F;SMB）</strong>功能来实现类似的效果。在Windows文件夹的属性中，有一个“共享”选项，打开共享功能后，就可以在iPhone上，通过<strong>文件</strong>应用，访问该共享目录。</p>
<img src="/2021/09/24/shou-ji/windows-he-ios-wen-jian-gong-xiang/fileshare01.jpg" class="" width="600">

<p>打开iPhone上的<strong>文件</strong>应用，打开<strong>连接服务器</strong>选项，输入Windows的主机名，例如<em>smb:&#x2F;&#x2F;nuc</em>，其中nuc就是Windows的主机名。</p>
<img src="/2021/09/24/shou-ji/windows-he-ios-wen-jian-gong-xiang/icloud-connect-server.jpg" class="" width="600">
<p>连接服务器成功以后，就可以在iPhone上访问Windows共享文件夹里面的数据了。通过这种方式，就可以在局域网中，让手机和电脑之间互传文件了。</p>
<img src="/2021/09/24/shou-ji/windows-he-ios-wen-jian-gong-xiang/icloud-server-share.jpg" class="" width="600">]]></content>
      <categories>
        <category>手机</category>
      </categories>
      <tags>
        <tag>ios</tag>
      </tags>
  </entry>
  <entry>
    <title>iRobot扫地机器人使用体验</title>
    <url>/2016/03/10/zhi-neng-jia-ju/irobot-sao-di-ji-qi-ren-shi-yong-ti-yan/</url>
    <content><![CDATA[<img src="/2016/03/10/zhi-neng-jia-ju/irobot-sao-di-ji-qi-ren-shi-yong-ti-yan/DDAD7481-A2AC-4BAB-8F1B-FA12B3E4D0B0_1_201_a.jpeg" class="" width="800" title="iRobot Roomba 650">

<p>科技的发展为人们的生活带来了极大的便利性，但是，与此同时，科技也在一定程度上助长了人类的惰性。</p>
<p>现在，购物不用出门，吃饭可以网上订餐，学习可以参加在线视频，甚至打扫家务，也有了扫地机器人。</p>
<span id="more"></span>

<p>最近，由于工作的原因，当然“懒惰”也是主要因素之一，家里的卫生质量急剧下降，考虑再三，于是决定购买一台扫地机器人来帮助打扫卫生。趁着周末，在网上泡了二天，查询了许多网站和论坛，最终决定选择iRobot公司的产品。</p>
<p>初次见到“爱萝卜” — iRobot扫地机器人，其产品的外观设计和科技质感给我留下了深刻的印象，经过一周的使用，我感受到了爱萝卜人性化的设计，良好的用户体验，以及优秀清扫能力。因此，我决定写一下这次产品的使用体验。下面从几个方面来描述爱萝卜的特点。</p>
<h2 id="清扫能力"><a href="#清扫能力" class="headerlink" title="清扫能力"></a>清扫能力</h2><p>我们选购一款扫地机器人，首先注重的是它是否可以帮我们把房子打扫干净。经过一周的使用，爱萝卜完全可以胜任扫地任务，家中将来基本上已经可以不需要使用扫帚，并且，以前像沙发、桌椅和床底下无法清扫的地方，爱萝卜也可以轻松进出打扫，带走满满的灰尘，留下一片洁净。</p>
<p>当然，任何产品都不是百分之百完美的，我发现有些小颗粒灰尘还是会被漏掉，这可能跟产品本身的算法和除尘技术有关。但是，其清扫后的干净度，已经可以让我们放心让它打扫。</p>
<h2 id="续航时间"><a href="#续航时间" class="headerlink" title="续航时间"></a>续航时间</h2><p>当初之所以选择扫地机，而不是吸尘器的原因之一，就是考虑到设备的续航能力。中低端的吸尘器充电时间长，而续航时间只有短短几十分钟，并且还要利用人工操作。而爱萝卜只需要充电3小时，就可以拥有120分钟的续航时间，对于三室一厅的房子，爱萝卜只用了75分钟就打扫完成，在此过程中，我并没有利用虚拟墙做分区处理，因此，打扫效率还算令人满意。</p>
<h2 id="智能程度"><a href="#智能程度" class="headerlink" title="智能程度"></a>智能程度</h2><p>虽然说是一款扫地机器人，但是其智能程度只能算一般，虽然有自我学习能力，但是其重复打扫和漏扫的情况还是很难避免，受其算法的限制，打扫效率相对其它品牌产品，如Neato来说，同样的打扫面积，爱萝卜花费的时间要长很多，但好处是其产品故障率相对较低，并且打扫起来比较干净。</p>
<p>在高端型号的产品中，通过利用灯塔以及云计算技术，其智能程度应该已经有所提高。</p>
<h2 id="噪音"><a href="#噪音" class="headerlink" title="噪音"></a>噪音</h2><p>在购买之前，我对于扫地机产生的噪音还是非常顾忌的，一方面担心自己无法忍受，同时也担心影响邻居。但是，看到网上说只有50分贝的声音，并且比吸尘器的声音还要低。因此，买回使用时，我特意感受了一下，总体来说，还是在可接受范围内，如果站在其旁边看着打扫，噪音并不会让你感到十分烦躁难忍。当然，如果在客厅打扫，看电视肯定会受影响，但是在卧室把门一关，也就几乎不太会留意到外面的扫地机。平时，我会预约每天在固定的时间段打扫，有时候把门一关，出去溜达一圈回来，房子已经打扫完成，爱萝卜也已安静地坐在充电座上充电。</p>
<p>最后，总体来说，我觉得这次购买的产品还是非常值得，对我们这种上班族来说，平时忙着工作，回家已经懒得再打扫卫生，可以说，扫地机为我们充满压力的生活带来了一些轻松和乐趣（看着它勤劳地打扫，感觉非常有趣。），也为枯燥的打扫工作注入了一丝活力。</p>
<p>由于使用时间较短，因此，可能有些缺点和不足还有待发现，至少到目前为止，我对这款产品还算比较满意，其操作非常简便，即使是老年人，上手操作也非常容易，并且由于采用模块化的设计，因此，拆卸清理，替换部件都非常方便。唯一的缺点可能就是价钱相对比较贵。</p>
]]></content>
      <categories>
        <category>智能家居</category>
      </categories>
      <tags>
        <tag>扫地机器人</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows Terminal中如何在Vim编辑器中复制文本内容</title>
    <url>/2021/09/25/za-qi-za-ba/windows-terminal-ru-he-cong-vim-zhong-fu-zhi-nei-rong/</url>
    <content><![CDATA[<p>在<strong>Windows Terminal</strong>中，通过SSH远程访问Linux系统，用Vim编辑器编辑文本内容时，如果需要将文本内容复制到其它应用，例如，记事本，则需要按照以下方式复制内容：</p>
<ol>
<li>按住<strong>SHIFT</strong>键</li>
<li>按住鼠标<strong>左键</strong>，选择需要复制的内容</li>
<li>点击鼠标<strong>右键</strong>，完成复制</li>
<li>将复制的内容粘贴到其它应用中</li>
</ol>
<img src="/2021/09/25/za-qi-za-ba/windows-terminal-ru-he-cong-vim-zhong-fu-zhi-nei-rong/Pastedimage20230227152428.png" class="" width="600">

<p><strong>注意：如果是其它Linux命令执行后的输出结果，例如cat命令，则不需要按住SHIFT键，只需要用鼠标左键选择需要复制的内容，然后点击右键完成复制。</strong></p>
]]></content>
      <categories>
        <category>杂七杂八</category>
      </categories>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈广域网加速技术</title>
    <url>/2016/03/19/za-qi-za-ba/qian-tan-guang-yu-wang-jia-su-ji-zhu/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>对于企业而言，广域网的重要性是不言而喻的，通俗来讲，广域网是企业自己投资组建的一张专用网络，主要采用ATM, Fram Relay, MPLS等技术，与互联网不同的是，企业广域网一般只用于承载该企业自己的内网数据，并完全与互联网隔离，其特点在于”专网专用“，而互联网是共享型网络，由多家运营商组建和维护，全球的用户都在利用互联网分享和交流信息。</p>
<p>因此，企业之所以组建广域网，主要根据以下几个方面考虑：</p>
<p>安全    - 广域网可以保证数据的机密性，并且不会受到黑客攻击</p>
<p>稳定    - 广域网的传输非常稳定，可以保证数据、语音和视频的传输速度和质量</p>
<p>管理    - 广域网只承载企业内部应用的数据，便于管理和统计，且易于排查故障</p>
<span id="more"></span>

<p>虽然广域网为企业解决了很多的重要问题，例如安全性、稳定性、可管理性等，但还是存在一些其它不足之处：</p>
<p><strong>带宽低</strong>    - 与宽带动辄百兆相比，广域网接入通常只有2M, 4M, 10M等带宽，大数据传输时，速度比较慢，带宽低的最主要的原因，还是因为专线的费用太高。</p>
<p><strong>延时高</strong>    - 很多跨国企业通常会在全球建设许多分支机构或者办事处，由于物理距离的关系，数据传输的时延通常很高，因此，这会影响一些应用的用户体验，例如语音、视频、Web等等。</p>
<p><strong>通讯协议效率低下</strong>    - “协议”指的是网络传输协议，例如，TCP&#x2F;UDP, HTTP, CIFS, FTP等等，由于网络传输协议设计之初，并没有太多考虑到带宽、延时、丢包等情况，因此，导致传输效率低下。</p>
<h2 id="广域网加速技术"><a href="#广域网加速技术" class="headerlink" title="广域网加速技术"></a>广域网加速技术</h2><p>广域网加速是一个相对比较小众的市场，该领域的厂商包括Riverbed, SilverPeak, Cisco, BlueCoat等等，到目前为止，广域网加速技术已经趋于成熟，且受到企业的广泛认可和接受。对企业而言，广域网加速技术可以为企业带来以下两大益处：</p>
<ul>
<li><p>加速应用，提高效率</p>
</li>
<li><p>节省带宽，降低成本</p>
</li>
</ul>
<p>从技术角度，广域网加速技术主要包含以下技术特性：</p>
<h3 id="数据消重"><a href="#数据消重" class="headerlink" title="数据消重"></a>数据消重</h3><p>数据消重是广域网加速的基础核心功能，其功效主要是减少重复数据传输，即相同的数据可以用指针或者索引值代替，由于指针数据远远小于原始数据，因此可以有效节省带宽。</p>
<p>需要注意的是，数据消重和缓存（代理服务）的概念稍微有些差异，数据消重包含缓存的功能，但数据是以二进制的形式存在本地硬盘，并且相同的数据需要通过指针的形式传送给对端设备。</p>
<p>而代理服务的缓存技术，通常是将图片、文件、音频等对象直接缓存在本地磁盘，并且重复数据不会以指针形式发送。</p>
<p>数据消重技术作为广域网加速的核心功能，不仅可以节省专线带宽，还可以提高数据传输速度。</p>
<h3 id="传输协议优化"><a href="#传输协议优化" class="headerlink" title="传输协议优化"></a>传输协议优化</h3><p>传输协议，即TCP协议的传输效率本身比较低，每次建立连接，都需要进行三次握手，并且，需要通过确认和重传机制保证传输的可靠性。因此，当遇到网络丢包率比较高，或者延时比较大的时候，TCP的传输速率相对就很低。</p>
<p>广域网加速技术通过HS-TCP, Selective Acknowledgment等技术，可以解决在带宽大、延时高、丢包率高的情况下，TCP协议效率低的问题，提高数据的传输速度。</p>
<h3 id="应用协议优化"><a href="#应用协议优化" class="headerlink" title="应用协议优化"></a>应用协议优化</h3><p>对企业而言，比较常用的应用有HTTP，CIFS, FTP，邮件等，许多应用协议开发之初，都是基于局域网的环境设计，并没有考虑高延时，低带宽的广域网环境，因此，当这些应用在广域网上传输时，应用的效率非常低，用户体验很差。</p>
<p>广域网加速技术通过对特定应用协议的优化，大大提高了应用的传输速度，但是，应用协议本身也在不断演化和更新，因此，这对加速技术提出了比较高的要求，即加速技术需要不断适应和兼容各种应用协议及其更新的版本。</p>
<p>当然，广域网加速技术在不断地发展，除了以上几种加速手段以外，还有UDP优化，存储协议优化，视频优化等，随着产品的不断成熟，广域网加速产品已成为许多企业组建网络的必选解决方案，不仅为企业节省了大量的专线投入成本，并且提高了应用的传输速度，提高了员工的办公效率，具有极高的投资回报率。</p>
]]></content>
      <categories>
        <category>杂七杂八</category>
      </categories>
      <tags>
        <tag>广域网</tag>
      </tags>
  </entry>
</search>
